name: cicd

on: [push]

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup Go and protoc
        run: |
          python do.py setup_ext
      - name: Install dependencies
        run: |
          python do.py setup
          python do.py init
      - name: Generate Python and Go SDK
        run: |
          ".env/bin/python" do.py generate_sdk
      - name: Build distribution
        run: |
          python do.py dist
          python do.py generate_distribution_checksum
      - name: Commit go and python pkg
        id: get_sha
        run: |
          git config user.name "Github Actions Bot"
          git config user.email "actions@github.com"
          git pull
          git add --force gosnappi/\*
          git add --force snappi/\*
          if git status --porcelain | grep .
            then
              git commit -m "Update auto generated go snappi"
              git push
            else
              echo "No change in auto generated go snappi"
          fi
          echo "::set-output name=sha::$(git rev-parse HEAD)"
      - name: storing get_sha in file
        run: |
          echo "${{ steps.get_sha.outputs.sha }}" > store_sha_file
      - name: Archive generated artifacts
        uses: actions/upload-artifact@v2
        with:
          name: generated-artifacts
          path: |
            dist
            snappi
            gosnappi
            models-release
            *.proto
            store_sha_file

  python_tests:
    needs: build
    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 6
      matrix:
        python-version: [2.7.18, 3.6, 3.7, 3.8, 3.9, "3.10"]
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/download-artifact@v2
        with:
          name: generated-artifacts
      - name: Install dependencies
        run: |
          python do.py setup
          python do.py install
      - name: Display structure of downloaded files
        run: ls -R
      - name: Run python tests
        run: |
          sudo python do.py testpy

  go_tests:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/download-artifact@v2
        with:
          name: generated-artifacts
      - name: Display structure of downloaded files
        run: ls -R
      - name: Run go tests
        run: |
          python do.py testgo

  publish_python_package:
    if: github.ref == 'refs/heads/main'
    needs: [go_tests, python_tests]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - uses: actions/download-artifact@v2
        with:
          name: generated-artifacts
      - name: Display structure of downloaded files
        run: ls -R
      - name: Get package version
        id: get_version
        run: |
          echo "::set-output name=version::v$(python do.py version)"
      - name: Check tag for current version
        uses: mukunku/tag-exists-action@v1.0.0
        id: check_tag
        with:
          tag: ${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish package
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          PYPI_USERNAME=${{ secrets.PYPI_USERNAME }} PYPI_PASSWORD=${{ secrets.PYPI_PASSWORD }} python do.py release
      - name: Create release and publish artifacts
        if: steps.check_tag.outputs.exists == 'false'
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*,models-release,*.proto"
          tag: ${{ steps.get_version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: get_sha value from file
        id: get_sha
        run: |
          echo "::set-output name=value::$(cat store_sha_file)"
      - name: Create tag for gosnappi
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/gosnappi/${{ steps.get_version.outputs.version }}",
              sha: "${{ steps.get_sha.outputs.value }}"
            })
