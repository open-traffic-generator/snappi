// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package snappipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenapiClient is the client API for Openapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenapiClient interface {
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error)
	SetTransmitState(ctx context.Context, in *SetTransmitStateRequest, opts ...grpc.CallOption) (*SetTransmitStateResponse, error)
	SetLinkState(ctx context.Context, in *SetLinkStateRequest, opts ...grpc.CallOption) (*SetLinkStateResponse, error)
	SetCaptureState(ctx context.Context, in *SetCaptureStateRequest, opts ...grpc.CallOption) (*SetCaptureStateResponse, error)
	SetRouteState(ctx context.Context, in *SetRouteStateRequest, opts ...grpc.CallOption) (*SetRouteStateResponse, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	GetStateMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStateMetricsResponse, error)
	GetCapture(ctx context.Context, in *GetCaptureRequest, opts ...grpc.CallOption) (Openapi_GetCaptureClient, error)
}

type openapiClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenapiClient(cc grpc.ClientConnInterface) OpenapiClient {
	return &openapiClient{cc}
}

func (c *openapiClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, "/snappipb.Openapi/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, "/snappipb.Openapi/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/snappipb.Openapi/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) SetTransmitState(ctx context.Context, in *SetTransmitStateRequest, opts ...grpc.CallOption) (*SetTransmitStateResponse, error) {
	out := new(SetTransmitStateResponse)
	err := c.cc.Invoke(ctx, "/snappipb.Openapi/SetTransmitState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) SetLinkState(ctx context.Context, in *SetLinkStateRequest, opts ...grpc.CallOption) (*SetLinkStateResponse, error) {
	out := new(SetLinkStateResponse)
	err := c.cc.Invoke(ctx, "/snappipb.Openapi/SetLinkState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) SetCaptureState(ctx context.Context, in *SetCaptureStateRequest, opts ...grpc.CallOption) (*SetCaptureStateResponse, error) {
	out := new(SetCaptureStateResponse)
	err := c.cc.Invoke(ctx, "/snappipb.Openapi/SetCaptureState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) SetRouteState(ctx context.Context, in *SetRouteStateRequest, opts ...grpc.CallOption) (*SetRouteStateResponse, error) {
	out := new(SetRouteStateResponse)
	err := c.cc.Invoke(ctx, "/snappipb.Openapi/SetRouteState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/snappipb.Openapi/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetStateMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStateMetricsResponse, error) {
	out := new(GetStateMetricsResponse)
	err := c.cc.Invoke(ctx, "/snappipb.Openapi/GetStateMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openapiClient) GetCapture(ctx context.Context, in *GetCaptureRequest, opts ...grpc.CallOption) (Openapi_GetCaptureClient, error) {
	stream, err := c.cc.NewStream(ctx, &Openapi_ServiceDesc.Streams[0], "/snappipb.Openapi/GetCapture", opts...)
	if err != nil {
		return nil, err
	}
	x := &openapiGetCaptureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Openapi_GetCaptureClient interface {
	Recv() (*GetCaptureResponse, error)
	grpc.ClientStream
}

type openapiGetCaptureClient struct {
	grpc.ClientStream
}

func (x *openapiGetCaptureClient) Recv() (*GetCaptureResponse, error) {
	m := new(GetCaptureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpenapiServer is the server API for Openapi service.
// All implementations must embed UnimplementedOpenapiServer
// for forward compatibility
type OpenapiServer interface {
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	GetConfig(context.Context, *emptypb.Empty) (*GetConfigResponse, error)
	SetTransmitState(context.Context, *SetTransmitStateRequest) (*SetTransmitStateResponse, error)
	SetLinkState(context.Context, *SetLinkStateRequest) (*SetLinkStateResponse, error)
	SetCaptureState(context.Context, *SetCaptureStateRequest) (*SetCaptureStateResponse, error)
	SetRouteState(context.Context, *SetRouteStateRequest) (*SetRouteStateResponse, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	GetStateMetrics(context.Context, *emptypb.Empty) (*GetStateMetricsResponse, error)
	GetCapture(*GetCaptureRequest, Openapi_GetCaptureServer) error
	mustEmbedUnimplementedOpenapiServer()
}

// UnimplementedOpenapiServer must be embedded to have forward compatible implementations.
type UnimplementedOpenapiServer struct {
}

func (UnimplementedOpenapiServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedOpenapiServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedOpenapiServer) GetConfig(context.Context, *emptypb.Empty) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedOpenapiServer) SetTransmitState(context.Context, *SetTransmitStateRequest) (*SetTransmitStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTransmitState not implemented")
}
func (UnimplementedOpenapiServer) SetLinkState(context.Context, *SetLinkStateRequest) (*SetLinkStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLinkState not implemented")
}
func (UnimplementedOpenapiServer) SetCaptureState(context.Context, *SetCaptureStateRequest) (*SetCaptureStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCaptureState not implemented")
}
func (UnimplementedOpenapiServer) SetRouteState(context.Context, *SetRouteStateRequest) (*SetRouteStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRouteState not implemented")
}
func (UnimplementedOpenapiServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedOpenapiServer) GetStateMetrics(context.Context, *emptypb.Empty) (*GetStateMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateMetrics not implemented")
}
func (UnimplementedOpenapiServer) GetCapture(*GetCaptureRequest, Openapi_GetCaptureServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCapture not implemented")
}
func (UnimplementedOpenapiServer) mustEmbedUnimplementedOpenapiServer() {}

// UnsafeOpenapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenapiServer will
// result in compilation errors.
type UnsafeOpenapiServer interface {
	mustEmbedUnimplementedOpenapiServer()
}

func RegisterOpenapiServer(s grpc.ServiceRegistrar, srv OpenapiServer) {
	s.RegisterService(&Openapi_ServiceDesc, srv)
}

func _Openapi_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snappipb.Openapi/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snappipb.Openapi/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snappipb.Openapi/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_SetTransmitState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTransmitStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).SetTransmitState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snappipb.Openapi/SetTransmitState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).SetTransmitState(ctx, req.(*SetTransmitStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_SetLinkState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLinkStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).SetLinkState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snappipb.Openapi/SetLinkState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).SetLinkState(ctx, req.(*SetLinkStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_SetCaptureState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCaptureStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).SetCaptureState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snappipb.Openapi/SetCaptureState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).SetCaptureState(ctx, req.(*SetCaptureStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_SetRouteState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRouteStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).SetRouteState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snappipb.Openapi/SetRouteState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).SetRouteState(ctx, req.(*SetRouteStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snappipb.Openapi/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetStateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenapiServer).GetStateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snappipb.Openapi/GetStateMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenapiServer).GetStateMetrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Openapi_GetCapture_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCaptureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenapiServer).GetCapture(m, &openapiGetCaptureServer{stream})
}

type Openapi_GetCaptureServer interface {
	Send(*GetCaptureResponse) error
	grpc.ServerStream
}

type openapiGetCaptureServer struct {
	grpc.ServerStream
}

func (x *openapiGetCaptureServer) Send(m *GetCaptureResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Openapi_ServiceDesc is the grpc.ServiceDesc for Openapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Openapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snappipb.Openapi",
	HandlerType: (*OpenapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetConfig",
			Handler:    _Openapi_SetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _Openapi_UpdateConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Openapi_GetConfig_Handler,
		},
		{
			MethodName: "SetTransmitState",
			Handler:    _Openapi_SetTransmitState_Handler,
		},
		{
			MethodName: "SetLinkState",
			Handler:    _Openapi_SetLinkState_Handler,
		},
		{
			MethodName: "SetCaptureState",
			Handler:    _Openapi_SetCaptureState_Handler,
		},
		{
			MethodName: "SetRouteState",
			Handler:    _Openapi_SetRouteState_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _Openapi_GetMetrics_Handler,
		},
		{
			MethodName: "GetStateMetrics",
			Handler:    _Openapi_GetStateMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCapture",
			Handler:       _Openapi_GetCapture_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "snappipb.proto",
}
