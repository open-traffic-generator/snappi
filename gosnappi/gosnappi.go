// Open Traffic Generator API 0.4.15
// License: MIT

package gosnappi

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/ghodss/yaml"
	snappipb "github.com/open-traffic-generator/snappi/gosnappi/snappipb"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

type grpcTransport struct {
	location       string
	requestTimeout time.Duration
}

type GrpcTransport interface {
	SetLocation(value string) GrpcTransport
	Location() string
	SetRequestTimeout(value int) GrpcTransport
	RequestTimeout() int
}

// Location
func (obj *grpcTransport) Location() string {
	return obj.location
}

// SetLocation
func (obj *grpcTransport) SetLocation(value string) GrpcTransport {
	obj.location = value
	return obj
}

// RequestTimeout returns the grpc request timeout in seconds
func (obj *grpcTransport) RequestTimeout() int {
	return int(obj.requestTimeout / time.Second)
}

// SetRequestTimeout contains the timeout value in seconds for a grpc request
func (obj *grpcTransport) SetRequestTimeout(value int) GrpcTransport {
	obj.requestTimeout = time.Duration(value) * time.Second
	return obj
}

type httpTransport struct {
	location string
	verify   bool
}

type HttpTransport interface {
	SetLocation(value string) HttpTransport
	Location() string
	SetVerify(value bool) HttpTransport
	Verify() bool
}

// Location
func (obj *httpTransport) Location() string {
	return obj.location
}

// SetLocation
func (obj *httpTransport) SetLocation(value string) HttpTransport {
	obj.location = value
	return obj
}

// Verify returns whether or not TLS certificates will be verified by the server
func (obj *httpTransport) Verify() bool {
	return obj.verify
}

// SetVerify determines whether or not TLS certificates will be verified by the server
func (obj *httpTransport) SetVerify(value bool) HttpTransport {
	obj.verify = value
	return obj
}

type api struct {
	grpc *grpcTransport
	http *httpTransport
}

type Api interface {
	NewGrpcTransport() GrpcTransport
	NewHttpTransport() HttpTransport
}

// NewGrpcTransport sets the underlying transport of the Api as grpc
func (api *api) NewGrpcTransport() GrpcTransport {
	api.grpc = &grpcTransport{
		location:       "127.0.0.1:5050",
		requestTimeout: 10 * time.Second,
	}
	api.http = nil
	return api.grpc
}

// NewHttpTransport sets the underlying transport of the Api as http
func (api *api) NewHttpTransport() HttpTransport {
	api.http = &httpTransport{
		location: "https://127.0.0.1:443",
		verify:   false,
	}
	api.grpc = nil
	return api.http
}

// All methods that perform validation will add errors here
// All api rpcs MUST call Validate
var validation []string

func Validate() {
	if len(validation) > 0 {
		for _, item := range validation {
			fmt.Println(item)
		}
		panic("validation errors")
	}
}

type gosnappiApi struct {
	api
	grpcClient snappipb.OpenapiClient
}

// grpcConnect builds up a grpc connection
func (api *gosnappiApi) grpcConnect() error {
	if api.grpcClient == nil {
		conn, err := grpc.Dial(api.grpc.location, grpc.WithInsecure())
		if err != nil {
			return err
		}
		api.grpcClient = snappipb.NewOpenapiClient(conn)
	}
	return nil
}

// NewApi returns a new instance of the top level interface hierarchy
func NewApi() *gosnappiApi {
	api := gosnappiApi{}
	return &api
}

type GosnappiApi interface {
	Api
	NewConfig() Config
	NewTransmitState() TransmitState
	NewLinkState() LinkState
	NewCaptureState() CaptureState
	NewFlowsUpdate() FlowsUpdate
	NewRouteState() RouteState
	NewMetricsRequest() MetricsRequest
	NewCaptureRequest() CaptureRequest
	SetConfig(config Config) (SetConfigResponse_StatusCode200, error)
	GetConfig() (GetConfigResponse_StatusCode200, error)
	SetTransmitState(transmitState TransmitState) (SetTransmitStateResponse_StatusCode200, error)
	SetLinkState(linkState LinkState) (SetLinkStateResponse_StatusCode200, error)
	SetCaptureState(captureState CaptureState) (SetCaptureStateResponse_StatusCode200, error)
	UpdateFlows(flowsUpdate FlowsUpdate) (UpdateFlowsResponse_StatusCode200, error)
	SetRouteState(routeState RouteState) (SetRouteStateResponse_StatusCode200, error)
	GetMetrics(metricsRequest MetricsRequest) (GetMetricsResponse_StatusCode200, error)
	GetStateMetrics() (GetStateMetricsResponse_StatusCode200, error)
	GetCapture(captureRequest CaptureRequest) (GetCaptureResponse_StatusCode200, error)
}

func (api *gosnappiApi) NewConfig() Config {
	return &config{obj: &snappipb.Config{}}
}

func (api *gosnappiApi) NewTransmitState() TransmitState {
	return &transmitState{obj: &snappipb.TransmitState{}}
}

func (api *gosnappiApi) NewLinkState() LinkState {
	return &linkState{obj: &snappipb.LinkState{}}
}

func (api *gosnappiApi) NewCaptureState() CaptureState {
	return &captureState{obj: &snappipb.CaptureState{}}
}

func (api *gosnappiApi) NewFlowsUpdate() FlowsUpdate {
	return &flowsUpdate{obj: &snappipb.FlowsUpdate{}}
}

func (api *gosnappiApi) NewRouteState() RouteState {
	return &routeState{obj: &snappipb.RouteState{}}
}

func (api *gosnappiApi) NewMetricsRequest() MetricsRequest {
	return &metricsRequest{obj: &snappipb.MetricsRequest{}}
}

func (api *gosnappiApi) NewCaptureRequest() CaptureRequest {
	return &captureRequest{obj: &snappipb.CaptureRequest{}}
}

func (api *gosnappiApi) SetConfig(config Config) (SetConfigResponse_StatusCode200, error) {
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SetConfigRequest{Config: config.msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetConfig(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &setConfigResponseStatusCode200{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) GetConfig() (GetConfigResponse_StatusCode200, error) {
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetConfig(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &getConfigResponseStatusCode200{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) SetTransmitState(transmitState TransmitState) (SetTransmitStateResponse_StatusCode200, error) {
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SetTransmitStateRequest{TransmitState: transmitState.msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetTransmitState(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &setTransmitStateResponseStatusCode200{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) SetLinkState(linkState LinkState) (SetLinkStateResponse_StatusCode200, error) {
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SetLinkStateRequest{LinkState: linkState.msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetLinkState(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &setLinkStateResponseStatusCode200{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) SetCaptureState(captureState CaptureState) (SetCaptureStateResponse_StatusCode200, error) {
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SetCaptureStateRequest{CaptureState: captureState.msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetCaptureState(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &setCaptureStateResponseStatusCode200{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) UpdateFlows(flowsUpdate FlowsUpdate) (UpdateFlowsResponse_StatusCode200, error) {
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.UpdateFlowsRequest{FlowsUpdate: flowsUpdate.msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.UpdateFlows(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &updateFlowsResponseStatusCode200{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) SetRouteState(routeState RouteState) (SetRouteStateResponse_StatusCode200, error) {
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.SetRouteStateRequest{RouteState: routeState.msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.SetRouteState(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &setRouteStateResponseStatusCode200{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) GetMetrics(metricsRequest MetricsRequest) (GetMetricsResponse_StatusCode200, error) {
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.GetMetricsRequest{MetricsRequest: metricsRequest.msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetMetrics(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &getMetricsResponseStatusCode200{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) GetStateMetrics() (GetStateMetricsResponse_StatusCode200, error) {
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := emptypb.Empty{}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetStateMetrics(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &getStateMetricsResponseStatusCode200{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response not implemented")
}

func (api *gosnappiApi) GetCapture(captureRequest CaptureRequest) (GetCaptureResponse_StatusCode200, error) {
	if err := api.grpcConnect(); err != nil {
		return nil, err
	}
	request := snappipb.GetCaptureRequest{CaptureRequest: captureRequest.msg()}
	ctx, cancelFunc := context.WithTimeout(context.Background(), api.grpc.requestTimeout)
	defer cancelFunc()
	resp, err := api.grpcClient.GetCapture(ctx, &request)
	if err != nil {
		return nil, err
	}
	if resp.GetStatusCode_200() != nil {
		return &getCaptureResponseStatusCode200{obj: resp.GetStatusCode_200()}, nil
	}
	if resp.GetStatusCode_400() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	if resp.GetStatusCode_500() != nil {
		data, _ := yaml.Marshal(resp.GetStatusCode_400())
		return nil, fmt.Errorf(string(data))
	}
	return nil, fmt.Errorf("response not implemented")
}

type config struct {
	obj *snappipb.Config
}

func (obj *config) msg() *snappipb.Config {
	return obj.obj
}

func (obj *config) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *config) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *config) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *config) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Config interface {
	msg() *snappipb.Config
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Ports() ConfigPortIter
	Lags() ConfigLagIter
	Layer1() ConfigLayer1Iter
	Captures() ConfigCaptureIter
	Devices() ConfigDeviceIter
	Flows() ConfigFlowIter
	Events() Event
	Options() ConfigOptions
}

// Ports returns a []Port
//  The ports that will be configured on the traffic generator.
func (obj *config) Ports() ConfigPortIter {
	if obj.obj.Ports == nil {
		obj.obj.Ports = []*snappipb.Port{}
	}
	return &configPortIter{obj: obj}

}

type configPortIter struct {
	obj *config
}

type ConfigPortIter interface {
	Add() Port
	Items() []Port
}

func (obj *configPortIter) Add() Port {
	newObj := &snappipb.Port{}
	obj.obj.obj.Ports = append(obj.obj.obj.Ports, newObj)
	return &port{obj: newObj}
}

func (obj *configPortIter) Items() []Port {
	slice := []Port{}
	for _, item := range obj.obj.obj.Ports {
		slice = append(slice, &port{obj: item})
	}
	return slice
}

// Lags returns a []Lag
//  The lags that will be configured on the traffic generator.
func (obj *config) Lags() ConfigLagIter {
	if obj.obj.Lags == nil {
		obj.obj.Lags = []*snappipb.Lag{}
	}
	return &configLagIter{obj: obj}

}

type configLagIter struct {
	obj *config
}

type ConfigLagIter interface {
	Add() Lag
	Items() []Lag
}

func (obj *configLagIter) Add() Lag {
	newObj := &snappipb.Lag{}
	obj.obj.obj.Lags = append(obj.obj.obj.Lags, newObj)
	return &lag{obj: newObj}
}

func (obj *configLagIter) Items() []Lag {
	slice := []Lag{}
	for _, item := range obj.obj.obj.Lags {
		slice = append(slice, &lag{obj: item})
	}
	return slice
}

// Layer1 returns a []Layer1
//  The layer1 settings that will be configured on the traffic generator.
func (obj *config) Layer1() ConfigLayer1Iter {
	if obj.obj.Layer1 == nil {
		obj.obj.Layer1 = []*snappipb.Layer1{}
	}
	return &configLayer1Iter{obj: obj}

}

type configLayer1Iter struct {
	obj *config
}

type ConfigLayer1Iter interface {
	Add() Layer1
	Items() []Layer1
}

func (obj *configLayer1Iter) Add() Layer1 {
	newObj := &snappipb.Layer1{}
	obj.obj.obj.Layer1 = append(obj.obj.obj.Layer1, newObj)
	return &layer1{obj: newObj}
}

func (obj *configLayer1Iter) Items() []Layer1 {
	slice := []Layer1{}
	for _, item := range obj.obj.obj.Layer1 {
		slice = append(slice, &layer1{obj: item})
	}
	return slice
}

// Captures returns a []Capture
//  The capture settings that will be configured on the traffic generator.
func (obj *config) Captures() ConfigCaptureIter {
	if obj.obj.Captures == nil {
		obj.obj.Captures = []*snappipb.Capture{}
	}
	return &configCaptureIter{obj: obj}

}

type configCaptureIter struct {
	obj *config
}

type ConfigCaptureIter interface {
	Add() Capture
	Items() []Capture
}

func (obj *configCaptureIter) Add() Capture {
	newObj := &snappipb.Capture{}
	obj.obj.obj.Captures = append(obj.obj.obj.Captures, newObj)
	return &capture{obj: newObj}
}

func (obj *configCaptureIter) Items() []Capture {
	slice := []Capture{}
	for _, item := range obj.obj.obj.Captures {
		slice = append(slice, &capture{obj: item})
	}
	return slice
}

// Devices returns a []Device
//  The emulated device settings that will be configured on the traffic generator.
func (obj *config) Devices() ConfigDeviceIter {
	if obj.obj.Devices == nil {
		obj.obj.Devices = []*snappipb.Device{}
	}
	return &configDeviceIter{obj: obj}

}

type configDeviceIter struct {
	obj *config
}

type ConfigDeviceIter interface {
	Add() Device
	Items() []Device
}

func (obj *configDeviceIter) Add() Device {
	newObj := &snappipb.Device{}
	obj.obj.obj.Devices = append(obj.obj.obj.Devices, newObj)
	return &device{obj: newObj}
}

func (obj *configDeviceIter) Items() []Device {
	slice := []Device{}
	for _, item := range obj.obj.obj.Devices {
		slice = append(slice, &device{obj: item})
	}
	return slice
}

// Flows returns a []Flow
//  The flows that will be configured on the traffic generator.
func (obj *config) Flows() ConfigFlowIter {
	if obj.obj.Flows == nil {
		obj.obj.Flows = []*snappipb.Flow{}
	}
	return &configFlowIter{obj: obj}

}

type configFlowIter struct {
	obj *config
}

type ConfigFlowIter interface {
	Add() Flow
	Items() []Flow
}

func (obj *configFlowIter) Add() Flow {
	newObj := &snappipb.Flow{}
	obj.obj.obj.Flows = append(obj.obj.obj.Flows, newObj)
	return &flow{obj: newObj}
}

func (obj *configFlowIter) Items() []Flow {
	slice := []Flow{}
	for _, item := range obj.obj.obj.Flows {
		slice = append(slice, &flow{obj: item})
	}
	return slice
}

// Events returns a Event
//  description is TBD
func (obj *config) Events() Event {
	if obj.obj.Events == nil {
		obj.obj.Events = &snappipb.Event{}
	}
	return &event{obj: obj.obj.Events}

}

// Options returns a ConfigOptions
//  description is TBD
func (obj *config) Options() ConfigOptions {
	if obj.obj.Options == nil {
		obj.obj.Options = &snappipb.ConfigOptions{}
	}
	return &configOptions{obj: obj.obj.Options}

}

type transmitState struct {
	obj *snappipb.TransmitState
}

func (obj *transmitState) msg() *snappipb.TransmitState {
	return obj.obj
}

func (obj *transmitState) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *transmitState) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *transmitState) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *transmitState) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type TransmitState interface {
	msg() *snappipb.TransmitState
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	FlowNames() []string
	SetFlowNames(value []string) TransmitState
}

// FlowNames returns a []string
//  The names of flows to which the transmit state will be applied to. If the list of flow_names is empty or null the state will be applied to all configured flows.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
func (obj *transmitState) FlowNames() []string {
	return obj.obj.FlowNames
}

// SetFlowNames sets the []string value in the None object
//  The names of flows to which the transmit state will be applied to. If the list of flow_names is empty or null the state will be applied to all configured flows.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
func (obj *transmitState) SetFlowNames(value []string) TransmitState {
	obj.obj.FlowNames = value
	return obj
}

type linkState struct {
	obj *snappipb.LinkState
}

func (obj *linkState) msg() *snappipb.LinkState {
	return obj.obj
}

func (obj *linkState) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *linkState) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *linkState) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *linkState) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type LinkState interface {
	msg() *snappipb.LinkState
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	PortNames() []string
	SetPortNames(value []string) LinkState
}

// PortNames returns a []string
//  The names of port objects to. An empty or null list will control all port objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *linkState) PortNames() []string {
	return obj.obj.PortNames
}

// SetPortNames sets the []string value in the None object
//  The names of port objects to. An empty or null list will control all port objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *linkState) SetPortNames(value []string) LinkState {
	obj.obj.PortNames = value
	return obj
}

type captureState struct {
	obj *snappipb.CaptureState
}

func (obj *captureState) msg() *snappipb.CaptureState {
	return obj.obj
}

func (obj *captureState) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureState) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *captureState) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureState) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type CaptureState interface {
	msg() *snappipb.CaptureState
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	PortNames() []string
	SetPortNames(value []string) CaptureState
}

// PortNames returns a []string
//  The name of ports to start capturing packets on. An empty or null list will control all port objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *captureState) PortNames() []string {
	return obj.obj.PortNames
}

// SetPortNames sets the []string value in the None object
//  The name of ports to start capturing packets on. An empty or null list will control all port objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *captureState) SetPortNames(value []string) CaptureState {
	obj.obj.PortNames = value
	return obj
}

type flowsUpdate struct {
	obj *snappipb.FlowsUpdate
}

func (obj *flowsUpdate) msg() *snappipb.FlowsUpdate {
	return obj.obj
}

func (obj *flowsUpdate) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowsUpdate) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowsUpdate) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowsUpdate) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowsUpdate interface {
	msg() *snappipb.FlowsUpdate
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Flows() FlowsUpdateFlowIter
}

// Flows returns a []Flow
//  The list of configured flows for which given property will be updated.
func (obj *flowsUpdate) Flows() FlowsUpdateFlowIter {
	if obj.obj.Flows == nil {
		obj.obj.Flows = []*snappipb.Flow{}
	}
	return &flowsUpdateFlowIter{obj: obj}

}

type flowsUpdateFlowIter struct {
	obj *flowsUpdate
}

type FlowsUpdateFlowIter interface {
	Add() Flow
	Items() []Flow
}

func (obj *flowsUpdateFlowIter) Add() Flow {
	newObj := &snappipb.Flow{}
	obj.obj.obj.Flows = append(obj.obj.obj.Flows, newObj)
	return &flow{obj: newObj}
}

func (obj *flowsUpdateFlowIter) Items() []Flow {
	slice := []Flow{}
	for _, item := range obj.obj.obj.Flows {
		slice = append(slice, &flow{obj: item})
	}
	return slice
}

type routeState struct {
	obj *snappipb.RouteState
}

func (obj *routeState) msg() *snappipb.RouteState {
	return obj.obj
}

func (obj *routeState) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *routeState) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *routeState) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *routeState) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type RouteState interface {
	msg() *snappipb.RouteState
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Names() []string
	SetNames(value []string) RouteState
}

// Names returns a []string
//  The names of device route objects to control. If no names are specified then all route objects that match the x-constraint will be affected.
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv4Route/properties/name
//  - /components/schemas/Device.Bgpv6Route/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv4Route/properties/name
//  - /components/schemas/Device.Bgpv6Route/properties/name
//
func (obj *routeState) Names() []string {
	return obj.obj.Names
}

// SetNames sets the []string value in the None object
//  The names of device route objects to control. If no names are specified then all route objects that match the x-constraint will be affected.
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv4Route/properties/name
//  - /components/schemas/Device.Bgpv6Route/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv4Route/properties/name
//  - /components/schemas/Device.Bgpv6Route/properties/name
//
func (obj *routeState) SetNames(value []string) RouteState {
	obj.obj.Names = value
	return obj
}

type metricsRequest struct {
	obj *snappipb.MetricsRequest
}

func (obj *metricsRequest) msg() *snappipb.MetricsRequest {
	return obj.obj
}

func (obj *metricsRequest) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *metricsRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *metricsRequest) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *metricsRequest) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type MetricsRequest interface {
	msg() *snappipb.MetricsRequest
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Port() PortMetricsRequest
	Flow() FlowMetricsRequest
	Bgpv4() Bgpv4MetricsRequest
	Bgpv6() Bgpv6MetricsRequest
}

// Port returns a PortMetricsRequest
//  description is TBD
func (obj *metricsRequest) Port() PortMetricsRequest {
	if obj.obj.Port == nil {
		obj.obj.Port = &snappipb.PortMetricsRequest{}
	}
	return &portMetricsRequest{obj: obj.obj.Port}

}

// Flow returns a FlowMetricsRequest
//  description is TBD
func (obj *metricsRequest) Flow() FlowMetricsRequest {
	if obj.obj.Flow == nil {
		obj.obj.Flow = &snappipb.FlowMetricsRequest{}
	}
	return &flowMetricsRequest{obj: obj.obj.Flow}

}

// Bgpv4 returns a Bgpv4MetricsRequest
//  description is TBD
func (obj *metricsRequest) Bgpv4() Bgpv4MetricsRequest {
	if obj.obj.Bgpv4 == nil {
		obj.obj.Bgpv4 = &snappipb.Bgpv4MetricsRequest{}
	}
	return &bgpv4MetricsRequest{obj: obj.obj.Bgpv4}

}

// Bgpv6 returns a Bgpv6MetricsRequest
//  description is TBD
func (obj *metricsRequest) Bgpv6() Bgpv6MetricsRequest {
	if obj.obj.Bgpv6 == nil {
		obj.obj.Bgpv6 = &snappipb.Bgpv6MetricsRequest{}
	}
	return &bgpv6MetricsRequest{obj: obj.obj.Bgpv6}

}

type captureRequest struct {
	obj *snappipb.CaptureRequest
}

func (obj *captureRequest) msg() *snappipb.CaptureRequest {
	return obj.obj
}

func (obj *captureRequest) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *captureRequest) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureRequest) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type CaptureRequest interface {
	msg() *snappipb.CaptureRequest
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	PortName() string
	SetPortName(value string) CaptureRequest
}

// PortName returns a string
//  The name of a port a capture is started on.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *captureRequest) PortName() string {
	return obj.obj.PortName
}

// SetPortName sets the string value in the None object
//  The name of a port a capture is started on.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *captureRequest) SetPortName(value string) CaptureRequest {
	obj.obj.PortName = value
	return obj
}

type port struct {
	obj *snappipb.Port
}

func (obj *port) msg() *snappipb.Port {
	return obj.obj
}

func (obj *port) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *port) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *port) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *port) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Port interface {
	msg() *snappipb.Port
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Location() string
	SetLocation(value string) Port
	Name() string
	SetName(value string) Port
}

// Location returns a string
//  The location of a test port.  It is the endpoint where packets will emit from.
//  Test port locations can be the following:
//  - physical appliance with multiple ports
//  - physical chassis with multiple cards and ports
//  - local interface
//  - virtual machine, docker container, kubernetes cluster
//
//  The test port location format is implementation specific. Use the /results/capabilities API to determine what formats an  implementation supports for the location property.
//  Get the configured location state by using the /results/port API.
func (obj *port) Location() string {
	return *obj.obj.Location
}

// SetLocation sets the string value in the None object
//  The location of a test port.  It is the endpoint where packets will emit from.
//  Test port locations can be the following:
//  - physical appliance with multiple ports
//  - physical chassis with multiple cards and ports
//  - local interface
//  - virtual machine, docker container, kubernetes cluster
//
//  The test port location format is implementation specific. Use the /results/capabilities API to determine what formats an  implementation supports for the location property.
//  Get the configured location state by using the /results/port API.
func (obj *port) SetLocation(value string) Port {
	obj.obj.Location = &value
	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *port) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *port) SetName(value string) Port {
	obj.obj.Name = value
	return obj
}

type lag struct {
	obj *snappipb.Lag
}

func (obj *lag) msg() *snappipb.Lag {
	return obj.obj
}

func (obj *lag) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *lag) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lag) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Lag interface {
	msg() *snappipb.Lag
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Ports() LagLagPortIter
	Name() string
	SetName(value string) Lag
}

// Ports returns a []LagPort
//  description is TBD
func (obj *lag) Ports() LagLagPortIter {
	if obj.obj.Ports == nil {
		obj.obj.Ports = []*snappipb.LagPort{}
	}
	return &lagLagPortIter{obj: obj}

}

type lagLagPortIter struct {
	obj *lag
}

type LagLagPortIter interface {
	Add() LagPort
	Items() []LagPort
}

func (obj *lagLagPortIter) Add() LagPort {
	newObj := &snappipb.LagPort{}
	obj.obj.obj.Ports = append(obj.obj.obj.Ports, newObj)
	return &lagPort{obj: newObj}
}

func (obj *lagLagPortIter) Items() []LagPort {
	slice := []LagPort{}
	for _, item := range obj.obj.obj.Ports {
		slice = append(slice, &lagPort{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *lag) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *lag) SetName(value string) Lag {
	obj.obj.Name = value
	return obj
}

type layer1 struct {
	obj *snappipb.Layer1
}

func (obj *layer1) msg() *snappipb.Layer1 {
	return obj.obj
}

func (obj *layer1) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *layer1) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Layer1 interface {
	msg() *snappipb.Layer1
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	PortNames() []string
	SetPortNames(value []string) Layer1
	Promiscuous() bool
	SetPromiscuous(value bool) Layer1
	Mtu() int32
	SetMtu(value int32) Layer1
	IeeeMediaDefaults() bool
	SetIeeeMediaDefaults(value bool) Layer1
	AutoNegotiate() bool
	SetAutoNegotiate(value bool) Layer1
	AutoNegotiation() Layer1AutoNegotiation
	FlowControl() Layer1FlowControl
	Name() string
	SetName(value string) Layer1
}

// PortNames returns a []string
//  A list of unique names of port objects that will share the
//  choice settings.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *layer1) PortNames() []string {
	return obj.obj.PortNames
}

// SetPortNames sets the []string value in the None object
//  A list of unique names of port objects that will share the
//  choice settings.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *layer1) SetPortNames(value []string) Layer1 {
	obj.obj.PortNames = value
	return obj
}

// Promiscuous returns a bool
//  Enable promiscuous mode if supported.
func (obj *layer1) Promiscuous() bool {
	return *obj.obj.Promiscuous
}

// SetPromiscuous sets the bool value in the None object
//  Enable promiscuous mode if supported.
func (obj *layer1) SetPromiscuous(value bool) Layer1 {
	obj.obj.Promiscuous = &value
	return obj
}

// Mtu returns a int32
//  Set the maximum transmission unit size if supported.
func (obj *layer1) Mtu() int32 {
	return *obj.obj.Mtu
}

// SetMtu sets the int32 value in the None object
//  Set the maximum transmission unit size if supported.
func (obj *layer1) SetMtu(value int32) Layer1 {
	obj.obj.Mtu = &value
	return obj
}

// IeeeMediaDefaults returns a bool
//  Set to true to override the auto_negotiate, link_training
//  and rs_fec settings for gigabit ethernet interfaces.
func (obj *layer1) IeeeMediaDefaults() bool {
	return *obj.obj.IeeeMediaDefaults
}

// SetIeeeMediaDefaults sets the bool value in the None object
//  Set to true to override the auto_negotiate, link_training
//  and rs_fec settings for gigabit ethernet interfaces.
func (obj *layer1) SetIeeeMediaDefaults(value bool) Layer1 {
	obj.obj.IeeeMediaDefaults = &value
	return obj
}

// AutoNegotiate returns a bool
//  Enable/disable auto negotiation.
func (obj *layer1) AutoNegotiate() bool {
	return *obj.obj.AutoNegotiate
}

// SetAutoNegotiate sets the bool value in the None object
//  Enable/disable auto negotiation.
func (obj *layer1) SetAutoNegotiate(value bool) Layer1 {
	obj.obj.AutoNegotiate = &value
	return obj
}

// AutoNegotiation returns a Layer1AutoNegotiation
//  description is TBD
func (obj *layer1) AutoNegotiation() Layer1AutoNegotiation {
	if obj.obj.AutoNegotiation == nil {
		obj.obj.AutoNegotiation = &snappipb.Layer1AutoNegotiation{}
	}
	return &layer1AutoNegotiation{obj: obj.obj.AutoNegotiation}

}

// FlowControl returns a Layer1FlowControl
//  description is TBD
func (obj *layer1) FlowControl() Layer1FlowControl {
	if obj.obj.FlowControl == nil {
		obj.obj.FlowControl = &snappipb.Layer1FlowControl{}
	}
	return &layer1FlowControl{obj: obj.obj.FlowControl}

}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *layer1) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *layer1) SetName(value string) Layer1 {
	obj.obj.Name = value
	return obj
}

type capture struct {
	obj *snappipb.Capture
}

func (obj *capture) msg() *snappipb.Capture {
	return obj.obj
}

func (obj *capture) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *capture) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *capture) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *capture) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Capture interface {
	msg() *snappipb.Capture
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	PortNames() []string
	SetPortNames(value []string) Capture
	Filters() CaptureCaptureFilterIter
	Overwrite() bool
	SetOverwrite(value bool) Capture
	PacketSize() int32
	SetPacketSize(value int32) Capture
	Name() string
	SetName(value string) Capture
}

// PortNames returns a []string
//  The unique names of ports that the capture settings will apply to. Port_names cannot be duplicated between capture objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *capture) PortNames() []string {
	return obj.obj.PortNames
}

// SetPortNames sets the []string value in the None object
//  The unique names of ports that the capture settings will apply to. Port_names cannot be duplicated between capture objects.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *capture) SetPortNames(value []string) Capture {
	obj.obj.PortNames = value
	return obj
}

// Filters returns a []CaptureFilter
//  A list of filters to apply to the capturing ports. If no filters are specified then all packets will be captured. A capture can have multiple filters. The number of filters supported is determined by the implementation which can be retrieved using the capabilities API.
//  When multiple filters are specified the capture implementation  must && (and) all the filters.
func (obj *capture) Filters() CaptureCaptureFilterIter {
	if obj.obj.Filters == nil {
		obj.obj.Filters = []*snappipb.CaptureFilter{}
	}
	return &captureCaptureFilterIter{obj: obj}

}

type captureCaptureFilterIter struct {
	obj *capture
}

type CaptureCaptureFilterIter interface {
	Add() CaptureFilter
	Items() []CaptureFilter
}

func (obj *captureCaptureFilterIter) Add() CaptureFilter {
	newObj := &snappipb.CaptureFilter{}
	obj.obj.obj.Filters = append(obj.obj.obj.Filters, newObj)
	return &captureFilter{obj: newObj}
}

func (obj *captureCaptureFilterIter) Items() []CaptureFilter {
	slice := []CaptureFilter{}
	for _, item := range obj.obj.obj.Filters {
		slice = append(slice, &captureFilter{obj: item})
	}
	return slice
}

// Overwrite returns a bool
//  Overwrite the capture buffer.
func (obj *capture) Overwrite() bool {
	return *obj.obj.Overwrite
}

// SetOverwrite sets the bool value in the None object
//  Overwrite the capture buffer.
func (obj *capture) SetOverwrite(value bool) Capture {
	obj.obj.Overwrite = &value
	return obj
}

// PacketSize returns a int32
//  The maximum size of each captured packet. If no value is specified or it is null then the entire packet will be captured.
func (obj *capture) PacketSize() int32 {
	return *obj.obj.PacketSize
}

// SetPacketSize sets the int32 value in the None object
//  The maximum size of each captured packet. If no value is specified or it is null then the entire packet will be captured.
func (obj *capture) SetPacketSize(value int32) Capture {
	obj.obj.PacketSize = &value
	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *capture) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *capture) SetName(value string) Capture {
	obj.obj.Name = value
	return obj
}

type device struct {
	obj *snappipb.Device
}

func (obj *device) msg() *snappipb.Device {
	return obj.obj
}

func (obj *device) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *device) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *device) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *device) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Device interface {
	msg() *snappipb.Device
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	ContainerName() string
	SetContainerName(value string) Device
	Ethernet() DeviceEthernet
	Name() string
	SetName(value string) Device
}

// ContainerName returns a string
//  The unique name of a Port or Lag object that will contain the  emulated interfaces and/or protocol devices.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *device) ContainerName() string {
	return obj.obj.ContainerName
}

// SetContainerName sets the string value in the None object
//  The unique name of a Port or Lag object that will contain the  emulated interfaces and/or protocol devices.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *device) SetContainerName(value string) Device {
	obj.obj.ContainerName = value
	return obj
}

// Ethernet returns a DeviceEthernet
//  The ethernet stack.
func (obj *device) Ethernet() DeviceEthernet {
	if obj.obj.Ethernet == nil {
		obj.obj.Ethernet = &snappipb.DeviceEthernet{}
	}
	return &deviceEthernet{obj: obj.obj.Ethernet}

}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *device) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *device) SetName(value string) Device {
	obj.obj.Name = value
	return obj
}

type flow struct {
	obj *snappipb.Flow
}

func (obj *flow) msg() *snappipb.Flow {
	return obj.obj
}

func (obj *flow) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flow) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flow) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flow) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Flow interface {
	msg() *snappipb.Flow
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	TxRx() FlowTxRx
	Packet() FlowFlowHeaderIter
	Size() FlowSize
	Rate() FlowRate
	Duration() FlowDuration
	Metrics() FlowMetrics
	Name() string
	SetName(value string) Flow
}

// TxRx returns a FlowTxRx
//  The transmit and receive endpoints.
func (obj *flow) TxRx() FlowTxRx {
	if obj.obj.TxRx == nil {
		obj.obj.TxRx = &snappipb.FlowTxRx{}
	}
	return &flowTxRx{obj: obj.obj.TxRx}

}

// Packet returns a []FlowHeader
//  The header is a list of traffic protocol headers.
//
//  The order of traffic protocol headers assigned to the list is the
//  order they will appear on the wire.
//
//  In the case of an empty list the keyword/value of minItems: 1
//  indicates that an implementation MUST provide at least one
//  Flow.Header object.
//
//  The default value for the Flow.Header choice property is ethernet
//  which will result in an implementation by default providing at least
//  one ethernet packet header.
func (obj *flow) Packet() FlowFlowHeaderIter {
	if obj.obj.Packet == nil {
		obj.obj.Packet = []*snappipb.FlowHeader{}
	}
	return &flowFlowHeaderIter{obj: obj}

}

type flowFlowHeaderIter struct {
	obj *flow
}

type FlowFlowHeaderIter interface {
	Add() FlowHeader
	Items() []FlowHeader
}

func (obj *flowFlowHeaderIter) Add() FlowHeader {
	newObj := &snappipb.FlowHeader{}
	obj.obj.obj.Packet = append(obj.obj.obj.Packet, newObj)
	return &flowHeader{obj: newObj}
}

func (obj *flowFlowHeaderIter) Items() []FlowHeader {
	slice := []FlowHeader{}
	for _, item := range obj.obj.obj.Packet {
		slice = append(slice, &flowHeader{obj: item})
	}
	return slice
}

// Size returns a FlowSize
//  The size of the packets.
func (obj *flow) Size() FlowSize {
	if obj.obj.Size == nil {
		obj.obj.Size = &snappipb.FlowSize{}
	}
	return &flowSize{obj: obj.obj.Size}

}

// Rate returns a FlowRate
//  The transmit rate of the packets.
func (obj *flow) Rate() FlowRate {
	if obj.obj.Rate == nil {
		obj.obj.Rate = &snappipb.FlowRate{}
	}
	return &flowRate{obj: obj.obj.Rate}

}

// Duration returns a FlowDuration
//  The transmit duration of the packets.
func (obj *flow) Duration() FlowDuration {
	if obj.obj.Duration == nil {
		obj.obj.Duration = &snappipb.FlowDuration{}
	}
	return &flowDuration{obj: obj.obj.Duration}

}

// Metrics returns a FlowMetrics
//  Flow metrics.
func (obj *flow) Metrics() FlowMetrics {
	if obj.obj.Metrics == nil {
		obj.obj.Metrics = &snappipb.FlowMetrics{}
	}
	return &flowMetrics{obj: obj.obj.Metrics}

}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *flow) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *flow) SetName(value string) Flow {
	obj.obj.Name = value
	return obj
}

type event struct {
	obj *snappipb.Event
}

func (obj *event) msg() *snappipb.Event {
	return obj.obj
}

func (obj *event) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *event) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *event) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *event) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Event interface {
	msg() *snappipb.Event
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Enable() bool
	SetEnable(value bool) Event
	Link() EventLink
	RxRateThreshold() EventRxRateThreshold
	RouteAdvertiseWithdraw() EventRouteAdvertiseWithdraw
}

// Enable returns a bool
//  True to enable all events.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *event) Enable() bool {
	return *obj.obj.Enable
}

// SetEnable sets the bool value in the None object
//  True to enable all events.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *event) SetEnable(value bool) Event {
	obj.obj.Enable = &value
	return obj
}

// Link returns a EventLink
//  description is TBD
func (obj *event) Link() EventLink {
	if obj.obj.Link == nil {
		obj.obj.Link = &snappipb.EventLink{}
	}
	return &eventLink{obj: obj.obj.Link}

}

// RxRateThreshold returns a EventRxRateThreshold
//  description is TBD
func (obj *event) RxRateThreshold() EventRxRateThreshold {
	if obj.obj.RxRateThreshold == nil {
		obj.obj.RxRateThreshold = &snappipb.EventRxRateThreshold{}
	}
	return &eventRxRateThreshold{obj: obj.obj.RxRateThreshold}

}

// RouteAdvertiseWithdraw returns a EventRouteAdvertiseWithdraw
//  description is TBD
func (obj *event) RouteAdvertiseWithdraw() EventRouteAdvertiseWithdraw {
	if obj.obj.RouteAdvertiseWithdraw == nil {
		obj.obj.RouteAdvertiseWithdraw = &snappipb.EventRouteAdvertiseWithdraw{}
	}
	return &eventRouteAdvertiseWithdraw{obj: obj.obj.RouteAdvertiseWithdraw}

}

type configOptions struct {
	obj *snappipb.ConfigOptions
}

func (obj *configOptions) msg() *snappipb.ConfigOptions {
	return obj.obj
}

func (obj *configOptions) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *configOptions) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *configOptions) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *configOptions) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type ConfigOptions interface {
	msg() *snappipb.ConfigOptions
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	PortOptions() PortOptions
}

// PortOptions returns a PortOptions
//  description is TBD
func (obj *configOptions) PortOptions() PortOptions {
	if obj.obj.PortOptions == nil {
		obj.obj.PortOptions = &snappipb.PortOptions{}
	}
	return &portOptions{obj: obj.obj.PortOptions}

}

type portMetricsRequest struct {
	obj *snappipb.PortMetricsRequest
}

func (obj *portMetricsRequest) msg() *snappipb.PortMetricsRequest {
	return obj.obj
}

func (obj *portMetricsRequest) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portMetricsRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *portMetricsRequest) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portMetricsRequest) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PortMetricsRequest interface {
	msg() *snappipb.PortMetricsRequest
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	PortNames() []string
	SetPortNames(value []string) PortMetricsRequest
}

// PortNames returns a []string
//  The names of objects to return results for. An empty list will return all port row results.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *portMetricsRequest) PortNames() []string {
	return obj.obj.PortNames
}

// SetPortNames sets the []string value in the None object
//  The names of objects to return results for. An empty list will return all port row results.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *portMetricsRequest) SetPortNames(value []string) PortMetricsRequest {
	obj.obj.PortNames = value
	return obj
}

type flowMetricsRequest struct {
	obj *snappipb.FlowMetricsRequest
}

func (obj *flowMetricsRequest) msg() *snappipb.FlowMetricsRequest {
	return obj.obj
}

func (obj *flowMetricsRequest) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetricsRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowMetricsRequest) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetricsRequest) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowMetricsRequest interface {
	msg() *snappipb.FlowMetricsRequest
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	FlowNames() []string
	SetFlowNames(value []string) FlowMetricsRequest
	MetricGroups() FlowMetricGroupRequest
}

// FlowNames returns a []string
//  Flow metrics will be retrieved for these flow names.
//  If no flow names are specified then all flows will be returned.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
func (obj *flowMetricsRequest) FlowNames() []string {
	return obj.obj.FlowNames
}

// SetFlowNames sets the []string value in the None object
//  Flow metrics will be retrieved for these flow names.
//  If no flow names are specified then all flows will be returned.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/name
//
func (obj *flowMetricsRequest) SetFlowNames(value []string) FlowMetricsRequest {
	obj.obj.FlowNames = value
	return obj
}

// MetricGroups returns a FlowMetricGroupRequest
//  A list of metric groups used to disaggregate flows. A metric group that does not exist for a flow group MUST return an error.
func (obj *flowMetricsRequest) MetricGroups() FlowMetricGroupRequest {
	if obj.obj.MetricGroups == nil {
		obj.obj.MetricGroups = &snappipb.FlowMetricGroupRequest{}
	}
	return &flowMetricGroupRequest{obj: obj.obj.MetricGroups}

}

type bgpv4MetricsRequest struct {
	obj *snappipb.Bgpv4MetricsRequest
}

func (obj *bgpv4MetricsRequest) msg() *snappipb.Bgpv4MetricsRequest {
	return obj.obj
}

func (obj *bgpv4MetricsRequest) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv4MetricsRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *bgpv4MetricsRequest) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv4MetricsRequest) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Bgpv4MetricsRequest interface {
	msg() *snappipb.Bgpv4MetricsRequest
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	DeviceNames() []string
	SetDeviceNames(value []string) Bgpv4MetricsRequest
}

// DeviceNames returns a []string
//  The names of BGPv4 device to return results for. An empty list will return results for all BGPv4 devices.
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv4/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv4/properties/name
//
func (obj *bgpv4MetricsRequest) DeviceNames() []string {
	return obj.obj.DeviceNames
}

// SetDeviceNames sets the []string value in the None object
//  The names of BGPv4 device to return results for. An empty list will return results for all BGPv4 devices.
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv4/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv4/properties/name
//
func (obj *bgpv4MetricsRequest) SetDeviceNames(value []string) Bgpv4MetricsRequest {
	obj.obj.DeviceNames = value
	return obj
}

type bgpv6MetricsRequest struct {
	obj *snappipb.Bgpv6MetricsRequest
}

func (obj *bgpv6MetricsRequest) msg() *snappipb.Bgpv6MetricsRequest {
	return obj.obj
}

func (obj *bgpv6MetricsRequest) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv6MetricsRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *bgpv6MetricsRequest) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *bgpv6MetricsRequest) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Bgpv6MetricsRequest interface {
	msg() *snappipb.Bgpv6MetricsRequest
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	DeviceNames() []string
	SetDeviceNames(value []string) Bgpv6MetricsRequest
}

// DeviceNames returns a []string
//  The names of BGPv6 device to return results for. An empty list will return results for all BGPv6 devices.
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv6/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv6/properties/name
//
func (obj *bgpv6MetricsRequest) DeviceNames() []string {
	return obj.obj.DeviceNames
}

// SetDeviceNames sets the []string value in the None object
//  The names of BGPv6 device to return results for. An empty list will return results for all BGPv6 devices.
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv6/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Bgpv6/properties/name
//
func (obj *bgpv6MetricsRequest) SetDeviceNames(value []string) Bgpv6MetricsRequest {
	obj.obj.DeviceNames = value
	return obj
}

type lagPort struct {
	obj *snappipb.LagPort
}

func (obj *lagPort) msg() *snappipb.LagPort {
	return obj.obj
}

func (obj *lagPort) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *lagPort) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagPort) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type LagPort interface {
	msg() *snappipb.LagPort
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	PortName() string
	SetPortName(value string) LagPort
	Protocol() LagProtocol
	Ethernet() DeviceEthernetBase
}

// PortName returns a string
//  The name of a port object that will be part of the LAG.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *lagPort) PortName() string {
	return obj.obj.PortName
}

// SetPortName sets the string value in the None object
//  The name of a port object that will be part of the LAG.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//
func (obj *lagPort) SetPortName(value string) LagPort {
	obj.obj.PortName = value
	return obj
}

// Protocol returns a LagProtocol
//  description is TBD
func (obj *lagPort) Protocol() LagProtocol {
	if obj.obj.Protocol == nil {
		obj.obj.Protocol = &snappipb.LagProtocol{}
	}
	return &lagProtocol{obj: obj.obj.Protocol}

}

// Ethernet returns a DeviceEthernetBase
//  description is TBD
func (obj *lagPort) Ethernet() DeviceEthernetBase {
	if obj.obj.Ethernet == nil {
		obj.obj.Ethernet = &snappipb.DeviceEthernetBase{}
	}
	return &deviceEthernetBase{obj: obj.obj.Ethernet}

}

type layer1AutoNegotiation struct {
	obj *snappipb.Layer1AutoNegotiation
}

func (obj *layer1AutoNegotiation) msg() *snappipb.Layer1AutoNegotiation {
	return obj.obj
}

func (obj *layer1AutoNegotiation) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1AutoNegotiation) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *layer1AutoNegotiation) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1AutoNegotiation) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Layer1AutoNegotiation interface {
	msg() *snappipb.Layer1AutoNegotiation
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Advertise1000Mbps() bool
	SetAdvertise1000Mbps(value bool) Layer1AutoNegotiation
	Advertise100FdMbps() bool
	SetAdvertise100FdMbps(value bool) Layer1AutoNegotiation
	Advertise100HdMbps() bool
	SetAdvertise100HdMbps(value bool) Layer1AutoNegotiation
	Advertise10FdMbps() bool
	SetAdvertise10FdMbps(value bool) Layer1AutoNegotiation
	Advertise10HdMbps() bool
	SetAdvertise10HdMbps(value bool) Layer1AutoNegotiation
	LinkTraining() bool
	SetLinkTraining(value bool) Layer1AutoNegotiation
	RsFec() bool
	SetRsFec(value bool) Layer1AutoNegotiation
}

// Advertise_1000Mbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) Advertise1000Mbps() bool {
	return *obj.obj.Advertise_1000Mbps
}

// SetAdvertise_1000Mbps sets the bool value in the None object
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) SetAdvertise1000Mbps(value bool) Layer1AutoNegotiation {
	obj.obj.Advertise_1000Mbps = &value
	return obj
}

// Advertise_100FdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) Advertise100FdMbps() bool {
	return *obj.obj.Advertise_100FdMbps
}

// SetAdvertise_100FdMbps sets the bool value in the None object
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) SetAdvertise100FdMbps(value bool) Layer1AutoNegotiation {
	obj.obj.Advertise_100FdMbps = &value
	return obj
}

// Advertise_100HdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) Advertise100HdMbps() bool {
	return *obj.obj.Advertise_100HdMbps
}

// SetAdvertise_100HdMbps sets the bool value in the None object
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) SetAdvertise100HdMbps(value bool) Layer1AutoNegotiation {
	obj.obj.Advertise_100HdMbps = &value
	return obj
}

// Advertise_10FdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) Advertise10FdMbps() bool {
	return *obj.obj.Advertise_10FdMbps
}

// SetAdvertise_10FdMbps sets the bool value in the None object
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) SetAdvertise10FdMbps(value bool) Layer1AutoNegotiation {
	obj.obj.Advertise_10FdMbps = &value
	return obj
}

// Advertise_10HdMbps returns a bool
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) Advertise10HdMbps() bool {
	return *obj.obj.Advertise_10HdMbps
}

// SetAdvertise_10HdMbps sets the bool value in the None object
//  If auto_negotiate is true and the interface supports this option
//  then this speed will be advertised.
func (obj *layer1AutoNegotiation) SetAdvertise10HdMbps(value bool) Layer1AutoNegotiation {
	obj.obj.Advertise_10HdMbps = &value
	return obj
}

// LinkTraining returns a bool
//  Enable/disable gigabit ethernet link training.
func (obj *layer1AutoNegotiation) LinkTraining() bool {
	return *obj.obj.LinkTraining
}

// SetLinkTraining sets the bool value in the None object
//  Enable/disable gigabit ethernet link training.
func (obj *layer1AutoNegotiation) SetLinkTraining(value bool) Layer1AutoNegotiation {
	obj.obj.LinkTraining = &value
	return obj
}

// RsFec returns a bool
//  Enable/disable gigabit ethernet reed solomon forward error correction (RS FEC).
func (obj *layer1AutoNegotiation) RsFec() bool {
	return *obj.obj.RsFec
}

// SetRsFec sets the bool value in the None object
//  Enable/disable gigabit ethernet reed solomon forward error correction (RS FEC).
func (obj *layer1AutoNegotiation) SetRsFec(value bool) Layer1AutoNegotiation {
	obj.obj.RsFec = &value
	return obj
}

type layer1FlowControl struct {
	obj *snappipb.Layer1FlowControl
}

func (obj *layer1FlowControl) msg() *snappipb.Layer1FlowControl {
	return obj.obj
}

func (obj *layer1FlowControl) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1FlowControl) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *layer1FlowControl) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1FlowControl) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Layer1FlowControl interface {
	msg() *snappipb.Layer1FlowControl
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	DirectedAddress() string
	SetDirectedAddress(value string) Layer1FlowControl
	Ieee8021Qbb() Layer1Ieee8021Qbb
	Ieee8023X() Layer1Ieee8023X
}

// DirectedAddress returns a string
//  The 48bit mac address that the layer1 port names will listen on
//  for a directed pause.
func (obj *layer1FlowControl) DirectedAddress() string {
	return *obj.obj.DirectedAddress
}

// SetDirectedAddress sets the string value in the None object
//  The 48bit mac address that the layer1 port names will listen on
//  for a directed pause.
func (obj *layer1FlowControl) SetDirectedAddress(value string) Layer1FlowControl {
	obj.obj.DirectedAddress = &value
	return obj
}

// Ieee_802_1Qbb returns a Layer1Ieee8021Qbb
//  description is TBD
func (obj *layer1FlowControl) Ieee8021Qbb() Layer1Ieee8021Qbb {
	if obj.obj.Ieee_802_1Qbb == nil {
		obj.obj.Ieee_802_1Qbb = &snappipb.Layer1Ieee8021Qbb{}
	}
	return &layer1Ieee8021Qbb{obj: obj.obj.Ieee_802_1Qbb}

}

// Ieee_802_3X returns a Layer1Ieee8023X
//  description is TBD
func (obj *layer1FlowControl) Ieee8023X() Layer1Ieee8023X {
	if obj.obj.Ieee_802_3X == nil {
		obj.obj.Ieee_802_3X = &snappipb.Layer1Ieee8023X{}
	}
	return &layer1Ieee8023X{obj: obj.obj.Ieee_802_3X}

}

type captureFilter struct {
	obj *snappipb.CaptureFilter
}

func (obj *captureFilter) msg() *snappipb.CaptureFilter {
	return obj.obj
}

func (obj *captureFilter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureFilter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *captureFilter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureFilter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type CaptureFilter interface {
	msg() *snappipb.CaptureFilter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Custom() CaptureCustom
	Ethernet() CaptureEthernet
	Vlan() CaptureVlan
	Ipv4() CaptureIpv4
	Ipv6() CaptureIpv6
}

// Custom returns a CaptureCustom
//  Offset from last filter in the list. If no filters are present it is offset from position 0. Multiple custom filters can be present, the length of each custom filter is the length of the value being filtered.
func (obj *captureFilter) Custom() CaptureCustom {
	if obj.obj.Custom == nil {
		obj.obj.Custom = &snappipb.CaptureCustom{}
	}
	return &captureCustom{obj: obj.obj.Custom}

}

// Ethernet returns a CaptureEthernet
//  description is TBD
func (obj *captureFilter) Ethernet() CaptureEthernet {
	if obj.obj.Ethernet == nil {
		obj.obj.Ethernet = &snappipb.CaptureEthernet{}
	}
	return &captureEthernet{obj: obj.obj.Ethernet}

}

// Vlan returns a CaptureVlan
//  description is TBD
func (obj *captureFilter) Vlan() CaptureVlan {
	if obj.obj.Vlan == nil {
		obj.obj.Vlan = &snappipb.CaptureVlan{}
	}
	return &captureVlan{obj: obj.obj.Vlan}

}

// Ipv4 returns a CaptureIpv4
//  description is TBD
func (obj *captureFilter) Ipv4() CaptureIpv4 {
	if obj.obj.Ipv4 == nil {
		obj.obj.Ipv4 = &snappipb.CaptureIpv4{}
	}
	return &captureIpv4{obj: obj.obj.Ipv4}

}

// Ipv6 returns a CaptureIpv6
//  description is TBD
func (obj *captureFilter) Ipv6() CaptureIpv6 {
	if obj.obj.Ipv6 == nil {
		obj.obj.Ipv6 = &snappipb.CaptureIpv6{}
	}
	return &captureIpv6{obj: obj.obj.Ipv6}

}

type deviceEthernet struct {
	obj *snappipb.DeviceEthernet
}

func (obj *deviceEthernet) msg() *snappipb.DeviceEthernet {
	return obj.obj
}

func (obj *deviceEthernet) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceEthernet) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceEthernet) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceEthernet) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceEthernet interface {
	msg() *snappipb.DeviceEthernet
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Ipv4() DeviceIpv4
	Ipv6() DeviceIpv6
	Mac() string
	SetMac(value string) DeviceEthernet
	Mtu() int32
	SetMtu(value int32) DeviceEthernet
	Vlans() DeviceEthernetDeviceVlanIter
	Name() string
	SetName(value string) DeviceEthernet
}

// Ipv4 returns a DeviceIpv4
//  description is TBD
func (obj *deviceEthernet) Ipv4() DeviceIpv4 {
	if obj.obj.Ipv4 == nil {
		obj.obj.Ipv4 = &snappipb.DeviceIpv4{}
	}
	return &deviceIpv4{obj: obj.obj.Ipv4}

}

// Ipv6 returns a DeviceIpv6
//  description is TBD
func (obj *deviceEthernet) Ipv6() DeviceIpv6 {
	if obj.obj.Ipv6 == nil {
		obj.obj.Ipv6 = &snappipb.DeviceIpv6{}
	}
	return &deviceIpv6{obj: obj.obj.Ipv6}

}

// Mac returns a string
//  Media access control address
func (obj *deviceEthernet) Mac() string {
	return obj.obj.Mac
}

// SetMac sets the string value in the None object
//  Media access control address
func (obj *deviceEthernet) SetMac(value string) DeviceEthernet {
	obj.obj.Mac = value
	return obj
}

// Mtu returns a int32
//  Maximum transmission unit
func (obj *deviceEthernet) Mtu() int32 {
	return *obj.obj.Mtu
}

// SetMtu sets the int32 value in the None object
//  Maximum transmission unit
func (obj *deviceEthernet) SetMtu(value int32) DeviceEthernet {
	obj.obj.Mtu = &value
	return obj
}

// Vlans returns a []DeviceVlan
//  List of VLANs
func (obj *deviceEthernet) Vlans() DeviceEthernetDeviceVlanIter {
	if obj.obj.Vlans == nil {
		obj.obj.Vlans = []*snappipb.DeviceVlan{}
	}
	return &deviceEthernetDeviceVlanIter{obj: obj}

}

type deviceEthernetDeviceVlanIter struct {
	obj *deviceEthernet
}

type DeviceEthernetDeviceVlanIter interface {
	Add() DeviceVlan
	Items() []DeviceVlan
}

func (obj *deviceEthernetDeviceVlanIter) Add() DeviceVlan {
	newObj := &snappipb.DeviceVlan{}
	obj.obj.obj.Vlans = append(obj.obj.obj.Vlans, newObj)
	return &deviceVlan{obj: newObj}
}

func (obj *deviceEthernetDeviceVlanIter) Items() []DeviceVlan {
	slice := []DeviceVlan{}
	for _, item := range obj.obj.obj.Vlans {
		slice = append(slice, &deviceVlan{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceEthernet) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceEthernet) SetName(value string) DeviceEthernet {
	obj.obj.Name = value
	return obj
}

type flowTxRx struct {
	obj *snappipb.FlowTxRx
}

func (obj *flowTxRx) msg() *snappipb.FlowTxRx {
	return obj.obj
}

func (obj *flowTxRx) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowTxRx) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowTxRx) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowTxRx) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowTxRx interface {
	msg() *snappipb.FlowTxRx
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Port() FlowPort
	Device() FlowDevice
}

// Port returns a FlowPort
//  description is TBD
func (obj *flowTxRx) Port() FlowPort {
	if obj.obj.Port == nil {
		obj.obj.Port = &snappipb.FlowPort{}
	}
	return &flowPort{obj: obj.obj.Port}

}

// Device returns a FlowDevice
//  description is TBD
func (obj *flowTxRx) Device() FlowDevice {
	if obj.obj.Device == nil {
		obj.obj.Device = &snappipb.FlowDevice{}
	}
	return &flowDevice{obj: obj.obj.Device}

}

type flowHeader struct {
	obj *snappipb.FlowHeader
}

func (obj *flowHeader) msg() *snappipb.FlowHeader {
	return obj.obj
}

func (obj *flowHeader) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowHeader) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowHeader) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowHeader) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowHeader interface {
	msg() *snappipb.FlowHeader
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Custom() FlowCustom
	Ethernet() FlowEthernet
	Vlan() FlowVlan
	Vxlan() FlowVxlan
	Ipv4() FlowIpv4
	Ipv6() FlowIpv6
	Pfcpause() FlowPfcPause
	Ethernetpause() FlowEthernetPause
	Tcp() FlowTcp
	Udp() FlowUdp
	Gre() FlowGre
	Gtpv1() FlowGtpv1
	Gtpv2() FlowGtpv2
	Arp() FlowArp
	Icmp() FlowIcmp
	Icmpv6() FlowIcmpv6
	Ppp() FlowPpp
	Igmpv1() FlowIgmpv1
}

// Custom returns a FlowCustom
//  description is TBD
func (obj *flowHeader) Custom() FlowCustom {
	if obj.obj.Custom == nil {
		obj.obj.Custom = &snappipb.FlowCustom{}
	}
	return &flowCustom{obj: obj.obj.Custom}

}

// Ethernet returns a FlowEthernet
//  description is TBD
func (obj *flowHeader) Ethernet() FlowEthernet {
	if obj.obj.Ethernet == nil {
		obj.obj.Ethernet = &snappipb.FlowEthernet{}
	}
	return &flowEthernet{obj: obj.obj.Ethernet}

}

// Vlan returns a FlowVlan
//  description is TBD
func (obj *flowHeader) Vlan() FlowVlan {
	if obj.obj.Vlan == nil {
		obj.obj.Vlan = &snappipb.FlowVlan{}
	}
	return &flowVlan{obj: obj.obj.Vlan}

}

// Vxlan returns a FlowVxlan
//  description is TBD
func (obj *flowHeader) Vxlan() FlowVxlan {
	if obj.obj.Vxlan == nil {
		obj.obj.Vxlan = &snappipb.FlowVxlan{}
	}
	return &flowVxlan{obj: obj.obj.Vxlan}

}

// Ipv4 returns a FlowIpv4
//  description is TBD
func (obj *flowHeader) Ipv4() FlowIpv4 {
	if obj.obj.Ipv4 == nil {
		obj.obj.Ipv4 = &snappipb.FlowIpv4{}
	}
	return &flowIpv4{obj: obj.obj.Ipv4}

}

// Ipv6 returns a FlowIpv6
//  description is TBD
func (obj *flowHeader) Ipv6() FlowIpv6 {
	if obj.obj.Ipv6 == nil {
		obj.obj.Ipv6 = &snappipb.FlowIpv6{}
	}
	return &flowIpv6{obj: obj.obj.Ipv6}

}

// Pfcpause returns a FlowPfcPause
//  description is TBD
func (obj *flowHeader) Pfcpause() FlowPfcPause {
	if obj.obj.Pfcpause == nil {
		obj.obj.Pfcpause = &snappipb.FlowPfcPause{}
	}
	return &flowPfcPause{obj: obj.obj.Pfcpause}

}

// Ethernetpause returns a FlowEthernetPause
//  description is TBD
func (obj *flowHeader) Ethernetpause() FlowEthernetPause {
	if obj.obj.Ethernetpause == nil {
		obj.obj.Ethernetpause = &snappipb.FlowEthernetPause{}
	}
	return &flowEthernetPause{obj: obj.obj.Ethernetpause}

}

// Tcp returns a FlowTcp
//  description is TBD
func (obj *flowHeader) Tcp() FlowTcp {
	if obj.obj.Tcp == nil {
		obj.obj.Tcp = &snappipb.FlowTcp{}
	}
	return &flowTcp{obj: obj.obj.Tcp}

}

// Udp returns a FlowUdp
//  description is TBD
func (obj *flowHeader) Udp() FlowUdp {
	if obj.obj.Udp == nil {
		obj.obj.Udp = &snappipb.FlowUdp{}
	}
	return &flowUdp{obj: obj.obj.Udp}

}

// Gre returns a FlowGre
//  description is TBD
func (obj *flowHeader) Gre() FlowGre {
	if obj.obj.Gre == nil {
		obj.obj.Gre = &snappipb.FlowGre{}
	}
	return &flowGre{obj: obj.obj.Gre}

}

// Gtpv1 returns a FlowGtpv1
//  description is TBD
func (obj *flowHeader) Gtpv1() FlowGtpv1 {
	if obj.obj.Gtpv1 == nil {
		obj.obj.Gtpv1 = &snappipb.FlowGtpv1{}
	}
	return &flowGtpv1{obj: obj.obj.Gtpv1}

}

// Gtpv2 returns a FlowGtpv2
//  description is TBD
func (obj *flowHeader) Gtpv2() FlowGtpv2 {
	if obj.obj.Gtpv2 == nil {
		obj.obj.Gtpv2 = &snappipb.FlowGtpv2{}
	}
	return &flowGtpv2{obj: obj.obj.Gtpv2}

}

// Arp returns a FlowArp
//  description is TBD
func (obj *flowHeader) Arp() FlowArp {
	if obj.obj.Arp == nil {
		obj.obj.Arp = &snappipb.FlowArp{}
	}
	return &flowArp{obj: obj.obj.Arp}

}

// Icmp returns a FlowIcmp
//  description is TBD
func (obj *flowHeader) Icmp() FlowIcmp {
	if obj.obj.Icmp == nil {
		obj.obj.Icmp = &snappipb.FlowIcmp{}
	}
	return &flowIcmp{obj: obj.obj.Icmp}

}

// Icmpv6 returns a FlowIcmpv6
//  description is TBD
func (obj *flowHeader) Icmpv6() FlowIcmpv6 {
	if obj.obj.Icmpv6 == nil {
		obj.obj.Icmpv6 = &snappipb.FlowIcmpv6{}
	}
	return &flowIcmpv6{obj: obj.obj.Icmpv6}

}

// Ppp returns a FlowPpp
//  description is TBD
func (obj *flowHeader) Ppp() FlowPpp {
	if obj.obj.Ppp == nil {
		obj.obj.Ppp = &snappipb.FlowPpp{}
	}
	return &flowPpp{obj: obj.obj.Ppp}

}

// Igmpv1 returns a FlowIgmpv1
//  description is TBD
func (obj *flowHeader) Igmpv1() FlowIgmpv1 {
	if obj.obj.Igmpv1 == nil {
		obj.obj.Igmpv1 = &snappipb.FlowIgmpv1{}
	}
	return &flowIgmpv1{obj: obj.obj.Igmpv1}

}

type flowSize struct {
	obj *snappipb.FlowSize
}

func (obj *flowSize) msg() *snappipb.FlowSize {
	return obj.obj
}

func (obj *flowSize) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSize) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowSize) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSize) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowSize interface {
	msg() *snappipb.FlowSize
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Fixed() int32
	SetFixed(value int32) FlowSize
	Increment() FlowSizeIncrement
	Random() FlowSizeRandom
}

// Fixed returns a int32
//  description is TBD
func (obj *flowSize) Fixed() int32 {
	return *obj.obj.Fixed
}

// SetFixed sets the int32 value in the None object
//  description is TBD
func (obj *flowSize) SetFixed(value int32) FlowSize {
	obj.obj.Fixed = &value
	return obj
}

// Increment returns a FlowSizeIncrement
//  description is TBD
func (obj *flowSize) Increment() FlowSizeIncrement {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.FlowSizeIncrement{}
	}
	return &flowSizeIncrement{obj: obj.obj.Increment}

}

// Random returns a FlowSizeRandom
//  description is TBD
func (obj *flowSize) Random() FlowSizeRandom {
	if obj.obj.Random == nil {
		obj.obj.Random = &snappipb.FlowSizeRandom{}
	}
	return &flowSizeRandom{obj: obj.obj.Random}

}

type flowRate struct {
	obj *snappipb.FlowRate
}

func (obj *flowRate) msg() *snappipb.FlowRate {
	return obj.obj
}

func (obj *flowRate) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowRate) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowRate) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowRate) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowRate interface {
	msg() *snappipb.FlowRate
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Pps() int32
	SetPps(value int32) FlowRate
	Bps() int32
	SetBps(value int32) FlowRate
	Kbps() int32
	SetKbps(value int32) FlowRate
	Mbps() int32
	SetMbps(value int32) FlowRate
	Gbps() int32
	SetGbps(value int32) FlowRate
	Percentage() float32
	SetPercentage(value float32) FlowRate
}

// Pps returns a int32
//  Packets per second.
func (obj *flowRate) Pps() int32 {
	return *obj.obj.Pps
}

// SetPps sets the int32 value in the None object
//  Packets per second.
func (obj *flowRate) SetPps(value int32) FlowRate {
	obj.obj.Pps = &value
	return obj
}

// Bps returns a int32
//  Bits per second.
func (obj *flowRate) Bps() int32 {
	return *obj.obj.Bps
}

// SetBps sets the int32 value in the None object
//  Bits per second.
func (obj *flowRate) SetBps(value int32) FlowRate {
	obj.obj.Bps = &value
	return obj
}

// Kbps returns a int32
//  Kilobits per second.
func (obj *flowRate) Kbps() int32 {
	return *obj.obj.Kbps
}

// SetKbps sets the int32 value in the None object
//  Kilobits per second.
func (obj *flowRate) SetKbps(value int32) FlowRate {
	obj.obj.Kbps = &value
	return obj
}

// Mbps returns a int32
//  Megabits per second.
func (obj *flowRate) Mbps() int32 {
	return *obj.obj.Mbps
}

// SetMbps sets the int32 value in the None object
//  Megabits per second.
func (obj *flowRate) SetMbps(value int32) FlowRate {
	obj.obj.Mbps = &value
	return obj
}

// Gbps returns a int32
//  Gigabits per second.
func (obj *flowRate) Gbps() int32 {
	return *obj.obj.Gbps
}

// SetGbps sets the int32 value in the None object
//  Gigabits per second.
func (obj *flowRate) SetGbps(value int32) FlowRate {
	obj.obj.Gbps = &value
	return obj
}

// Percentage returns a float32
//  The percentage of a port location's available bandwidth.
func (obj *flowRate) Percentage() float32 {
	return *obj.obj.Percentage
}

// SetPercentage sets the float32 value in the None object
//  The percentage of a port location's available bandwidth.
func (obj *flowRate) SetPercentage(value float32) FlowRate {
	obj.obj.Percentage = &value
	return obj
}

type flowDuration struct {
	obj *snappipb.FlowDuration
}

func (obj *flowDuration) msg() *snappipb.FlowDuration {
	return obj.obj
}

func (obj *flowDuration) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDuration) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowDuration) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDuration) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowDuration interface {
	msg() *snappipb.FlowDuration
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	FixedPackets() FlowFixedPackets
	FixedSeconds() FlowFixedSeconds
	Burst() FlowBurst
	Continuous() FlowContinuous
}

// FixedPackets returns a FlowFixedPackets
//  description is TBD
func (obj *flowDuration) FixedPackets() FlowFixedPackets {
	if obj.obj.FixedPackets == nil {
		obj.obj.FixedPackets = &snappipb.FlowFixedPackets{}
	}
	return &flowFixedPackets{obj: obj.obj.FixedPackets}

}

// FixedSeconds returns a FlowFixedSeconds
//  description is TBD
func (obj *flowDuration) FixedSeconds() FlowFixedSeconds {
	if obj.obj.FixedSeconds == nil {
		obj.obj.FixedSeconds = &snappipb.FlowFixedSeconds{}
	}
	return &flowFixedSeconds{obj: obj.obj.FixedSeconds}

}

// Burst returns a FlowBurst
//  description is TBD
func (obj *flowDuration) Burst() FlowBurst {
	if obj.obj.Burst == nil {
		obj.obj.Burst = &snappipb.FlowBurst{}
	}
	return &flowBurst{obj: obj.obj.Burst}

}

// Continuous returns a FlowContinuous
//  description is TBD
func (obj *flowDuration) Continuous() FlowContinuous {
	if obj.obj.Continuous == nil {
		obj.obj.Continuous = &snappipb.FlowContinuous{}
	}
	return &flowContinuous{obj: obj.obj.Continuous}

}

type flowMetrics struct {
	obj *snappipb.FlowMetrics
}

func (obj *flowMetrics) msg() *snappipb.FlowMetrics {
	return obj.obj
}

func (obj *flowMetrics) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetrics) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowMetrics) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetrics) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowMetrics interface {
	msg() *snappipb.FlowMetrics
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Enable() bool
	SetEnable(value bool) FlowMetrics
	Loss() bool
	SetLoss(value bool) FlowMetrics
	Timestamps() bool
	SetTimestamps(value bool) FlowMetrics
	Latency() FlowLatencyMetrics
}

// Enable returns a bool
//  Enables flow metrics.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *flowMetrics) Enable() bool {
	return *obj.obj.Enable
}

// SetEnable sets the bool value in the None object
//  Enables flow metrics.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *flowMetrics) SetEnable(value bool) FlowMetrics {
	obj.obj.Enable = &value
	return obj
}

// Loss returns a bool
//  Enables additional flow metric loss calculation.
func (obj *flowMetrics) Loss() bool {
	return *obj.obj.Loss
}

// SetLoss sets the bool value in the None object
//  Enables additional flow metric loss calculation.
func (obj *flowMetrics) SetLoss(value bool) FlowMetrics {
	obj.obj.Loss = &value
	return obj
}

// Timestamps returns a bool
//  Enables additional flow metric first and last timestamps.
func (obj *flowMetrics) Timestamps() bool {
	return *obj.obj.Timestamps
}

// SetTimestamps sets the bool value in the None object
//  Enables additional flow metric first and last timestamps.
func (obj *flowMetrics) SetTimestamps(value bool) FlowMetrics {
	obj.obj.Timestamps = &value
	return obj
}

// Latency returns a FlowLatencyMetrics
//  Latency metrics.
func (obj *flowMetrics) Latency() FlowLatencyMetrics {
	if obj.obj.Latency == nil {
		obj.obj.Latency = &snappipb.FlowLatencyMetrics{}
	}
	return &flowLatencyMetrics{obj: obj.obj.Latency}

}

type eventLink struct {
	obj *snappipb.EventLink
}

func (obj *eventLink) msg() *snappipb.EventLink {
	return obj.obj
}

func (obj *eventLink) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventLink) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *eventLink) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventLink) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type EventLink interface {
	msg() *snappipb.EventLink
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Enable() bool
	SetEnable(value bool) EventLink
}

// Enable returns a bool
//  True to enable notifications when a link up/down event occurs.
func (obj *eventLink) Enable() bool {
	return *obj.obj.Enable
}

// SetEnable sets the bool value in the None object
//  True to enable notifications when a link up/down event occurs.
func (obj *eventLink) SetEnable(value bool) EventLink {
	obj.obj.Enable = &value
	return obj
}

type eventRxRateThreshold struct {
	obj *snappipb.EventRxRateThreshold
}

func (obj *eventRxRateThreshold) msg() *snappipb.EventRxRateThreshold {
	return obj.obj
}

func (obj *eventRxRateThreshold) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventRxRateThreshold) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *eventRxRateThreshold) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventRxRateThreshold) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type EventRxRateThreshold interface {
	msg() *snappipb.EventRxRateThreshold
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Enable() bool
	SetEnable(value bool) EventRxRateThreshold
	Threshold() float32
	SetThreshold(value float32) EventRxRateThreshold
}

// Enable returns a bool
//  True to enable the rx_rate_threshold event.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *eventRxRateThreshold) Enable() bool {
	return *obj.obj.Enable
}

// SetEnable sets the bool value in the None object
//  True to enable the rx_rate_threshold event.
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *eventRxRateThreshold) SetEnable(value bool) EventRxRateThreshold {
	obj.obj.Enable = &value
	return obj
}

// Threshold returns a float32
//  True to enable notifications when the rx rate of a flow passes above
//  or below the threshold value.
func (obj *eventRxRateThreshold) Threshold() float32 {
	return *obj.obj.Threshold
}

// SetThreshold sets the float32 value in the None object
//  True to enable notifications when the rx rate of a flow passes above
//  or below the threshold value.
func (obj *eventRxRateThreshold) SetThreshold(value float32) EventRxRateThreshold {
	obj.obj.Threshold = &value
	return obj
}

type eventRouteAdvertiseWithdraw struct {
	obj *snappipb.EventRouteAdvertiseWithdraw
}

func (obj *eventRouteAdvertiseWithdraw) msg() *snappipb.EventRouteAdvertiseWithdraw {
	return obj.obj
}

func (obj *eventRouteAdvertiseWithdraw) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventRouteAdvertiseWithdraw) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *eventRouteAdvertiseWithdraw) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *eventRouteAdvertiseWithdraw) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type EventRouteAdvertiseWithdraw interface {
	msg() *snappipb.EventRouteAdvertiseWithdraw
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Enable() bool
	SetEnable(value bool) EventRouteAdvertiseWithdraw
}

// Enable returns a bool
//  True to enable notifications when a route advertise/withdraw
//  event occurs.
func (obj *eventRouteAdvertiseWithdraw) Enable() bool {
	return *obj.obj.Enable
}

// SetEnable sets the bool value in the None object
//  True to enable notifications when a route advertise/withdraw
//  event occurs.
func (obj *eventRouteAdvertiseWithdraw) SetEnable(value bool) EventRouteAdvertiseWithdraw {
	obj.obj.Enable = &value
	return obj
}

type portOptions struct {
	obj *snappipb.PortOptions
}

func (obj *portOptions) msg() *snappipb.PortOptions {
	return obj.obj
}

func (obj *portOptions) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portOptions) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *portOptions) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *portOptions) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PortOptions interface {
	msg() *snappipb.PortOptions
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	LocationPreemption() bool
	SetLocationPreemption(value bool) PortOptions
}

// LocationPreemption returns a bool
//  Preempt all the test port locations as defined by the  Port.Port.properties.location. If the test ports defined by their location values are in use and  this value is true, the test ports will be preempted.
func (obj *portOptions) LocationPreemption() bool {
	return *obj.obj.LocationPreemption
}

// SetLocationPreemption sets the bool value in the None object
//  Preempt all the test port locations as defined by the  Port.Port.properties.location. If the test ports defined by their location values are in use and  this value is true, the test ports will be preempted.
func (obj *portOptions) SetLocationPreemption(value bool) PortOptions {
	obj.obj.LocationPreemption = &value
	return obj
}

type flowMetricGroupRequest struct {
	obj *snappipb.FlowMetricGroupRequest
}

func (obj *flowMetricGroupRequest) msg() *snappipb.FlowMetricGroupRequest {
	return obj.obj
}

func (obj *flowMetricGroupRequest) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetricGroupRequest) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowMetricGroupRequest) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowMetricGroupRequest) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowMetricGroupRequest interface {
	msg() *snappipb.FlowMetricGroupRequest
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Ingress() []string
	SetIngress(value []string) FlowMetricGroupRequest
	Egress() []string
	SetEgress(value []string) FlowMetricGroupRequest
}

// Ingress returns a []string
//  Disaggregate the flow metrics by ingress packet header field names.
//  If the items is empty then no disaggregation will be done.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/packet/../metric_group
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/packet/../metric_group
//
func (obj *flowMetricGroupRequest) Ingress() []string {
	return obj.obj.Ingress
}

// SetIngress sets the []string value in the None object
//  Disaggregate the flow metrics by ingress packet header field names.
//  If the items is empty then no disaggregation will be done.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/packet/../metric_group
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/packet/../metric_group
//
func (obj *flowMetricGroupRequest) SetIngress(value []string) FlowMetricGroupRequest {
	obj.obj.Ingress = value
	return obj
}

// Egress returns a []string
//  Disaggregate the flow metrics by egress packet header field names
//  If the items is empty then no disaggregation will be done.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/egress/../metric_group
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/egress/../metric_group
//
func (obj *flowMetricGroupRequest) Egress() []string {
	return obj.obj.Egress
}

// SetEgress sets the []string value in the None object
//  Disaggregate the flow metrics by egress packet header field names
//  If the items is empty then no disaggregation will be done.
//
//  x-constraint:
//  - /components/schemas/Flow/properties/egress/../metric_group
//
//
//  x-constraint:
//  - /components/schemas/Flow/properties/egress/../metric_group
//
func (obj *flowMetricGroupRequest) SetEgress(value []string) FlowMetricGroupRequest {
	obj.obj.Egress = value
	return obj
}

type lagProtocol struct {
	obj *snappipb.LagProtocol
}

func (obj *lagProtocol) msg() *snappipb.LagProtocol {
	return obj.obj
}

func (obj *lagProtocol) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagProtocol) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *lagProtocol) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagProtocol) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type LagProtocol interface {
	msg() *snappipb.LagProtocol
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Lacp() LagLacp
	Static() LagStatic
}

// Lacp returns a LagLacp
//  description is TBD
func (obj *lagProtocol) Lacp() LagLacp {
	if obj.obj.Lacp == nil {
		obj.obj.Lacp = &snappipb.LagLacp{}
	}
	return &lagLacp{obj: obj.obj.Lacp}

}

// Static returns a LagStatic
//  description is TBD
func (obj *lagProtocol) Static() LagStatic {
	if obj.obj.Static == nil {
		obj.obj.Static = &snappipb.LagStatic{}
	}
	return &lagStatic{obj: obj.obj.Static}

}

type deviceEthernetBase struct {
	obj *snappipb.DeviceEthernetBase
}

func (obj *deviceEthernetBase) msg() *snappipb.DeviceEthernetBase {
	return obj.obj
}

func (obj *deviceEthernetBase) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceEthernetBase) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceEthernetBase) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceEthernetBase) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceEthernetBase interface {
	msg() *snappipb.DeviceEthernetBase
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Mac() string
	SetMac(value string) DeviceEthernetBase
	Mtu() int32
	SetMtu(value int32) DeviceEthernetBase
	Vlans() DeviceEthernetBaseDeviceVlanIter
	Name() string
	SetName(value string) DeviceEthernetBase
}

// Mac returns a string
//  Media access control address
func (obj *deviceEthernetBase) Mac() string {
	return obj.obj.Mac
}

// SetMac sets the string value in the None object
//  Media access control address
func (obj *deviceEthernetBase) SetMac(value string) DeviceEthernetBase {
	obj.obj.Mac = value
	return obj
}

// Mtu returns a int32
//  Maximum transmission unit
func (obj *deviceEthernetBase) Mtu() int32 {
	return *obj.obj.Mtu
}

// SetMtu sets the int32 value in the None object
//  Maximum transmission unit
func (obj *deviceEthernetBase) SetMtu(value int32) DeviceEthernetBase {
	obj.obj.Mtu = &value
	return obj
}

// Vlans returns a []DeviceVlan
//  List of VLANs
func (obj *deviceEthernetBase) Vlans() DeviceEthernetBaseDeviceVlanIter {
	if obj.obj.Vlans == nil {
		obj.obj.Vlans = []*snappipb.DeviceVlan{}
	}
	return &deviceEthernetBaseDeviceVlanIter{obj: obj}

}

type deviceEthernetBaseDeviceVlanIter struct {
	obj *deviceEthernetBase
}

type DeviceEthernetBaseDeviceVlanIter interface {
	Add() DeviceVlan
	Items() []DeviceVlan
}

func (obj *deviceEthernetBaseDeviceVlanIter) Add() DeviceVlan {
	newObj := &snappipb.DeviceVlan{}
	obj.obj.obj.Vlans = append(obj.obj.obj.Vlans, newObj)
	return &deviceVlan{obj: newObj}
}

func (obj *deviceEthernetBaseDeviceVlanIter) Items() []DeviceVlan {
	slice := []DeviceVlan{}
	for _, item := range obj.obj.obj.Vlans {
		slice = append(slice, &deviceVlan{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceEthernetBase) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceEthernetBase) SetName(value string) DeviceEthernetBase {
	obj.obj.Name = value
	return obj
}

type layer1Ieee8021Qbb struct {
	obj *snappipb.Layer1Ieee8021Qbb
}

func (obj *layer1Ieee8021Qbb) msg() *snappipb.Layer1Ieee8021Qbb {
	return obj.obj
}

func (obj *layer1Ieee8021Qbb) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1Ieee8021Qbb) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *layer1Ieee8021Qbb) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1Ieee8021Qbb) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Layer1Ieee8021Qbb interface {
	msg() *snappipb.Layer1Ieee8021Qbb
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	PfcDelay() int32
	SetPfcDelay(value int32) Layer1Ieee8021Qbb
	PfcClass0() int32
	SetPfcClass0(value int32) Layer1Ieee8021Qbb
	PfcClass1() int32
	SetPfcClass1(value int32) Layer1Ieee8021Qbb
	PfcClass2() int32
	SetPfcClass2(value int32) Layer1Ieee8021Qbb
	PfcClass3() int32
	SetPfcClass3(value int32) Layer1Ieee8021Qbb
	PfcClass4() int32
	SetPfcClass4(value int32) Layer1Ieee8021Qbb
	PfcClass5() int32
	SetPfcClass5(value int32) Layer1Ieee8021Qbb
	PfcClass6() int32
	SetPfcClass6(value int32) Layer1Ieee8021Qbb
	PfcClass7() int32
	SetPfcClass7(value int32) Layer1Ieee8021Qbb
}

// PfcDelay returns a int32
//  The upper limit on the transmit time of a queue after receiving a
//  message to pause a specified priority.
//  A value of 0 or null indicates that pfc delay will not be enabled.
func (obj *layer1Ieee8021Qbb) PfcDelay() int32 {
	return *obj.obj.PfcDelay
}

// SetPfcDelay sets the int32 value in the None object
//  The upper limit on the transmit time of a queue after receiving a
//  message to pause a specified priority.
//  A value of 0 or null indicates that pfc delay will not be enabled.
func (obj *layer1Ieee8021Qbb) SetPfcDelay(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcDelay = &value
	return obj
}

// PfcClass_0 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass0() int32 {
	return *obj.obj.PfcClass_0
}

// SetPfcClass_0 sets the int32 value in the None object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass0(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_0 = &value
	return obj
}

// PfcClass_1 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass1() int32 {
	return *obj.obj.PfcClass_1
}

// SetPfcClass_1 sets the int32 value in the None object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass1(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_1 = &value
	return obj
}

// PfcClass_2 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass2() int32 {
	return *obj.obj.PfcClass_2
}

// SetPfcClass_2 sets the int32 value in the None object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass2(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_2 = &value
	return obj
}

// PfcClass_3 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass3() int32 {
	return *obj.obj.PfcClass_3
}

// SetPfcClass_3 sets the int32 value in the None object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass3(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_3 = &value
	return obj
}

// PfcClass_4 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass4() int32 {
	return *obj.obj.PfcClass_4
}

// SetPfcClass_4 sets the int32 value in the None object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass4(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_4 = &value
	return obj
}

// PfcClass_5 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass5() int32 {
	return *obj.obj.PfcClass_5
}

// SetPfcClass_5 sets the int32 value in the None object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass5(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_5 = &value
	return obj
}

// PfcClass_6 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass6() int32 {
	return *obj.obj.PfcClass_6
}

// SetPfcClass_6 sets the int32 value in the None object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass6(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_6 = &value
	return obj
}

// PfcClass_7 returns a int32
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) PfcClass7() int32 {
	return *obj.obj.PfcClass_7
}

// SetPfcClass_7 sets the int32 value in the None object
//  The valid values are null, 0 - 7.
//  A null value indicates there is no setting for this pfc class.
func (obj *layer1Ieee8021Qbb) SetPfcClass7(value int32) Layer1Ieee8021Qbb {
	obj.obj.PfcClass_7 = &value
	return obj
}

type layer1Ieee8023X struct {
	obj *snappipb.Layer1Ieee8023X
}

func (obj *layer1Ieee8023X) msg() *snappipb.Layer1Ieee8023X {
	return obj.obj
}

func (obj *layer1Ieee8023X) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1Ieee8023X) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *layer1Ieee8023X) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *layer1Ieee8023X) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type Layer1Ieee8023X interface {
	msg() *snappipb.Layer1Ieee8023X
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}

type captureCustom struct {
	obj *snappipb.CaptureCustom
}

func (obj *captureCustom) msg() *snappipb.CaptureCustom {
	return obj.obj
}

func (obj *captureCustom) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureCustom) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *captureCustom) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureCustom) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type CaptureCustom interface {
	msg() *snappipb.CaptureCustom
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Offset() int32
	SetOffset(value int32) CaptureCustom
	BitLength() int32
	SetBitLength(value int32) CaptureCustom
	Value() string
	SetValue(value string) CaptureCustom
	Mask() string
	SetMask(value string) CaptureCustom
	Negate() bool
	SetNegate(value bool) CaptureCustom
}

// Offset returns a int32
//  The bit offset of field to filter on
func (obj *captureCustom) Offset() int32 {
	return *obj.obj.Offset
}

// SetOffset sets the int32 value in the None object
//  The bit offset of field to filter on
func (obj *captureCustom) SetOffset(value int32) CaptureCustom {
	obj.obj.Offset = &value
	return obj
}

// BitLength returns a int32
//  The bit length of field to filter on
func (obj *captureCustom) BitLength() int32 {
	return *obj.obj.BitLength
}

// SetBitLength sets the int32 value in the None object
//  The bit length of field to filter on
func (obj *captureCustom) SetBitLength(value int32) CaptureCustom {
	obj.obj.BitLength = &value
	return obj
}

// Value returns a string
//  description is TBD
func (obj *captureCustom) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *captureCustom) SetValue(value string) CaptureCustom {
	obj.obj.Value = &value
	return obj
}

// Mask returns a string
//  description is TBD
func (obj *captureCustom) Mask() string {
	return *obj.obj.Mask
}

// SetMask sets the string value in the None object
//  description is TBD
func (obj *captureCustom) SetMask(value string) CaptureCustom {
	obj.obj.Mask = &value
	return obj
}

// Negate returns a bool
//  description is TBD
func (obj *captureCustom) Negate() bool {
	return *obj.obj.Negate
}

// SetNegate sets the bool value in the None object
//  description is TBD
func (obj *captureCustom) SetNegate(value bool) CaptureCustom {
	obj.obj.Negate = &value
	return obj
}

type captureEthernet struct {
	obj *snappipb.CaptureEthernet
}

func (obj *captureEthernet) msg() *snappipb.CaptureEthernet {
	return obj.obj
}

func (obj *captureEthernet) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureEthernet) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *captureEthernet) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureEthernet) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type CaptureEthernet interface {
	msg() *snappipb.CaptureEthernet
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Src() CaptureField
	Dst() CaptureField
	EtherType() CaptureField
	PfcQueue() CaptureField
}

// Src returns a CaptureField
//  description is TBD
func (obj *captureEthernet) Src() CaptureField {
	if obj.obj.Src == nil {
		obj.obj.Src = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Src}

}

// Dst returns a CaptureField
//  description is TBD
func (obj *captureEthernet) Dst() CaptureField {
	if obj.obj.Dst == nil {
		obj.obj.Dst = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Dst}

}

// EtherType returns a CaptureField
//  description is TBD
func (obj *captureEthernet) EtherType() CaptureField {
	if obj.obj.EtherType == nil {
		obj.obj.EtherType = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.EtherType}

}

// PfcQueue returns a CaptureField
//  description is TBD
func (obj *captureEthernet) PfcQueue() CaptureField {
	if obj.obj.PfcQueue == nil {
		obj.obj.PfcQueue = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.PfcQueue}

}

type captureVlan struct {
	obj *snappipb.CaptureVlan
}

func (obj *captureVlan) msg() *snappipb.CaptureVlan {
	return obj.obj
}

func (obj *captureVlan) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureVlan) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *captureVlan) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureVlan) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type CaptureVlan interface {
	msg() *snappipb.CaptureVlan
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Priority() CaptureField
	Cfi() CaptureField
	Id() CaptureField
	Protocol() CaptureField
}

// Priority returns a CaptureField
//  description is TBD
func (obj *captureVlan) Priority() CaptureField {
	if obj.obj.Priority == nil {
		obj.obj.Priority = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Priority}

}

// Cfi returns a CaptureField
//  description is TBD
func (obj *captureVlan) Cfi() CaptureField {
	if obj.obj.Cfi == nil {
		obj.obj.Cfi = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Cfi}

}

// Id returns a CaptureField
//  description is TBD
func (obj *captureVlan) Id() CaptureField {
	if obj.obj.Id == nil {
		obj.obj.Id = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Id}

}

// Protocol returns a CaptureField
//  description is TBD
func (obj *captureVlan) Protocol() CaptureField {
	if obj.obj.Protocol == nil {
		obj.obj.Protocol = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Protocol}

}

type captureIpv4 struct {
	obj *snappipb.CaptureIpv4
}

func (obj *captureIpv4) msg() *snappipb.CaptureIpv4 {
	return obj.obj
}

func (obj *captureIpv4) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureIpv4) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *captureIpv4) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureIpv4) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type CaptureIpv4 interface {
	msg() *snappipb.CaptureIpv4
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Version() CaptureField
	HeaderLength() CaptureField
	Priority() CaptureField
	TotalLength() CaptureField
	Identification() CaptureField
	Reserved() CaptureField
	DontFragment() CaptureField
	MoreFragments() CaptureField
	FragmentOffset() CaptureField
	TimeToLive() CaptureField
	Protocol() CaptureField
	HeaderChecksum() CaptureField
	Src() CaptureField
	Dst() CaptureField
}

// Version returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Version() CaptureField {
	if obj.obj.Version == nil {
		obj.obj.Version = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Version}

}

// HeaderLength returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HeaderLength() CaptureField {
	if obj.obj.HeaderLength == nil {
		obj.obj.HeaderLength = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.HeaderLength}

}

// Priority returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Priority() CaptureField {
	if obj.obj.Priority == nil {
		obj.obj.Priority = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Priority}

}

// TotalLength returns a CaptureField
//  description is TBD
func (obj *captureIpv4) TotalLength() CaptureField {
	if obj.obj.TotalLength == nil {
		obj.obj.TotalLength = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.TotalLength}

}

// Identification returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Identification() CaptureField {
	if obj.obj.Identification == nil {
		obj.obj.Identification = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Identification}

}

// Reserved returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Reserved() CaptureField {
	if obj.obj.Reserved == nil {
		obj.obj.Reserved = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Reserved}

}

// DontFragment returns a CaptureField
//  description is TBD
func (obj *captureIpv4) DontFragment() CaptureField {
	if obj.obj.DontFragment == nil {
		obj.obj.DontFragment = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.DontFragment}

}

// MoreFragments returns a CaptureField
//  description is TBD
func (obj *captureIpv4) MoreFragments() CaptureField {
	if obj.obj.MoreFragments == nil {
		obj.obj.MoreFragments = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.MoreFragments}

}

// FragmentOffset returns a CaptureField
//  description is TBD
func (obj *captureIpv4) FragmentOffset() CaptureField {
	if obj.obj.FragmentOffset == nil {
		obj.obj.FragmentOffset = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.FragmentOffset}

}

// TimeToLive returns a CaptureField
//  description is TBD
func (obj *captureIpv4) TimeToLive() CaptureField {
	if obj.obj.TimeToLive == nil {
		obj.obj.TimeToLive = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.TimeToLive}

}

// Protocol returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Protocol() CaptureField {
	if obj.obj.Protocol == nil {
		obj.obj.Protocol = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Protocol}

}

// HeaderChecksum returns a CaptureField
//  description is TBD
func (obj *captureIpv4) HeaderChecksum() CaptureField {
	if obj.obj.HeaderChecksum == nil {
		obj.obj.HeaderChecksum = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.HeaderChecksum}

}

// Src returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Src() CaptureField {
	if obj.obj.Src == nil {
		obj.obj.Src = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Src}

}

// Dst returns a CaptureField
//  description is TBD
func (obj *captureIpv4) Dst() CaptureField {
	if obj.obj.Dst == nil {
		obj.obj.Dst = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Dst}

}

type captureIpv6 struct {
	obj *snappipb.CaptureIpv6
}

func (obj *captureIpv6) msg() *snappipb.CaptureIpv6 {
	return obj.obj
}

func (obj *captureIpv6) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureIpv6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *captureIpv6) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureIpv6) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type CaptureIpv6 interface {
	msg() *snappipb.CaptureIpv6
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Version() CaptureField
	TrafficClass() CaptureField
	FlowLabel() CaptureField
	PayloadLength() CaptureField
	NextHeader() CaptureField
	HopLimit() CaptureField
	Src() CaptureField
	Dst() CaptureField
}

// Version returns a CaptureField
//  description is TBD
func (obj *captureIpv6) Version() CaptureField {
	if obj.obj.Version == nil {
		obj.obj.Version = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Version}

}

// TrafficClass returns a CaptureField
//  description is TBD
func (obj *captureIpv6) TrafficClass() CaptureField {
	if obj.obj.TrafficClass == nil {
		obj.obj.TrafficClass = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.TrafficClass}

}

// FlowLabel returns a CaptureField
//  description is TBD
func (obj *captureIpv6) FlowLabel() CaptureField {
	if obj.obj.FlowLabel == nil {
		obj.obj.FlowLabel = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.FlowLabel}

}

// PayloadLength returns a CaptureField
//  description is TBD
func (obj *captureIpv6) PayloadLength() CaptureField {
	if obj.obj.PayloadLength == nil {
		obj.obj.PayloadLength = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.PayloadLength}

}

// NextHeader returns a CaptureField
//  description is TBD
func (obj *captureIpv6) NextHeader() CaptureField {
	if obj.obj.NextHeader == nil {
		obj.obj.NextHeader = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.NextHeader}

}

// HopLimit returns a CaptureField
//  description is TBD
func (obj *captureIpv6) HopLimit() CaptureField {
	if obj.obj.HopLimit == nil {
		obj.obj.HopLimit = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.HopLimit}

}

// Src returns a CaptureField
//  description is TBD
func (obj *captureIpv6) Src() CaptureField {
	if obj.obj.Src == nil {
		obj.obj.Src = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Src}

}

// Dst returns a CaptureField
//  description is TBD
func (obj *captureIpv6) Dst() CaptureField {
	if obj.obj.Dst == nil {
		obj.obj.Dst = &snappipb.CaptureField{}
	}
	return &captureField{obj: obj.obj.Dst}

}

type deviceIpv4 struct {
	obj *snappipb.DeviceIpv4
}

func (obj *deviceIpv4) msg() *snappipb.DeviceIpv4 {
	return obj.obj
}

func (obj *deviceIpv4) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv4) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceIpv4) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv4) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceIpv4 interface {
	msg() *snappipb.DeviceIpv4
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Gateway() string
	SetGateway(value string) DeviceIpv4
	Address() string
	SetAddress(value string) DeviceIpv4
	Prefix() int32
	SetPrefix(value int32) DeviceIpv4
	Bgpv4() DeviceBgpv4
	Name() string
	SetName(value string) DeviceIpv4
}

// Gateway returns a string
//  The IPv4 address of the gateway
func (obj *deviceIpv4) Gateway() string {
	return obj.obj.Gateway
}

// SetGateway sets the string value in the None object
//  The IPv4 address of the gateway
func (obj *deviceIpv4) SetGateway(value string) DeviceIpv4 {
	obj.obj.Gateway = value
	return obj
}

// Address returns a string
//  The IPv4 address
func (obj *deviceIpv4) Address() string {
	return obj.obj.Address
}

// SetAddress sets the string value in the None object
//  The IPv4 address
func (obj *deviceIpv4) SetAddress(value string) DeviceIpv4 {
	obj.obj.Address = value
	return obj
}

// Prefix returns a int32
//  The prefix of the IPv4 address
func (obj *deviceIpv4) Prefix() int32 {
	return *obj.obj.Prefix
}

// SetPrefix sets the int32 value in the None object
//  The prefix of the IPv4 address
func (obj *deviceIpv4) SetPrefix(value int32) DeviceIpv4 {
	obj.obj.Prefix = &value
	return obj
}

// Bgpv4 returns a DeviceBgpv4
//  description is TBD
func (obj *deviceIpv4) Bgpv4() DeviceBgpv4 {
	if obj.obj.Bgpv4 == nil {
		obj.obj.Bgpv4 = &snappipb.DeviceBgpv4{}
	}
	return &deviceBgpv4{obj: obj.obj.Bgpv4}

}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv4) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv4) SetName(value string) DeviceIpv4 {
	obj.obj.Name = value
	return obj
}

type deviceIpv6 struct {
	obj *snappipb.DeviceIpv6
}

func (obj *deviceIpv6) msg() *snappipb.DeviceIpv6 {
	return obj.obj
}

func (obj *deviceIpv6) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceIpv6) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceIpv6) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceIpv6 interface {
	msg() *snappipb.DeviceIpv6
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Gateway() string
	SetGateway(value string) DeviceIpv6
	Address() string
	SetAddress(value string) DeviceIpv6
	Prefix() int32
	SetPrefix(value int32) DeviceIpv6
	Bgpv6() DeviceBgpv6
	Name() string
	SetName(value string) DeviceIpv6
}

// Gateway returns a string
//  The IPv6 gateway address
func (obj *deviceIpv6) Gateway() string {
	return obj.obj.Gateway
}

// SetGateway sets the string value in the None object
//  The IPv6 gateway address
func (obj *deviceIpv6) SetGateway(value string) DeviceIpv6 {
	obj.obj.Gateway = value
	return obj
}

// Address returns a string
//  The IPv6 address.
func (obj *deviceIpv6) Address() string {
	return obj.obj.Address
}

// SetAddress sets the string value in the None object
//  The IPv6 address.
func (obj *deviceIpv6) SetAddress(value string) DeviceIpv6 {
	obj.obj.Address = value
	return obj
}

// Prefix returns a int32
//  The network prefix.
func (obj *deviceIpv6) Prefix() int32 {
	return *obj.obj.Prefix
}

// SetPrefix sets the int32 value in the None object
//  The network prefix.
func (obj *deviceIpv6) SetPrefix(value int32) DeviceIpv6 {
	obj.obj.Prefix = &value
	return obj
}

// Bgpv6 returns a DeviceBgpv6
//  description is TBD
func (obj *deviceIpv6) Bgpv6() DeviceBgpv6 {
	if obj.obj.Bgpv6 == nil {
		obj.obj.Bgpv6 = &snappipb.DeviceBgpv6{}
	}
	return &deviceBgpv6{obj: obj.obj.Bgpv6}

}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv6) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceIpv6) SetName(value string) DeviceIpv6 {
	obj.obj.Name = value
	return obj
}

type deviceVlan struct {
	obj *snappipb.DeviceVlan
}

func (obj *deviceVlan) msg() *snappipb.DeviceVlan {
	return obj.obj
}

func (obj *deviceVlan) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceVlan) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceVlan) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceVlan) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceVlan interface {
	msg() *snappipb.DeviceVlan
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Priority() int32
	SetPriority(value int32) DeviceVlan
	Id() int32
	SetId(value int32) DeviceVlan
	Name() string
	SetName(value string) DeviceVlan
}

// Priority returns a int32
//  Priority code point
func (obj *deviceVlan) Priority() int32 {
	return *obj.obj.Priority
}

// SetPriority sets the int32 value in the None object
//  Priority code point
func (obj *deviceVlan) SetPriority(value int32) DeviceVlan {
	obj.obj.Priority = &value
	return obj
}

// Id returns a int32
//  VLAN identifier
func (obj *deviceVlan) Id() int32 {
	return *obj.obj.Id
}

// SetId sets the int32 value in the None object
//  VLAN identifier
func (obj *deviceVlan) SetId(value int32) DeviceVlan {
	obj.obj.Id = &value
	return obj
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceVlan) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceVlan) SetName(value string) DeviceVlan {
	obj.obj.Name = value
	return obj
}

type flowPort struct {
	obj *snappipb.FlowPort
}

func (obj *flowPort) msg() *snappipb.FlowPort {
	return obj.obj
}

func (obj *flowPort) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowPort) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPort) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowPort interface {
	msg() *snappipb.FlowPort
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	TxName() string
	SetTxName(value string) FlowPort
	RxName() string
	SetRxName(value string) FlowPort
}

// TxName returns a string
//  The unique name of a port that is the transmit port.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *flowPort) TxName() string {
	return obj.obj.TxName
}

// SetTxName sets the string value in the None object
//  The unique name of a port that is the transmit port.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *flowPort) SetTxName(value string) FlowPort {
	obj.obj.TxName = value
	return obj
}

// RxName returns a string
//  The unique name of a port that is the intended receive port.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *flowPort) RxName() string {
	return *obj.obj.RxName
}

// SetRxName sets the string value in the None object
//  The unique name of a port that is the intended receive port.
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Port/properties/name
//  - /components/schemas/Lag/properties/name
//
func (obj *flowPort) SetRxName(value string) FlowPort {
	obj.obj.RxName = &value
	return obj
}

type flowDevice struct {
	obj *snappipb.FlowDevice
}

func (obj *flowDevice) msg() *snappipb.FlowDevice {
	return obj.obj
}

func (obj *flowDevice) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDevice) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowDevice) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDevice) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowDevice interface {
	msg() *snappipb.FlowDevice
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	TxNames() []string
	SetTxNames(value []string) FlowDevice
	RxNames() []string
	SetRxNames(value []string) FlowDevice
}

// TxNames returns a []string
//  TBD
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Bgpv4RouteRange/properties/name
//  - /components/schemas/Device.Bgpv6RouteRange/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Bgpv4RouteRange/properties/name
//  - /components/schemas/Device.Bgpv6RouteRange/properties/name
//
func (obj *flowDevice) TxNames() []string {
	return obj.obj.TxNames
}

// SetTxNames sets the []string value in the None object
//  TBD
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Bgpv4RouteRange/properties/name
//  - /components/schemas/Device.Bgpv6RouteRange/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Bgpv4RouteRange/properties/name
//  - /components/schemas/Device.Bgpv6RouteRange/properties/name
//
func (obj *flowDevice) SetTxNames(value []string) FlowDevice {
	obj.obj.TxNames = value
	return obj
}

// RxNames returns a []string
//  TBD
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Bgpv4RouteRange/properties/name
//  - /components/schemas/Device.Bgpv6RouteRange/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Bgpv4RouteRange/properties/name
//  - /components/schemas/Device.Bgpv6RouteRange/properties/name
//
func (obj *flowDevice) RxNames() []string {
	return obj.obj.RxNames
}

// SetRxNames sets the []string value in the None object
//  TBD
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Bgpv4RouteRange/properties/name
//  - /components/schemas/Device.Bgpv6RouteRange/properties/name
//
//
//  x-constraint:
//  - /components/schemas/Device.Ethernet/properties/name
//  - /components/schemas/Device.Ipv4/properties/name
//  - /components/schemas/Device.Ipv6/properties/name
//  - /components/schemas/Device.Bgpv4RouteRange/properties/name
//  - /components/schemas/Device.Bgpv6RouteRange/properties/name
//
func (obj *flowDevice) SetRxNames(value []string) FlowDevice {
	obj.obj.RxNames = value
	return obj
}

type flowCustom struct {
	obj *snappipb.FlowCustom
}

func (obj *flowCustom) msg() *snappipb.FlowCustom {
	return obj.obj
}

func (obj *flowCustom) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowCustom) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowCustom) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowCustom) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowCustom interface {
	msg() *snappipb.FlowCustom
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Bytes() string
	SetBytes(value string) FlowCustom
}

// Bytes returns a string
//  A custom packet header defined as a string of hex bytes. The string MUST contain sequence of valid hex bytes. Spaces or colons can be part of the bytes but will be discarded. This packet header can be used in multiple places in the packet.
func (obj *flowCustom) Bytes() string {
	return obj.obj.Bytes
}

// SetBytes sets the string value in the None object
//  A custom packet header defined as a string of hex bytes. The string MUST contain sequence of valid hex bytes. Spaces or colons can be part of the bytes but will be discarded. This packet header can be used in multiple places in the packet.
func (obj *flowCustom) SetBytes(value string) FlowCustom {
	obj.obj.Bytes = value
	return obj
}

type flowEthernet struct {
	obj *snappipb.FlowEthernet
}

func (obj *flowEthernet) msg() *snappipb.FlowEthernet {
	return obj.obj
}

func (obj *flowEthernet) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowEthernet) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowEthernet) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowEthernet) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowEthernet interface {
	msg() *snappipb.FlowEthernet
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Dst() PatternFlowEthernetDst
	Src() PatternFlowEthernetSrc
	EtherType() PatternFlowEthernetEtherType
	PfcQueue() PatternFlowEthernetPfcQueue
}

// Dst returns a PatternFlowEthernetDst
//  description is TBD
func (obj *flowEthernet) Dst() PatternFlowEthernetDst {
	if obj.obj.Dst == nil {
		obj.obj.Dst = &snappipb.PatternFlowEthernetDst{}
	}
	return &patternFlowEthernetDst{obj: obj.obj.Dst}

}

// Src returns a PatternFlowEthernetSrc
//  description is TBD
func (obj *flowEthernet) Src() PatternFlowEthernetSrc {
	if obj.obj.Src == nil {
		obj.obj.Src = &snappipb.PatternFlowEthernetSrc{}
	}
	return &patternFlowEthernetSrc{obj: obj.obj.Src}

}

// EtherType returns a PatternFlowEthernetEtherType
//  description is TBD
func (obj *flowEthernet) EtherType() PatternFlowEthernetEtherType {
	if obj.obj.EtherType == nil {
		obj.obj.EtherType = &snappipb.PatternFlowEthernetEtherType{}
	}
	return &patternFlowEthernetEtherType{obj: obj.obj.EtherType}

}

// PfcQueue returns a PatternFlowEthernetPfcQueue
//  description is TBD
func (obj *flowEthernet) PfcQueue() PatternFlowEthernetPfcQueue {
	if obj.obj.PfcQueue == nil {
		obj.obj.PfcQueue = &snappipb.PatternFlowEthernetPfcQueue{}
	}
	return &patternFlowEthernetPfcQueue{obj: obj.obj.PfcQueue}

}

type flowVlan struct {
	obj *snappipb.FlowVlan
}

func (obj *flowVlan) msg() *snappipb.FlowVlan {
	return obj.obj
}

func (obj *flowVlan) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowVlan) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowVlan) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowVlan) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowVlan interface {
	msg() *snappipb.FlowVlan
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Priority() PatternFlowVlanPriority
	Cfi() PatternFlowVlanCfi
	Id() PatternFlowVlanId
	Tpid() PatternFlowVlanTpid
}

// Priority returns a PatternFlowVlanPriority
//  description is TBD
func (obj *flowVlan) Priority() PatternFlowVlanPriority {
	if obj.obj.Priority == nil {
		obj.obj.Priority = &snappipb.PatternFlowVlanPriority{}
	}
	return &patternFlowVlanPriority{obj: obj.obj.Priority}

}

// Cfi returns a PatternFlowVlanCfi
//  description is TBD
func (obj *flowVlan) Cfi() PatternFlowVlanCfi {
	if obj.obj.Cfi == nil {
		obj.obj.Cfi = &snappipb.PatternFlowVlanCfi{}
	}
	return &patternFlowVlanCfi{obj: obj.obj.Cfi}

}

// Id returns a PatternFlowVlanId
//  description is TBD
func (obj *flowVlan) Id() PatternFlowVlanId {
	if obj.obj.Id == nil {
		obj.obj.Id = &snappipb.PatternFlowVlanId{}
	}
	return &patternFlowVlanId{obj: obj.obj.Id}

}

// Tpid returns a PatternFlowVlanTpid
//  description is TBD
func (obj *flowVlan) Tpid() PatternFlowVlanTpid {
	if obj.obj.Tpid == nil {
		obj.obj.Tpid = &snappipb.PatternFlowVlanTpid{}
	}
	return &patternFlowVlanTpid{obj: obj.obj.Tpid}

}

type flowVxlan struct {
	obj *snappipb.FlowVxlan
}

func (obj *flowVxlan) msg() *snappipb.FlowVxlan {
	return obj.obj
}

func (obj *flowVxlan) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowVxlan) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowVxlan) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowVxlan) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowVxlan interface {
	msg() *snappipb.FlowVxlan
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Flags() PatternFlowVxlanFlags
	Reserved0() PatternFlowVxlanReserved0
	Vni() PatternFlowVxlanVni
	Reserved1() PatternFlowVxlanReserved1
}

// Flags returns a PatternFlowVxlanFlags
//  description is TBD
func (obj *flowVxlan) Flags() PatternFlowVxlanFlags {
	if obj.obj.Flags == nil {
		obj.obj.Flags = &snappipb.PatternFlowVxlanFlags{}
	}
	return &patternFlowVxlanFlags{obj: obj.obj.Flags}

}

// Reserved0 returns a PatternFlowVxlanReserved0
//  description is TBD
func (obj *flowVxlan) Reserved0() PatternFlowVxlanReserved0 {
	if obj.obj.Reserved0 == nil {
		obj.obj.Reserved0 = &snappipb.PatternFlowVxlanReserved0{}
	}
	return &patternFlowVxlanReserved0{obj: obj.obj.Reserved0}

}

// Vni returns a PatternFlowVxlanVni
//  description is TBD
func (obj *flowVxlan) Vni() PatternFlowVxlanVni {
	if obj.obj.Vni == nil {
		obj.obj.Vni = &snappipb.PatternFlowVxlanVni{}
	}
	return &patternFlowVxlanVni{obj: obj.obj.Vni}

}

// Reserved1 returns a PatternFlowVxlanReserved1
//  description is TBD
func (obj *flowVxlan) Reserved1() PatternFlowVxlanReserved1 {
	if obj.obj.Reserved1 == nil {
		obj.obj.Reserved1 = &snappipb.PatternFlowVxlanReserved1{}
	}
	return &patternFlowVxlanReserved1{obj: obj.obj.Reserved1}

}

type flowIpv4 struct {
	obj *snappipb.FlowIpv4
}

func (obj *flowIpv4) msg() *snappipb.FlowIpv4 {
	return obj.obj
}

func (obj *flowIpv4) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowIpv4) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowIpv4 interface {
	msg() *snappipb.FlowIpv4
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Version() PatternFlowIpv4Version
	HeaderLength() PatternFlowIpv4HeaderLength
	Priority() FlowIpv4Priority
	TotalLength() PatternFlowIpv4TotalLength
	Identification() PatternFlowIpv4Identification
	Reserved() PatternFlowIpv4Reserved
	DontFragment() PatternFlowIpv4DontFragment
	MoreFragments() PatternFlowIpv4MoreFragments
	FragmentOffset() PatternFlowIpv4FragmentOffset
	TimeToLive() PatternFlowIpv4TimeToLive
	Protocol() PatternFlowIpv4Protocol
	HeaderChecksum() PatternFlowIpv4HeaderChecksum
	Src() PatternFlowIpv4Src
	Dst() PatternFlowIpv4Dst
}

// Version returns a PatternFlowIpv4Version
//  description is TBD
func (obj *flowIpv4) Version() PatternFlowIpv4Version {
	if obj.obj.Version == nil {
		obj.obj.Version = &snappipb.PatternFlowIpv4Version{}
	}
	return &patternFlowIpv4Version{obj: obj.obj.Version}

}

// HeaderLength returns a PatternFlowIpv4HeaderLength
//  description is TBD
func (obj *flowIpv4) HeaderLength() PatternFlowIpv4HeaderLength {
	if obj.obj.HeaderLength == nil {
		obj.obj.HeaderLength = &snappipb.PatternFlowIpv4HeaderLength{}
	}
	return &patternFlowIpv4HeaderLength{obj: obj.obj.HeaderLength}

}

// Priority returns a FlowIpv4Priority
//  description is TBD
func (obj *flowIpv4) Priority() FlowIpv4Priority {
	if obj.obj.Priority == nil {
		obj.obj.Priority = &snappipb.FlowIpv4Priority{}
	}
	return &flowIpv4Priority{obj: obj.obj.Priority}

}

// TotalLength returns a PatternFlowIpv4TotalLength
//  description is TBD
func (obj *flowIpv4) TotalLength() PatternFlowIpv4TotalLength {
	if obj.obj.TotalLength == nil {
		obj.obj.TotalLength = &snappipb.PatternFlowIpv4TotalLength{}
	}
	return &patternFlowIpv4TotalLength{obj: obj.obj.TotalLength}

}

// Identification returns a PatternFlowIpv4Identification
//  description is TBD
func (obj *flowIpv4) Identification() PatternFlowIpv4Identification {
	if obj.obj.Identification == nil {
		obj.obj.Identification = &snappipb.PatternFlowIpv4Identification{}
	}
	return &patternFlowIpv4Identification{obj: obj.obj.Identification}

}

// Reserved returns a PatternFlowIpv4Reserved
//  description is TBD
func (obj *flowIpv4) Reserved() PatternFlowIpv4Reserved {
	if obj.obj.Reserved == nil {
		obj.obj.Reserved = &snappipb.PatternFlowIpv4Reserved{}
	}
	return &patternFlowIpv4Reserved{obj: obj.obj.Reserved}

}

// DontFragment returns a PatternFlowIpv4DontFragment
//  description is TBD
func (obj *flowIpv4) DontFragment() PatternFlowIpv4DontFragment {
	if obj.obj.DontFragment == nil {
		obj.obj.DontFragment = &snappipb.PatternFlowIpv4DontFragment{}
	}
	return &patternFlowIpv4DontFragment{obj: obj.obj.DontFragment}

}

// MoreFragments returns a PatternFlowIpv4MoreFragments
//  description is TBD
func (obj *flowIpv4) MoreFragments() PatternFlowIpv4MoreFragments {
	if obj.obj.MoreFragments == nil {
		obj.obj.MoreFragments = &snappipb.PatternFlowIpv4MoreFragments{}
	}
	return &patternFlowIpv4MoreFragments{obj: obj.obj.MoreFragments}

}

// FragmentOffset returns a PatternFlowIpv4FragmentOffset
//  description is TBD
func (obj *flowIpv4) FragmentOffset() PatternFlowIpv4FragmentOffset {
	if obj.obj.FragmentOffset == nil {
		obj.obj.FragmentOffset = &snappipb.PatternFlowIpv4FragmentOffset{}
	}
	return &patternFlowIpv4FragmentOffset{obj: obj.obj.FragmentOffset}

}

// TimeToLive returns a PatternFlowIpv4TimeToLive
//  description is TBD
func (obj *flowIpv4) TimeToLive() PatternFlowIpv4TimeToLive {
	if obj.obj.TimeToLive == nil {
		obj.obj.TimeToLive = &snappipb.PatternFlowIpv4TimeToLive{}
	}
	return &patternFlowIpv4TimeToLive{obj: obj.obj.TimeToLive}

}

// Protocol returns a PatternFlowIpv4Protocol
//  description is TBD
func (obj *flowIpv4) Protocol() PatternFlowIpv4Protocol {
	if obj.obj.Protocol == nil {
		obj.obj.Protocol = &snappipb.PatternFlowIpv4Protocol{}
	}
	return &patternFlowIpv4Protocol{obj: obj.obj.Protocol}

}

// HeaderChecksum returns a PatternFlowIpv4HeaderChecksum
//  description is TBD
func (obj *flowIpv4) HeaderChecksum() PatternFlowIpv4HeaderChecksum {
	if obj.obj.HeaderChecksum == nil {
		obj.obj.HeaderChecksum = &snappipb.PatternFlowIpv4HeaderChecksum{}
	}
	return &patternFlowIpv4HeaderChecksum{obj: obj.obj.HeaderChecksum}

}

// Src returns a PatternFlowIpv4Src
//  description is TBD
func (obj *flowIpv4) Src() PatternFlowIpv4Src {
	if obj.obj.Src == nil {
		obj.obj.Src = &snappipb.PatternFlowIpv4Src{}
	}
	return &patternFlowIpv4Src{obj: obj.obj.Src}

}

// Dst returns a PatternFlowIpv4Dst
//  description is TBD
func (obj *flowIpv4) Dst() PatternFlowIpv4Dst {
	if obj.obj.Dst == nil {
		obj.obj.Dst = &snappipb.PatternFlowIpv4Dst{}
	}
	return &patternFlowIpv4Dst{obj: obj.obj.Dst}

}

type flowIpv6 struct {
	obj *snappipb.FlowIpv6
}

func (obj *flowIpv6) msg() *snappipb.FlowIpv6 {
	return obj.obj
}

func (obj *flowIpv6) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowIpv6) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv6) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowIpv6 interface {
	msg() *snappipb.FlowIpv6
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Version() PatternFlowIpv6Version
	TrafficClass() PatternFlowIpv6TrafficClass
	FlowLabel() PatternFlowIpv6FlowLabel
	PayloadLength() PatternFlowIpv6PayloadLength
	NextHeader() PatternFlowIpv6NextHeader
	HopLimit() PatternFlowIpv6HopLimit
	Src() PatternFlowIpv6Src
	Dst() PatternFlowIpv6Dst
}

// Version returns a PatternFlowIpv6Version
//  description is TBD
func (obj *flowIpv6) Version() PatternFlowIpv6Version {
	if obj.obj.Version == nil {
		obj.obj.Version = &snappipb.PatternFlowIpv6Version{}
	}
	return &patternFlowIpv6Version{obj: obj.obj.Version}

}

// TrafficClass returns a PatternFlowIpv6TrafficClass
//  description is TBD
func (obj *flowIpv6) TrafficClass() PatternFlowIpv6TrafficClass {
	if obj.obj.TrafficClass == nil {
		obj.obj.TrafficClass = &snappipb.PatternFlowIpv6TrafficClass{}
	}
	return &patternFlowIpv6TrafficClass{obj: obj.obj.TrafficClass}

}

// FlowLabel returns a PatternFlowIpv6FlowLabel
//  description is TBD
func (obj *flowIpv6) FlowLabel() PatternFlowIpv6FlowLabel {
	if obj.obj.FlowLabel == nil {
		obj.obj.FlowLabel = &snappipb.PatternFlowIpv6FlowLabel{}
	}
	return &patternFlowIpv6FlowLabel{obj: obj.obj.FlowLabel}

}

// PayloadLength returns a PatternFlowIpv6PayloadLength
//  description is TBD
func (obj *flowIpv6) PayloadLength() PatternFlowIpv6PayloadLength {
	if obj.obj.PayloadLength == nil {
		obj.obj.PayloadLength = &snappipb.PatternFlowIpv6PayloadLength{}
	}
	return &patternFlowIpv6PayloadLength{obj: obj.obj.PayloadLength}

}

// NextHeader returns a PatternFlowIpv6NextHeader
//  description is TBD
func (obj *flowIpv6) NextHeader() PatternFlowIpv6NextHeader {
	if obj.obj.NextHeader == nil {
		obj.obj.NextHeader = &snappipb.PatternFlowIpv6NextHeader{}
	}
	return &patternFlowIpv6NextHeader{obj: obj.obj.NextHeader}

}

// HopLimit returns a PatternFlowIpv6HopLimit
//  description is TBD
func (obj *flowIpv6) HopLimit() PatternFlowIpv6HopLimit {
	if obj.obj.HopLimit == nil {
		obj.obj.HopLimit = &snappipb.PatternFlowIpv6HopLimit{}
	}
	return &patternFlowIpv6HopLimit{obj: obj.obj.HopLimit}

}

// Src returns a PatternFlowIpv6Src
//  description is TBD
func (obj *flowIpv6) Src() PatternFlowIpv6Src {
	if obj.obj.Src == nil {
		obj.obj.Src = &snappipb.PatternFlowIpv6Src{}
	}
	return &patternFlowIpv6Src{obj: obj.obj.Src}

}

// Dst returns a PatternFlowIpv6Dst
//  description is TBD
func (obj *flowIpv6) Dst() PatternFlowIpv6Dst {
	if obj.obj.Dst == nil {
		obj.obj.Dst = &snappipb.PatternFlowIpv6Dst{}
	}
	return &patternFlowIpv6Dst{obj: obj.obj.Dst}

}

type flowPfcPause struct {
	obj *snappipb.FlowPfcPause
}

func (obj *flowPfcPause) msg() *snappipb.FlowPfcPause {
	return obj.obj
}

func (obj *flowPfcPause) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPfcPause) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowPfcPause) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPfcPause) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowPfcPause interface {
	msg() *snappipb.FlowPfcPause
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Dst() PatternFlowPfcPauseDst
	Src() PatternFlowPfcPauseSrc
	EtherType() PatternFlowPfcPauseEtherType
	ControlOpCode() PatternFlowPfcPauseControlOpCode
	ClassEnableVector() PatternFlowPfcPauseClassEnableVector
	PauseClass0() PatternFlowPfcPausePauseClass0
	PauseClass1() PatternFlowPfcPausePauseClass1
	PauseClass2() PatternFlowPfcPausePauseClass2
	PauseClass3() PatternFlowPfcPausePauseClass3
	PauseClass4() PatternFlowPfcPausePauseClass4
	PauseClass5() PatternFlowPfcPausePauseClass5
	PauseClass6() PatternFlowPfcPausePauseClass6
	PauseClass7() PatternFlowPfcPausePauseClass7
}

// Dst returns a PatternFlowPfcPauseDst
//  description is TBD
func (obj *flowPfcPause) Dst() PatternFlowPfcPauseDst {
	if obj.obj.Dst == nil {
		obj.obj.Dst = &snappipb.PatternFlowPfcPauseDst{}
	}
	return &patternFlowPfcPauseDst{obj: obj.obj.Dst}

}

// Src returns a PatternFlowPfcPauseSrc
//  description is TBD
func (obj *flowPfcPause) Src() PatternFlowPfcPauseSrc {
	if obj.obj.Src == nil {
		obj.obj.Src = &snappipb.PatternFlowPfcPauseSrc{}
	}
	return &patternFlowPfcPauseSrc{obj: obj.obj.Src}

}

// EtherType returns a PatternFlowPfcPauseEtherType
//  description is TBD
func (obj *flowPfcPause) EtherType() PatternFlowPfcPauseEtherType {
	if obj.obj.EtherType == nil {
		obj.obj.EtherType = &snappipb.PatternFlowPfcPauseEtherType{}
	}
	return &patternFlowPfcPauseEtherType{obj: obj.obj.EtherType}

}

// ControlOpCode returns a PatternFlowPfcPauseControlOpCode
//  description is TBD
func (obj *flowPfcPause) ControlOpCode() PatternFlowPfcPauseControlOpCode {
	if obj.obj.ControlOpCode == nil {
		obj.obj.ControlOpCode = &snappipb.PatternFlowPfcPauseControlOpCode{}
	}
	return &patternFlowPfcPauseControlOpCode{obj: obj.obj.ControlOpCode}

}

// ClassEnableVector returns a PatternFlowPfcPauseClassEnableVector
//  description is TBD
func (obj *flowPfcPause) ClassEnableVector() PatternFlowPfcPauseClassEnableVector {
	if obj.obj.ClassEnableVector == nil {
		obj.obj.ClassEnableVector = &snappipb.PatternFlowPfcPauseClassEnableVector{}
	}
	return &patternFlowPfcPauseClassEnableVector{obj: obj.obj.ClassEnableVector}

}

// PauseClass_0 returns a PatternFlowPfcPausePauseClass0
//  description is TBD
func (obj *flowPfcPause) PauseClass0() PatternFlowPfcPausePauseClass0 {
	if obj.obj.PauseClass_0 == nil {
		obj.obj.PauseClass_0 = &snappipb.PatternFlowPfcPausePauseClass0{}
	}
	return &patternFlowPfcPausePauseClass0{obj: obj.obj.PauseClass_0}

}

// PauseClass_1 returns a PatternFlowPfcPausePauseClass1
//  description is TBD
func (obj *flowPfcPause) PauseClass1() PatternFlowPfcPausePauseClass1 {
	if obj.obj.PauseClass_1 == nil {
		obj.obj.PauseClass_1 = &snappipb.PatternFlowPfcPausePauseClass1{}
	}
	return &patternFlowPfcPausePauseClass1{obj: obj.obj.PauseClass_1}

}

// PauseClass_2 returns a PatternFlowPfcPausePauseClass2
//  description is TBD
func (obj *flowPfcPause) PauseClass2() PatternFlowPfcPausePauseClass2 {
	if obj.obj.PauseClass_2 == nil {
		obj.obj.PauseClass_2 = &snappipb.PatternFlowPfcPausePauseClass2{}
	}
	return &patternFlowPfcPausePauseClass2{obj: obj.obj.PauseClass_2}

}

// PauseClass_3 returns a PatternFlowPfcPausePauseClass3
//  description is TBD
func (obj *flowPfcPause) PauseClass3() PatternFlowPfcPausePauseClass3 {
	if obj.obj.PauseClass_3 == nil {
		obj.obj.PauseClass_3 = &snappipb.PatternFlowPfcPausePauseClass3{}
	}
	return &patternFlowPfcPausePauseClass3{obj: obj.obj.PauseClass_3}

}

// PauseClass_4 returns a PatternFlowPfcPausePauseClass4
//  description is TBD
func (obj *flowPfcPause) PauseClass4() PatternFlowPfcPausePauseClass4 {
	if obj.obj.PauseClass_4 == nil {
		obj.obj.PauseClass_4 = &snappipb.PatternFlowPfcPausePauseClass4{}
	}
	return &patternFlowPfcPausePauseClass4{obj: obj.obj.PauseClass_4}

}

// PauseClass_5 returns a PatternFlowPfcPausePauseClass5
//  description is TBD
func (obj *flowPfcPause) PauseClass5() PatternFlowPfcPausePauseClass5 {
	if obj.obj.PauseClass_5 == nil {
		obj.obj.PauseClass_5 = &snappipb.PatternFlowPfcPausePauseClass5{}
	}
	return &patternFlowPfcPausePauseClass5{obj: obj.obj.PauseClass_5}

}

// PauseClass_6 returns a PatternFlowPfcPausePauseClass6
//  description is TBD
func (obj *flowPfcPause) PauseClass6() PatternFlowPfcPausePauseClass6 {
	if obj.obj.PauseClass_6 == nil {
		obj.obj.PauseClass_6 = &snappipb.PatternFlowPfcPausePauseClass6{}
	}
	return &patternFlowPfcPausePauseClass6{obj: obj.obj.PauseClass_6}

}

// PauseClass_7 returns a PatternFlowPfcPausePauseClass7
//  description is TBD
func (obj *flowPfcPause) PauseClass7() PatternFlowPfcPausePauseClass7 {
	if obj.obj.PauseClass_7 == nil {
		obj.obj.PauseClass_7 = &snappipb.PatternFlowPfcPausePauseClass7{}
	}
	return &patternFlowPfcPausePauseClass7{obj: obj.obj.PauseClass_7}

}

type flowEthernetPause struct {
	obj *snappipb.FlowEthernetPause
}

func (obj *flowEthernetPause) msg() *snappipb.FlowEthernetPause {
	return obj.obj
}

func (obj *flowEthernetPause) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowEthernetPause) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowEthernetPause) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowEthernetPause) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowEthernetPause interface {
	msg() *snappipb.FlowEthernetPause
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Dst() PatternFlowEthernetPauseDst
	Src() PatternFlowEthernetPauseSrc
	EtherType() PatternFlowEthernetPauseEtherType
	ControlOpCode() PatternFlowEthernetPauseControlOpCode
	Time() PatternFlowEthernetPauseTime
}

// Dst returns a PatternFlowEthernetPauseDst
//  description is TBD
func (obj *flowEthernetPause) Dst() PatternFlowEthernetPauseDst {
	if obj.obj.Dst == nil {
		obj.obj.Dst = &snappipb.PatternFlowEthernetPauseDst{}
	}
	return &patternFlowEthernetPauseDst{obj: obj.obj.Dst}

}

// Src returns a PatternFlowEthernetPauseSrc
//  description is TBD
func (obj *flowEthernetPause) Src() PatternFlowEthernetPauseSrc {
	if obj.obj.Src == nil {
		obj.obj.Src = &snappipb.PatternFlowEthernetPauseSrc{}
	}
	return &patternFlowEthernetPauseSrc{obj: obj.obj.Src}

}

// EtherType returns a PatternFlowEthernetPauseEtherType
//  description is TBD
func (obj *flowEthernetPause) EtherType() PatternFlowEthernetPauseEtherType {
	if obj.obj.EtherType == nil {
		obj.obj.EtherType = &snappipb.PatternFlowEthernetPauseEtherType{}
	}
	return &patternFlowEthernetPauseEtherType{obj: obj.obj.EtherType}

}

// ControlOpCode returns a PatternFlowEthernetPauseControlOpCode
//  description is TBD
func (obj *flowEthernetPause) ControlOpCode() PatternFlowEthernetPauseControlOpCode {
	if obj.obj.ControlOpCode == nil {
		obj.obj.ControlOpCode = &snappipb.PatternFlowEthernetPauseControlOpCode{}
	}
	return &patternFlowEthernetPauseControlOpCode{obj: obj.obj.ControlOpCode}

}

// Time returns a PatternFlowEthernetPauseTime
//  description is TBD
func (obj *flowEthernetPause) Time() PatternFlowEthernetPauseTime {
	if obj.obj.Time == nil {
		obj.obj.Time = &snappipb.PatternFlowEthernetPauseTime{}
	}
	return &patternFlowEthernetPauseTime{obj: obj.obj.Time}

}

type flowTcp struct {
	obj *snappipb.FlowTcp
}

func (obj *flowTcp) msg() *snappipb.FlowTcp {
	return obj.obj
}

func (obj *flowTcp) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowTcp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowTcp) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowTcp) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowTcp interface {
	msg() *snappipb.FlowTcp
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	SrcPort() PatternFlowTcpSrcPort
	DstPort() PatternFlowTcpDstPort
	SeqNum() PatternFlowTcpSeqNum
	AckNum() PatternFlowTcpAckNum
	DataOffset() PatternFlowTcpDataOffset
	EcnNs() PatternFlowTcpEcnNs
	EcnCwr() PatternFlowTcpEcnCwr
	EcnEcho() PatternFlowTcpEcnEcho
	CtlUrg() PatternFlowTcpCtlUrg
	CtlAck() PatternFlowTcpCtlAck
	CtlPsh() PatternFlowTcpCtlPsh
	CtlRst() PatternFlowTcpCtlRst
	CtlSyn() PatternFlowTcpCtlSyn
	CtlFin() PatternFlowTcpCtlFin
	Window() PatternFlowTcpWindow
}

// SrcPort returns a PatternFlowTcpSrcPort
//  description is TBD
func (obj *flowTcp) SrcPort() PatternFlowTcpSrcPort {
	if obj.obj.SrcPort == nil {
		obj.obj.SrcPort = &snappipb.PatternFlowTcpSrcPort{}
	}
	return &patternFlowTcpSrcPort{obj: obj.obj.SrcPort}

}

// DstPort returns a PatternFlowTcpDstPort
//  description is TBD
func (obj *flowTcp) DstPort() PatternFlowTcpDstPort {
	if obj.obj.DstPort == nil {
		obj.obj.DstPort = &snappipb.PatternFlowTcpDstPort{}
	}
	return &patternFlowTcpDstPort{obj: obj.obj.DstPort}

}

// SeqNum returns a PatternFlowTcpSeqNum
//  description is TBD
func (obj *flowTcp) SeqNum() PatternFlowTcpSeqNum {
	if obj.obj.SeqNum == nil {
		obj.obj.SeqNum = &snappipb.PatternFlowTcpSeqNum{}
	}
	return &patternFlowTcpSeqNum{obj: obj.obj.SeqNum}

}

// AckNum returns a PatternFlowTcpAckNum
//  description is TBD
func (obj *flowTcp) AckNum() PatternFlowTcpAckNum {
	if obj.obj.AckNum == nil {
		obj.obj.AckNum = &snappipb.PatternFlowTcpAckNum{}
	}
	return &patternFlowTcpAckNum{obj: obj.obj.AckNum}

}

// DataOffset returns a PatternFlowTcpDataOffset
//  description is TBD
func (obj *flowTcp) DataOffset() PatternFlowTcpDataOffset {
	if obj.obj.DataOffset == nil {
		obj.obj.DataOffset = &snappipb.PatternFlowTcpDataOffset{}
	}
	return &patternFlowTcpDataOffset{obj: obj.obj.DataOffset}

}

// EcnNs returns a PatternFlowTcpEcnNs
//  description is TBD
func (obj *flowTcp) EcnNs() PatternFlowTcpEcnNs {
	if obj.obj.EcnNs == nil {
		obj.obj.EcnNs = &snappipb.PatternFlowTcpEcnNs{}
	}
	return &patternFlowTcpEcnNs{obj: obj.obj.EcnNs}

}

// EcnCwr returns a PatternFlowTcpEcnCwr
//  description is TBD
func (obj *flowTcp) EcnCwr() PatternFlowTcpEcnCwr {
	if obj.obj.EcnCwr == nil {
		obj.obj.EcnCwr = &snappipb.PatternFlowTcpEcnCwr{}
	}
	return &patternFlowTcpEcnCwr{obj: obj.obj.EcnCwr}

}

// EcnEcho returns a PatternFlowTcpEcnEcho
//  description is TBD
func (obj *flowTcp) EcnEcho() PatternFlowTcpEcnEcho {
	if obj.obj.EcnEcho == nil {
		obj.obj.EcnEcho = &snappipb.PatternFlowTcpEcnEcho{}
	}
	return &patternFlowTcpEcnEcho{obj: obj.obj.EcnEcho}

}

// CtlUrg returns a PatternFlowTcpCtlUrg
//  description is TBD
func (obj *flowTcp) CtlUrg() PatternFlowTcpCtlUrg {
	if obj.obj.CtlUrg == nil {
		obj.obj.CtlUrg = &snappipb.PatternFlowTcpCtlUrg{}
	}
	return &patternFlowTcpCtlUrg{obj: obj.obj.CtlUrg}

}

// CtlAck returns a PatternFlowTcpCtlAck
//  description is TBD
func (obj *flowTcp) CtlAck() PatternFlowTcpCtlAck {
	if obj.obj.CtlAck == nil {
		obj.obj.CtlAck = &snappipb.PatternFlowTcpCtlAck{}
	}
	return &patternFlowTcpCtlAck{obj: obj.obj.CtlAck}

}

// CtlPsh returns a PatternFlowTcpCtlPsh
//  description is TBD
func (obj *flowTcp) CtlPsh() PatternFlowTcpCtlPsh {
	if obj.obj.CtlPsh == nil {
		obj.obj.CtlPsh = &snappipb.PatternFlowTcpCtlPsh{}
	}
	return &patternFlowTcpCtlPsh{obj: obj.obj.CtlPsh}

}

// CtlRst returns a PatternFlowTcpCtlRst
//  description is TBD
func (obj *flowTcp) CtlRst() PatternFlowTcpCtlRst {
	if obj.obj.CtlRst == nil {
		obj.obj.CtlRst = &snappipb.PatternFlowTcpCtlRst{}
	}
	return &patternFlowTcpCtlRst{obj: obj.obj.CtlRst}

}

// CtlSyn returns a PatternFlowTcpCtlSyn
//  description is TBD
func (obj *flowTcp) CtlSyn() PatternFlowTcpCtlSyn {
	if obj.obj.CtlSyn == nil {
		obj.obj.CtlSyn = &snappipb.PatternFlowTcpCtlSyn{}
	}
	return &patternFlowTcpCtlSyn{obj: obj.obj.CtlSyn}

}

// CtlFin returns a PatternFlowTcpCtlFin
//  description is TBD
func (obj *flowTcp) CtlFin() PatternFlowTcpCtlFin {
	if obj.obj.CtlFin == nil {
		obj.obj.CtlFin = &snappipb.PatternFlowTcpCtlFin{}
	}
	return &patternFlowTcpCtlFin{obj: obj.obj.CtlFin}

}

// Window returns a PatternFlowTcpWindow
//  description is TBD
func (obj *flowTcp) Window() PatternFlowTcpWindow {
	if obj.obj.Window == nil {
		obj.obj.Window = &snappipb.PatternFlowTcpWindow{}
	}
	return &patternFlowTcpWindow{obj: obj.obj.Window}

}

type flowUdp struct {
	obj *snappipb.FlowUdp
}

func (obj *flowUdp) msg() *snappipb.FlowUdp {
	return obj.obj
}

func (obj *flowUdp) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowUdp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowUdp) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowUdp) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowUdp interface {
	msg() *snappipb.FlowUdp
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	SrcPort() PatternFlowUdpSrcPort
	DstPort() PatternFlowUdpDstPort
	Length() PatternFlowUdpLength
	Checksum() PatternFlowUdpChecksum
}

// SrcPort returns a PatternFlowUdpSrcPort
//  description is TBD
func (obj *flowUdp) SrcPort() PatternFlowUdpSrcPort {
	if obj.obj.SrcPort == nil {
		obj.obj.SrcPort = &snappipb.PatternFlowUdpSrcPort{}
	}
	return &patternFlowUdpSrcPort{obj: obj.obj.SrcPort}

}

// DstPort returns a PatternFlowUdpDstPort
//  description is TBD
func (obj *flowUdp) DstPort() PatternFlowUdpDstPort {
	if obj.obj.DstPort == nil {
		obj.obj.DstPort = &snappipb.PatternFlowUdpDstPort{}
	}
	return &patternFlowUdpDstPort{obj: obj.obj.DstPort}

}

// Length returns a PatternFlowUdpLength
//  description is TBD
func (obj *flowUdp) Length() PatternFlowUdpLength {
	if obj.obj.Length == nil {
		obj.obj.Length = &snappipb.PatternFlowUdpLength{}
	}
	return &patternFlowUdpLength{obj: obj.obj.Length}

}

// Checksum returns a PatternFlowUdpChecksum
//  description is TBD
func (obj *flowUdp) Checksum() PatternFlowUdpChecksum {
	if obj.obj.Checksum == nil {
		obj.obj.Checksum = &snappipb.PatternFlowUdpChecksum{}
	}
	return &patternFlowUdpChecksum{obj: obj.obj.Checksum}

}

type flowGre struct {
	obj *snappipb.FlowGre
}

func (obj *flowGre) msg() *snappipb.FlowGre {
	return obj.obj
}

func (obj *flowGre) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGre) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowGre) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGre) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowGre interface {
	msg() *snappipb.FlowGre
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	ChecksumPresent() PatternFlowGreChecksumPresent
	Reserved0() PatternFlowGreReserved0
	Version() PatternFlowGreVersion
	Protocol() PatternFlowGreProtocol
	Checksum() PatternFlowGreChecksum
	Reserved1() PatternFlowGreReserved1
}

// ChecksumPresent returns a PatternFlowGreChecksumPresent
//  description is TBD
func (obj *flowGre) ChecksumPresent() PatternFlowGreChecksumPresent {
	if obj.obj.ChecksumPresent == nil {
		obj.obj.ChecksumPresent = &snappipb.PatternFlowGreChecksumPresent{}
	}
	return &patternFlowGreChecksumPresent{obj: obj.obj.ChecksumPresent}

}

// Reserved0 returns a PatternFlowGreReserved0
//  description is TBD
func (obj *flowGre) Reserved0() PatternFlowGreReserved0 {
	if obj.obj.Reserved0 == nil {
		obj.obj.Reserved0 = &snappipb.PatternFlowGreReserved0{}
	}
	return &patternFlowGreReserved0{obj: obj.obj.Reserved0}

}

// Version returns a PatternFlowGreVersion
//  description is TBD
func (obj *flowGre) Version() PatternFlowGreVersion {
	if obj.obj.Version == nil {
		obj.obj.Version = &snappipb.PatternFlowGreVersion{}
	}
	return &patternFlowGreVersion{obj: obj.obj.Version}

}

// Protocol returns a PatternFlowGreProtocol
//  description is TBD
func (obj *flowGre) Protocol() PatternFlowGreProtocol {
	if obj.obj.Protocol == nil {
		obj.obj.Protocol = &snappipb.PatternFlowGreProtocol{}
	}
	return &patternFlowGreProtocol{obj: obj.obj.Protocol}

}

// Checksum returns a PatternFlowGreChecksum
//  description is TBD
func (obj *flowGre) Checksum() PatternFlowGreChecksum {
	if obj.obj.Checksum == nil {
		obj.obj.Checksum = &snappipb.PatternFlowGreChecksum{}
	}
	return &patternFlowGreChecksum{obj: obj.obj.Checksum}

}

// Reserved1 returns a PatternFlowGreReserved1
//  description is TBD
func (obj *flowGre) Reserved1() PatternFlowGreReserved1 {
	if obj.obj.Reserved1 == nil {
		obj.obj.Reserved1 = &snappipb.PatternFlowGreReserved1{}
	}
	return &patternFlowGreReserved1{obj: obj.obj.Reserved1}

}

type flowGtpv1 struct {
	obj *snappipb.FlowGtpv1
}

func (obj *flowGtpv1) msg() *snappipb.FlowGtpv1 {
	return obj.obj
}

func (obj *flowGtpv1) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpv1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowGtpv1) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpv1) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowGtpv1 interface {
	msg() *snappipb.FlowGtpv1
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Version() PatternFlowGtpv1Version
	ProtocolType() PatternFlowGtpv1ProtocolType
	Reserved() PatternFlowGtpv1Reserved
	EFlag() PatternFlowGtpv1EFlag
	SFlag() PatternFlowGtpv1SFlag
	PnFlag() PatternFlowGtpv1PnFlag
	MessageType() PatternFlowGtpv1MessageType
	MessageLength() PatternFlowGtpv1MessageLength
	Teid() PatternFlowGtpv1Teid
	SquenceNumber() PatternFlowGtpv1SquenceNumber
	NPduNumber() PatternFlowGtpv1NPduNumber
	NextExtensionHeaderType() PatternFlowGtpv1NextExtensionHeaderType
	ExtensionHeaders() FlowGtpv1FlowGtpExtensionIter
}

// Version returns a PatternFlowGtpv1Version
//  description is TBD
func (obj *flowGtpv1) Version() PatternFlowGtpv1Version {
	if obj.obj.Version == nil {
		obj.obj.Version = &snappipb.PatternFlowGtpv1Version{}
	}
	return &patternFlowGtpv1Version{obj: obj.obj.Version}

}

// ProtocolType returns a PatternFlowGtpv1ProtocolType
//  description is TBD
func (obj *flowGtpv1) ProtocolType() PatternFlowGtpv1ProtocolType {
	if obj.obj.ProtocolType == nil {
		obj.obj.ProtocolType = &snappipb.PatternFlowGtpv1ProtocolType{}
	}
	return &patternFlowGtpv1ProtocolType{obj: obj.obj.ProtocolType}

}

// Reserved returns a PatternFlowGtpv1Reserved
//  description is TBD
func (obj *flowGtpv1) Reserved() PatternFlowGtpv1Reserved {
	if obj.obj.Reserved == nil {
		obj.obj.Reserved = &snappipb.PatternFlowGtpv1Reserved{}
	}
	return &patternFlowGtpv1Reserved{obj: obj.obj.Reserved}

}

// EFlag returns a PatternFlowGtpv1EFlag
//  description is TBD
func (obj *flowGtpv1) EFlag() PatternFlowGtpv1EFlag {
	if obj.obj.EFlag == nil {
		obj.obj.EFlag = &snappipb.PatternFlowGtpv1EFlag{}
	}
	return &patternFlowGtpv1EFlag{obj: obj.obj.EFlag}

}

// SFlag returns a PatternFlowGtpv1SFlag
//  description is TBD
func (obj *flowGtpv1) SFlag() PatternFlowGtpv1SFlag {
	if obj.obj.SFlag == nil {
		obj.obj.SFlag = &snappipb.PatternFlowGtpv1SFlag{}
	}
	return &patternFlowGtpv1SFlag{obj: obj.obj.SFlag}

}

// PnFlag returns a PatternFlowGtpv1PnFlag
//  description is TBD
func (obj *flowGtpv1) PnFlag() PatternFlowGtpv1PnFlag {
	if obj.obj.PnFlag == nil {
		obj.obj.PnFlag = &snappipb.PatternFlowGtpv1PnFlag{}
	}
	return &patternFlowGtpv1PnFlag{obj: obj.obj.PnFlag}

}

// MessageType returns a PatternFlowGtpv1MessageType
//  description is TBD
func (obj *flowGtpv1) MessageType() PatternFlowGtpv1MessageType {
	if obj.obj.MessageType == nil {
		obj.obj.MessageType = &snappipb.PatternFlowGtpv1MessageType{}
	}
	return &patternFlowGtpv1MessageType{obj: obj.obj.MessageType}

}

// MessageLength returns a PatternFlowGtpv1MessageLength
//  description is TBD
func (obj *flowGtpv1) MessageLength() PatternFlowGtpv1MessageLength {
	if obj.obj.MessageLength == nil {
		obj.obj.MessageLength = &snappipb.PatternFlowGtpv1MessageLength{}
	}
	return &patternFlowGtpv1MessageLength{obj: obj.obj.MessageLength}

}

// Teid returns a PatternFlowGtpv1Teid
//  description is TBD
func (obj *flowGtpv1) Teid() PatternFlowGtpv1Teid {
	if obj.obj.Teid == nil {
		obj.obj.Teid = &snappipb.PatternFlowGtpv1Teid{}
	}
	return &patternFlowGtpv1Teid{obj: obj.obj.Teid}

}

// SquenceNumber returns a PatternFlowGtpv1SquenceNumber
//  description is TBD
func (obj *flowGtpv1) SquenceNumber() PatternFlowGtpv1SquenceNumber {
	if obj.obj.SquenceNumber == nil {
		obj.obj.SquenceNumber = &snappipb.PatternFlowGtpv1SquenceNumber{}
	}
	return &patternFlowGtpv1SquenceNumber{obj: obj.obj.SquenceNumber}

}

// NPduNumber returns a PatternFlowGtpv1NPduNumber
//  description is TBD
func (obj *flowGtpv1) NPduNumber() PatternFlowGtpv1NPduNumber {
	if obj.obj.NPduNumber == nil {
		obj.obj.NPduNumber = &snappipb.PatternFlowGtpv1NPduNumber{}
	}
	return &patternFlowGtpv1NPduNumber{obj: obj.obj.NPduNumber}

}

// NextExtensionHeaderType returns a PatternFlowGtpv1NextExtensionHeaderType
//  description is TBD
func (obj *flowGtpv1) NextExtensionHeaderType() PatternFlowGtpv1NextExtensionHeaderType {
	if obj.obj.NextExtensionHeaderType == nil {
		obj.obj.NextExtensionHeaderType = &snappipb.PatternFlowGtpv1NextExtensionHeaderType{}
	}
	return &patternFlowGtpv1NextExtensionHeaderType{obj: obj.obj.NextExtensionHeaderType}

}

// ExtensionHeaders returns a []FlowGtpExtension
//  A list of optional extension headers.
func (obj *flowGtpv1) ExtensionHeaders() FlowGtpv1FlowGtpExtensionIter {
	if obj.obj.ExtensionHeaders == nil {
		obj.obj.ExtensionHeaders = []*snappipb.FlowGtpExtension{}
	}
	return &flowGtpv1FlowGtpExtensionIter{obj: obj}

}

type flowGtpv1FlowGtpExtensionIter struct {
	obj *flowGtpv1
}

type FlowGtpv1FlowGtpExtensionIter interface {
	Add() FlowGtpExtension
	Items() []FlowGtpExtension
}

func (obj *flowGtpv1FlowGtpExtensionIter) Add() FlowGtpExtension {
	newObj := &snappipb.FlowGtpExtension{}
	obj.obj.obj.ExtensionHeaders = append(obj.obj.obj.ExtensionHeaders, newObj)
	return &flowGtpExtension{obj: newObj}
}

func (obj *flowGtpv1FlowGtpExtensionIter) Items() []FlowGtpExtension {
	slice := []FlowGtpExtension{}
	for _, item := range obj.obj.obj.ExtensionHeaders {
		slice = append(slice, &flowGtpExtension{obj: item})
	}
	return slice
}

type flowGtpv2 struct {
	obj *snappipb.FlowGtpv2
}

func (obj *flowGtpv2) msg() *snappipb.FlowGtpv2 {
	return obj.obj
}

func (obj *flowGtpv2) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpv2) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowGtpv2) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpv2) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowGtpv2 interface {
	msg() *snappipb.FlowGtpv2
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Version() PatternFlowGtpv2Version
	PiggybackingFlag() PatternFlowGtpv2PiggybackingFlag
	TeidFlag() PatternFlowGtpv2TeidFlag
	Spare1() PatternFlowGtpv2Spare1
	MessageType() PatternFlowGtpv2MessageType
	MessageLength() PatternFlowGtpv2MessageLength
	Teid() PatternFlowGtpv2Teid
	SequenceNumber() PatternFlowGtpv2SequenceNumber
	Spare2() PatternFlowGtpv2Spare2
}

// Version returns a PatternFlowGtpv2Version
//  description is TBD
func (obj *flowGtpv2) Version() PatternFlowGtpv2Version {
	if obj.obj.Version == nil {
		obj.obj.Version = &snappipb.PatternFlowGtpv2Version{}
	}
	return &patternFlowGtpv2Version{obj: obj.obj.Version}

}

// PiggybackingFlag returns a PatternFlowGtpv2PiggybackingFlag
//  description is TBD
func (obj *flowGtpv2) PiggybackingFlag() PatternFlowGtpv2PiggybackingFlag {
	if obj.obj.PiggybackingFlag == nil {
		obj.obj.PiggybackingFlag = &snappipb.PatternFlowGtpv2PiggybackingFlag{}
	}
	return &patternFlowGtpv2PiggybackingFlag{obj: obj.obj.PiggybackingFlag}

}

// TeidFlag returns a PatternFlowGtpv2TeidFlag
//  description is TBD
func (obj *flowGtpv2) TeidFlag() PatternFlowGtpv2TeidFlag {
	if obj.obj.TeidFlag == nil {
		obj.obj.TeidFlag = &snappipb.PatternFlowGtpv2TeidFlag{}
	}
	return &patternFlowGtpv2TeidFlag{obj: obj.obj.TeidFlag}

}

// Spare1 returns a PatternFlowGtpv2Spare1
//  description is TBD
func (obj *flowGtpv2) Spare1() PatternFlowGtpv2Spare1 {
	if obj.obj.Spare1 == nil {
		obj.obj.Spare1 = &snappipb.PatternFlowGtpv2Spare1{}
	}
	return &patternFlowGtpv2Spare1{obj: obj.obj.Spare1}

}

// MessageType returns a PatternFlowGtpv2MessageType
//  description is TBD
func (obj *flowGtpv2) MessageType() PatternFlowGtpv2MessageType {
	if obj.obj.MessageType == nil {
		obj.obj.MessageType = &snappipb.PatternFlowGtpv2MessageType{}
	}
	return &patternFlowGtpv2MessageType{obj: obj.obj.MessageType}

}

// MessageLength returns a PatternFlowGtpv2MessageLength
//  description is TBD
func (obj *flowGtpv2) MessageLength() PatternFlowGtpv2MessageLength {
	if obj.obj.MessageLength == nil {
		obj.obj.MessageLength = &snappipb.PatternFlowGtpv2MessageLength{}
	}
	return &patternFlowGtpv2MessageLength{obj: obj.obj.MessageLength}

}

// Teid returns a PatternFlowGtpv2Teid
//  description is TBD
func (obj *flowGtpv2) Teid() PatternFlowGtpv2Teid {
	if obj.obj.Teid == nil {
		obj.obj.Teid = &snappipb.PatternFlowGtpv2Teid{}
	}
	return &patternFlowGtpv2Teid{obj: obj.obj.Teid}

}

// SequenceNumber returns a PatternFlowGtpv2SequenceNumber
//  description is TBD
func (obj *flowGtpv2) SequenceNumber() PatternFlowGtpv2SequenceNumber {
	if obj.obj.SequenceNumber == nil {
		obj.obj.SequenceNumber = &snappipb.PatternFlowGtpv2SequenceNumber{}
	}
	return &patternFlowGtpv2SequenceNumber{obj: obj.obj.SequenceNumber}

}

// Spare2 returns a PatternFlowGtpv2Spare2
//  description is TBD
func (obj *flowGtpv2) Spare2() PatternFlowGtpv2Spare2 {
	if obj.obj.Spare2 == nil {
		obj.obj.Spare2 = &snappipb.PatternFlowGtpv2Spare2{}
	}
	return &patternFlowGtpv2Spare2{obj: obj.obj.Spare2}

}

type flowArp struct {
	obj *snappipb.FlowArp
}

func (obj *flowArp) msg() *snappipb.FlowArp {
	return obj.obj
}

func (obj *flowArp) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowArp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowArp) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowArp) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowArp interface {
	msg() *snappipb.FlowArp
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	HardwareType() PatternFlowArpHardwareType
	ProtocolType() PatternFlowArpProtocolType
	HardwareLength() PatternFlowArpHardwareLength
	ProtocolLength() PatternFlowArpProtocolLength
	Operation() PatternFlowArpOperation
	SenderHardwareAddr() PatternFlowArpSenderHardwareAddr
	SenderProtocolAddr() PatternFlowArpSenderProtocolAddr
	TargetHardwareAddr() PatternFlowArpTargetHardwareAddr
	TargetProtocolAddr() PatternFlowArpTargetProtocolAddr
}

// HardwareType returns a PatternFlowArpHardwareType
//  description is TBD
func (obj *flowArp) HardwareType() PatternFlowArpHardwareType {
	if obj.obj.HardwareType == nil {
		obj.obj.HardwareType = &snappipb.PatternFlowArpHardwareType{}
	}
	return &patternFlowArpHardwareType{obj: obj.obj.HardwareType}

}

// ProtocolType returns a PatternFlowArpProtocolType
//  description is TBD
func (obj *flowArp) ProtocolType() PatternFlowArpProtocolType {
	if obj.obj.ProtocolType == nil {
		obj.obj.ProtocolType = &snappipb.PatternFlowArpProtocolType{}
	}
	return &patternFlowArpProtocolType{obj: obj.obj.ProtocolType}

}

// HardwareLength returns a PatternFlowArpHardwareLength
//  description is TBD
func (obj *flowArp) HardwareLength() PatternFlowArpHardwareLength {
	if obj.obj.HardwareLength == nil {
		obj.obj.HardwareLength = &snappipb.PatternFlowArpHardwareLength{}
	}
	return &patternFlowArpHardwareLength{obj: obj.obj.HardwareLength}

}

// ProtocolLength returns a PatternFlowArpProtocolLength
//  description is TBD
func (obj *flowArp) ProtocolLength() PatternFlowArpProtocolLength {
	if obj.obj.ProtocolLength == nil {
		obj.obj.ProtocolLength = &snappipb.PatternFlowArpProtocolLength{}
	}
	return &patternFlowArpProtocolLength{obj: obj.obj.ProtocolLength}

}

// Operation returns a PatternFlowArpOperation
//  description is TBD
func (obj *flowArp) Operation() PatternFlowArpOperation {
	if obj.obj.Operation == nil {
		obj.obj.Operation = &snappipb.PatternFlowArpOperation{}
	}
	return &patternFlowArpOperation{obj: obj.obj.Operation}

}

// SenderHardwareAddr returns a PatternFlowArpSenderHardwareAddr
//  description is TBD
func (obj *flowArp) SenderHardwareAddr() PatternFlowArpSenderHardwareAddr {
	if obj.obj.SenderHardwareAddr == nil {
		obj.obj.SenderHardwareAddr = &snappipb.PatternFlowArpSenderHardwareAddr{}
	}
	return &patternFlowArpSenderHardwareAddr{obj: obj.obj.SenderHardwareAddr}

}

// SenderProtocolAddr returns a PatternFlowArpSenderProtocolAddr
//  description is TBD
func (obj *flowArp) SenderProtocolAddr() PatternFlowArpSenderProtocolAddr {
	if obj.obj.SenderProtocolAddr == nil {
		obj.obj.SenderProtocolAddr = &snappipb.PatternFlowArpSenderProtocolAddr{}
	}
	return &patternFlowArpSenderProtocolAddr{obj: obj.obj.SenderProtocolAddr}

}

// TargetHardwareAddr returns a PatternFlowArpTargetHardwareAddr
//  description is TBD
func (obj *flowArp) TargetHardwareAddr() PatternFlowArpTargetHardwareAddr {
	if obj.obj.TargetHardwareAddr == nil {
		obj.obj.TargetHardwareAddr = &snappipb.PatternFlowArpTargetHardwareAddr{}
	}
	return &patternFlowArpTargetHardwareAddr{obj: obj.obj.TargetHardwareAddr}

}

// TargetProtocolAddr returns a PatternFlowArpTargetProtocolAddr
//  description is TBD
func (obj *flowArp) TargetProtocolAddr() PatternFlowArpTargetProtocolAddr {
	if obj.obj.TargetProtocolAddr == nil {
		obj.obj.TargetProtocolAddr = &snappipb.PatternFlowArpTargetProtocolAddr{}
	}
	return &patternFlowArpTargetProtocolAddr{obj: obj.obj.TargetProtocolAddr}

}

type flowIcmp struct {
	obj *snappipb.FlowIcmp
}

func (obj *flowIcmp) msg() *snappipb.FlowIcmp {
	return obj.obj
}

func (obj *flowIcmp) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowIcmp) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmp) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowIcmp interface {
	msg() *snappipb.FlowIcmp
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Echo() FlowIcmpEcho
}

// Echo returns a FlowIcmpEcho
//  description is TBD
func (obj *flowIcmp) Echo() FlowIcmpEcho {
	if obj.obj.Echo == nil {
		obj.obj.Echo = &snappipb.FlowIcmpEcho{}
	}
	return &flowIcmpEcho{obj: obj.obj.Echo}

}

type flowIcmpv6 struct {
	obj *snappipb.FlowIcmpv6
}

func (obj *flowIcmpv6) msg() *snappipb.FlowIcmpv6 {
	return obj.obj
}

func (obj *flowIcmpv6) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpv6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowIcmpv6) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpv6) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowIcmpv6 interface {
	msg() *snappipb.FlowIcmpv6
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Echo() FlowIcmpv6Echo
}

// Echo returns a FlowIcmpv6Echo
//  description is TBD
func (obj *flowIcmpv6) Echo() FlowIcmpv6Echo {
	if obj.obj.Echo == nil {
		obj.obj.Echo = &snappipb.FlowIcmpv6Echo{}
	}
	return &flowIcmpv6Echo{obj: obj.obj.Echo}

}

type flowPpp struct {
	obj *snappipb.FlowPpp
}

func (obj *flowPpp) msg() *snappipb.FlowPpp {
	return obj.obj
}

func (obj *flowPpp) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPpp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowPpp) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowPpp) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowPpp interface {
	msg() *snappipb.FlowPpp
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Address() PatternFlowPppAddress
	Control() PatternFlowPppControl
	ProtocolType() PatternFlowPppProtocolType
}

// Address returns a PatternFlowPppAddress
//  description is TBD
func (obj *flowPpp) Address() PatternFlowPppAddress {
	if obj.obj.Address == nil {
		obj.obj.Address = &snappipb.PatternFlowPppAddress{}
	}
	return &patternFlowPppAddress{obj: obj.obj.Address}

}

// Control returns a PatternFlowPppControl
//  description is TBD
func (obj *flowPpp) Control() PatternFlowPppControl {
	if obj.obj.Control == nil {
		obj.obj.Control = &snappipb.PatternFlowPppControl{}
	}
	return &patternFlowPppControl{obj: obj.obj.Control}

}

// ProtocolType returns a PatternFlowPppProtocolType
//  description is TBD
func (obj *flowPpp) ProtocolType() PatternFlowPppProtocolType {
	if obj.obj.ProtocolType == nil {
		obj.obj.ProtocolType = &snappipb.PatternFlowPppProtocolType{}
	}
	return &patternFlowPppProtocolType{obj: obj.obj.ProtocolType}

}

type flowIgmpv1 struct {
	obj *snappipb.FlowIgmpv1
}

func (obj *flowIgmpv1) msg() *snappipb.FlowIgmpv1 {
	return obj.obj
}

func (obj *flowIgmpv1) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIgmpv1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowIgmpv1) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIgmpv1) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowIgmpv1 interface {
	msg() *snappipb.FlowIgmpv1
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Version() PatternFlowIgmpv1Version
	Type() PatternFlowIgmpv1Type
	Unused() PatternFlowIgmpv1Unused
	Checksum() PatternFlowIgmpv1Checksum
	GroupAddress() PatternFlowIgmpv1GroupAddress
}

// Version returns a PatternFlowIgmpv1Version
//  description is TBD
func (obj *flowIgmpv1) Version() PatternFlowIgmpv1Version {
	if obj.obj.Version == nil {
		obj.obj.Version = &snappipb.PatternFlowIgmpv1Version{}
	}
	return &patternFlowIgmpv1Version{obj: obj.obj.Version}

}

// Type returns a PatternFlowIgmpv1Type
//  description is TBD
func (obj *flowIgmpv1) Type() PatternFlowIgmpv1Type {
	if obj.obj.Type == nil {
		obj.obj.Type = &snappipb.PatternFlowIgmpv1Type{}
	}
	return &patternFlowIgmpv1Type{obj: obj.obj.Type}

}

// Unused returns a PatternFlowIgmpv1Unused
//  description is TBD
func (obj *flowIgmpv1) Unused() PatternFlowIgmpv1Unused {
	if obj.obj.Unused == nil {
		obj.obj.Unused = &snappipb.PatternFlowIgmpv1Unused{}
	}
	return &patternFlowIgmpv1Unused{obj: obj.obj.Unused}

}

// Checksum returns a PatternFlowIgmpv1Checksum
//  description is TBD
func (obj *flowIgmpv1) Checksum() PatternFlowIgmpv1Checksum {
	if obj.obj.Checksum == nil {
		obj.obj.Checksum = &snappipb.PatternFlowIgmpv1Checksum{}
	}
	return &patternFlowIgmpv1Checksum{obj: obj.obj.Checksum}

}

// GroupAddress returns a PatternFlowIgmpv1GroupAddress
//  description is TBD
func (obj *flowIgmpv1) GroupAddress() PatternFlowIgmpv1GroupAddress {
	if obj.obj.GroupAddress == nil {
		obj.obj.GroupAddress = &snappipb.PatternFlowIgmpv1GroupAddress{}
	}
	return &patternFlowIgmpv1GroupAddress{obj: obj.obj.GroupAddress}

}

type flowSizeIncrement struct {
	obj *snappipb.FlowSizeIncrement
}

func (obj *flowSizeIncrement) msg() *snappipb.FlowSizeIncrement {
	return obj.obj
}

func (obj *flowSizeIncrement) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSizeIncrement) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowSizeIncrement) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSizeIncrement) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowSizeIncrement interface {
	msg() *snappipb.FlowSizeIncrement
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) FlowSizeIncrement
	End() int32
	SetEnd(value int32) FlowSizeIncrement
	Step() int32
	SetStep(value int32) FlowSizeIncrement
}

// Start returns a int32
//  Starting frame size in bytes
func (obj *flowSizeIncrement) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  Starting frame size in bytes
func (obj *flowSizeIncrement) SetStart(value int32) FlowSizeIncrement {
	obj.obj.Start = &value
	return obj
}

// End returns a int32
//  Ending frame size in bytes
func (obj *flowSizeIncrement) End() int32 {
	return *obj.obj.End
}

// SetEnd sets the int32 value in the None object
//  Ending frame size in bytes
func (obj *flowSizeIncrement) SetEnd(value int32) FlowSizeIncrement {
	obj.obj.End = &value
	return obj
}

// Step returns a int32
//  Step frame size in bytes
func (obj *flowSizeIncrement) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  Step frame size in bytes
func (obj *flowSizeIncrement) SetStep(value int32) FlowSizeIncrement {
	obj.obj.Step = &value
	return obj
}

type flowSizeRandom struct {
	obj *snappipb.FlowSizeRandom
}

func (obj *flowSizeRandom) msg() *snappipb.FlowSizeRandom {
	return obj.obj
}

func (obj *flowSizeRandom) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSizeRandom) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowSizeRandom) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowSizeRandom) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowSizeRandom interface {
	msg() *snappipb.FlowSizeRandom
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Min() int32
	SetMin(value int32) FlowSizeRandom
	Max() int32
	SetMax(value int32) FlowSizeRandom
}

// Min returns a int32
//  description is TBD
func (obj *flowSizeRandom) Min() int32 {
	return *obj.obj.Min
}

// SetMin sets the int32 value in the None object
//  description is TBD
func (obj *flowSizeRandom) SetMin(value int32) FlowSizeRandom {
	obj.obj.Min = &value
	return obj
}

// Max returns a int32
//  description is TBD
func (obj *flowSizeRandom) Max() int32 {
	return *obj.obj.Max
}

// SetMax sets the int32 value in the None object
//  description is TBD
func (obj *flowSizeRandom) SetMax(value int32) FlowSizeRandom {
	obj.obj.Max = &value
	return obj
}

type flowFixedPackets struct {
	obj *snappipb.FlowFixedPackets
}

func (obj *flowFixedPackets) msg() *snappipb.FlowFixedPackets {
	return obj.obj
}

func (obj *flowFixedPackets) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowFixedPackets) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowFixedPackets) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowFixedPackets) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowFixedPackets interface {
	msg() *snappipb.FlowFixedPackets
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Packets() int32
	SetPackets(value int32) FlowFixedPackets
	Gap() int32
	SetGap(value int32) FlowFixedPackets
	Delay() FlowDelay
}

// Packets returns a int32
//  Stop transmit of the flow after this number of packets.
func (obj *flowFixedPackets) Packets() int32 {
	return *obj.obj.Packets
}

// SetPackets sets the int32 value in the None object
//  Stop transmit of the flow after this number of packets.
func (obj *flowFixedPackets) SetPackets(value int32) FlowFixedPackets {
	obj.obj.Packets = &value
	return obj
}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowFixedPackets) Gap() int32 {
	return *obj.obj.Gap
}

// SetGap sets the int32 value in the None object
//  The minimum gap between packets expressed as bytes.
func (obj *flowFixedPackets) SetGap(value int32) FlowFixedPackets {
	obj.obj.Gap = &value
	return obj
}

// Delay returns a FlowDelay
//  description is TBD
func (obj *flowFixedPackets) Delay() FlowDelay {
	if obj.obj.Delay == nil {
		obj.obj.Delay = &snappipb.FlowDelay{}
	}
	return &flowDelay{obj: obj.obj.Delay}

}

type flowFixedSeconds struct {
	obj *snappipb.FlowFixedSeconds
}

func (obj *flowFixedSeconds) msg() *snappipb.FlowFixedSeconds {
	return obj.obj
}

func (obj *flowFixedSeconds) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowFixedSeconds) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowFixedSeconds) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowFixedSeconds) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowFixedSeconds interface {
	msg() *snappipb.FlowFixedSeconds
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Seconds() float32
	SetSeconds(value float32) FlowFixedSeconds
	Gap() int32
	SetGap(value int32) FlowFixedSeconds
	Delay() FlowDelay
}

// Seconds returns a float32
//  Stop transmit of the flow after this number of seconds.
func (obj *flowFixedSeconds) Seconds() float32 {
	return *obj.obj.Seconds
}

// SetSeconds sets the float32 value in the None object
//  Stop transmit of the flow after this number of seconds.
func (obj *flowFixedSeconds) SetSeconds(value float32) FlowFixedSeconds {
	obj.obj.Seconds = &value
	return obj
}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowFixedSeconds) Gap() int32 {
	return *obj.obj.Gap
}

// SetGap sets the int32 value in the None object
//  The minimum gap between packets expressed as bytes.
func (obj *flowFixedSeconds) SetGap(value int32) FlowFixedSeconds {
	obj.obj.Gap = &value
	return obj
}

// Delay returns a FlowDelay
//  description is TBD
func (obj *flowFixedSeconds) Delay() FlowDelay {
	if obj.obj.Delay == nil {
		obj.obj.Delay = &snappipb.FlowDelay{}
	}
	return &flowDelay{obj: obj.obj.Delay}

}

type flowBurst struct {
	obj *snappipb.FlowBurst
}

func (obj *flowBurst) msg() *snappipb.FlowBurst {
	return obj.obj
}

func (obj *flowBurst) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowBurst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowBurst) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowBurst) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowBurst interface {
	msg() *snappipb.FlowBurst
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Bursts() int32
	SetBursts(value int32) FlowBurst
	Packets() int32
	SetPackets(value int32) FlowBurst
	Gap() int32
	SetGap(value int32) FlowBurst
	InterBurstGap() FlowDurationInterBurstGap
}

// Bursts returns a int32
//  The number of packet bursts transmitted per flow.
//  A value of 0 implies continuous burst of packets.
func (obj *flowBurst) Bursts() int32 {
	return *obj.obj.Bursts
}

// SetBursts sets the int32 value in the None object
//  The number of packet bursts transmitted per flow.
//  A value of 0 implies continuous burst of packets.
func (obj *flowBurst) SetBursts(value int32) FlowBurst {
	obj.obj.Bursts = &value
	return obj
}

// Packets returns a int32
//  The number of packets transmitted per burst.
func (obj *flowBurst) Packets() int32 {
	return *obj.obj.Packets
}

// SetPackets sets the int32 value in the None object
//  The number of packets transmitted per burst.
func (obj *flowBurst) SetPackets(value int32) FlowBurst {
	obj.obj.Packets = &value
	return obj
}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowBurst) Gap() int32 {
	return *obj.obj.Gap
}

// SetGap sets the int32 value in the None object
//  The minimum gap between packets expressed as bytes.
func (obj *flowBurst) SetGap(value int32) FlowBurst {
	obj.obj.Gap = &value
	return obj
}

// InterBurstGap returns a FlowDurationInterBurstGap
//  description is TBD
func (obj *flowBurst) InterBurstGap() FlowDurationInterBurstGap {
	if obj.obj.InterBurstGap == nil {
		obj.obj.InterBurstGap = &snappipb.FlowDurationInterBurstGap{}
	}
	return &flowDurationInterBurstGap{obj: obj.obj.InterBurstGap}

}

type flowContinuous struct {
	obj *snappipb.FlowContinuous
}

func (obj *flowContinuous) msg() *snappipb.FlowContinuous {
	return obj.obj
}

func (obj *flowContinuous) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowContinuous) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowContinuous) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowContinuous) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowContinuous interface {
	msg() *snappipb.FlowContinuous
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Gap() int32
	SetGap(value int32) FlowContinuous
	Delay() FlowDelay
}

// Gap returns a int32
//  The minimum gap between packets expressed as bytes.
func (obj *flowContinuous) Gap() int32 {
	return *obj.obj.Gap
}

// SetGap sets the int32 value in the None object
//  The minimum gap between packets expressed as bytes.
func (obj *flowContinuous) SetGap(value int32) FlowContinuous {
	obj.obj.Gap = &value
	return obj
}

// Delay returns a FlowDelay
//  description is TBD
func (obj *flowContinuous) Delay() FlowDelay {
	if obj.obj.Delay == nil {
		obj.obj.Delay = &snappipb.FlowDelay{}
	}
	return &flowDelay{obj: obj.obj.Delay}

}

type flowLatencyMetrics struct {
	obj *snappipb.FlowLatencyMetrics
}

func (obj *flowLatencyMetrics) msg() *snappipb.FlowLatencyMetrics {
	return obj.obj
}

func (obj *flowLatencyMetrics) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowLatencyMetrics) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowLatencyMetrics) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowLatencyMetrics) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowLatencyMetrics interface {
	msg() *snappipb.FlowLatencyMetrics
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Enable() bool
	SetEnable(value bool) FlowLatencyMetrics
}

// Enable returns a bool
//  True to enable latency metrics using timestamps.
//
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *flowLatencyMetrics) Enable() bool {
	return *obj.obj.Enable
}

// SetEnable sets the bool value in the None object
//  True to enable latency metrics using timestamps.
//
//  Enabling this option may affect the resultant packet payload due to
//  additional instrumentation data.
func (obj *flowLatencyMetrics) SetEnable(value bool) FlowLatencyMetrics {
	obj.obj.Enable = &value
	return obj
}

type lagLacp struct {
	obj *snappipb.LagLacp
}

func (obj *lagLacp) msg() *snappipb.LagLacp {
	return obj.obj
}

func (obj *lagLacp) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagLacp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *lagLacp) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagLacp) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type LagLacp interface {
	msg() *snappipb.LagLacp
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	ActorKey() int32
	SetActorKey(value int32) LagLacp
	ActorPortNumber() int32
	SetActorPortNumber(value int32) LagLacp
	ActorPortPriority() int32
	SetActorPortPriority(value int32) LagLacp
	ActorSystemId() string
	SetActorSystemId(value string) LagLacp
	ActorSystemPriority() int32
	SetActorSystemPriority(value int32) LagLacp
	LacpduPeriodicTimeInterval() int32
	SetLacpduPeriodicTimeInterval(value int32) LagLacp
	LacpduTimeout() int32
	SetLacpduTimeout(value int32) LagLacp
}

// ActorKey returns a int32
//  The actor key
func (obj *lagLacp) ActorKey() int32 {
	return *obj.obj.ActorKey
}

// SetActorKey sets the int32 value in the None object
//  The actor key
func (obj *lagLacp) SetActorKey(value int32) LagLacp {
	obj.obj.ActorKey = &value
	return obj
}

// ActorPortNumber returns a int32
//  The actor port number
func (obj *lagLacp) ActorPortNumber() int32 {
	return *obj.obj.ActorPortNumber
}

// SetActorPortNumber sets the int32 value in the None object
//  The actor port number
func (obj *lagLacp) SetActorPortNumber(value int32) LagLacp {
	obj.obj.ActorPortNumber = &value
	return obj
}

// ActorPortPriority returns a int32
//  The actor port priority
func (obj *lagLacp) ActorPortPriority() int32 {
	return *obj.obj.ActorPortPriority
}

// SetActorPortPriority sets the int32 value in the None object
//  The actor port priority
func (obj *lagLacp) SetActorPortPriority(value int32) LagLacp {
	obj.obj.ActorPortPriority = &value
	return obj
}

// ActorSystemId returns a string
//  The actor system id
func (obj *lagLacp) ActorSystemId() string {
	return *obj.obj.ActorSystemId
}

// SetActorSystemId sets the string value in the None object
//  The actor system id
func (obj *lagLacp) SetActorSystemId(value string) LagLacp {
	obj.obj.ActorSystemId = &value
	return obj
}

// ActorSystemPriority returns a int32
//  The actor system priority
func (obj *lagLacp) ActorSystemPriority() int32 {
	return *obj.obj.ActorSystemPriority
}

// SetActorSystemPriority sets the int32 value in the None object
//  The actor system priority
func (obj *lagLacp) SetActorSystemPriority(value int32) LagLacp {
	obj.obj.ActorSystemPriority = &value
	return obj
}

// LacpduPeriodicTimeInterval returns a int32
//  This field defines how frequently LACPDUs are sent to the link partner
func (obj *lagLacp) LacpduPeriodicTimeInterval() int32 {
	return *obj.obj.LacpduPeriodicTimeInterval
}

// SetLacpduPeriodicTimeInterval sets the int32 value in the None object
//  This field defines how frequently LACPDUs are sent to the link partner
func (obj *lagLacp) SetLacpduPeriodicTimeInterval(value int32) LagLacp {
	obj.obj.LacpduPeriodicTimeInterval = &value
	return obj
}

// LacpduTimeout returns a int32
//  This timer is used to detect whether received protocol information has expired
func (obj *lagLacp) LacpduTimeout() int32 {
	return *obj.obj.LacpduTimeout
}

// SetLacpduTimeout sets the int32 value in the None object
//  This timer is used to detect whether received protocol information has expired
func (obj *lagLacp) SetLacpduTimeout(value int32) LagLacp {
	obj.obj.LacpduTimeout = &value
	return obj
}

type lagStatic struct {
	obj *snappipb.LagStatic
}

func (obj *lagStatic) msg() *snappipb.LagStatic {
	return obj.obj
}

func (obj *lagStatic) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagStatic) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *lagStatic) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *lagStatic) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type LagStatic interface {
	msg() *snappipb.LagStatic
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	LagId() int32
	SetLagId(value int32) LagStatic
}

// LagId returns a int32
//  The static lag id
func (obj *lagStatic) LagId() int32 {
	return *obj.obj.LagId
}

// SetLagId sets the int32 value in the None object
//  The static lag id
func (obj *lagStatic) SetLagId(value int32) LagStatic {
	obj.obj.LagId = &value
	return obj
}

type captureField struct {
	obj *snappipb.CaptureField
}

func (obj *captureField) msg() *snappipb.CaptureField {
	return obj.obj
}

func (obj *captureField) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureField) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *captureField) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *captureField) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type CaptureField interface {
	msg() *snappipb.CaptureField
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) CaptureField
	Mask() string
	SetMask(value string) CaptureField
	Negate() bool
	SetNegate(value bool) CaptureField
}

// Value returns a string
//  description is TBD
func (obj *captureField) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *captureField) SetValue(value string) CaptureField {
	obj.obj.Value = &value
	return obj
}

// Mask returns a string
//  description is TBD
func (obj *captureField) Mask() string {
	return *obj.obj.Mask
}

// SetMask sets the string value in the None object
//  description is TBD
func (obj *captureField) SetMask(value string) CaptureField {
	obj.obj.Mask = &value
	return obj
}

// Negate returns a bool
//  description is TBD
func (obj *captureField) Negate() bool {
	return *obj.obj.Negate
}

// SetNegate sets the bool value in the None object
//  description is TBD
func (obj *captureField) SetNegate(value bool) CaptureField {
	obj.obj.Negate = &value
	return obj
}

type deviceBgpv4 struct {
	obj *snappipb.DeviceBgpv4
}

func (obj *deviceBgpv4) msg() *snappipb.DeviceBgpv4 {
	return obj.obj
}

func (obj *deviceBgpv4) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv4) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpv4) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv4) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpv4 interface {
	msg() *snappipb.DeviceBgpv4
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	LocalAddress() string
	SetLocalAddress(value string) DeviceBgpv4
	DutAddress() string
	SetDutAddress(value string) DeviceBgpv4
	RouterId() string
	SetRouterId(value string) DeviceBgpv4
	AsNumber() int32
	SetAsNumber(value int32) DeviceBgpv4
	Advanced() DeviceBgpAdvanced
	Capability() DeviceBgpCapability
	SrTePolicies() DeviceBgpv4DeviceBgpSrTePolicyIter
	Bgpv4Routes() DeviceBgpv4DeviceBgpv4RouteIter
	Bgpv6Routes() DeviceBgpv4DeviceBgpv6RouteIter
	Name() string
	SetName(value string) DeviceBgpv4
	Active() bool
	SetActive(value bool) DeviceBgpv4
}

// LocalAddress returns a string
//  Local IPv4 address of the emulated router
func (obj *deviceBgpv4) LocalAddress() string {
	return obj.obj.LocalAddress
}

// SetLocalAddress sets the string value in the None object
//  Local IPv4 address of the emulated router
func (obj *deviceBgpv4) SetLocalAddress(value string) DeviceBgpv4 {
	obj.obj.LocalAddress = value
	return obj
}

// DutAddress returns a string
//  IPv4 address of the BGP peer for the session
func (obj *deviceBgpv4) DutAddress() string {
	return obj.obj.DutAddress
}

// SetDutAddress sets the string value in the None object
//  IPv4 address of the BGP peer for the session
func (obj *deviceBgpv4) SetDutAddress(value string) DeviceBgpv4 {
	obj.obj.DutAddress = value
	return obj
}

// RouterId returns a string
//  The BGP router ID is a unique identifier used by routing protocols. It is a 32-bit value that is often represented by an IPv4 address.
func (obj *deviceBgpv4) RouterId() string {
	return *obj.obj.RouterId
}

// SetRouterId sets the string value in the None object
//  The BGP router ID is a unique identifier used by routing protocols. It is a 32-bit value that is often represented by an IPv4 address.
func (obj *deviceBgpv4) SetRouterId(value string) DeviceBgpv4 {
	obj.obj.RouterId = &value
	return obj
}

// AsNumber returns a int32
//  Autonomous System Number (AS number or ASN)
func (obj *deviceBgpv4) AsNumber() int32 {
	return obj.obj.AsNumber
}

// SetAsNumber sets the int32 value in the None object
//  Autonomous System Number (AS number or ASN)
func (obj *deviceBgpv4) SetAsNumber(value int32) DeviceBgpv4 {
	obj.obj.AsNumber = value
	return obj
}

// Advanced returns a DeviceBgpAdvanced
//  description is TBD
func (obj *deviceBgpv4) Advanced() DeviceBgpAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = &snappipb.DeviceBgpAdvanced{}
	}
	return &deviceBgpAdvanced{obj: obj.obj.Advanced}

}

// Capability returns a DeviceBgpCapability
//  description is TBD
func (obj *deviceBgpv4) Capability() DeviceBgpCapability {
	if obj.obj.Capability == nil {
		obj.obj.Capability = &snappipb.DeviceBgpCapability{}
	}
	return &deviceBgpCapability{obj: obj.obj.Capability}

}

// SrTePolicies returns a []DeviceBgpSrTePolicy
//  Segment routing/traffic engineering policies
func (obj *deviceBgpv4) SrTePolicies() DeviceBgpv4DeviceBgpSrTePolicyIter {
	if obj.obj.SrTePolicies == nil {
		obj.obj.SrTePolicies = []*snappipb.DeviceBgpSrTePolicy{}
	}
	return &deviceBgpv4DeviceBgpSrTePolicyIter{obj: obj}

}

type deviceBgpv4DeviceBgpSrTePolicyIter struct {
	obj *deviceBgpv4
}

type DeviceBgpv4DeviceBgpSrTePolicyIter interface {
	Add() DeviceBgpSrTePolicy
	Items() []DeviceBgpSrTePolicy
}

func (obj *deviceBgpv4DeviceBgpSrTePolicyIter) Add() DeviceBgpSrTePolicy {
	newObj := &snappipb.DeviceBgpSrTePolicy{}
	obj.obj.obj.SrTePolicies = append(obj.obj.obj.SrTePolicies, newObj)
	return &deviceBgpSrTePolicy{obj: newObj}
}

func (obj *deviceBgpv4DeviceBgpSrTePolicyIter) Items() []DeviceBgpSrTePolicy {
	slice := []DeviceBgpSrTePolicy{}
	for _, item := range obj.obj.obj.SrTePolicies {
		slice = append(slice, &deviceBgpSrTePolicy{obj: item})
	}
	return slice
}

// Bgpv4Routes returns a []DeviceBgpv4Route
//  Emulated BGPv4 routes
func (obj *deviceBgpv4) Bgpv4Routes() DeviceBgpv4DeviceBgpv4RouteIter {
	if obj.obj.Bgpv4Routes == nil {
		obj.obj.Bgpv4Routes = []*snappipb.DeviceBgpv4Route{}
	}
	return &deviceBgpv4DeviceBgpv4RouteIter{obj: obj}

}

type deviceBgpv4DeviceBgpv4RouteIter struct {
	obj *deviceBgpv4
}

type DeviceBgpv4DeviceBgpv4RouteIter interface {
	Add() DeviceBgpv4Route
	Items() []DeviceBgpv4Route
}

func (obj *deviceBgpv4DeviceBgpv4RouteIter) Add() DeviceBgpv4Route {
	newObj := &snappipb.DeviceBgpv4Route{}
	obj.obj.obj.Bgpv4Routes = append(obj.obj.obj.Bgpv4Routes, newObj)
	return &deviceBgpv4Route{obj: newObj}
}

func (obj *deviceBgpv4DeviceBgpv4RouteIter) Items() []DeviceBgpv4Route {
	slice := []DeviceBgpv4Route{}
	for _, item := range obj.obj.obj.Bgpv4Routes {
		slice = append(slice, &deviceBgpv4Route{obj: item})
	}
	return slice
}

// Bgpv6Routes returns a []DeviceBgpv6Route
//  Emulated BGPv6 routes
func (obj *deviceBgpv4) Bgpv6Routes() DeviceBgpv4DeviceBgpv6RouteIter {
	if obj.obj.Bgpv6Routes == nil {
		obj.obj.Bgpv6Routes = []*snappipb.DeviceBgpv6Route{}
	}
	return &deviceBgpv4DeviceBgpv6RouteIter{obj: obj}

}

type deviceBgpv4DeviceBgpv6RouteIter struct {
	obj *deviceBgpv4
}

type DeviceBgpv4DeviceBgpv6RouteIter interface {
	Add() DeviceBgpv6Route
	Items() []DeviceBgpv6Route
}

func (obj *deviceBgpv4DeviceBgpv6RouteIter) Add() DeviceBgpv6Route {
	newObj := &snappipb.DeviceBgpv6Route{}
	obj.obj.obj.Bgpv6Routes = append(obj.obj.obj.Bgpv6Routes, newObj)
	return &deviceBgpv6Route{obj: newObj}
}

func (obj *deviceBgpv4DeviceBgpv6RouteIter) Items() []DeviceBgpv6Route {
	slice := []DeviceBgpv6Route{}
	for _, item := range obj.obj.obj.Bgpv6Routes {
		slice = append(slice, &deviceBgpv6Route{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceBgpv4) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceBgpv4) SetName(value string) DeviceBgpv4 {
	obj.obj.Name = value
	return obj
}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *deviceBgpv4) Active() bool {
	return *obj.obj.Active
}

// SetActive sets the bool value in the None object
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *deviceBgpv4) SetActive(value bool) DeviceBgpv4 {
	obj.obj.Active = &value
	return obj
}

type deviceBgpv6 struct {
	obj *snappipb.DeviceBgpv6
}

func (obj *deviceBgpv6) msg() *snappipb.DeviceBgpv6 {
	return obj.obj
}

func (obj *deviceBgpv6) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpv6) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv6) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpv6 interface {
	msg() *snappipb.DeviceBgpv6
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	LocalAddress() string
	SetLocalAddress(value string) DeviceBgpv6
	DutAddress() string
	SetDutAddress(value string) DeviceBgpv6
	SegmentRouting() DeviceBgpv6SegmentRouting
	RouterId() string
	SetRouterId(value string) DeviceBgpv6
	AsNumber() int32
	SetAsNumber(value int32) DeviceBgpv6
	Advanced() DeviceBgpAdvanced
	Capability() DeviceBgpCapability
	SrTePolicies() DeviceBgpv6DeviceBgpSrTePolicyIter
	Bgpv4Routes() DeviceBgpv6DeviceBgpv4RouteIter
	Bgpv6Routes() DeviceBgpv6DeviceBgpv6RouteIter
	Name() string
	SetName(value string) DeviceBgpv6
	Active() bool
	SetActive(value bool) DeviceBgpv6
}

// LocalAddress returns a string
//  Local IPv6 address of the emulated router
func (obj *deviceBgpv6) LocalAddress() string {
	return obj.obj.LocalAddress
}

// SetLocalAddress sets the string value in the None object
//  Local IPv6 address of the emulated router
func (obj *deviceBgpv6) SetLocalAddress(value string) DeviceBgpv6 {
	obj.obj.LocalAddress = value
	return obj
}

// DutAddress returns a string
//  IPv6 address of the BGP peer for the session
func (obj *deviceBgpv6) DutAddress() string {
	return obj.obj.DutAddress
}

// SetDutAddress sets the string value in the None object
//  IPv6 address of the BGP peer for the session
func (obj *deviceBgpv6) SetDutAddress(value string) DeviceBgpv6 {
	obj.obj.DutAddress = value
	return obj
}

// SegmentRouting returns a DeviceBgpv6SegmentRouting
//  description is TBD
func (obj *deviceBgpv6) SegmentRouting() DeviceBgpv6SegmentRouting {
	if obj.obj.SegmentRouting == nil {
		obj.obj.SegmentRouting = &snappipb.DeviceBgpv6SegmentRouting{}
	}
	return &deviceBgpv6SegmentRouting{obj: obj.obj.SegmentRouting}

}

// RouterId returns a string
//  The BGP router ID is a unique identifier used by routing protocols. It is a 32-bit value that is often represented by an IPv4 address.
func (obj *deviceBgpv6) RouterId() string {
	return *obj.obj.RouterId
}

// SetRouterId sets the string value in the None object
//  The BGP router ID is a unique identifier used by routing protocols. It is a 32-bit value that is often represented by an IPv4 address.
func (obj *deviceBgpv6) SetRouterId(value string) DeviceBgpv6 {
	obj.obj.RouterId = &value
	return obj
}

// AsNumber returns a int32
//  Autonomous System Number (AS number or ASN)
func (obj *deviceBgpv6) AsNumber() int32 {
	return obj.obj.AsNumber
}

// SetAsNumber sets the int32 value in the None object
//  Autonomous System Number (AS number or ASN)
func (obj *deviceBgpv6) SetAsNumber(value int32) DeviceBgpv6 {
	obj.obj.AsNumber = value
	return obj
}

// Advanced returns a DeviceBgpAdvanced
//  description is TBD
func (obj *deviceBgpv6) Advanced() DeviceBgpAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = &snappipb.DeviceBgpAdvanced{}
	}
	return &deviceBgpAdvanced{obj: obj.obj.Advanced}

}

// Capability returns a DeviceBgpCapability
//  description is TBD
func (obj *deviceBgpv6) Capability() DeviceBgpCapability {
	if obj.obj.Capability == nil {
		obj.obj.Capability = &snappipb.DeviceBgpCapability{}
	}
	return &deviceBgpCapability{obj: obj.obj.Capability}

}

// SrTePolicies returns a []DeviceBgpSrTePolicy
//  Segment routing/traffic engineering policies
func (obj *deviceBgpv6) SrTePolicies() DeviceBgpv6DeviceBgpSrTePolicyIter {
	if obj.obj.SrTePolicies == nil {
		obj.obj.SrTePolicies = []*snappipb.DeviceBgpSrTePolicy{}
	}
	return &deviceBgpv6DeviceBgpSrTePolicyIter{obj: obj}

}

type deviceBgpv6DeviceBgpSrTePolicyIter struct {
	obj *deviceBgpv6
}

type DeviceBgpv6DeviceBgpSrTePolicyIter interface {
	Add() DeviceBgpSrTePolicy
	Items() []DeviceBgpSrTePolicy
}

func (obj *deviceBgpv6DeviceBgpSrTePolicyIter) Add() DeviceBgpSrTePolicy {
	newObj := &snappipb.DeviceBgpSrTePolicy{}
	obj.obj.obj.SrTePolicies = append(obj.obj.obj.SrTePolicies, newObj)
	return &deviceBgpSrTePolicy{obj: newObj}
}

func (obj *deviceBgpv6DeviceBgpSrTePolicyIter) Items() []DeviceBgpSrTePolicy {
	slice := []DeviceBgpSrTePolicy{}
	for _, item := range obj.obj.obj.SrTePolicies {
		slice = append(slice, &deviceBgpSrTePolicy{obj: item})
	}
	return slice
}

// Bgpv4Routes returns a []DeviceBgpv4Route
//  Emulated BGPv4 routes
func (obj *deviceBgpv6) Bgpv4Routes() DeviceBgpv6DeviceBgpv4RouteIter {
	if obj.obj.Bgpv4Routes == nil {
		obj.obj.Bgpv4Routes = []*snappipb.DeviceBgpv4Route{}
	}
	return &deviceBgpv6DeviceBgpv4RouteIter{obj: obj}

}

type deviceBgpv6DeviceBgpv4RouteIter struct {
	obj *deviceBgpv6
}

type DeviceBgpv6DeviceBgpv4RouteIter interface {
	Add() DeviceBgpv4Route
	Items() []DeviceBgpv4Route
}

func (obj *deviceBgpv6DeviceBgpv4RouteIter) Add() DeviceBgpv4Route {
	newObj := &snappipb.DeviceBgpv4Route{}
	obj.obj.obj.Bgpv4Routes = append(obj.obj.obj.Bgpv4Routes, newObj)
	return &deviceBgpv4Route{obj: newObj}
}

func (obj *deviceBgpv6DeviceBgpv4RouteIter) Items() []DeviceBgpv4Route {
	slice := []DeviceBgpv4Route{}
	for _, item := range obj.obj.obj.Bgpv4Routes {
		slice = append(slice, &deviceBgpv4Route{obj: item})
	}
	return slice
}

// Bgpv6Routes returns a []DeviceBgpv6Route
//  Emulated BGPv6 routes
func (obj *deviceBgpv6) Bgpv6Routes() DeviceBgpv6DeviceBgpv6RouteIter {
	if obj.obj.Bgpv6Routes == nil {
		obj.obj.Bgpv6Routes = []*snappipb.DeviceBgpv6Route{}
	}
	return &deviceBgpv6DeviceBgpv6RouteIter{obj: obj}

}

type deviceBgpv6DeviceBgpv6RouteIter struct {
	obj *deviceBgpv6
}

type DeviceBgpv6DeviceBgpv6RouteIter interface {
	Add() DeviceBgpv6Route
	Items() []DeviceBgpv6Route
}

func (obj *deviceBgpv6DeviceBgpv6RouteIter) Add() DeviceBgpv6Route {
	newObj := &snappipb.DeviceBgpv6Route{}
	obj.obj.obj.Bgpv6Routes = append(obj.obj.obj.Bgpv6Routes, newObj)
	return &deviceBgpv6Route{obj: newObj}
}

func (obj *deviceBgpv6DeviceBgpv6RouteIter) Items() []DeviceBgpv6Route {
	slice := []DeviceBgpv6Route{}
	for _, item := range obj.obj.obj.Bgpv6Routes {
		slice = append(slice, &deviceBgpv6Route{obj: item})
	}
	return slice
}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceBgpv6) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceBgpv6) SetName(value string) DeviceBgpv6 {
	obj.obj.Name = value
	return obj
}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *deviceBgpv6) Active() bool {
	return *obj.obj.Active
}

// SetActive sets the bool value in the None object
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *deviceBgpv6) SetActive(value bool) DeviceBgpv6 {
	obj.obj.Active = &value
	return obj
}

type patternFlowEthernetDst struct {
	obj *snappipb.PatternFlowEthernetDst
}

func (obj *patternFlowEthernetDst) msg() *snappipb.PatternFlowEthernetDst {
	return obj.obj
}

func (obj *patternFlowEthernetDst) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetDst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetDst) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetDst) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetDst interface {
	msg() *snappipb.PatternFlowEthernetDst
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowEthernetDst
	Values() []string
	SetValues(value []string) PatternFlowEthernetDst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetDst
	Increment() PatternFlowEthernetDstCounter
	Decrement() PatternFlowEthernetDstCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetDst) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetDst) SetValue(value string) PatternFlowEthernetDst {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowEthernetDst) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowEthernetDst) SetValues(value []string) PatternFlowEthernetDst {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetDst) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetDst) SetMetricGroup(value string) PatternFlowEthernetDst {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowEthernetDstCounter
//  description is TBD
func (obj *patternFlowEthernetDst) Increment() PatternFlowEthernetDstCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowEthernetDstCounter{}
	}
	return &patternFlowEthernetDstCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowEthernetDstCounter
//  description is TBD
func (obj *patternFlowEthernetDst) Decrement() PatternFlowEthernetDstCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowEthernetDstCounter{}
	}
	return &patternFlowEthernetDstCounter{obj: obj.obj.Decrement}

}

type patternFlowEthernetSrc struct {
	obj *snappipb.PatternFlowEthernetSrc
}

func (obj *patternFlowEthernetSrc) msg() *snappipb.PatternFlowEthernetSrc {
	return obj.obj
}

func (obj *patternFlowEthernetSrc) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetSrc) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetSrc) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetSrc) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetSrc interface {
	msg() *snappipb.PatternFlowEthernetSrc
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowEthernetSrc
	Values() []string
	SetValues(value []string) PatternFlowEthernetSrc
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetSrc
	Increment() PatternFlowEthernetSrcCounter
	Decrement() PatternFlowEthernetSrcCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetSrc) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetSrc) SetValue(value string) PatternFlowEthernetSrc {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowEthernetSrc) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowEthernetSrc) SetValues(value []string) PatternFlowEthernetSrc {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetSrc) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetSrc) SetMetricGroup(value string) PatternFlowEthernetSrc {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowEthernetSrcCounter
//  description is TBD
func (obj *patternFlowEthernetSrc) Increment() PatternFlowEthernetSrcCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowEthernetSrcCounter{}
	}
	return &patternFlowEthernetSrcCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowEthernetSrcCounter
//  description is TBD
func (obj *patternFlowEthernetSrc) Decrement() PatternFlowEthernetSrcCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowEthernetSrcCounter{}
	}
	return &patternFlowEthernetSrcCounter{obj: obj.obj.Decrement}

}

type patternFlowEthernetEtherType struct {
	obj *snappipb.PatternFlowEthernetEtherType
}

func (obj *patternFlowEthernetEtherType) msg() *snappipb.PatternFlowEthernetEtherType {
	return obj.obj
}

func (obj *patternFlowEthernetEtherType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetEtherType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetEtherType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetEtherType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetEtherType interface {
	msg() *snappipb.PatternFlowEthernetEtherType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowEthernetEtherType
	Values() []int32
	SetValues(value []int32) PatternFlowEthernetEtherType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetEtherType
	Increment() PatternFlowEthernetEtherTypeCounter
	Decrement() PatternFlowEthernetEtherTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetEtherType) SetValue(value int32) PatternFlowEthernetEtherType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowEthernetEtherType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetEtherType) SetValues(value []int32) PatternFlowEthernetEtherType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetEtherType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetEtherType) SetMetricGroup(value string) PatternFlowEthernetEtherType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowEthernetEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetEtherType) Increment() PatternFlowEthernetEtherTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowEthernetEtherTypeCounter{}
	}
	return &patternFlowEthernetEtherTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowEthernetEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetEtherType) Decrement() PatternFlowEthernetEtherTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowEthernetEtherTypeCounter{}
	}
	return &patternFlowEthernetEtherTypeCounter{obj: obj.obj.Decrement}

}

type patternFlowEthernetPfcQueue struct {
	obj *snappipb.PatternFlowEthernetPfcQueue
}

func (obj *patternFlowEthernetPfcQueue) msg() *snappipb.PatternFlowEthernetPfcQueue {
	return obj.obj
}

func (obj *patternFlowEthernetPfcQueue) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPfcQueue) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPfcQueue) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPfcQueue) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPfcQueue interface {
	msg() *snappipb.PatternFlowEthernetPfcQueue
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowEthernetPfcQueue
	Values() []int32
	SetValues(value []int32) PatternFlowEthernetPfcQueue
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPfcQueue
	Increment() PatternFlowEthernetPfcQueueCounter
	Decrement() PatternFlowEthernetPfcQueueCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) SetValue(value int32) PatternFlowEthernetPfcQueue {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) SetValues(value []int32) PatternFlowEthernetPfcQueue {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPfcQueue) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPfcQueue) SetMetricGroup(value string) PatternFlowEthernetPfcQueue {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowEthernetPfcQueueCounter
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) Increment() PatternFlowEthernetPfcQueueCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowEthernetPfcQueueCounter{}
	}
	return &patternFlowEthernetPfcQueueCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowEthernetPfcQueueCounter
//  description is TBD
func (obj *patternFlowEthernetPfcQueue) Decrement() PatternFlowEthernetPfcQueueCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowEthernetPfcQueueCounter{}
	}
	return &patternFlowEthernetPfcQueueCounter{obj: obj.obj.Decrement}

}

type patternFlowVlanPriority struct {
	obj *snappipb.PatternFlowVlanPriority
}

func (obj *patternFlowVlanPriority) msg() *snappipb.PatternFlowVlanPriority {
	return obj.obj
}

func (obj *patternFlowVlanPriority) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanPriority) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVlanPriority) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanPriority) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVlanPriority interface {
	msg() *snappipb.PatternFlowVlanPriority
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowVlanPriority
	Values() []int32
	SetValues(value []int32) PatternFlowVlanPriority
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVlanPriority
	Increment() PatternFlowVlanPriorityCounter
	Decrement() PatternFlowVlanPriorityCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanPriority) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanPriority) SetValue(value int32) PatternFlowVlanPriority {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVlanPriority) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanPriority) SetValues(value []int32) PatternFlowVlanPriority {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanPriority) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanPriority) SetMetricGroup(value string) PatternFlowVlanPriority {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowVlanPriorityCounter
//  description is TBD
func (obj *patternFlowVlanPriority) Increment() PatternFlowVlanPriorityCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowVlanPriorityCounter{}
	}
	return &patternFlowVlanPriorityCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowVlanPriorityCounter
//  description is TBD
func (obj *patternFlowVlanPriority) Decrement() PatternFlowVlanPriorityCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowVlanPriorityCounter{}
	}
	return &patternFlowVlanPriorityCounter{obj: obj.obj.Decrement}

}

type patternFlowVlanCfi struct {
	obj *snappipb.PatternFlowVlanCfi
}

func (obj *patternFlowVlanCfi) msg() *snappipb.PatternFlowVlanCfi {
	return obj.obj
}

func (obj *patternFlowVlanCfi) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanCfi) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVlanCfi) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanCfi) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVlanCfi interface {
	msg() *snappipb.PatternFlowVlanCfi
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowVlanCfi
	Values() []int32
	SetValues(value []int32) PatternFlowVlanCfi
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVlanCfi
	Increment() PatternFlowVlanCfiCounter
	Decrement() PatternFlowVlanCfiCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanCfi) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanCfi) SetValue(value int32) PatternFlowVlanCfi {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVlanCfi) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanCfi) SetValues(value []int32) PatternFlowVlanCfi {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanCfi) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanCfi) SetMetricGroup(value string) PatternFlowVlanCfi {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowVlanCfiCounter
//  description is TBD
func (obj *patternFlowVlanCfi) Increment() PatternFlowVlanCfiCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowVlanCfiCounter{}
	}
	return &patternFlowVlanCfiCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowVlanCfiCounter
//  description is TBD
func (obj *patternFlowVlanCfi) Decrement() PatternFlowVlanCfiCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowVlanCfiCounter{}
	}
	return &patternFlowVlanCfiCounter{obj: obj.obj.Decrement}

}

type patternFlowVlanId struct {
	obj *snappipb.PatternFlowVlanId
}

func (obj *patternFlowVlanId) msg() *snappipb.PatternFlowVlanId {
	return obj.obj
}

func (obj *patternFlowVlanId) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanId) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVlanId) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanId) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVlanId interface {
	msg() *snappipb.PatternFlowVlanId
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowVlanId
	Values() []int32
	SetValues(value []int32) PatternFlowVlanId
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVlanId
	Increment() PatternFlowVlanIdCounter
	Decrement() PatternFlowVlanIdCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanId) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanId) SetValue(value int32) PatternFlowVlanId {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVlanId) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanId) SetValues(value []int32) PatternFlowVlanId {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanId) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanId) SetMetricGroup(value string) PatternFlowVlanId {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowVlanIdCounter
//  description is TBD
func (obj *patternFlowVlanId) Increment() PatternFlowVlanIdCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowVlanIdCounter{}
	}
	return &patternFlowVlanIdCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowVlanIdCounter
//  description is TBD
func (obj *patternFlowVlanId) Decrement() PatternFlowVlanIdCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowVlanIdCounter{}
	}
	return &patternFlowVlanIdCounter{obj: obj.obj.Decrement}

}

type patternFlowVlanTpid struct {
	obj *snappipb.PatternFlowVlanTpid
}

func (obj *patternFlowVlanTpid) msg() *snappipb.PatternFlowVlanTpid {
	return obj.obj
}

func (obj *patternFlowVlanTpid) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanTpid) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVlanTpid) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanTpid) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVlanTpid interface {
	msg() *snappipb.PatternFlowVlanTpid
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowVlanTpid
	Values() []int32
	SetValues(value []int32) PatternFlowVlanTpid
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVlanTpid
	Increment() PatternFlowVlanTpidCounter
	Decrement() PatternFlowVlanTpidCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVlanTpid) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanTpid) SetValue(value int32) PatternFlowVlanTpid {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVlanTpid) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanTpid) SetValues(value []int32) PatternFlowVlanTpid {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanTpid) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVlanTpid) SetMetricGroup(value string) PatternFlowVlanTpid {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowVlanTpidCounter
//  description is TBD
func (obj *patternFlowVlanTpid) Increment() PatternFlowVlanTpidCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowVlanTpidCounter{}
	}
	return &patternFlowVlanTpidCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowVlanTpidCounter
//  description is TBD
func (obj *patternFlowVlanTpid) Decrement() PatternFlowVlanTpidCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowVlanTpidCounter{}
	}
	return &patternFlowVlanTpidCounter{obj: obj.obj.Decrement}

}

type patternFlowVxlanFlags struct {
	obj *snappipb.PatternFlowVxlanFlags
}

func (obj *patternFlowVxlanFlags) msg() *snappipb.PatternFlowVxlanFlags {
	return obj.obj
}

func (obj *patternFlowVxlanFlags) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanFlags) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVxlanFlags) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanFlags) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVxlanFlags interface {
	msg() *snappipb.PatternFlowVxlanFlags
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowVxlanFlags
	Values() []int32
	SetValues(value []int32) PatternFlowVxlanFlags
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVxlanFlags
	Increment() PatternFlowVxlanFlagsCounter
	Decrement() PatternFlowVxlanFlagsCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlags) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanFlags) SetValue(value int32) PatternFlowVxlanFlags {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVxlanFlags) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanFlags) SetValues(value []int32) PatternFlowVxlanFlags {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanFlags) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanFlags) SetMetricGroup(value string) PatternFlowVxlanFlags {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowVxlanFlagsCounter
//  description is TBD
func (obj *patternFlowVxlanFlags) Increment() PatternFlowVxlanFlagsCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowVxlanFlagsCounter{}
	}
	return &patternFlowVxlanFlagsCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowVxlanFlagsCounter
//  description is TBD
func (obj *patternFlowVxlanFlags) Decrement() PatternFlowVxlanFlagsCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowVxlanFlagsCounter{}
	}
	return &patternFlowVxlanFlagsCounter{obj: obj.obj.Decrement}

}

type patternFlowVxlanReserved0 struct {
	obj *snappipb.PatternFlowVxlanReserved0
}

func (obj *patternFlowVxlanReserved0) msg() *snappipb.PatternFlowVxlanReserved0 {
	return obj.obj
}

func (obj *patternFlowVxlanReserved0) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved0) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVxlanReserved0) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved0) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVxlanReserved0 interface {
	msg() *snappipb.PatternFlowVxlanReserved0
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowVxlanReserved0
	Values() []int32
	SetValues(value []int32) PatternFlowVxlanReserved0
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVxlanReserved0
	Increment() PatternFlowVxlanReserved0Counter
	Decrement() PatternFlowVxlanReserved0Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanReserved0) SetValue(value int32) PatternFlowVxlanReserved0 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVxlanReserved0) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanReserved0) SetValues(value []int32) PatternFlowVxlanReserved0 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanReserved0) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanReserved0) SetMetricGroup(value string) PatternFlowVxlanReserved0 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowVxlanReserved0Counter
//  description is TBD
func (obj *patternFlowVxlanReserved0) Increment() PatternFlowVxlanReserved0Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowVxlanReserved0Counter{}
	}
	return &patternFlowVxlanReserved0Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowVxlanReserved0Counter
//  description is TBD
func (obj *patternFlowVxlanReserved0) Decrement() PatternFlowVxlanReserved0Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowVxlanReserved0Counter{}
	}
	return &patternFlowVxlanReserved0Counter{obj: obj.obj.Decrement}

}

type patternFlowVxlanVni struct {
	obj *snappipb.PatternFlowVxlanVni
}

func (obj *patternFlowVxlanVni) msg() *snappipb.PatternFlowVxlanVni {
	return obj.obj
}

func (obj *patternFlowVxlanVni) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanVni) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVxlanVni) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanVni) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVxlanVni interface {
	msg() *snappipb.PatternFlowVxlanVni
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowVxlanVni
	Values() []int32
	SetValues(value []int32) PatternFlowVxlanVni
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVxlanVni
	Increment() PatternFlowVxlanVniCounter
	Decrement() PatternFlowVxlanVniCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanVni) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanVni) SetValue(value int32) PatternFlowVxlanVni {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVxlanVni) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanVni) SetValues(value []int32) PatternFlowVxlanVni {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanVni) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanVni) SetMetricGroup(value string) PatternFlowVxlanVni {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowVxlanVniCounter
//  description is TBD
func (obj *patternFlowVxlanVni) Increment() PatternFlowVxlanVniCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowVxlanVniCounter{}
	}
	return &patternFlowVxlanVniCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowVxlanVniCounter
//  description is TBD
func (obj *patternFlowVxlanVni) Decrement() PatternFlowVxlanVniCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowVxlanVniCounter{}
	}
	return &patternFlowVxlanVniCounter{obj: obj.obj.Decrement}

}

type patternFlowVxlanReserved1 struct {
	obj *snappipb.PatternFlowVxlanReserved1
}

func (obj *patternFlowVxlanReserved1) msg() *snappipb.PatternFlowVxlanReserved1 {
	return obj.obj
}

func (obj *patternFlowVxlanReserved1) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVxlanReserved1) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved1) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVxlanReserved1 interface {
	msg() *snappipb.PatternFlowVxlanReserved1
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowVxlanReserved1
	Values() []int32
	SetValues(value []int32) PatternFlowVxlanReserved1
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowVxlanReserved1
	Increment() PatternFlowVxlanReserved1Counter
	Decrement() PatternFlowVxlanReserved1Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanReserved1) SetValue(value int32) PatternFlowVxlanReserved1 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowVxlanReserved1) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanReserved1) SetValues(value []int32) PatternFlowVxlanReserved1 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanReserved1) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowVxlanReserved1) SetMetricGroup(value string) PatternFlowVxlanReserved1 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowVxlanReserved1Counter
//  description is TBD
func (obj *patternFlowVxlanReserved1) Increment() PatternFlowVxlanReserved1Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowVxlanReserved1Counter{}
	}
	return &patternFlowVxlanReserved1Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowVxlanReserved1Counter
//  description is TBD
func (obj *patternFlowVxlanReserved1) Decrement() PatternFlowVxlanReserved1Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowVxlanReserved1Counter{}
	}
	return &patternFlowVxlanReserved1Counter{obj: obj.obj.Decrement}

}

type patternFlowIpv4Version struct {
	obj *snappipb.PatternFlowIpv4Version
}

func (obj *patternFlowIpv4Version) msg() *snappipb.PatternFlowIpv4Version {
	return obj.obj
}

func (obj *patternFlowIpv4Version) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Version) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4Version) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Version) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4Version interface {
	msg() *snappipb.PatternFlowIpv4Version
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4Version
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4Version
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Version
	Increment() PatternFlowIpv4VersionCounter
	Decrement() PatternFlowIpv4VersionCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Version) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4Version) SetValue(value int32) PatternFlowIpv4Version {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4Version) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4Version) SetValues(value []int32) PatternFlowIpv4Version {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Version) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Version) SetMetricGroup(value string) PatternFlowIpv4Version {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4VersionCounter
//  description is TBD
func (obj *patternFlowIpv4Version) Increment() PatternFlowIpv4VersionCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4VersionCounter{}
	}
	return &patternFlowIpv4VersionCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4VersionCounter
//  description is TBD
func (obj *patternFlowIpv4Version) Decrement() PatternFlowIpv4VersionCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4VersionCounter{}
	}
	return &patternFlowIpv4VersionCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4HeaderLength struct {
	obj *snappipb.PatternFlowIpv4HeaderLength
}

func (obj *patternFlowIpv4HeaderLength) msg() *snappipb.PatternFlowIpv4HeaderLength {
	return obj.obj
}

func (obj *patternFlowIpv4HeaderLength) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4HeaderLength) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderLength) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4HeaderLength interface {
	msg() *snappipb.PatternFlowIpv4HeaderLength
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4HeaderLength
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4HeaderLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4HeaderLength
	Increment() PatternFlowIpv4HeaderLengthCounter
	Decrement() PatternFlowIpv4HeaderLengthCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) SetValue(value int32) PatternFlowIpv4HeaderLength {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) SetValues(value []int32) PatternFlowIpv4HeaderLength {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4HeaderLength) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4HeaderLength) SetMetricGroup(value string) PatternFlowIpv4HeaderLength {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4HeaderLengthCounter
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) Increment() PatternFlowIpv4HeaderLengthCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4HeaderLengthCounter{}
	}
	return &patternFlowIpv4HeaderLengthCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4HeaderLengthCounter
//  description is TBD
func (obj *patternFlowIpv4HeaderLength) Decrement() PatternFlowIpv4HeaderLengthCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4HeaderLengthCounter{}
	}
	return &patternFlowIpv4HeaderLengthCounter{obj: obj.obj.Decrement}

}

type flowIpv4Priority struct {
	obj *snappipb.FlowIpv4Priority
}

func (obj *flowIpv4Priority) msg() *snappipb.FlowIpv4Priority {
	return obj.obj
}

func (obj *flowIpv4Priority) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Priority) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowIpv4Priority) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Priority) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowIpv4Priority interface {
	msg() *snappipb.FlowIpv4Priority
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Raw() PatternFlowIpv4PriorityRaw
	Tos() FlowIpv4Tos
	Dscp() FlowIpv4Dscp
}

// Raw returns a PatternFlowIpv4PriorityRaw
//  description is TBD
func (obj *flowIpv4Priority) Raw() PatternFlowIpv4PriorityRaw {
	if obj.obj.Raw == nil {
		obj.obj.Raw = &snappipb.PatternFlowIpv4PriorityRaw{}
	}
	return &patternFlowIpv4PriorityRaw{obj: obj.obj.Raw}

}

// Tos returns a FlowIpv4Tos
//  description is TBD
func (obj *flowIpv4Priority) Tos() FlowIpv4Tos {
	if obj.obj.Tos == nil {
		obj.obj.Tos = &snappipb.FlowIpv4Tos{}
	}
	return &flowIpv4Tos{obj: obj.obj.Tos}

}

// Dscp returns a FlowIpv4Dscp
//  description is TBD
func (obj *flowIpv4Priority) Dscp() FlowIpv4Dscp {
	if obj.obj.Dscp == nil {
		obj.obj.Dscp = &snappipb.FlowIpv4Dscp{}
	}
	return &flowIpv4Dscp{obj: obj.obj.Dscp}

}

type patternFlowIpv4TotalLength struct {
	obj *snappipb.PatternFlowIpv4TotalLength
}

func (obj *patternFlowIpv4TotalLength) msg() *snappipb.PatternFlowIpv4TotalLength {
	return obj.obj
}

func (obj *patternFlowIpv4TotalLength) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TotalLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TotalLength) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TotalLength) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TotalLength interface {
	msg() *snappipb.PatternFlowIpv4TotalLength
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4TotalLength
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TotalLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TotalLength
	Increment() PatternFlowIpv4TotalLengthCounter
	Decrement() PatternFlowIpv4TotalLengthCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLength) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TotalLength) SetValue(value int32) PatternFlowIpv4TotalLength {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TotalLength) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TotalLength) SetValues(value []int32) PatternFlowIpv4TotalLength {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TotalLength) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TotalLength) SetMetricGroup(value string) PatternFlowIpv4TotalLength {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4TotalLengthCounter
//  description is TBD
func (obj *patternFlowIpv4TotalLength) Increment() PatternFlowIpv4TotalLengthCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4TotalLengthCounter{}
	}
	return &patternFlowIpv4TotalLengthCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4TotalLengthCounter
//  description is TBD
func (obj *patternFlowIpv4TotalLength) Decrement() PatternFlowIpv4TotalLengthCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4TotalLengthCounter{}
	}
	return &patternFlowIpv4TotalLengthCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4Identification struct {
	obj *snappipb.PatternFlowIpv4Identification
}

func (obj *patternFlowIpv4Identification) msg() *snappipb.PatternFlowIpv4Identification {
	return obj.obj
}

func (obj *patternFlowIpv4Identification) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Identification) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4Identification) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Identification) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4Identification interface {
	msg() *snappipb.PatternFlowIpv4Identification
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4Identification
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4Identification
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Identification
	Increment() PatternFlowIpv4IdentificationCounter
	Decrement() PatternFlowIpv4IdentificationCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Identification) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4Identification) SetValue(value int32) PatternFlowIpv4Identification {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4Identification) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4Identification) SetValues(value []int32) PatternFlowIpv4Identification {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Identification) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Identification) SetMetricGroup(value string) PatternFlowIpv4Identification {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4IdentificationCounter
//  description is TBD
func (obj *patternFlowIpv4Identification) Increment() PatternFlowIpv4IdentificationCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4IdentificationCounter{}
	}
	return &patternFlowIpv4IdentificationCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4IdentificationCounter
//  description is TBD
func (obj *patternFlowIpv4Identification) Decrement() PatternFlowIpv4IdentificationCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4IdentificationCounter{}
	}
	return &patternFlowIpv4IdentificationCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4Reserved struct {
	obj *snappipb.PatternFlowIpv4Reserved
}

func (obj *patternFlowIpv4Reserved) msg() *snappipb.PatternFlowIpv4Reserved {
	return obj.obj
}

func (obj *patternFlowIpv4Reserved) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Reserved) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4Reserved) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Reserved) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4Reserved interface {
	msg() *snappipb.PatternFlowIpv4Reserved
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4Reserved
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4Reserved
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Reserved
	Increment() PatternFlowIpv4ReservedCounter
	Decrement() PatternFlowIpv4ReservedCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Reserved) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4Reserved) SetValue(value int32) PatternFlowIpv4Reserved {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4Reserved) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4Reserved) SetValues(value []int32) PatternFlowIpv4Reserved {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Reserved) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Reserved) SetMetricGroup(value string) PatternFlowIpv4Reserved {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4ReservedCounter
//  description is TBD
func (obj *patternFlowIpv4Reserved) Increment() PatternFlowIpv4ReservedCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4ReservedCounter{}
	}
	return &patternFlowIpv4ReservedCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4ReservedCounter
//  description is TBD
func (obj *patternFlowIpv4Reserved) Decrement() PatternFlowIpv4ReservedCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4ReservedCounter{}
	}
	return &patternFlowIpv4ReservedCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4DontFragment struct {
	obj *snappipb.PatternFlowIpv4DontFragment
}

func (obj *patternFlowIpv4DontFragment) msg() *snappipb.PatternFlowIpv4DontFragment {
	return obj.obj
}

func (obj *patternFlowIpv4DontFragment) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DontFragment) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4DontFragment) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DontFragment) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4DontFragment interface {
	msg() *snappipb.PatternFlowIpv4DontFragment
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4DontFragment
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4DontFragment
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4DontFragment
	Increment() PatternFlowIpv4DontFragmentCounter
	Decrement() PatternFlowIpv4DontFragmentCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragment) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DontFragment) SetValue(value int32) PatternFlowIpv4DontFragment {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4DontFragment) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DontFragment) SetValues(value []int32) PatternFlowIpv4DontFragment {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DontFragment) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DontFragment) SetMetricGroup(value string) PatternFlowIpv4DontFragment {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4DontFragmentCounter
//  description is TBD
func (obj *patternFlowIpv4DontFragment) Increment() PatternFlowIpv4DontFragmentCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4DontFragmentCounter{}
	}
	return &patternFlowIpv4DontFragmentCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4DontFragmentCounter
//  description is TBD
func (obj *patternFlowIpv4DontFragment) Decrement() PatternFlowIpv4DontFragmentCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4DontFragmentCounter{}
	}
	return &patternFlowIpv4DontFragmentCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4MoreFragments struct {
	obj *snappipb.PatternFlowIpv4MoreFragments
}

func (obj *patternFlowIpv4MoreFragments) msg() *snappipb.PatternFlowIpv4MoreFragments {
	return obj.obj
}

func (obj *patternFlowIpv4MoreFragments) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4MoreFragments) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4MoreFragments) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4MoreFragments) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4MoreFragments interface {
	msg() *snappipb.PatternFlowIpv4MoreFragments
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4MoreFragments
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4MoreFragments
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4MoreFragments
	Increment() PatternFlowIpv4MoreFragmentsCounter
	Decrement() PatternFlowIpv4MoreFragmentsCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) SetValue(value int32) PatternFlowIpv4MoreFragments {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) SetValues(value []int32) PatternFlowIpv4MoreFragments {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4MoreFragments) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4MoreFragments) SetMetricGroup(value string) PatternFlowIpv4MoreFragments {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4MoreFragmentsCounter
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) Increment() PatternFlowIpv4MoreFragmentsCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4MoreFragmentsCounter{}
	}
	return &patternFlowIpv4MoreFragmentsCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4MoreFragmentsCounter
//  description is TBD
func (obj *patternFlowIpv4MoreFragments) Decrement() PatternFlowIpv4MoreFragmentsCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4MoreFragmentsCounter{}
	}
	return &patternFlowIpv4MoreFragmentsCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4FragmentOffset struct {
	obj *snappipb.PatternFlowIpv4FragmentOffset
}

func (obj *patternFlowIpv4FragmentOffset) msg() *snappipb.PatternFlowIpv4FragmentOffset {
	return obj.obj
}

func (obj *patternFlowIpv4FragmentOffset) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4FragmentOffset) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4FragmentOffset) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4FragmentOffset) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4FragmentOffset interface {
	msg() *snappipb.PatternFlowIpv4FragmentOffset
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4FragmentOffset
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4FragmentOffset
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4FragmentOffset
	Increment() PatternFlowIpv4FragmentOffsetCounter
	Decrement() PatternFlowIpv4FragmentOffsetCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) SetValue(value int32) PatternFlowIpv4FragmentOffset {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) SetValues(value []int32) PatternFlowIpv4FragmentOffset {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4FragmentOffset) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4FragmentOffset) SetMetricGroup(value string) PatternFlowIpv4FragmentOffset {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4FragmentOffsetCounter
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) Increment() PatternFlowIpv4FragmentOffsetCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4FragmentOffsetCounter{}
	}
	return &patternFlowIpv4FragmentOffsetCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4FragmentOffsetCounter
//  description is TBD
func (obj *patternFlowIpv4FragmentOffset) Decrement() PatternFlowIpv4FragmentOffsetCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4FragmentOffsetCounter{}
	}
	return &patternFlowIpv4FragmentOffsetCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4TimeToLive struct {
	obj *snappipb.PatternFlowIpv4TimeToLive
}

func (obj *patternFlowIpv4TimeToLive) msg() *snappipb.PatternFlowIpv4TimeToLive {
	return obj.obj
}

func (obj *patternFlowIpv4TimeToLive) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TimeToLive) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TimeToLive) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TimeToLive) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TimeToLive interface {
	msg() *snappipb.PatternFlowIpv4TimeToLive
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4TimeToLive
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TimeToLive
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TimeToLive
	Increment() PatternFlowIpv4TimeToLiveCounter
	Decrement() PatternFlowIpv4TimeToLiveCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) SetValue(value int32) PatternFlowIpv4TimeToLive {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) SetValues(value []int32) PatternFlowIpv4TimeToLive {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TimeToLive) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TimeToLive) SetMetricGroup(value string) PatternFlowIpv4TimeToLive {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4TimeToLiveCounter
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) Increment() PatternFlowIpv4TimeToLiveCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4TimeToLiveCounter{}
	}
	return &patternFlowIpv4TimeToLiveCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4TimeToLiveCounter
//  description is TBD
func (obj *patternFlowIpv4TimeToLive) Decrement() PatternFlowIpv4TimeToLiveCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4TimeToLiveCounter{}
	}
	return &patternFlowIpv4TimeToLiveCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4Protocol struct {
	obj *snappipb.PatternFlowIpv4Protocol
}

func (obj *patternFlowIpv4Protocol) msg() *snappipb.PatternFlowIpv4Protocol {
	return obj.obj
}

func (obj *patternFlowIpv4Protocol) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Protocol) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4Protocol) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Protocol) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4Protocol interface {
	msg() *snappipb.PatternFlowIpv4Protocol
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4Protocol
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4Protocol
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Protocol
	Increment() PatternFlowIpv4ProtocolCounter
	Decrement() PatternFlowIpv4ProtocolCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4Protocol) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4Protocol) SetValue(value int32) PatternFlowIpv4Protocol {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4Protocol) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4Protocol) SetValues(value []int32) PatternFlowIpv4Protocol {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Protocol) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Protocol) SetMetricGroup(value string) PatternFlowIpv4Protocol {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4ProtocolCounter
//  description is TBD
func (obj *patternFlowIpv4Protocol) Increment() PatternFlowIpv4ProtocolCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4ProtocolCounter{}
	}
	return &patternFlowIpv4ProtocolCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4ProtocolCounter
//  description is TBD
func (obj *patternFlowIpv4Protocol) Decrement() PatternFlowIpv4ProtocolCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4ProtocolCounter{}
	}
	return &patternFlowIpv4ProtocolCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4HeaderChecksum struct {
	obj *snappipb.PatternFlowIpv4HeaderChecksum
}

func (obj *patternFlowIpv4HeaderChecksum) msg() *snappipb.PatternFlowIpv4HeaderChecksum {
	return obj.obj
}

func (obj *patternFlowIpv4HeaderChecksum) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderChecksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4HeaderChecksum) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderChecksum) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4HeaderChecksum interface {
	msg() *snappipb.PatternFlowIpv4HeaderChecksum
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Custom() int32
	SetCustom(value int32) PatternFlowIpv4HeaderChecksum
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIpv4HeaderChecksum) Custom() int32 {
	return *obj.obj.Custom
}

// SetCustom sets the int32 value in the None object
//  A custom checksum value
func (obj *patternFlowIpv4HeaderChecksum) SetCustom(value int32) PatternFlowIpv4HeaderChecksum {
	obj.obj.Custom = &value
	return obj
}

type patternFlowIpv4Src struct {
	obj *snappipb.PatternFlowIpv4Src
}

func (obj *patternFlowIpv4Src) msg() *snappipb.PatternFlowIpv4Src {
	return obj.obj
}

func (obj *patternFlowIpv4Src) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Src) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4Src) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Src) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4Src interface {
	msg() *snappipb.PatternFlowIpv4Src
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowIpv4Src
	Values() []string
	SetValues(value []string) PatternFlowIpv4Src
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Src
	Increment() PatternFlowIpv4SrcCounter
	Decrement() PatternFlowIpv4SrcCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv4Src) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv4Src) SetValue(value string) PatternFlowIpv4Src {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowIpv4Src) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowIpv4Src) SetValues(value []string) PatternFlowIpv4Src {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Src) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Src) SetMetricGroup(value string) PatternFlowIpv4Src {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4SrcCounter
//  description is TBD
func (obj *patternFlowIpv4Src) Increment() PatternFlowIpv4SrcCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4SrcCounter{}
	}
	return &patternFlowIpv4SrcCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4SrcCounter
//  description is TBD
func (obj *patternFlowIpv4Src) Decrement() PatternFlowIpv4SrcCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4SrcCounter{}
	}
	return &patternFlowIpv4SrcCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4Dst struct {
	obj *snappipb.PatternFlowIpv4Dst
}

func (obj *patternFlowIpv4Dst) msg() *snappipb.PatternFlowIpv4Dst {
	return obj.obj
}

func (obj *patternFlowIpv4Dst) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Dst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4Dst) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4Dst) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4Dst interface {
	msg() *snappipb.PatternFlowIpv4Dst
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowIpv4Dst
	Values() []string
	SetValues(value []string) PatternFlowIpv4Dst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4Dst
	Increment() PatternFlowIpv4DstCounter
	Decrement() PatternFlowIpv4DstCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv4Dst) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv4Dst) SetValue(value string) PatternFlowIpv4Dst {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowIpv4Dst) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowIpv4Dst) SetValues(value []string) PatternFlowIpv4Dst {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Dst) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4Dst) SetMetricGroup(value string) PatternFlowIpv4Dst {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4DstCounter
//  description is TBD
func (obj *patternFlowIpv4Dst) Increment() PatternFlowIpv4DstCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4DstCounter{}
	}
	return &patternFlowIpv4DstCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4DstCounter
//  description is TBD
func (obj *patternFlowIpv4Dst) Decrement() PatternFlowIpv4DstCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4DstCounter{}
	}
	return &patternFlowIpv4DstCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv6Version struct {
	obj *snappipb.PatternFlowIpv6Version
}

func (obj *patternFlowIpv6Version) msg() *snappipb.PatternFlowIpv6Version {
	return obj.obj
}

func (obj *patternFlowIpv6Version) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Version) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6Version) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Version) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6Version interface {
	msg() *snappipb.PatternFlowIpv6Version
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv6Version
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6Version
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6Version
	Increment() PatternFlowIpv6VersionCounter
	Decrement() PatternFlowIpv6VersionCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6Version) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6Version) SetValue(value int32) PatternFlowIpv6Version {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6Version) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6Version) SetValues(value []int32) PatternFlowIpv6Version {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Version) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Version) SetMetricGroup(value string) PatternFlowIpv6Version {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv6VersionCounter
//  description is TBD
func (obj *patternFlowIpv6Version) Increment() PatternFlowIpv6VersionCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv6VersionCounter{}
	}
	return &patternFlowIpv6VersionCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv6VersionCounter
//  description is TBD
func (obj *patternFlowIpv6Version) Decrement() PatternFlowIpv6VersionCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv6VersionCounter{}
	}
	return &patternFlowIpv6VersionCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv6TrafficClass struct {
	obj *snappipb.PatternFlowIpv6TrafficClass
}

func (obj *patternFlowIpv6TrafficClass) msg() *snappipb.PatternFlowIpv6TrafficClass {
	return obj.obj
}

func (obj *patternFlowIpv6TrafficClass) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6TrafficClass) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6TrafficClass) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6TrafficClass) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6TrafficClass interface {
	msg() *snappipb.PatternFlowIpv6TrafficClass
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv6TrafficClass
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6TrafficClass
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6TrafficClass
	Increment() PatternFlowIpv6TrafficClassCounter
	Decrement() PatternFlowIpv6TrafficClassCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) SetValue(value int32) PatternFlowIpv6TrafficClass {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) SetValues(value []int32) PatternFlowIpv6TrafficClass {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6TrafficClass) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6TrafficClass) SetMetricGroup(value string) PatternFlowIpv6TrafficClass {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv6TrafficClassCounter
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) Increment() PatternFlowIpv6TrafficClassCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv6TrafficClassCounter{}
	}
	return &patternFlowIpv6TrafficClassCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv6TrafficClassCounter
//  description is TBD
func (obj *patternFlowIpv6TrafficClass) Decrement() PatternFlowIpv6TrafficClassCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv6TrafficClassCounter{}
	}
	return &patternFlowIpv6TrafficClassCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv6FlowLabel struct {
	obj *snappipb.PatternFlowIpv6FlowLabel
}

func (obj *patternFlowIpv6FlowLabel) msg() *snappipb.PatternFlowIpv6FlowLabel {
	return obj.obj
}

func (obj *patternFlowIpv6FlowLabel) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6FlowLabel) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6FlowLabel) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6FlowLabel) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6FlowLabel interface {
	msg() *snappipb.PatternFlowIpv6FlowLabel
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv6FlowLabel
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6FlowLabel
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6FlowLabel
	Increment() PatternFlowIpv6FlowLabelCounter
	Decrement() PatternFlowIpv6FlowLabelCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) SetValue(value int32) PatternFlowIpv6FlowLabel {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) SetValues(value []int32) PatternFlowIpv6FlowLabel {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6FlowLabel) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6FlowLabel) SetMetricGroup(value string) PatternFlowIpv6FlowLabel {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv6FlowLabelCounter
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) Increment() PatternFlowIpv6FlowLabelCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv6FlowLabelCounter{}
	}
	return &patternFlowIpv6FlowLabelCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv6FlowLabelCounter
//  description is TBD
func (obj *patternFlowIpv6FlowLabel) Decrement() PatternFlowIpv6FlowLabelCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv6FlowLabelCounter{}
	}
	return &patternFlowIpv6FlowLabelCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv6PayloadLength struct {
	obj *snappipb.PatternFlowIpv6PayloadLength
}

func (obj *patternFlowIpv6PayloadLength) msg() *snappipb.PatternFlowIpv6PayloadLength {
	return obj.obj
}

func (obj *patternFlowIpv6PayloadLength) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6PayloadLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6PayloadLength) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6PayloadLength) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6PayloadLength interface {
	msg() *snappipb.PatternFlowIpv6PayloadLength
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv6PayloadLength
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6PayloadLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6PayloadLength
	Increment() PatternFlowIpv6PayloadLengthCounter
	Decrement() PatternFlowIpv6PayloadLengthCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) SetValue(value int32) PatternFlowIpv6PayloadLength {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) SetValues(value []int32) PatternFlowIpv6PayloadLength {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6PayloadLength) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6PayloadLength) SetMetricGroup(value string) PatternFlowIpv6PayloadLength {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv6PayloadLengthCounter
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) Increment() PatternFlowIpv6PayloadLengthCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv6PayloadLengthCounter{}
	}
	return &patternFlowIpv6PayloadLengthCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv6PayloadLengthCounter
//  description is TBD
func (obj *patternFlowIpv6PayloadLength) Decrement() PatternFlowIpv6PayloadLengthCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv6PayloadLengthCounter{}
	}
	return &patternFlowIpv6PayloadLengthCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv6NextHeader struct {
	obj *snappipb.PatternFlowIpv6NextHeader
}

func (obj *patternFlowIpv6NextHeader) msg() *snappipb.PatternFlowIpv6NextHeader {
	return obj.obj
}

func (obj *patternFlowIpv6NextHeader) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6NextHeader) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6NextHeader) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6NextHeader) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6NextHeader interface {
	msg() *snappipb.PatternFlowIpv6NextHeader
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv6NextHeader
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6NextHeader
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6NextHeader
	Increment() PatternFlowIpv6NextHeaderCounter
	Decrement() PatternFlowIpv6NextHeaderCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeader) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6NextHeader) SetValue(value int32) PatternFlowIpv6NextHeader {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6NextHeader) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6NextHeader) SetValues(value []int32) PatternFlowIpv6NextHeader {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6NextHeader) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6NextHeader) SetMetricGroup(value string) PatternFlowIpv6NextHeader {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv6NextHeaderCounter
//  description is TBD
func (obj *patternFlowIpv6NextHeader) Increment() PatternFlowIpv6NextHeaderCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv6NextHeaderCounter{}
	}
	return &patternFlowIpv6NextHeaderCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv6NextHeaderCounter
//  description is TBD
func (obj *patternFlowIpv6NextHeader) Decrement() PatternFlowIpv6NextHeaderCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv6NextHeaderCounter{}
	}
	return &patternFlowIpv6NextHeaderCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv6HopLimit struct {
	obj *snappipb.PatternFlowIpv6HopLimit
}

func (obj *patternFlowIpv6HopLimit) msg() *snappipb.PatternFlowIpv6HopLimit {
	return obj.obj
}

func (obj *patternFlowIpv6HopLimit) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6HopLimit) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6HopLimit) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6HopLimit) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6HopLimit interface {
	msg() *snappipb.PatternFlowIpv6HopLimit
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv6HopLimit
	Values() []int32
	SetValues(value []int32) PatternFlowIpv6HopLimit
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6HopLimit
	Increment() PatternFlowIpv6HopLimitCounter
	Decrement() PatternFlowIpv6HopLimitCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimit) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6HopLimit) SetValue(value int32) PatternFlowIpv6HopLimit {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv6HopLimit) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6HopLimit) SetValues(value []int32) PatternFlowIpv6HopLimit {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6HopLimit) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6HopLimit) SetMetricGroup(value string) PatternFlowIpv6HopLimit {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv6HopLimitCounter
//  description is TBD
func (obj *patternFlowIpv6HopLimit) Increment() PatternFlowIpv6HopLimitCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv6HopLimitCounter{}
	}
	return &patternFlowIpv6HopLimitCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv6HopLimitCounter
//  description is TBD
func (obj *patternFlowIpv6HopLimit) Decrement() PatternFlowIpv6HopLimitCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv6HopLimitCounter{}
	}
	return &patternFlowIpv6HopLimitCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv6Src struct {
	obj *snappipb.PatternFlowIpv6Src
}

func (obj *patternFlowIpv6Src) msg() *snappipb.PatternFlowIpv6Src {
	return obj.obj
}

func (obj *patternFlowIpv6Src) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Src) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6Src) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Src) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6Src interface {
	msg() *snappipb.PatternFlowIpv6Src
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowIpv6Src
	Values() []string
	SetValues(value []string) PatternFlowIpv6Src
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6Src
	Increment() PatternFlowIpv6SrcCounter
	Decrement() PatternFlowIpv6SrcCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv6Src) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv6Src) SetValue(value string) PatternFlowIpv6Src {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowIpv6Src) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowIpv6Src) SetValues(value []string) PatternFlowIpv6Src {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Src) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Src) SetMetricGroup(value string) PatternFlowIpv6Src {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv6SrcCounter
//  description is TBD
func (obj *patternFlowIpv6Src) Increment() PatternFlowIpv6SrcCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv6SrcCounter{}
	}
	return &patternFlowIpv6SrcCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv6SrcCounter
//  description is TBD
func (obj *patternFlowIpv6Src) Decrement() PatternFlowIpv6SrcCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv6SrcCounter{}
	}
	return &patternFlowIpv6SrcCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv6Dst struct {
	obj *snappipb.PatternFlowIpv6Dst
}

func (obj *patternFlowIpv6Dst) msg() *snappipb.PatternFlowIpv6Dst {
	return obj.obj
}

func (obj *patternFlowIpv6Dst) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Dst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6Dst) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6Dst) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6Dst interface {
	msg() *snappipb.PatternFlowIpv6Dst
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowIpv6Dst
	Values() []string
	SetValues(value []string) PatternFlowIpv6Dst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv6Dst
	Increment() PatternFlowIpv6DstCounter
	Decrement() PatternFlowIpv6DstCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowIpv6Dst) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv6Dst) SetValue(value string) PatternFlowIpv6Dst {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowIpv6Dst) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowIpv6Dst) SetValues(value []string) PatternFlowIpv6Dst {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Dst) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv6Dst) SetMetricGroup(value string) PatternFlowIpv6Dst {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv6DstCounter
//  description is TBD
func (obj *patternFlowIpv6Dst) Increment() PatternFlowIpv6DstCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv6DstCounter{}
	}
	return &patternFlowIpv6DstCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv6DstCounter
//  description is TBD
func (obj *patternFlowIpv6Dst) Decrement() PatternFlowIpv6DstCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv6DstCounter{}
	}
	return &patternFlowIpv6DstCounter{obj: obj.obj.Decrement}

}

type patternFlowPfcPauseDst struct {
	obj *snappipb.PatternFlowPfcPauseDst
}

func (obj *patternFlowPfcPauseDst) msg() *snappipb.PatternFlowPfcPauseDst {
	return obj.obj
}

func (obj *patternFlowPfcPauseDst) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseDst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPauseDst) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseDst) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPauseDst interface {
	msg() *snappipb.PatternFlowPfcPauseDst
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowPfcPauseDst
	Values() []string
	SetValues(value []string) PatternFlowPfcPauseDst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPauseDst
	Increment() PatternFlowPfcPauseDstCounter
	Decrement() PatternFlowPfcPauseDstCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowPfcPauseDst) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseDst) SetValue(value string) PatternFlowPfcPauseDst {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowPfcPauseDst) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseDst) SetValues(value []string) PatternFlowPfcPauseDst {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseDst) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseDst) SetMetricGroup(value string) PatternFlowPfcPauseDst {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPauseDstCounter
//  description is TBD
func (obj *patternFlowPfcPauseDst) Increment() PatternFlowPfcPauseDstCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPauseDstCounter{}
	}
	return &patternFlowPfcPauseDstCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPauseDstCounter
//  description is TBD
func (obj *patternFlowPfcPauseDst) Decrement() PatternFlowPfcPauseDstCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPauseDstCounter{}
	}
	return &patternFlowPfcPauseDstCounter{obj: obj.obj.Decrement}

}

type patternFlowPfcPauseSrc struct {
	obj *snappipb.PatternFlowPfcPauseSrc
}

func (obj *patternFlowPfcPauseSrc) msg() *snappipb.PatternFlowPfcPauseSrc {
	return obj.obj
}

func (obj *patternFlowPfcPauseSrc) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseSrc) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPauseSrc) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseSrc) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPauseSrc interface {
	msg() *snappipb.PatternFlowPfcPauseSrc
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowPfcPauseSrc
	Values() []string
	SetValues(value []string) PatternFlowPfcPauseSrc
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPauseSrc
	Increment() PatternFlowPfcPauseSrcCounter
	Decrement() PatternFlowPfcPauseSrcCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowPfcPauseSrc) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseSrc) SetValue(value string) PatternFlowPfcPauseSrc {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowPfcPauseSrc) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseSrc) SetValues(value []string) PatternFlowPfcPauseSrc {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseSrc) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseSrc) SetMetricGroup(value string) PatternFlowPfcPauseSrc {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPauseSrcCounter
//  description is TBD
func (obj *patternFlowPfcPauseSrc) Increment() PatternFlowPfcPauseSrcCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPauseSrcCounter{}
	}
	return &patternFlowPfcPauseSrcCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPauseSrcCounter
//  description is TBD
func (obj *patternFlowPfcPauseSrc) Decrement() PatternFlowPfcPauseSrcCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPauseSrcCounter{}
	}
	return &patternFlowPfcPauseSrcCounter{obj: obj.obj.Decrement}

}

type patternFlowPfcPauseEtherType struct {
	obj *snappipb.PatternFlowPfcPauseEtherType
}

func (obj *patternFlowPfcPauseEtherType) msg() *snappipb.PatternFlowPfcPauseEtherType {
	return obj.obj
}

func (obj *patternFlowPfcPauseEtherType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseEtherType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPauseEtherType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseEtherType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPauseEtherType interface {
	msg() *snappipb.PatternFlowPfcPauseEtherType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPfcPauseEtherType
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPauseEtherType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPauseEtherType
	Increment() PatternFlowPfcPauseEtherTypeCounter
	Decrement() PatternFlowPfcPauseEtherTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) SetValue(value int32) PatternFlowPfcPauseEtherType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) SetValues(value []int32) PatternFlowPfcPauseEtherType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseEtherType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseEtherType) SetMetricGroup(value string) PatternFlowPfcPauseEtherType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) Increment() PatternFlowPfcPauseEtherTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPauseEtherTypeCounter{}
	}
	return &patternFlowPfcPauseEtherTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowPfcPauseEtherType) Decrement() PatternFlowPfcPauseEtherTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPauseEtherTypeCounter{}
	}
	return &patternFlowPfcPauseEtherTypeCounter{obj: obj.obj.Decrement}

}

type patternFlowPfcPauseControlOpCode struct {
	obj *snappipb.PatternFlowPfcPauseControlOpCode
}

func (obj *patternFlowPfcPauseControlOpCode) msg() *snappipb.PatternFlowPfcPauseControlOpCode {
	return obj.obj
}

func (obj *patternFlowPfcPauseControlOpCode) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseControlOpCode) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPauseControlOpCode) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseControlOpCode) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPauseControlOpCode interface {
	msg() *snappipb.PatternFlowPfcPauseControlOpCode
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPfcPauseControlOpCode
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPauseControlOpCode
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPauseControlOpCode
	Increment() PatternFlowPfcPauseControlOpCodeCounter
	Decrement() PatternFlowPfcPauseControlOpCodeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) SetValue(value int32) PatternFlowPfcPauseControlOpCode {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) SetValues(value []int32) PatternFlowPfcPauseControlOpCode {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseControlOpCode) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseControlOpCode) SetMetricGroup(value string) PatternFlowPfcPauseControlOpCode {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) Increment() PatternFlowPfcPauseControlOpCodeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPauseControlOpCodeCounter{}
	}
	return &patternFlowPfcPauseControlOpCodeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCode) Decrement() PatternFlowPfcPauseControlOpCodeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPauseControlOpCodeCounter{}
	}
	return &patternFlowPfcPauseControlOpCodeCounter{obj: obj.obj.Decrement}

}

type patternFlowPfcPauseClassEnableVector struct {
	obj *snappipb.PatternFlowPfcPauseClassEnableVector
}

func (obj *patternFlowPfcPauseClassEnableVector) msg() *snappipb.PatternFlowPfcPauseClassEnableVector {
	return obj.obj
}

func (obj *patternFlowPfcPauseClassEnableVector) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseClassEnableVector) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPauseClassEnableVector) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseClassEnableVector) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPauseClassEnableVector interface {
	msg() *snappipb.PatternFlowPfcPauseClassEnableVector
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPfcPauseClassEnableVector
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPauseClassEnableVector
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPauseClassEnableVector
	Increment() PatternFlowPfcPauseClassEnableVectorCounter
	Decrement() PatternFlowPfcPauseClassEnableVectorCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) SetValue(value int32) PatternFlowPfcPauseClassEnableVector {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) SetValues(value []int32) PatternFlowPfcPauseClassEnableVector {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseClassEnableVector) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPauseClassEnableVector) SetMetricGroup(value string) PatternFlowPfcPauseClassEnableVector {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPauseClassEnableVectorCounter
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) Increment() PatternFlowPfcPauseClassEnableVectorCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPauseClassEnableVectorCounter{}
	}
	return &patternFlowPfcPauseClassEnableVectorCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPauseClassEnableVectorCounter
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVector) Decrement() PatternFlowPfcPauseClassEnableVectorCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPauseClassEnableVectorCounter{}
	}
	return &patternFlowPfcPauseClassEnableVectorCounter{obj: obj.obj.Decrement}

}

type patternFlowPfcPausePauseClass0 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass0
}

func (obj *patternFlowPfcPausePauseClass0) msg() *snappipb.PatternFlowPfcPausePauseClass0 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass0) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass0) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass0) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass0) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass0 interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass0
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass0
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass0
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass0
	Increment() PatternFlowPfcPausePauseClass0Counter
	Decrement() PatternFlowPfcPausePauseClass0Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) SetValue(value int32) PatternFlowPfcPausePauseClass0 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) SetValues(value []int32) PatternFlowPfcPausePauseClass0 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass0) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass0) SetMetricGroup(value string) PatternFlowPfcPausePauseClass0 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass0Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) Increment() PatternFlowPfcPausePauseClass0Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPausePauseClass0Counter{}
	}
	return &patternFlowPfcPausePauseClass0Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPausePauseClass0Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0) Decrement() PatternFlowPfcPausePauseClass0Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPausePauseClass0Counter{}
	}
	return &patternFlowPfcPausePauseClass0Counter{obj: obj.obj.Decrement}

}

type patternFlowPfcPausePauseClass1 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass1
}

func (obj *patternFlowPfcPausePauseClass1) msg() *snappipb.PatternFlowPfcPausePauseClass1 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass1) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass1) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass1) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass1 interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass1
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass1
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass1
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass1
	Increment() PatternFlowPfcPausePauseClass1Counter
	Decrement() PatternFlowPfcPausePauseClass1Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) SetValue(value int32) PatternFlowPfcPausePauseClass1 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) SetValues(value []int32) PatternFlowPfcPausePauseClass1 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass1) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass1) SetMetricGroup(value string) PatternFlowPfcPausePauseClass1 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass1Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) Increment() PatternFlowPfcPausePauseClass1Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPausePauseClass1Counter{}
	}
	return &patternFlowPfcPausePauseClass1Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPausePauseClass1Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1) Decrement() PatternFlowPfcPausePauseClass1Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPausePauseClass1Counter{}
	}
	return &patternFlowPfcPausePauseClass1Counter{obj: obj.obj.Decrement}

}

type patternFlowPfcPausePauseClass2 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass2
}

func (obj *patternFlowPfcPausePauseClass2) msg() *snappipb.PatternFlowPfcPausePauseClass2 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass2) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass2) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass2) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass2) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass2 interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass2
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass2
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass2
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass2
	Increment() PatternFlowPfcPausePauseClass2Counter
	Decrement() PatternFlowPfcPausePauseClass2Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) SetValue(value int32) PatternFlowPfcPausePauseClass2 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) SetValues(value []int32) PatternFlowPfcPausePauseClass2 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass2) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass2) SetMetricGroup(value string) PatternFlowPfcPausePauseClass2 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass2Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) Increment() PatternFlowPfcPausePauseClass2Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPausePauseClass2Counter{}
	}
	return &patternFlowPfcPausePauseClass2Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPausePauseClass2Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2) Decrement() PatternFlowPfcPausePauseClass2Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPausePauseClass2Counter{}
	}
	return &patternFlowPfcPausePauseClass2Counter{obj: obj.obj.Decrement}

}

type patternFlowPfcPausePauseClass3 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass3
}

func (obj *patternFlowPfcPausePauseClass3) msg() *snappipb.PatternFlowPfcPausePauseClass3 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass3) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass3) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass3) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass3) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass3 interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass3
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass3
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass3
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass3
	Increment() PatternFlowPfcPausePauseClass3Counter
	Decrement() PatternFlowPfcPausePauseClass3Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) SetValue(value int32) PatternFlowPfcPausePauseClass3 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) SetValues(value []int32) PatternFlowPfcPausePauseClass3 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass3) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass3) SetMetricGroup(value string) PatternFlowPfcPausePauseClass3 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass3Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) Increment() PatternFlowPfcPausePauseClass3Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPausePauseClass3Counter{}
	}
	return &patternFlowPfcPausePauseClass3Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPausePauseClass3Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3) Decrement() PatternFlowPfcPausePauseClass3Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPausePauseClass3Counter{}
	}
	return &patternFlowPfcPausePauseClass3Counter{obj: obj.obj.Decrement}

}

type patternFlowPfcPausePauseClass4 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass4
}

func (obj *patternFlowPfcPausePauseClass4) msg() *snappipb.PatternFlowPfcPausePauseClass4 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass4) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass4) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass4) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass4) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass4 interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass4
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass4
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass4
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass4
	Increment() PatternFlowPfcPausePauseClass4Counter
	Decrement() PatternFlowPfcPausePauseClass4Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) SetValue(value int32) PatternFlowPfcPausePauseClass4 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) SetValues(value []int32) PatternFlowPfcPausePauseClass4 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass4) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass4) SetMetricGroup(value string) PatternFlowPfcPausePauseClass4 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass4Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) Increment() PatternFlowPfcPausePauseClass4Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPausePauseClass4Counter{}
	}
	return &patternFlowPfcPausePauseClass4Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPausePauseClass4Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4) Decrement() PatternFlowPfcPausePauseClass4Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPausePauseClass4Counter{}
	}
	return &patternFlowPfcPausePauseClass4Counter{obj: obj.obj.Decrement}

}

type patternFlowPfcPausePauseClass5 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass5
}

func (obj *patternFlowPfcPausePauseClass5) msg() *snappipb.PatternFlowPfcPausePauseClass5 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass5) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass5) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass5) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass5) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass5 interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass5
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass5
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass5
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass5
	Increment() PatternFlowPfcPausePauseClass5Counter
	Decrement() PatternFlowPfcPausePauseClass5Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) SetValue(value int32) PatternFlowPfcPausePauseClass5 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) SetValues(value []int32) PatternFlowPfcPausePauseClass5 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass5) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass5) SetMetricGroup(value string) PatternFlowPfcPausePauseClass5 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass5Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) Increment() PatternFlowPfcPausePauseClass5Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPausePauseClass5Counter{}
	}
	return &patternFlowPfcPausePauseClass5Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPausePauseClass5Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5) Decrement() PatternFlowPfcPausePauseClass5Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPausePauseClass5Counter{}
	}
	return &patternFlowPfcPausePauseClass5Counter{obj: obj.obj.Decrement}

}

type patternFlowPfcPausePauseClass6 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass6
}

func (obj *patternFlowPfcPausePauseClass6) msg() *snappipb.PatternFlowPfcPausePauseClass6 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass6) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass6) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass6) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass6) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass6 interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass6
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass6
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass6
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass6
	Increment() PatternFlowPfcPausePauseClass6Counter
	Decrement() PatternFlowPfcPausePauseClass6Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) SetValue(value int32) PatternFlowPfcPausePauseClass6 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) SetValues(value []int32) PatternFlowPfcPausePauseClass6 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass6) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass6) SetMetricGroup(value string) PatternFlowPfcPausePauseClass6 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass6Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) Increment() PatternFlowPfcPausePauseClass6Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPausePauseClass6Counter{}
	}
	return &patternFlowPfcPausePauseClass6Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPausePauseClass6Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6) Decrement() PatternFlowPfcPausePauseClass6Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPausePauseClass6Counter{}
	}
	return &patternFlowPfcPausePauseClass6Counter{obj: obj.obj.Decrement}

}

type patternFlowPfcPausePauseClass7 struct {
	obj *snappipb.PatternFlowPfcPausePauseClass7
}

func (obj *patternFlowPfcPausePauseClass7) msg() *snappipb.PatternFlowPfcPausePauseClass7 {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass7) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass7) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass7) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass7) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass7 interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass7
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPfcPausePauseClass7
	Values() []int32
	SetValues(value []int32) PatternFlowPfcPausePauseClass7
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPfcPausePauseClass7
	Increment() PatternFlowPfcPausePauseClass7Counter
	Decrement() PatternFlowPfcPausePauseClass7Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) SetValue(value int32) PatternFlowPfcPausePauseClass7 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) SetValues(value []int32) PatternFlowPfcPausePauseClass7 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass7) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPfcPausePauseClass7) SetMetricGroup(value string) PatternFlowPfcPausePauseClass7 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPfcPausePauseClass7Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) Increment() PatternFlowPfcPausePauseClass7Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPfcPausePauseClass7Counter{}
	}
	return &patternFlowPfcPausePauseClass7Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPfcPausePauseClass7Counter
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7) Decrement() PatternFlowPfcPausePauseClass7Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPfcPausePauseClass7Counter{}
	}
	return &patternFlowPfcPausePauseClass7Counter{obj: obj.obj.Decrement}

}

type patternFlowEthernetPauseDst struct {
	obj *snappipb.PatternFlowEthernetPauseDst
}

func (obj *patternFlowEthernetPauseDst) msg() *snappipb.PatternFlowEthernetPauseDst {
	return obj.obj
}

func (obj *patternFlowEthernetPauseDst) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseDst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPauseDst) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseDst) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPauseDst interface {
	msg() *snappipb.PatternFlowEthernetPauseDst
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowEthernetPauseDst
	Values() []string
	SetValues(value []string) PatternFlowEthernetPauseDst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPauseDst
	Increment() PatternFlowEthernetPauseDstCounter
	Decrement() PatternFlowEthernetPauseDstCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseDst) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseDst) SetValue(value string) PatternFlowEthernetPauseDst {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowEthernetPauseDst) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseDst) SetValues(value []string) PatternFlowEthernetPauseDst {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseDst) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseDst) SetMetricGroup(value string) PatternFlowEthernetPauseDst {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowEthernetPauseDstCounter
//  description is TBD
func (obj *patternFlowEthernetPauseDst) Increment() PatternFlowEthernetPauseDstCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowEthernetPauseDstCounter{}
	}
	return &patternFlowEthernetPauseDstCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowEthernetPauseDstCounter
//  description is TBD
func (obj *patternFlowEthernetPauseDst) Decrement() PatternFlowEthernetPauseDstCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowEthernetPauseDstCounter{}
	}
	return &patternFlowEthernetPauseDstCounter{obj: obj.obj.Decrement}

}

type patternFlowEthernetPauseSrc struct {
	obj *snappipb.PatternFlowEthernetPauseSrc
}

func (obj *patternFlowEthernetPauseSrc) msg() *snappipb.PatternFlowEthernetPauseSrc {
	return obj.obj
}

func (obj *patternFlowEthernetPauseSrc) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseSrc) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPauseSrc) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseSrc) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPauseSrc interface {
	msg() *snappipb.PatternFlowEthernetPauseSrc
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowEthernetPauseSrc
	Values() []string
	SetValues(value []string) PatternFlowEthernetPauseSrc
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPauseSrc
	Increment() PatternFlowEthernetPauseSrcCounter
	Decrement() PatternFlowEthernetPauseSrcCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) SetValue(value string) PatternFlowEthernetPauseSrc {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) SetValues(value []string) PatternFlowEthernetPauseSrc {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseSrc) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseSrc) SetMetricGroup(value string) PatternFlowEthernetPauseSrc {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowEthernetPauseSrcCounter
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) Increment() PatternFlowEthernetPauseSrcCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowEthernetPauseSrcCounter{}
	}
	return &patternFlowEthernetPauseSrcCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowEthernetPauseSrcCounter
//  description is TBD
func (obj *patternFlowEthernetPauseSrc) Decrement() PatternFlowEthernetPauseSrcCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowEthernetPauseSrcCounter{}
	}
	return &patternFlowEthernetPauseSrcCounter{obj: obj.obj.Decrement}

}

type patternFlowEthernetPauseEtherType struct {
	obj *snappipb.PatternFlowEthernetPauseEtherType
}

func (obj *patternFlowEthernetPauseEtherType) msg() *snappipb.PatternFlowEthernetPauseEtherType {
	return obj.obj
}

func (obj *patternFlowEthernetPauseEtherType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseEtherType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPauseEtherType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseEtherType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPauseEtherType interface {
	msg() *snappipb.PatternFlowEthernetPauseEtherType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowEthernetPauseEtherType
	Values() []int32
	SetValues(value []int32) PatternFlowEthernetPauseEtherType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPauseEtherType
	Increment() PatternFlowEthernetPauseEtherTypeCounter
	Decrement() PatternFlowEthernetPauseEtherTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) SetValue(value int32) PatternFlowEthernetPauseEtherType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) SetValues(value []int32) PatternFlowEthernetPauseEtherType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseEtherType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseEtherType) SetMetricGroup(value string) PatternFlowEthernetPauseEtherType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowEthernetPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) Increment() PatternFlowEthernetPauseEtherTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowEthernetPauseEtherTypeCounter{}
	}
	return &patternFlowEthernetPauseEtherTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowEthernetPauseEtherTypeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseEtherType) Decrement() PatternFlowEthernetPauseEtherTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowEthernetPauseEtherTypeCounter{}
	}
	return &patternFlowEthernetPauseEtherTypeCounter{obj: obj.obj.Decrement}

}

type patternFlowEthernetPauseControlOpCode struct {
	obj *snappipb.PatternFlowEthernetPauseControlOpCode
}

func (obj *patternFlowEthernetPauseControlOpCode) msg() *snappipb.PatternFlowEthernetPauseControlOpCode {
	return obj.obj
}

func (obj *patternFlowEthernetPauseControlOpCode) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseControlOpCode) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPauseControlOpCode) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseControlOpCode) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPauseControlOpCode interface {
	msg() *snappipb.PatternFlowEthernetPauseControlOpCode
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowEthernetPauseControlOpCode
	Values() []int32
	SetValues(value []int32) PatternFlowEthernetPauseControlOpCode
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPauseControlOpCode
	Increment() PatternFlowEthernetPauseControlOpCodeCounter
	Decrement() PatternFlowEthernetPauseControlOpCodeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) SetValue(value int32) PatternFlowEthernetPauseControlOpCode {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) SetValues(value []int32) PatternFlowEthernetPauseControlOpCode {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseControlOpCode) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseControlOpCode) SetMetricGroup(value string) PatternFlowEthernetPauseControlOpCode {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowEthernetPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) Increment() PatternFlowEthernetPauseControlOpCodeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowEthernetPauseControlOpCodeCounter{}
	}
	return &patternFlowEthernetPauseControlOpCodeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowEthernetPauseControlOpCodeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCode) Decrement() PatternFlowEthernetPauseControlOpCodeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowEthernetPauseControlOpCodeCounter{}
	}
	return &patternFlowEthernetPauseControlOpCodeCounter{obj: obj.obj.Decrement}

}

type patternFlowEthernetPauseTime struct {
	obj *snappipb.PatternFlowEthernetPauseTime
}

func (obj *patternFlowEthernetPauseTime) msg() *snappipb.PatternFlowEthernetPauseTime {
	return obj.obj
}

func (obj *patternFlowEthernetPauseTime) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseTime) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPauseTime) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseTime) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPauseTime interface {
	msg() *snappipb.PatternFlowEthernetPauseTime
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowEthernetPauseTime
	Values() []int32
	SetValues(value []int32) PatternFlowEthernetPauseTime
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowEthernetPauseTime
	Increment() PatternFlowEthernetPauseTimeCounter
	Decrement() PatternFlowEthernetPauseTimeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTime) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseTime) SetValue(value int32) PatternFlowEthernetPauseTime {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowEthernetPauseTime) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseTime) SetValues(value []int32) PatternFlowEthernetPauseTime {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseTime) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowEthernetPauseTime) SetMetricGroup(value string) PatternFlowEthernetPauseTime {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowEthernetPauseTimeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseTime) Increment() PatternFlowEthernetPauseTimeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowEthernetPauseTimeCounter{}
	}
	return &patternFlowEthernetPauseTimeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowEthernetPauseTimeCounter
//  description is TBD
func (obj *patternFlowEthernetPauseTime) Decrement() PatternFlowEthernetPauseTimeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowEthernetPauseTimeCounter{}
	}
	return &patternFlowEthernetPauseTimeCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpSrcPort struct {
	obj *snappipb.PatternFlowTcpSrcPort
}

func (obj *patternFlowTcpSrcPort) msg() *snappipb.PatternFlowTcpSrcPort {
	return obj.obj
}

func (obj *patternFlowTcpSrcPort) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSrcPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpSrcPort) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSrcPort) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpSrcPort interface {
	msg() *snappipb.PatternFlowTcpSrcPort
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpSrcPort
	Values() []int32
	SetValues(value []int32) PatternFlowTcpSrcPort
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpSrcPort
	Increment() PatternFlowTcpSrcPortCounter
	Decrement() PatternFlowTcpSrcPortCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPort) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpSrcPort) SetValue(value int32) PatternFlowTcpSrcPort {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpSrcPort) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpSrcPort) SetValues(value []int32) PatternFlowTcpSrcPort {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpSrcPort) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpSrcPort) SetMetricGroup(value string) PatternFlowTcpSrcPort {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpSrcPortCounter
//  description is TBD
func (obj *patternFlowTcpSrcPort) Increment() PatternFlowTcpSrcPortCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpSrcPortCounter{}
	}
	return &patternFlowTcpSrcPortCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpSrcPortCounter
//  description is TBD
func (obj *patternFlowTcpSrcPort) Decrement() PatternFlowTcpSrcPortCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpSrcPortCounter{}
	}
	return &patternFlowTcpSrcPortCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpDstPort struct {
	obj *snappipb.PatternFlowTcpDstPort
}

func (obj *patternFlowTcpDstPort) msg() *snappipb.PatternFlowTcpDstPort {
	return obj.obj
}

func (obj *patternFlowTcpDstPort) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDstPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpDstPort) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDstPort) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpDstPort interface {
	msg() *snappipb.PatternFlowTcpDstPort
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpDstPort
	Values() []int32
	SetValues(value []int32) PatternFlowTcpDstPort
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpDstPort
	Increment() PatternFlowTcpDstPortCounter
	Decrement() PatternFlowTcpDstPortCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPort) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpDstPort) SetValue(value int32) PatternFlowTcpDstPort {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpDstPort) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpDstPort) SetValues(value []int32) PatternFlowTcpDstPort {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpDstPort) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpDstPort) SetMetricGroup(value string) PatternFlowTcpDstPort {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpDstPortCounter
//  description is TBD
func (obj *patternFlowTcpDstPort) Increment() PatternFlowTcpDstPortCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpDstPortCounter{}
	}
	return &patternFlowTcpDstPortCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpDstPortCounter
//  description is TBD
func (obj *patternFlowTcpDstPort) Decrement() PatternFlowTcpDstPortCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpDstPortCounter{}
	}
	return &patternFlowTcpDstPortCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpSeqNum struct {
	obj *snappipb.PatternFlowTcpSeqNum
}

func (obj *patternFlowTcpSeqNum) msg() *snappipb.PatternFlowTcpSeqNum {
	return obj.obj
}

func (obj *patternFlowTcpSeqNum) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSeqNum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpSeqNum) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSeqNum) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpSeqNum interface {
	msg() *snappipb.PatternFlowTcpSeqNum
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpSeqNum
	Values() []int32
	SetValues(value []int32) PatternFlowTcpSeqNum
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpSeqNum
	Increment() PatternFlowTcpSeqNumCounter
	Decrement() PatternFlowTcpSeqNumCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpSeqNum) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpSeqNum) SetValue(value int32) PatternFlowTcpSeqNum {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpSeqNum) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpSeqNum) SetValues(value []int32) PatternFlowTcpSeqNum {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpSeqNum) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpSeqNum) SetMetricGroup(value string) PatternFlowTcpSeqNum {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpSeqNumCounter
//  description is TBD
func (obj *patternFlowTcpSeqNum) Increment() PatternFlowTcpSeqNumCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpSeqNumCounter{}
	}
	return &patternFlowTcpSeqNumCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpSeqNumCounter
//  description is TBD
func (obj *patternFlowTcpSeqNum) Decrement() PatternFlowTcpSeqNumCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpSeqNumCounter{}
	}
	return &patternFlowTcpSeqNumCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpAckNum struct {
	obj *snappipb.PatternFlowTcpAckNum
}

func (obj *patternFlowTcpAckNum) msg() *snappipb.PatternFlowTcpAckNum {
	return obj.obj
}

func (obj *patternFlowTcpAckNum) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpAckNum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpAckNum) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpAckNum) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpAckNum interface {
	msg() *snappipb.PatternFlowTcpAckNum
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpAckNum
	Values() []int32
	SetValues(value []int32) PatternFlowTcpAckNum
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpAckNum
	Increment() PatternFlowTcpAckNumCounter
	Decrement() PatternFlowTcpAckNumCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpAckNum) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpAckNum) SetValue(value int32) PatternFlowTcpAckNum {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpAckNum) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpAckNum) SetValues(value []int32) PatternFlowTcpAckNum {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpAckNum) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpAckNum) SetMetricGroup(value string) PatternFlowTcpAckNum {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpAckNumCounter
//  description is TBD
func (obj *patternFlowTcpAckNum) Increment() PatternFlowTcpAckNumCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpAckNumCounter{}
	}
	return &patternFlowTcpAckNumCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpAckNumCounter
//  description is TBD
func (obj *patternFlowTcpAckNum) Decrement() PatternFlowTcpAckNumCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpAckNumCounter{}
	}
	return &patternFlowTcpAckNumCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpDataOffset struct {
	obj *snappipb.PatternFlowTcpDataOffset
}

func (obj *patternFlowTcpDataOffset) msg() *snappipb.PatternFlowTcpDataOffset {
	return obj.obj
}

func (obj *patternFlowTcpDataOffset) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDataOffset) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpDataOffset) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDataOffset) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpDataOffset interface {
	msg() *snappipb.PatternFlowTcpDataOffset
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpDataOffset
	Values() []int32
	SetValues(value []int32) PatternFlowTcpDataOffset
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpDataOffset
	Increment() PatternFlowTcpDataOffsetCounter
	Decrement() PatternFlowTcpDataOffsetCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffset) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpDataOffset) SetValue(value int32) PatternFlowTcpDataOffset {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpDataOffset) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpDataOffset) SetValues(value []int32) PatternFlowTcpDataOffset {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpDataOffset) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpDataOffset) SetMetricGroup(value string) PatternFlowTcpDataOffset {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpDataOffsetCounter
//  description is TBD
func (obj *patternFlowTcpDataOffset) Increment() PatternFlowTcpDataOffsetCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpDataOffsetCounter{}
	}
	return &patternFlowTcpDataOffsetCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpDataOffsetCounter
//  description is TBD
func (obj *patternFlowTcpDataOffset) Decrement() PatternFlowTcpDataOffsetCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpDataOffsetCounter{}
	}
	return &patternFlowTcpDataOffsetCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpEcnNs struct {
	obj *snappipb.PatternFlowTcpEcnNs
}

func (obj *patternFlowTcpEcnNs) msg() *snappipb.PatternFlowTcpEcnNs {
	return obj.obj
}

func (obj *patternFlowTcpEcnNs) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnNs) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpEcnNs) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnNs) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpEcnNs interface {
	msg() *snappipb.PatternFlowTcpEcnNs
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpEcnNs
	Values() []int32
	SetValues(value []int32) PatternFlowTcpEcnNs
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpEcnNs
	Increment() PatternFlowTcpEcnNsCounter
	Decrement() PatternFlowTcpEcnNsCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNs) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnNs) SetValue(value int32) PatternFlowTcpEcnNs {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpEcnNs) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnNs) SetValues(value []int32) PatternFlowTcpEcnNs {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnNs) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnNs) SetMetricGroup(value string) PatternFlowTcpEcnNs {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpEcnNsCounter
//  description is TBD
func (obj *patternFlowTcpEcnNs) Increment() PatternFlowTcpEcnNsCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpEcnNsCounter{}
	}
	return &patternFlowTcpEcnNsCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpEcnNsCounter
//  description is TBD
func (obj *patternFlowTcpEcnNs) Decrement() PatternFlowTcpEcnNsCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpEcnNsCounter{}
	}
	return &patternFlowTcpEcnNsCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpEcnCwr struct {
	obj *snappipb.PatternFlowTcpEcnCwr
}

func (obj *patternFlowTcpEcnCwr) msg() *snappipb.PatternFlowTcpEcnCwr {
	return obj.obj
}

func (obj *patternFlowTcpEcnCwr) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnCwr) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpEcnCwr) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnCwr) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpEcnCwr interface {
	msg() *snappipb.PatternFlowTcpEcnCwr
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpEcnCwr
	Values() []int32
	SetValues(value []int32) PatternFlowTcpEcnCwr
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpEcnCwr
	Increment() PatternFlowTcpEcnCwrCounter
	Decrement() PatternFlowTcpEcnCwrCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwr) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnCwr) SetValue(value int32) PatternFlowTcpEcnCwr {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpEcnCwr) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnCwr) SetValues(value []int32) PatternFlowTcpEcnCwr {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnCwr) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnCwr) SetMetricGroup(value string) PatternFlowTcpEcnCwr {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpEcnCwrCounter
//  description is TBD
func (obj *patternFlowTcpEcnCwr) Increment() PatternFlowTcpEcnCwrCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpEcnCwrCounter{}
	}
	return &patternFlowTcpEcnCwrCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpEcnCwrCounter
//  description is TBD
func (obj *patternFlowTcpEcnCwr) Decrement() PatternFlowTcpEcnCwrCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpEcnCwrCounter{}
	}
	return &patternFlowTcpEcnCwrCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpEcnEcho struct {
	obj *snappipb.PatternFlowTcpEcnEcho
}

func (obj *patternFlowTcpEcnEcho) msg() *snappipb.PatternFlowTcpEcnEcho {
	return obj.obj
}

func (obj *patternFlowTcpEcnEcho) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnEcho) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpEcnEcho) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnEcho) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpEcnEcho interface {
	msg() *snappipb.PatternFlowTcpEcnEcho
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpEcnEcho
	Values() []int32
	SetValues(value []int32) PatternFlowTcpEcnEcho
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpEcnEcho
	Increment() PatternFlowTcpEcnEchoCounter
	Decrement() PatternFlowTcpEcnEchoCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEcho) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnEcho) SetValue(value int32) PatternFlowTcpEcnEcho {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpEcnEcho) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnEcho) SetValues(value []int32) PatternFlowTcpEcnEcho {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnEcho) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpEcnEcho) SetMetricGroup(value string) PatternFlowTcpEcnEcho {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpEcnEchoCounter
//  description is TBD
func (obj *patternFlowTcpEcnEcho) Increment() PatternFlowTcpEcnEchoCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpEcnEchoCounter{}
	}
	return &patternFlowTcpEcnEchoCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpEcnEchoCounter
//  description is TBD
func (obj *patternFlowTcpEcnEcho) Decrement() PatternFlowTcpEcnEchoCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpEcnEchoCounter{}
	}
	return &patternFlowTcpEcnEchoCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpCtlUrg struct {
	obj *snappipb.PatternFlowTcpCtlUrg
}

func (obj *patternFlowTcpCtlUrg) msg() *snappipb.PatternFlowTcpCtlUrg {
	return obj.obj
}

func (obj *patternFlowTcpCtlUrg) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlUrg) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlUrg) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlUrg) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlUrg interface {
	msg() *snappipb.PatternFlowTcpCtlUrg
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlUrg
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlUrg
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlUrg
	Increment() PatternFlowTcpCtlUrgCounter
	Decrement() PatternFlowTcpCtlUrgCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrg) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlUrg) SetValue(value int32) PatternFlowTcpCtlUrg {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlUrg) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlUrg) SetValues(value []int32) PatternFlowTcpCtlUrg {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlUrg) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlUrg) SetMetricGroup(value string) PatternFlowTcpCtlUrg {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpCtlUrgCounter
//  description is TBD
func (obj *patternFlowTcpCtlUrg) Increment() PatternFlowTcpCtlUrgCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpCtlUrgCounter{}
	}
	return &patternFlowTcpCtlUrgCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpCtlUrgCounter
//  description is TBD
func (obj *patternFlowTcpCtlUrg) Decrement() PatternFlowTcpCtlUrgCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpCtlUrgCounter{}
	}
	return &patternFlowTcpCtlUrgCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpCtlAck struct {
	obj *snappipb.PatternFlowTcpCtlAck
}

func (obj *patternFlowTcpCtlAck) msg() *snappipb.PatternFlowTcpCtlAck {
	return obj.obj
}

func (obj *patternFlowTcpCtlAck) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlAck) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlAck) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlAck) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlAck interface {
	msg() *snappipb.PatternFlowTcpCtlAck
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlAck
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlAck
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlAck
	Increment() PatternFlowTcpCtlAckCounter
	Decrement() PatternFlowTcpCtlAckCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAck) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlAck) SetValue(value int32) PatternFlowTcpCtlAck {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlAck) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlAck) SetValues(value []int32) PatternFlowTcpCtlAck {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlAck) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlAck) SetMetricGroup(value string) PatternFlowTcpCtlAck {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpCtlAckCounter
//  description is TBD
func (obj *patternFlowTcpCtlAck) Increment() PatternFlowTcpCtlAckCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpCtlAckCounter{}
	}
	return &patternFlowTcpCtlAckCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpCtlAckCounter
//  description is TBD
func (obj *patternFlowTcpCtlAck) Decrement() PatternFlowTcpCtlAckCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpCtlAckCounter{}
	}
	return &patternFlowTcpCtlAckCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpCtlPsh struct {
	obj *snappipb.PatternFlowTcpCtlPsh
}

func (obj *patternFlowTcpCtlPsh) msg() *snappipb.PatternFlowTcpCtlPsh {
	return obj.obj
}

func (obj *patternFlowTcpCtlPsh) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlPsh) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlPsh) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlPsh) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlPsh interface {
	msg() *snappipb.PatternFlowTcpCtlPsh
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlPsh
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlPsh
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlPsh
	Increment() PatternFlowTcpCtlPshCounter
	Decrement() PatternFlowTcpCtlPshCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPsh) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlPsh) SetValue(value int32) PatternFlowTcpCtlPsh {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlPsh) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlPsh) SetValues(value []int32) PatternFlowTcpCtlPsh {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlPsh) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlPsh) SetMetricGroup(value string) PatternFlowTcpCtlPsh {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpCtlPshCounter
//  description is TBD
func (obj *patternFlowTcpCtlPsh) Increment() PatternFlowTcpCtlPshCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpCtlPshCounter{}
	}
	return &patternFlowTcpCtlPshCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpCtlPshCounter
//  description is TBD
func (obj *patternFlowTcpCtlPsh) Decrement() PatternFlowTcpCtlPshCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpCtlPshCounter{}
	}
	return &patternFlowTcpCtlPshCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpCtlRst struct {
	obj *snappipb.PatternFlowTcpCtlRst
}

func (obj *patternFlowTcpCtlRst) msg() *snappipb.PatternFlowTcpCtlRst {
	return obj.obj
}

func (obj *patternFlowTcpCtlRst) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlRst) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlRst) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlRst) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlRst interface {
	msg() *snappipb.PatternFlowTcpCtlRst
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlRst
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlRst
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlRst
	Increment() PatternFlowTcpCtlRstCounter
	Decrement() PatternFlowTcpCtlRstCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRst) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlRst) SetValue(value int32) PatternFlowTcpCtlRst {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlRst) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlRst) SetValues(value []int32) PatternFlowTcpCtlRst {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlRst) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlRst) SetMetricGroup(value string) PatternFlowTcpCtlRst {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpCtlRstCounter
//  description is TBD
func (obj *patternFlowTcpCtlRst) Increment() PatternFlowTcpCtlRstCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpCtlRstCounter{}
	}
	return &patternFlowTcpCtlRstCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpCtlRstCounter
//  description is TBD
func (obj *patternFlowTcpCtlRst) Decrement() PatternFlowTcpCtlRstCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpCtlRstCounter{}
	}
	return &patternFlowTcpCtlRstCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpCtlSyn struct {
	obj *snappipb.PatternFlowTcpCtlSyn
}

func (obj *patternFlowTcpCtlSyn) msg() *snappipb.PatternFlowTcpCtlSyn {
	return obj.obj
}

func (obj *patternFlowTcpCtlSyn) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlSyn) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlSyn) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlSyn) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlSyn interface {
	msg() *snappipb.PatternFlowTcpCtlSyn
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlSyn
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlSyn
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlSyn
	Increment() PatternFlowTcpCtlSynCounter
	Decrement() PatternFlowTcpCtlSynCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSyn) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlSyn) SetValue(value int32) PatternFlowTcpCtlSyn {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlSyn) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlSyn) SetValues(value []int32) PatternFlowTcpCtlSyn {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlSyn) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlSyn) SetMetricGroup(value string) PatternFlowTcpCtlSyn {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpCtlSynCounter
//  description is TBD
func (obj *patternFlowTcpCtlSyn) Increment() PatternFlowTcpCtlSynCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpCtlSynCounter{}
	}
	return &patternFlowTcpCtlSynCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpCtlSynCounter
//  description is TBD
func (obj *patternFlowTcpCtlSyn) Decrement() PatternFlowTcpCtlSynCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpCtlSynCounter{}
	}
	return &patternFlowTcpCtlSynCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpCtlFin struct {
	obj *snappipb.PatternFlowTcpCtlFin
}

func (obj *patternFlowTcpCtlFin) msg() *snappipb.PatternFlowTcpCtlFin {
	return obj.obj
}

func (obj *patternFlowTcpCtlFin) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlFin) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlFin) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlFin) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlFin interface {
	msg() *snappipb.PatternFlowTcpCtlFin
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpCtlFin
	Values() []int32
	SetValues(value []int32) PatternFlowTcpCtlFin
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpCtlFin
	Increment() PatternFlowTcpCtlFinCounter
	Decrement() PatternFlowTcpCtlFinCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFin) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlFin) SetValue(value int32) PatternFlowTcpCtlFin {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpCtlFin) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlFin) SetValues(value []int32) PatternFlowTcpCtlFin {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlFin) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpCtlFin) SetMetricGroup(value string) PatternFlowTcpCtlFin {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpCtlFinCounter
//  description is TBD
func (obj *patternFlowTcpCtlFin) Increment() PatternFlowTcpCtlFinCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpCtlFinCounter{}
	}
	return &patternFlowTcpCtlFinCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpCtlFinCounter
//  description is TBD
func (obj *patternFlowTcpCtlFin) Decrement() PatternFlowTcpCtlFinCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpCtlFinCounter{}
	}
	return &patternFlowTcpCtlFinCounter{obj: obj.obj.Decrement}

}

type patternFlowTcpWindow struct {
	obj *snappipb.PatternFlowTcpWindow
}

func (obj *patternFlowTcpWindow) msg() *snappipb.PatternFlowTcpWindow {
	return obj.obj
}

func (obj *patternFlowTcpWindow) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpWindow) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpWindow) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpWindow) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpWindow interface {
	msg() *snappipb.PatternFlowTcpWindow
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowTcpWindow
	Values() []int32
	SetValues(value []int32) PatternFlowTcpWindow
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowTcpWindow
	Increment() PatternFlowTcpWindowCounter
	Decrement() PatternFlowTcpWindowCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowTcpWindow) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpWindow) SetValue(value int32) PatternFlowTcpWindow {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowTcpWindow) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpWindow) SetValues(value []int32) PatternFlowTcpWindow {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpWindow) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowTcpWindow) SetMetricGroup(value string) PatternFlowTcpWindow {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowTcpWindowCounter
//  description is TBD
func (obj *patternFlowTcpWindow) Increment() PatternFlowTcpWindowCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowTcpWindowCounter{}
	}
	return &patternFlowTcpWindowCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowTcpWindowCounter
//  description is TBD
func (obj *patternFlowTcpWindow) Decrement() PatternFlowTcpWindowCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowTcpWindowCounter{}
	}
	return &patternFlowTcpWindowCounter{obj: obj.obj.Decrement}

}

type patternFlowUdpSrcPort struct {
	obj *snappipb.PatternFlowUdpSrcPort
}

func (obj *patternFlowUdpSrcPort) msg() *snappipb.PatternFlowUdpSrcPort {
	return obj.obj
}

func (obj *patternFlowUdpSrcPort) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpSrcPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowUdpSrcPort) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpSrcPort) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowUdpSrcPort interface {
	msg() *snappipb.PatternFlowUdpSrcPort
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowUdpSrcPort
	Values() []int32
	SetValues(value []int32) PatternFlowUdpSrcPort
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowUdpSrcPort
	Increment() PatternFlowUdpSrcPortCounter
	Decrement() PatternFlowUdpSrcPortCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPort) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpSrcPort) SetValue(value int32) PatternFlowUdpSrcPort {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowUdpSrcPort) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpSrcPort) SetValues(value []int32) PatternFlowUdpSrcPort {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpSrcPort) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpSrcPort) SetMetricGroup(value string) PatternFlowUdpSrcPort {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowUdpSrcPortCounter
//  description is TBD
func (obj *patternFlowUdpSrcPort) Increment() PatternFlowUdpSrcPortCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowUdpSrcPortCounter{}
	}
	return &patternFlowUdpSrcPortCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowUdpSrcPortCounter
//  description is TBD
func (obj *patternFlowUdpSrcPort) Decrement() PatternFlowUdpSrcPortCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowUdpSrcPortCounter{}
	}
	return &patternFlowUdpSrcPortCounter{obj: obj.obj.Decrement}

}

type patternFlowUdpDstPort struct {
	obj *snappipb.PatternFlowUdpDstPort
}

func (obj *patternFlowUdpDstPort) msg() *snappipb.PatternFlowUdpDstPort {
	return obj.obj
}

func (obj *patternFlowUdpDstPort) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpDstPort) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowUdpDstPort) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpDstPort) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowUdpDstPort interface {
	msg() *snappipb.PatternFlowUdpDstPort
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowUdpDstPort
	Values() []int32
	SetValues(value []int32) PatternFlowUdpDstPort
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowUdpDstPort
	Increment() PatternFlowUdpDstPortCounter
	Decrement() PatternFlowUdpDstPortCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPort) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpDstPort) SetValue(value int32) PatternFlowUdpDstPort {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowUdpDstPort) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpDstPort) SetValues(value []int32) PatternFlowUdpDstPort {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpDstPort) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpDstPort) SetMetricGroup(value string) PatternFlowUdpDstPort {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowUdpDstPortCounter
//  description is TBD
func (obj *patternFlowUdpDstPort) Increment() PatternFlowUdpDstPortCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowUdpDstPortCounter{}
	}
	return &patternFlowUdpDstPortCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowUdpDstPortCounter
//  description is TBD
func (obj *patternFlowUdpDstPort) Decrement() PatternFlowUdpDstPortCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowUdpDstPortCounter{}
	}
	return &patternFlowUdpDstPortCounter{obj: obj.obj.Decrement}

}

type patternFlowUdpLength struct {
	obj *snappipb.PatternFlowUdpLength
}

func (obj *patternFlowUdpLength) msg() *snappipb.PatternFlowUdpLength {
	return obj.obj
}

func (obj *patternFlowUdpLength) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowUdpLength) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpLength) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowUdpLength interface {
	msg() *snappipb.PatternFlowUdpLength
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowUdpLength
	Values() []int32
	SetValues(value []int32) PatternFlowUdpLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowUdpLength
	Increment() PatternFlowUdpLengthCounter
	Decrement() PatternFlowUdpLengthCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowUdpLength) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpLength) SetValue(value int32) PatternFlowUdpLength {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowUdpLength) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpLength) SetValues(value []int32) PatternFlowUdpLength {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpLength) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowUdpLength) SetMetricGroup(value string) PatternFlowUdpLength {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowUdpLengthCounter
//  description is TBD
func (obj *patternFlowUdpLength) Increment() PatternFlowUdpLengthCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowUdpLengthCounter{}
	}
	return &patternFlowUdpLengthCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowUdpLengthCounter
//  description is TBD
func (obj *patternFlowUdpLength) Decrement() PatternFlowUdpLengthCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowUdpLengthCounter{}
	}
	return &patternFlowUdpLengthCounter{obj: obj.obj.Decrement}

}

type patternFlowUdpChecksum struct {
	obj *snappipb.PatternFlowUdpChecksum
}

func (obj *patternFlowUdpChecksum) msg() *snappipb.PatternFlowUdpChecksum {
	return obj.obj
}

func (obj *patternFlowUdpChecksum) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpChecksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowUdpChecksum) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpChecksum) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowUdpChecksum interface {
	msg() *snappipb.PatternFlowUdpChecksum
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Custom() int32
	SetCustom(value int32) PatternFlowUdpChecksum
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowUdpChecksum) Custom() int32 {
	return *obj.obj.Custom
}

// SetCustom sets the int32 value in the None object
//  A custom checksum value
func (obj *patternFlowUdpChecksum) SetCustom(value int32) PatternFlowUdpChecksum {
	obj.obj.Custom = &value
	return obj
}

type patternFlowGreChecksumPresent struct {
	obj *snappipb.PatternFlowGreChecksumPresent
}

func (obj *patternFlowGreChecksumPresent) msg() *snappipb.PatternFlowGreChecksumPresent {
	return obj.obj
}

func (obj *patternFlowGreChecksumPresent) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksumPresent) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGreChecksumPresent) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksumPresent) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGreChecksumPresent interface {
	msg() *snappipb.PatternFlowGreChecksumPresent
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGreChecksumPresent
	Values() []int32
	SetValues(value []int32) PatternFlowGreChecksumPresent
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGreChecksumPresent
	Increment() PatternFlowGreChecksumPresentCounter
	Decrement() PatternFlowGreChecksumPresentCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresent) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreChecksumPresent) SetValue(value int32) PatternFlowGreChecksumPresent {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGreChecksumPresent) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGreChecksumPresent) SetValues(value []int32) PatternFlowGreChecksumPresent {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreChecksumPresent) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreChecksumPresent) SetMetricGroup(value string) PatternFlowGreChecksumPresent {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGreChecksumPresentCounter
//  description is TBD
func (obj *patternFlowGreChecksumPresent) Increment() PatternFlowGreChecksumPresentCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGreChecksumPresentCounter{}
	}
	return &patternFlowGreChecksumPresentCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGreChecksumPresentCounter
//  description is TBD
func (obj *patternFlowGreChecksumPresent) Decrement() PatternFlowGreChecksumPresentCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGreChecksumPresentCounter{}
	}
	return &patternFlowGreChecksumPresentCounter{obj: obj.obj.Decrement}

}

type patternFlowGreReserved0 struct {
	obj *snappipb.PatternFlowGreReserved0
}

func (obj *patternFlowGreReserved0) msg() *snappipb.PatternFlowGreReserved0 {
	return obj.obj
}

func (obj *patternFlowGreReserved0) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved0) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGreReserved0) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved0) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGreReserved0 interface {
	msg() *snappipb.PatternFlowGreReserved0
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGreReserved0
	Values() []int32
	SetValues(value []int32) PatternFlowGreReserved0
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGreReserved0
	Increment() PatternFlowGreReserved0Counter
	Decrement() PatternFlowGreReserved0Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreReserved0) SetValue(value int32) PatternFlowGreReserved0 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGreReserved0) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGreReserved0) SetValues(value []int32) PatternFlowGreReserved0 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreReserved0) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreReserved0) SetMetricGroup(value string) PatternFlowGreReserved0 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGreReserved0Counter
//  description is TBD
func (obj *patternFlowGreReserved0) Increment() PatternFlowGreReserved0Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGreReserved0Counter{}
	}
	return &patternFlowGreReserved0Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGreReserved0Counter
//  description is TBD
func (obj *patternFlowGreReserved0) Decrement() PatternFlowGreReserved0Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGreReserved0Counter{}
	}
	return &patternFlowGreReserved0Counter{obj: obj.obj.Decrement}

}

type patternFlowGreVersion struct {
	obj *snappipb.PatternFlowGreVersion
}

func (obj *patternFlowGreVersion) msg() *snappipb.PatternFlowGreVersion {
	return obj.obj
}

func (obj *patternFlowGreVersion) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreVersion) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGreVersion) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreVersion) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGreVersion interface {
	msg() *snappipb.PatternFlowGreVersion
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGreVersion
	Values() []int32
	SetValues(value []int32) PatternFlowGreVersion
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGreVersion
	Increment() PatternFlowGreVersionCounter
	Decrement() PatternFlowGreVersionCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreVersion) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreVersion) SetValue(value int32) PatternFlowGreVersion {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGreVersion) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGreVersion) SetValues(value []int32) PatternFlowGreVersion {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreVersion) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreVersion) SetMetricGroup(value string) PatternFlowGreVersion {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGreVersionCounter
//  description is TBD
func (obj *patternFlowGreVersion) Increment() PatternFlowGreVersionCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGreVersionCounter{}
	}
	return &patternFlowGreVersionCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGreVersionCounter
//  description is TBD
func (obj *patternFlowGreVersion) Decrement() PatternFlowGreVersionCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGreVersionCounter{}
	}
	return &patternFlowGreVersionCounter{obj: obj.obj.Decrement}

}

type patternFlowGreProtocol struct {
	obj *snappipb.PatternFlowGreProtocol
}

func (obj *patternFlowGreProtocol) msg() *snappipb.PatternFlowGreProtocol {
	return obj.obj
}

func (obj *patternFlowGreProtocol) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreProtocol) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGreProtocol) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreProtocol) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGreProtocol interface {
	msg() *snappipb.PatternFlowGreProtocol
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGreProtocol
	Values() []int32
	SetValues(value []int32) PatternFlowGreProtocol
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGreProtocol
	Increment() PatternFlowGreProtocolCounter
	Decrement() PatternFlowGreProtocolCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreProtocol) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreProtocol) SetValue(value int32) PatternFlowGreProtocol {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGreProtocol) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGreProtocol) SetValues(value []int32) PatternFlowGreProtocol {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreProtocol) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreProtocol) SetMetricGroup(value string) PatternFlowGreProtocol {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGreProtocolCounter
//  description is TBD
func (obj *patternFlowGreProtocol) Increment() PatternFlowGreProtocolCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGreProtocolCounter{}
	}
	return &patternFlowGreProtocolCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGreProtocolCounter
//  description is TBD
func (obj *patternFlowGreProtocol) Decrement() PatternFlowGreProtocolCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGreProtocolCounter{}
	}
	return &patternFlowGreProtocolCounter{obj: obj.obj.Decrement}

}

type patternFlowGreChecksum struct {
	obj *snappipb.PatternFlowGreChecksum
}

func (obj *patternFlowGreChecksum) msg() *snappipb.PatternFlowGreChecksum {
	return obj.obj
}

func (obj *patternFlowGreChecksum) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGreChecksum) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksum) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGreChecksum interface {
	msg() *snappipb.PatternFlowGreChecksum
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Custom() int32
	SetCustom(value int32) PatternFlowGreChecksum
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowGreChecksum) Custom() int32 {
	return *obj.obj.Custom
}

// SetCustom sets the int32 value in the None object
//  A custom checksum value
func (obj *patternFlowGreChecksum) SetCustom(value int32) PatternFlowGreChecksum {
	obj.obj.Custom = &value
	return obj
}

type patternFlowGreReserved1 struct {
	obj *snappipb.PatternFlowGreReserved1
}

func (obj *patternFlowGreReserved1) msg() *snappipb.PatternFlowGreReserved1 {
	return obj.obj
}

func (obj *patternFlowGreReserved1) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGreReserved1) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved1) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGreReserved1 interface {
	msg() *snappipb.PatternFlowGreReserved1
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGreReserved1
	Values() []int32
	SetValues(value []int32) PatternFlowGreReserved1
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGreReserved1
	Increment() PatternFlowGreReserved1Counter
	Decrement() PatternFlowGreReserved1Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreReserved1) SetValue(value int32) PatternFlowGreReserved1 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGreReserved1) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGreReserved1) SetValues(value []int32) PatternFlowGreReserved1 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreReserved1) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGreReserved1) SetMetricGroup(value string) PatternFlowGreReserved1 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGreReserved1Counter
//  description is TBD
func (obj *patternFlowGreReserved1) Increment() PatternFlowGreReserved1Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGreReserved1Counter{}
	}
	return &patternFlowGreReserved1Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGreReserved1Counter
//  description is TBD
func (obj *patternFlowGreReserved1) Decrement() PatternFlowGreReserved1Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGreReserved1Counter{}
	}
	return &patternFlowGreReserved1Counter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1Version struct {
	obj *snappipb.PatternFlowGtpv1Version
}

func (obj *patternFlowGtpv1Version) msg() *snappipb.PatternFlowGtpv1Version {
	return obj.obj
}

func (obj *patternFlowGtpv1Version) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Version) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1Version) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Version) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1Version interface {
	msg() *snappipb.PatternFlowGtpv1Version
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1Version
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1Version
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1Version
	Increment() PatternFlowGtpv1VersionCounter
	Decrement() PatternFlowGtpv1VersionCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1Version) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1Version) SetValue(value int32) PatternFlowGtpv1Version {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1Version) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1Version) SetValues(value []int32) PatternFlowGtpv1Version {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Version) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Version) SetMetricGroup(value string) PatternFlowGtpv1Version {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1VersionCounter
//  description is TBD
func (obj *patternFlowGtpv1Version) Increment() PatternFlowGtpv1VersionCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1VersionCounter{}
	}
	return &patternFlowGtpv1VersionCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1VersionCounter
//  description is TBD
func (obj *patternFlowGtpv1Version) Decrement() PatternFlowGtpv1VersionCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1VersionCounter{}
	}
	return &patternFlowGtpv1VersionCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1ProtocolType struct {
	obj *snappipb.PatternFlowGtpv1ProtocolType
}

func (obj *patternFlowGtpv1ProtocolType) msg() *snappipb.PatternFlowGtpv1ProtocolType {
	return obj.obj
}

func (obj *patternFlowGtpv1ProtocolType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ProtocolType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1ProtocolType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ProtocolType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1ProtocolType interface {
	msg() *snappipb.PatternFlowGtpv1ProtocolType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1ProtocolType
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1ProtocolType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1ProtocolType
	Increment() PatternFlowGtpv1ProtocolTypeCounter
	Decrement() PatternFlowGtpv1ProtocolTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) SetValue(value int32) PatternFlowGtpv1ProtocolType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) SetValues(value []int32) PatternFlowGtpv1ProtocolType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1ProtocolType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1ProtocolType) SetMetricGroup(value string) PatternFlowGtpv1ProtocolType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1ProtocolTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) Increment() PatternFlowGtpv1ProtocolTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1ProtocolTypeCounter{}
	}
	return &patternFlowGtpv1ProtocolTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1ProtocolTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1ProtocolType) Decrement() PatternFlowGtpv1ProtocolTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1ProtocolTypeCounter{}
	}
	return &patternFlowGtpv1ProtocolTypeCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1Reserved struct {
	obj *snappipb.PatternFlowGtpv1Reserved
}

func (obj *patternFlowGtpv1Reserved) msg() *snappipb.PatternFlowGtpv1Reserved {
	return obj.obj
}

func (obj *patternFlowGtpv1Reserved) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Reserved) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1Reserved) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Reserved) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1Reserved interface {
	msg() *snappipb.PatternFlowGtpv1Reserved
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1Reserved
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1Reserved
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1Reserved
	Increment() PatternFlowGtpv1ReservedCounter
	Decrement() PatternFlowGtpv1ReservedCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1Reserved) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1Reserved) SetValue(value int32) PatternFlowGtpv1Reserved {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1Reserved) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1Reserved) SetValues(value []int32) PatternFlowGtpv1Reserved {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Reserved) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Reserved) SetMetricGroup(value string) PatternFlowGtpv1Reserved {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1ReservedCounter
//  description is TBD
func (obj *patternFlowGtpv1Reserved) Increment() PatternFlowGtpv1ReservedCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1ReservedCounter{}
	}
	return &patternFlowGtpv1ReservedCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1ReservedCounter
//  description is TBD
func (obj *patternFlowGtpv1Reserved) Decrement() PatternFlowGtpv1ReservedCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1ReservedCounter{}
	}
	return &patternFlowGtpv1ReservedCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1EFlag struct {
	obj *snappipb.PatternFlowGtpv1EFlag
}

func (obj *patternFlowGtpv1EFlag) msg() *snappipb.PatternFlowGtpv1EFlag {
	return obj.obj
}

func (obj *patternFlowGtpv1EFlag) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1EFlag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1EFlag) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1EFlag) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1EFlag interface {
	msg() *snappipb.PatternFlowGtpv1EFlag
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1EFlag
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1EFlag
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1EFlag
	Increment() PatternFlowGtpv1EFlagCounter
	Decrement() PatternFlowGtpv1EFlagCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlag) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1EFlag) SetValue(value int32) PatternFlowGtpv1EFlag {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1EFlag) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1EFlag) SetValues(value []int32) PatternFlowGtpv1EFlag {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1EFlag) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1EFlag) SetMetricGroup(value string) PatternFlowGtpv1EFlag {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1EFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1EFlag) Increment() PatternFlowGtpv1EFlagCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1EFlagCounter{}
	}
	return &patternFlowGtpv1EFlagCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1EFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1EFlag) Decrement() PatternFlowGtpv1EFlagCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1EFlagCounter{}
	}
	return &patternFlowGtpv1EFlagCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1SFlag struct {
	obj *snappipb.PatternFlowGtpv1SFlag
}

func (obj *patternFlowGtpv1SFlag) msg() *snappipb.PatternFlowGtpv1SFlag {
	return obj.obj
}

func (obj *patternFlowGtpv1SFlag) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SFlag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1SFlag) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SFlag) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1SFlag interface {
	msg() *snappipb.PatternFlowGtpv1SFlag
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1SFlag
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1SFlag
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1SFlag
	Increment() PatternFlowGtpv1SFlagCounter
	Decrement() PatternFlowGtpv1SFlagCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlag) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1SFlag) SetValue(value int32) PatternFlowGtpv1SFlag {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1SFlag) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1SFlag) SetValues(value []int32) PatternFlowGtpv1SFlag {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1SFlag) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1SFlag) SetMetricGroup(value string) PatternFlowGtpv1SFlag {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1SFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1SFlag) Increment() PatternFlowGtpv1SFlagCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1SFlagCounter{}
	}
	return &patternFlowGtpv1SFlagCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1SFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1SFlag) Decrement() PatternFlowGtpv1SFlagCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1SFlagCounter{}
	}
	return &patternFlowGtpv1SFlagCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1PnFlag struct {
	obj *snappipb.PatternFlowGtpv1PnFlag
}

func (obj *patternFlowGtpv1PnFlag) msg() *snappipb.PatternFlowGtpv1PnFlag {
	return obj.obj
}

func (obj *patternFlowGtpv1PnFlag) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1PnFlag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1PnFlag) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1PnFlag) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1PnFlag interface {
	msg() *snappipb.PatternFlowGtpv1PnFlag
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1PnFlag
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1PnFlag
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1PnFlag
	Increment() PatternFlowGtpv1PnFlagCounter
	Decrement() PatternFlowGtpv1PnFlagCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) SetValue(value int32) PatternFlowGtpv1PnFlag {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) SetValues(value []int32) PatternFlowGtpv1PnFlag {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1PnFlag) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1PnFlag) SetMetricGroup(value string) PatternFlowGtpv1PnFlag {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1PnFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) Increment() PatternFlowGtpv1PnFlagCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1PnFlagCounter{}
	}
	return &patternFlowGtpv1PnFlagCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1PnFlagCounter
//  description is TBD
func (obj *patternFlowGtpv1PnFlag) Decrement() PatternFlowGtpv1PnFlagCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1PnFlagCounter{}
	}
	return &patternFlowGtpv1PnFlagCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1MessageType struct {
	obj *snappipb.PatternFlowGtpv1MessageType
}

func (obj *patternFlowGtpv1MessageType) msg() *snappipb.PatternFlowGtpv1MessageType {
	return obj.obj
}

func (obj *patternFlowGtpv1MessageType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1MessageType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1MessageType interface {
	msg() *snappipb.PatternFlowGtpv1MessageType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1MessageType
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1MessageType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1MessageType
	Increment() PatternFlowGtpv1MessageTypeCounter
	Decrement() PatternFlowGtpv1MessageTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1MessageType) SetValue(value int32) PatternFlowGtpv1MessageType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1MessageType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1MessageType) SetValues(value []int32) PatternFlowGtpv1MessageType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1MessageType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1MessageType) SetMetricGroup(value string) PatternFlowGtpv1MessageType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageType) Increment() PatternFlowGtpv1MessageTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1MessageTypeCounter{}
	}
	return &patternFlowGtpv1MessageTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageType) Decrement() PatternFlowGtpv1MessageTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1MessageTypeCounter{}
	}
	return &patternFlowGtpv1MessageTypeCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1MessageLength struct {
	obj *snappipb.PatternFlowGtpv1MessageLength
}

func (obj *patternFlowGtpv1MessageLength) msg() *snappipb.PatternFlowGtpv1MessageLength {
	return obj.obj
}

func (obj *patternFlowGtpv1MessageLength) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1MessageLength) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageLength) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1MessageLength interface {
	msg() *snappipb.PatternFlowGtpv1MessageLength
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1MessageLength
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1MessageLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1MessageLength
	Increment() PatternFlowGtpv1MessageLengthCounter
	Decrement() PatternFlowGtpv1MessageLengthCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) SetValue(value int32) PatternFlowGtpv1MessageLength {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) SetValues(value []int32) PatternFlowGtpv1MessageLength {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1MessageLength) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1MessageLength) SetMetricGroup(value string) PatternFlowGtpv1MessageLength {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) Increment() PatternFlowGtpv1MessageLengthCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1MessageLengthCounter{}
	}
	return &patternFlowGtpv1MessageLengthCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv1MessageLength) Decrement() PatternFlowGtpv1MessageLengthCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1MessageLengthCounter{}
	}
	return &patternFlowGtpv1MessageLengthCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1Teid struct {
	obj *snappipb.PatternFlowGtpv1Teid
}

func (obj *patternFlowGtpv1Teid) msg() *snappipb.PatternFlowGtpv1Teid {
	return obj.obj
}

func (obj *patternFlowGtpv1Teid) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Teid) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1Teid) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1Teid) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1Teid interface {
	msg() *snappipb.PatternFlowGtpv1Teid
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1Teid
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1Teid
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1Teid
	Increment() PatternFlowGtpv1TeidCounter
	Decrement() PatternFlowGtpv1TeidCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1Teid) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1Teid) SetValue(value int32) PatternFlowGtpv1Teid {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1Teid) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1Teid) SetValues(value []int32) PatternFlowGtpv1Teid {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Teid) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1Teid) SetMetricGroup(value string) PatternFlowGtpv1Teid {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1TeidCounter
//  description is TBD
func (obj *patternFlowGtpv1Teid) Increment() PatternFlowGtpv1TeidCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1TeidCounter{}
	}
	return &patternFlowGtpv1TeidCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1TeidCounter
//  description is TBD
func (obj *patternFlowGtpv1Teid) Decrement() PatternFlowGtpv1TeidCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1TeidCounter{}
	}
	return &patternFlowGtpv1TeidCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1SquenceNumber struct {
	obj *snappipb.PatternFlowGtpv1SquenceNumber
}

func (obj *patternFlowGtpv1SquenceNumber) msg() *snappipb.PatternFlowGtpv1SquenceNumber {
	return obj.obj
}

func (obj *patternFlowGtpv1SquenceNumber) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SquenceNumber) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1SquenceNumber) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SquenceNumber) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1SquenceNumber interface {
	msg() *snappipb.PatternFlowGtpv1SquenceNumber
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1SquenceNumber
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1SquenceNumber
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1SquenceNumber
	Increment() PatternFlowGtpv1SquenceNumberCounter
	Decrement() PatternFlowGtpv1SquenceNumberCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) SetValue(value int32) PatternFlowGtpv1SquenceNumber {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) SetValues(value []int32) PatternFlowGtpv1SquenceNumber {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1SquenceNumber) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1SquenceNumber) SetMetricGroup(value string) PatternFlowGtpv1SquenceNumber {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1SquenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) Increment() PatternFlowGtpv1SquenceNumberCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1SquenceNumberCounter{}
	}
	return &patternFlowGtpv1SquenceNumberCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1SquenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumber) Decrement() PatternFlowGtpv1SquenceNumberCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1SquenceNumberCounter{}
	}
	return &patternFlowGtpv1SquenceNumberCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1NPduNumber struct {
	obj *snappipb.PatternFlowGtpv1NPduNumber
}

func (obj *patternFlowGtpv1NPduNumber) msg() *snappipb.PatternFlowGtpv1NPduNumber {
	return obj.obj
}

func (obj *patternFlowGtpv1NPduNumber) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NPduNumber) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1NPduNumber) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NPduNumber) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1NPduNumber interface {
	msg() *snappipb.PatternFlowGtpv1NPduNumber
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1NPduNumber
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1NPduNumber
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1NPduNumber
	Increment() PatternFlowGtpv1NPduNumberCounter
	Decrement() PatternFlowGtpv1NPduNumberCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) SetValue(value int32) PatternFlowGtpv1NPduNumber {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) SetValues(value []int32) PatternFlowGtpv1NPduNumber {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1NPduNumber) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1NPduNumber) SetMetricGroup(value string) PatternFlowGtpv1NPduNumber {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1NPduNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) Increment() PatternFlowGtpv1NPduNumberCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1NPduNumberCounter{}
	}
	return &patternFlowGtpv1NPduNumberCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1NPduNumberCounter
//  description is TBD
func (obj *patternFlowGtpv1NPduNumber) Decrement() PatternFlowGtpv1NPduNumberCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1NPduNumberCounter{}
	}
	return &patternFlowGtpv1NPduNumberCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv1NextExtensionHeaderType struct {
	obj *snappipb.PatternFlowGtpv1NextExtensionHeaderType
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) msg() *snappipb.PatternFlowGtpv1NextExtensionHeaderType {
	return obj.obj
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NextExtensionHeaderType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1NextExtensionHeaderType interface {
	msg() *snappipb.PatternFlowGtpv1NextExtensionHeaderType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv1NextExtensionHeaderType
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv1NextExtensionHeaderType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv1NextExtensionHeaderType
	Increment() PatternFlowGtpv1NextExtensionHeaderTypeCounter
	Decrement() PatternFlowGtpv1NextExtensionHeaderTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) SetValue(value int32) PatternFlowGtpv1NextExtensionHeaderType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) SetValues(value []int32) PatternFlowGtpv1NextExtensionHeaderType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1NextExtensionHeaderType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv1NextExtensionHeaderType) SetMetricGroup(value string) PatternFlowGtpv1NextExtensionHeaderType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv1NextExtensionHeaderTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) Increment() PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv1NextExtensionHeaderTypeCounter{}
	}
	return &patternFlowGtpv1NextExtensionHeaderTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv1NextExtensionHeaderTypeCounter
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderType) Decrement() PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv1NextExtensionHeaderTypeCounter{}
	}
	return &patternFlowGtpv1NextExtensionHeaderTypeCounter{obj: obj.obj.Decrement}

}

type flowGtpExtension struct {
	obj *snappipb.FlowGtpExtension
}

func (obj *flowGtpExtension) msg() *snappipb.FlowGtpExtension {
	return obj.obj
}

func (obj *flowGtpExtension) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpExtension) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowGtpExtension) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowGtpExtension) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowGtpExtension interface {
	msg() *snappipb.FlowGtpExtension
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	ExtensionLength() PatternFlowGtpExtensionExtensionLength
	Contents() PatternFlowGtpExtensionContents
	NextExtensionHeader() PatternFlowGtpExtensionNextExtensionHeader
}

// ExtensionLength returns a PatternFlowGtpExtensionExtensionLength
//  description is TBD
func (obj *flowGtpExtension) ExtensionLength() PatternFlowGtpExtensionExtensionLength {
	if obj.obj.ExtensionLength == nil {
		obj.obj.ExtensionLength = &snappipb.PatternFlowGtpExtensionExtensionLength{}
	}
	return &patternFlowGtpExtensionExtensionLength{obj: obj.obj.ExtensionLength}

}

// Contents returns a PatternFlowGtpExtensionContents
//  description is TBD
func (obj *flowGtpExtension) Contents() PatternFlowGtpExtensionContents {
	if obj.obj.Contents == nil {
		obj.obj.Contents = &snappipb.PatternFlowGtpExtensionContents{}
	}
	return &patternFlowGtpExtensionContents{obj: obj.obj.Contents}

}

// NextExtensionHeader returns a PatternFlowGtpExtensionNextExtensionHeader
//  description is TBD
func (obj *flowGtpExtension) NextExtensionHeader() PatternFlowGtpExtensionNextExtensionHeader {
	if obj.obj.NextExtensionHeader == nil {
		obj.obj.NextExtensionHeader = &snappipb.PatternFlowGtpExtensionNextExtensionHeader{}
	}
	return &patternFlowGtpExtensionNextExtensionHeader{obj: obj.obj.NextExtensionHeader}

}

type patternFlowGtpv2Version struct {
	obj *snappipb.PatternFlowGtpv2Version
}

func (obj *patternFlowGtpv2Version) msg() *snappipb.PatternFlowGtpv2Version {
	return obj.obj
}

func (obj *patternFlowGtpv2Version) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Version) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2Version) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Version) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2Version interface {
	msg() *snappipb.PatternFlowGtpv2Version
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv2Version
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2Version
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2Version
	Increment() PatternFlowGtpv2VersionCounter
	Decrement() PatternFlowGtpv2VersionCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Version) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Version) SetValue(value int32) PatternFlowGtpv2Version {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2Version) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Version) SetValues(value []int32) PatternFlowGtpv2Version {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Version) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Version) SetMetricGroup(value string) PatternFlowGtpv2Version {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv2VersionCounter
//  description is TBD
func (obj *patternFlowGtpv2Version) Increment() PatternFlowGtpv2VersionCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv2VersionCounter{}
	}
	return &patternFlowGtpv2VersionCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv2VersionCounter
//  description is TBD
func (obj *patternFlowGtpv2Version) Decrement() PatternFlowGtpv2VersionCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv2VersionCounter{}
	}
	return &patternFlowGtpv2VersionCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv2PiggybackingFlag struct {
	obj *snappipb.PatternFlowGtpv2PiggybackingFlag
}

func (obj *patternFlowGtpv2PiggybackingFlag) msg() *snappipb.PatternFlowGtpv2PiggybackingFlag {
	return obj.obj
}

func (obj *patternFlowGtpv2PiggybackingFlag) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2PiggybackingFlag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2PiggybackingFlag) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2PiggybackingFlag) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2PiggybackingFlag interface {
	msg() *snappipb.PatternFlowGtpv2PiggybackingFlag
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv2PiggybackingFlag
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2PiggybackingFlag
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2PiggybackingFlag
	Increment() PatternFlowGtpv2PiggybackingFlagCounter
	Decrement() PatternFlowGtpv2PiggybackingFlagCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) SetValue(value int32) PatternFlowGtpv2PiggybackingFlag {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) SetValues(value []int32) PatternFlowGtpv2PiggybackingFlag {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2PiggybackingFlag) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2PiggybackingFlag) SetMetricGroup(value string) PatternFlowGtpv2PiggybackingFlag {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv2PiggybackingFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) Increment() PatternFlowGtpv2PiggybackingFlagCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv2PiggybackingFlagCounter{}
	}
	return &patternFlowGtpv2PiggybackingFlagCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv2PiggybackingFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlag) Decrement() PatternFlowGtpv2PiggybackingFlagCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv2PiggybackingFlagCounter{}
	}
	return &patternFlowGtpv2PiggybackingFlagCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv2TeidFlag struct {
	obj *snappipb.PatternFlowGtpv2TeidFlag
}

func (obj *patternFlowGtpv2TeidFlag) msg() *snappipb.PatternFlowGtpv2TeidFlag {
	return obj.obj
}

func (obj *patternFlowGtpv2TeidFlag) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidFlag) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2TeidFlag) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidFlag) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2TeidFlag interface {
	msg() *snappipb.PatternFlowGtpv2TeidFlag
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv2TeidFlag
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2TeidFlag
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2TeidFlag
	Increment() PatternFlowGtpv2TeidFlagCounter
	Decrement() PatternFlowGtpv2TeidFlagCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) SetValue(value int32) PatternFlowGtpv2TeidFlag {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) SetValues(value []int32) PatternFlowGtpv2TeidFlag {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2TeidFlag) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2TeidFlag) SetMetricGroup(value string) PatternFlowGtpv2TeidFlag {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv2TeidFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) Increment() PatternFlowGtpv2TeidFlagCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv2TeidFlagCounter{}
	}
	return &patternFlowGtpv2TeidFlagCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv2TeidFlagCounter
//  description is TBD
func (obj *patternFlowGtpv2TeidFlag) Decrement() PatternFlowGtpv2TeidFlagCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv2TeidFlagCounter{}
	}
	return &patternFlowGtpv2TeidFlagCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv2Spare1 struct {
	obj *snappipb.PatternFlowGtpv2Spare1
}

func (obj *patternFlowGtpv2Spare1) msg() *snappipb.PatternFlowGtpv2Spare1 {
	return obj.obj
}

func (obj *patternFlowGtpv2Spare1) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare1) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2Spare1) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare1) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2Spare1 interface {
	msg() *snappipb.PatternFlowGtpv2Spare1
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv2Spare1
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2Spare1
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2Spare1
	Increment() PatternFlowGtpv2Spare1Counter
	Decrement() PatternFlowGtpv2Spare1Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Spare1) SetValue(value int32) PatternFlowGtpv2Spare1 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Spare1) SetValues(value []int32) PatternFlowGtpv2Spare1 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Spare1) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Spare1) SetMetricGroup(value string) PatternFlowGtpv2Spare1 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv2Spare1Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare1) Increment() PatternFlowGtpv2Spare1Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv2Spare1Counter{}
	}
	return &patternFlowGtpv2Spare1Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv2Spare1Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare1) Decrement() PatternFlowGtpv2Spare1Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv2Spare1Counter{}
	}
	return &patternFlowGtpv2Spare1Counter{obj: obj.obj.Decrement}

}

type patternFlowGtpv2MessageType struct {
	obj *snappipb.PatternFlowGtpv2MessageType
}

func (obj *patternFlowGtpv2MessageType) msg() *snappipb.PatternFlowGtpv2MessageType {
	return obj.obj
}

func (obj *patternFlowGtpv2MessageType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2MessageType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2MessageType interface {
	msg() *snappipb.PatternFlowGtpv2MessageType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv2MessageType
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2MessageType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2MessageType
	Increment() PatternFlowGtpv2MessageTypeCounter
	Decrement() PatternFlowGtpv2MessageTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2MessageType) SetValue(value int32) PatternFlowGtpv2MessageType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2MessageType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2MessageType) SetValues(value []int32) PatternFlowGtpv2MessageType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2MessageType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2MessageType) SetMetricGroup(value string) PatternFlowGtpv2MessageType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv2MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageType) Increment() PatternFlowGtpv2MessageTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv2MessageTypeCounter{}
	}
	return &patternFlowGtpv2MessageTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv2MessageTypeCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageType) Decrement() PatternFlowGtpv2MessageTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv2MessageTypeCounter{}
	}
	return &patternFlowGtpv2MessageTypeCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv2MessageLength struct {
	obj *snappipb.PatternFlowGtpv2MessageLength
}

func (obj *patternFlowGtpv2MessageLength) msg() *snappipb.PatternFlowGtpv2MessageLength {
	return obj.obj
}

func (obj *patternFlowGtpv2MessageLength) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2MessageLength) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageLength) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2MessageLength interface {
	msg() *snappipb.PatternFlowGtpv2MessageLength
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv2MessageLength
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2MessageLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2MessageLength
	Increment() PatternFlowGtpv2MessageLengthCounter
	Decrement() PatternFlowGtpv2MessageLengthCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) SetValue(value int32) PatternFlowGtpv2MessageLength {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) SetValues(value []int32) PatternFlowGtpv2MessageLength {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2MessageLength) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2MessageLength) SetMetricGroup(value string) PatternFlowGtpv2MessageLength {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv2MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) Increment() PatternFlowGtpv2MessageLengthCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv2MessageLengthCounter{}
	}
	return &patternFlowGtpv2MessageLengthCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv2MessageLengthCounter
//  description is TBD
func (obj *patternFlowGtpv2MessageLength) Decrement() PatternFlowGtpv2MessageLengthCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv2MessageLengthCounter{}
	}
	return &patternFlowGtpv2MessageLengthCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv2Teid struct {
	obj *snappipb.PatternFlowGtpv2Teid
}

func (obj *patternFlowGtpv2Teid) msg() *snappipb.PatternFlowGtpv2Teid {
	return obj.obj
}

func (obj *patternFlowGtpv2Teid) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Teid) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2Teid) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Teid) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2Teid interface {
	msg() *snappipb.PatternFlowGtpv2Teid
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv2Teid
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2Teid
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2Teid
	Increment() PatternFlowGtpv2TeidCounter
	Decrement() PatternFlowGtpv2TeidCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Teid) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Teid) SetValue(value int32) PatternFlowGtpv2Teid {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2Teid) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Teid) SetValues(value []int32) PatternFlowGtpv2Teid {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Teid) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Teid) SetMetricGroup(value string) PatternFlowGtpv2Teid {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv2TeidCounter
//  description is TBD
func (obj *patternFlowGtpv2Teid) Increment() PatternFlowGtpv2TeidCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv2TeidCounter{}
	}
	return &patternFlowGtpv2TeidCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv2TeidCounter
//  description is TBD
func (obj *patternFlowGtpv2Teid) Decrement() PatternFlowGtpv2TeidCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv2TeidCounter{}
	}
	return &patternFlowGtpv2TeidCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv2SequenceNumber struct {
	obj *snappipb.PatternFlowGtpv2SequenceNumber
}

func (obj *patternFlowGtpv2SequenceNumber) msg() *snappipb.PatternFlowGtpv2SequenceNumber {
	return obj.obj
}

func (obj *patternFlowGtpv2SequenceNumber) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2SequenceNumber) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2SequenceNumber) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2SequenceNumber) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2SequenceNumber interface {
	msg() *snappipb.PatternFlowGtpv2SequenceNumber
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv2SequenceNumber
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2SequenceNumber
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2SequenceNumber
	Increment() PatternFlowGtpv2SequenceNumberCounter
	Decrement() PatternFlowGtpv2SequenceNumberCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) SetValue(value int32) PatternFlowGtpv2SequenceNumber {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) SetValues(value []int32) PatternFlowGtpv2SequenceNumber {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2SequenceNumber) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2SequenceNumber) SetMetricGroup(value string) PatternFlowGtpv2SequenceNumber {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv2SequenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) Increment() PatternFlowGtpv2SequenceNumberCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv2SequenceNumberCounter{}
	}
	return &patternFlowGtpv2SequenceNumberCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv2SequenceNumberCounter
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumber) Decrement() PatternFlowGtpv2SequenceNumberCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv2SequenceNumberCounter{}
	}
	return &patternFlowGtpv2SequenceNumberCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv2Spare2 struct {
	obj *snappipb.PatternFlowGtpv2Spare2
}

func (obj *patternFlowGtpv2Spare2) msg() *snappipb.PatternFlowGtpv2Spare2 {
	return obj.obj
}

func (obj *patternFlowGtpv2Spare2) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare2) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2Spare2) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare2) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2Spare2 interface {
	msg() *snappipb.PatternFlowGtpv2Spare2
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpv2Spare2
	Values() []int32
	SetValues(value []int32) PatternFlowGtpv2Spare2
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpv2Spare2
	Increment() PatternFlowGtpv2Spare2Counter
	Decrement() PatternFlowGtpv2Spare2Counter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Spare2) SetValue(value int32) PatternFlowGtpv2Spare2 {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Spare2) SetValues(value []int32) PatternFlowGtpv2Spare2 {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Spare2) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpv2Spare2) SetMetricGroup(value string) PatternFlowGtpv2Spare2 {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpv2Spare2Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare2) Increment() PatternFlowGtpv2Spare2Counter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpv2Spare2Counter{}
	}
	return &patternFlowGtpv2Spare2Counter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpv2Spare2Counter
//  description is TBD
func (obj *patternFlowGtpv2Spare2) Decrement() PatternFlowGtpv2Spare2Counter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpv2Spare2Counter{}
	}
	return &patternFlowGtpv2Spare2Counter{obj: obj.obj.Decrement}

}

type patternFlowArpHardwareType struct {
	obj *snappipb.PatternFlowArpHardwareType
}

func (obj *patternFlowArpHardwareType) msg() *snappipb.PatternFlowArpHardwareType {
	return obj.obj
}

func (obj *patternFlowArpHardwareType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpHardwareType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpHardwareType interface {
	msg() *snappipb.PatternFlowArpHardwareType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowArpHardwareType
	Values() []int32
	SetValues(value []int32) PatternFlowArpHardwareType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpHardwareType
	Increment() PatternFlowArpHardwareTypeCounter
	Decrement() PatternFlowArpHardwareTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpHardwareType) SetValue(value int32) PatternFlowArpHardwareType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowArpHardwareType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowArpHardwareType) SetValues(value []int32) PatternFlowArpHardwareType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpHardwareType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpHardwareType) SetMetricGroup(value string) PatternFlowArpHardwareType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowArpHardwareTypeCounter
//  description is TBD
func (obj *patternFlowArpHardwareType) Increment() PatternFlowArpHardwareTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowArpHardwareTypeCounter{}
	}
	return &patternFlowArpHardwareTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowArpHardwareTypeCounter
//  description is TBD
func (obj *patternFlowArpHardwareType) Decrement() PatternFlowArpHardwareTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowArpHardwareTypeCounter{}
	}
	return &patternFlowArpHardwareTypeCounter{obj: obj.obj.Decrement}

}

type patternFlowArpProtocolType struct {
	obj *snappipb.PatternFlowArpProtocolType
}

func (obj *patternFlowArpProtocolType) msg() *snappipb.PatternFlowArpProtocolType {
	return obj.obj
}

func (obj *patternFlowArpProtocolType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpProtocolType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpProtocolType interface {
	msg() *snappipb.PatternFlowArpProtocolType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowArpProtocolType
	Values() []int32
	SetValues(value []int32) PatternFlowArpProtocolType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpProtocolType
	Increment() PatternFlowArpProtocolTypeCounter
	Decrement() PatternFlowArpProtocolTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpProtocolType) SetValue(value int32) PatternFlowArpProtocolType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowArpProtocolType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowArpProtocolType) SetValues(value []int32) PatternFlowArpProtocolType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpProtocolType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpProtocolType) SetMetricGroup(value string) PatternFlowArpProtocolType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowArpProtocolTypeCounter
//  description is TBD
func (obj *patternFlowArpProtocolType) Increment() PatternFlowArpProtocolTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowArpProtocolTypeCounter{}
	}
	return &patternFlowArpProtocolTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowArpProtocolTypeCounter
//  description is TBD
func (obj *patternFlowArpProtocolType) Decrement() PatternFlowArpProtocolTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowArpProtocolTypeCounter{}
	}
	return &patternFlowArpProtocolTypeCounter{obj: obj.obj.Decrement}

}

type patternFlowArpHardwareLength struct {
	obj *snappipb.PatternFlowArpHardwareLength
}

func (obj *patternFlowArpHardwareLength) msg() *snappipb.PatternFlowArpHardwareLength {
	return obj.obj
}

func (obj *patternFlowArpHardwareLength) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpHardwareLength) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareLength) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpHardwareLength interface {
	msg() *snappipb.PatternFlowArpHardwareLength
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowArpHardwareLength
	Values() []int32
	SetValues(value []int32) PatternFlowArpHardwareLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpHardwareLength
	Increment() PatternFlowArpHardwareLengthCounter
	Decrement() PatternFlowArpHardwareLengthCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLength) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpHardwareLength) SetValue(value int32) PatternFlowArpHardwareLength {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowArpHardwareLength) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowArpHardwareLength) SetValues(value []int32) PatternFlowArpHardwareLength {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpHardwareLength) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpHardwareLength) SetMetricGroup(value string) PatternFlowArpHardwareLength {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowArpHardwareLengthCounter
//  description is TBD
func (obj *patternFlowArpHardwareLength) Increment() PatternFlowArpHardwareLengthCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowArpHardwareLengthCounter{}
	}
	return &patternFlowArpHardwareLengthCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowArpHardwareLengthCounter
//  description is TBD
func (obj *patternFlowArpHardwareLength) Decrement() PatternFlowArpHardwareLengthCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowArpHardwareLengthCounter{}
	}
	return &patternFlowArpHardwareLengthCounter{obj: obj.obj.Decrement}

}

type patternFlowArpProtocolLength struct {
	obj *snappipb.PatternFlowArpProtocolLength
}

func (obj *patternFlowArpProtocolLength) msg() *snappipb.PatternFlowArpProtocolLength {
	return obj.obj
}

func (obj *patternFlowArpProtocolLength) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpProtocolLength) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolLength) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpProtocolLength interface {
	msg() *snappipb.PatternFlowArpProtocolLength
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowArpProtocolLength
	Values() []int32
	SetValues(value []int32) PatternFlowArpProtocolLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpProtocolLength
	Increment() PatternFlowArpProtocolLengthCounter
	Decrement() PatternFlowArpProtocolLengthCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLength) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpProtocolLength) SetValue(value int32) PatternFlowArpProtocolLength {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowArpProtocolLength) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowArpProtocolLength) SetValues(value []int32) PatternFlowArpProtocolLength {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpProtocolLength) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpProtocolLength) SetMetricGroup(value string) PatternFlowArpProtocolLength {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowArpProtocolLengthCounter
//  description is TBD
func (obj *patternFlowArpProtocolLength) Increment() PatternFlowArpProtocolLengthCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowArpProtocolLengthCounter{}
	}
	return &patternFlowArpProtocolLengthCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowArpProtocolLengthCounter
//  description is TBD
func (obj *patternFlowArpProtocolLength) Decrement() PatternFlowArpProtocolLengthCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowArpProtocolLengthCounter{}
	}
	return &patternFlowArpProtocolLengthCounter{obj: obj.obj.Decrement}

}

type patternFlowArpOperation struct {
	obj *snappipb.PatternFlowArpOperation
}

func (obj *patternFlowArpOperation) msg() *snappipb.PatternFlowArpOperation {
	return obj.obj
}

func (obj *patternFlowArpOperation) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpOperation) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpOperation) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpOperation) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpOperation interface {
	msg() *snappipb.PatternFlowArpOperation
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowArpOperation
	Values() []int32
	SetValues(value []int32) PatternFlowArpOperation
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpOperation
	Increment() PatternFlowArpOperationCounter
	Decrement() PatternFlowArpOperationCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowArpOperation) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpOperation) SetValue(value int32) PatternFlowArpOperation {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowArpOperation) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowArpOperation) SetValues(value []int32) PatternFlowArpOperation {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpOperation) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpOperation) SetMetricGroup(value string) PatternFlowArpOperation {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowArpOperationCounter
//  description is TBD
func (obj *patternFlowArpOperation) Increment() PatternFlowArpOperationCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowArpOperationCounter{}
	}
	return &patternFlowArpOperationCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowArpOperationCounter
//  description is TBD
func (obj *patternFlowArpOperation) Decrement() PatternFlowArpOperationCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowArpOperationCounter{}
	}
	return &patternFlowArpOperationCounter{obj: obj.obj.Decrement}

}

type patternFlowArpSenderHardwareAddr struct {
	obj *snappipb.PatternFlowArpSenderHardwareAddr
}

func (obj *patternFlowArpSenderHardwareAddr) msg() *snappipb.PatternFlowArpSenderHardwareAddr {
	return obj.obj
}

func (obj *patternFlowArpSenderHardwareAddr) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderHardwareAddr) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpSenderHardwareAddr) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderHardwareAddr) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpSenderHardwareAddr interface {
	msg() *snappipb.PatternFlowArpSenderHardwareAddr
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowArpSenderHardwareAddr
	Values() []string
	SetValues(value []string) PatternFlowArpSenderHardwareAddr
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpSenderHardwareAddr
	Increment() PatternFlowArpSenderHardwareAddrCounter
	Decrement() PatternFlowArpSenderHardwareAddrCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) SetValue(value string) PatternFlowArpSenderHardwareAddr {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) SetValues(value []string) PatternFlowArpSenderHardwareAddr {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpSenderHardwareAddr) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpSenderHardwareAddr) SetMetricGroup(value string) PatternFlowArpSenderHardwareAddr {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowArpSenderHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) Increment() PatternFlowArpSenderHardwareAddrCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowArpSenderHardwareAddrCounter{}
	}
	return &patternFlowArpSenderHardwareAddrCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowArpSenderHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddr) Decrement() PatternFlowArpSenderHardwareAddrCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowArpSenderHardwareAddrCounter{}
	}
	return &patternFlowArpSenderHardwareAddrCounter{obj: obj.obj.Decrement}

}

type patternFlowArpSenderProtocolAddr struct {
	obj *snappipb.PatternFlowArpSenderProtocolAddr
}

func (obj *patternFlowArpSenderProtocolAddr) msg() *snappipb.PatternFlowArpSenderProtocolAddr {
	return obj.obj
}

func (obj *patternFlowArpSenderProtocolAddr) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderProtocolAddr) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpSenderProtocolAddr) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderProtocolAddr) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpSenderProtocolAddr interface {
	msg() *snappipb.PatternFlowArpSenderProtocolAddr
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowArpSenderProtocolAddr
	Values() []string
	SetValues(value []string) PatternFlowArpSenderProtocolAddr
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpSenderProtocolAddr
	Increment() PatternFlowArpSenderProtocolAddrCounter
	Decrement() PatternFlowArpSenderProtocolAddrCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) SetValue(value string) PatternFlowArpSenderProtocolAddr {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) SetValues(value []string) PatternFlowArpSenderProtocolAddr {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpSenderProtocolAddr) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpSenderProtocolAddr) SetMetricGroup(value string) PatternFlowArpSenderProtocolAddr {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowArpSenderProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) Increment() PatternFlowArpSenderProtocolAddrCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowArpSenderProtocolAddrCounter{}
	}
	return &patternFlowArpSenderProtocolAddrCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowArpSenderProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddr) Decrement() PatternFlowArpSenderProtocolAddrCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowArpSenderProtocolAddrCounter{}
	}
	return &patternFlowArpSenderProtocolAddrCounter{obj: obj.obj.Decrement}

}

type patternFlowArpTargetHardwareAddr struct {
	obj *snappipb.PatternFlowArpTargetHardwareAddr
}

func (obj *patternFlowArpTargetHardwareAddr) msg() *snappipb.PatternFlowArpTargetHardwareAddr {
	return obj.obj
}

func (obj *patternFlowArpTargetHardwareAddr) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetHardwareAddr) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpTargetHardwareAddr) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetHardwareAddr) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpTargetHardwareAddr interface {
	msg() *snappipb.PatternFlowArpTargetHardwareAddr
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowArpTargetHardwareAddr
	Values() []string
	SetValues(value []string) PatternFlowArpTargetHardwareAddr
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpTargetHardwareAddr
	Increment() PatternFlowArpTargetHardwareAddrCounter
	Decrement() PatternFlowArpTargetHardwareAddrCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) SetValue(value string) PatternFlowArpTargetHardwareAddr {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) SetValues(value []string) PatternFlowArpTargetHardwareAddr {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpTargetHardwareAddr) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpTargetHardwareAddr) SetMetricGroup(value string) PatternFlowArpTargetHardwareAddr {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowArpTargetHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) Increment() PatternFlowArpTargetHardwareAddrCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowArpTargetHardwareAddrCounter{}
	}
	return &patternFlowArpTargetHardwareAddrCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowArpTargetHardwareAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddr) Decrement() PatternFlowArpTargetHardwareAddrCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowArpTargetHardwareAddrCounter{}
	}
	return &patternFlowArpTargetHardwareAddrCounter{obj: obj.obj.Decrement}

}

type patternFlowArpTargetProtocolAddr struct {
	obj *snappipb.PatternFlowArpTargetProtocolAddr
}

func (obj *patternFlowArpTargetProtocolAddr) msg() *snappipb.PatternFlowArpTargetProtocolAddr {
	return obj.obj
}

func (obj *patternFlowArpTargetProtocolAddr) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetProtocolAddr) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpTargetProtocolAddr) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetProtocolAddr) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpTargetProtocolAddr interface {
	msg() *snappipb.PatternFlowArpTargetProtocolAddr
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowArpTargetProtocolAddr
	Values() []string
	SetValues(value []string) PatternFlowArpTargetProtocolAddr
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowArpTargetProtocolAddr
	Increment() PatternFlowArpTargetProtocolAddrCounter
	Decrement() PatternFlowArpTargetProtocolAddrCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) SetValue(value string) PatternFlowArpTargetProtocolAddr {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) SetValues(value []string) PatternFlowArpTargetProtocolAddr {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpTargetProtocolAddr) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowArpTargetProtocolAddr) SetMetricGroup(value string) PatternFlowArpTargetProtocolAddr {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowArpTargetProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) Increment() PatternFlowArpTargetProtocolAddrCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowArpTargetProtocolAddrCounter{}
	}
	return &patternFlowArpTargetProtocolAddrCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowArpTargetProtocolAddrCounter
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddr) Decrement() PatternFlowArpTargetProtocolAddrCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowArpTargetProtocolAddrCounter{}
	}
	return &patternFlowArpTargetProtocolAddrCounter{obj: obj.obj.Decrement}

}

type flowIcmpEcho struct {
	obj *snappipb.FlowIcmpEcho
}

func (obj *flowIcmpEcho) msg() *snappipb.FlowIcmpEcho {
	return obj.obj
}

func (obj *flowIcmpEcho) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpEcho) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowIcmpEcho) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpEcho) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowIcmpEcho interface {
	msg() *snappipb.FlowIcmpEcho
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Type() PatternFlowIcmpEchoType
	Code() PatternFlowIcmpEchoCode
	Checksum() PatternFlowIcmpEchoChecksum
	Identifier() PatternFlowIcmpEchoIdentifier
	SequenceNumber() PatternFlowIcmpEchoSequenceNumber
}

// Type returns a PatternFlowIcmpEchoType
//  description is TBD
func (obj *flowIcmpEcho) Type() PatternFlowIcmpEchoType {
	if obj.obj.Type == nil {
		obj.obj.Type = &snappipb.PatternFlowIcmpEchoType{}
	}
	return &patternFlowIcmpEchoType{obj: obj.obj.Type}

}

// Code returns a PatternFlowIcmpEchoCode
//  description is TBD
func (obj *flowIcmpEcho) Code() PatternFlowIcmpEchoCode {
	if obj.obj.Code == nil {
		obj.obj.Code = &snappipb.PatternFlowIcmpEchoCode{}
	}
	return &patternFlowIcmpEchoCode{obj: obj.obj.Code}

}

// Checksum returns a PatternFlowIcmpEchoChecksum
//  description is TBD
func (obj *flowIcmpEcho) Checksum() PatternFlowIcmpEchoChecksum {
	if obj.obj.Checksum == nil {
		obj.obj.Checksum = &snappipb.PatternFlowIcmpEchoChecksum{}
	}
	return &patternFlowIcmpEchoChecksum{obj: obj.obj.Checksum}

}

// Identifier returns a PatternFlowIcmpEchoIdentifier
//  description is TBD
func (obj *flowIcmpEcho) Identifier() PatternFlowIcmpEchoIdentifier {
	if obj.obj.Identifier == nil {
		obj.obj.Identifier = &snappipb.PatternFlowIcmpEchoIdentifier{}
	}
	return &patternFlowIcmpEchoIdentifier{obj: obj.obj.Identifier}

}

// SequenceNumber returns a PatternFlowIcmpEchoSequenceNumber
//  description is TBD
func (obj *flowIcmpEcho) SequenceNumber() PatternFlowIcmpEchoSequenceNumber {
	if obj.obj.SequenceNumber == nil {
		obj.obj.SequenceNumber = &snappipb.PatternFlowIcmpEchoSequenceNumber{}
	}
	return &patternFlowIcmpEchoSequenceNumber{obj: obj.obj.SequenceNumber}

}

type flowIcmpv6Echo struct {
	obj *snappipb.FlowIcmpv6Echo
}

func (obj *flowIcmpv6Echo) msg() *snappipb.FlowIcmpv6Echo {
	return obj.obj
}

func (obj *flowIcmpv6Echo) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpv6Echo) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowIcmpv6Echo) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIcmpv6Echo) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowIcmpv6Echo interface {
	msg() *snappipb.FlowIcmpv6Echo
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Type() PatternFlowIcmpv6EchoType
	Code() PatternFlowIcmpv6EchoCode
	Identifier() PatternFlowIcmpv6EchoIdentifier
	SequenceNumber() PatternFlowIcmpv6EchoSequenceNumber
	Checksum() PatternFlowIcmpv6EchoChecksum
}

// Type returns a PatternFlowIcmpv6EchoType
//  description is TBD
func (obj *flowIcmpv6Echo) Type() PatternFlowIcmpv6EchoType {
	if obj.obj.Type == nil {
		obj.obj.Type = &snappipb.PatternFlowIcmpv6EchoType{}
	}
	return &patternFlowIcmpv6EchoType{obj: obj.obj.Type}

}

// Code returns a PatternFlowIcmpv6EchoCode
//  description is TBD
func (obj *flowIcmpv6Echo) Code() PatternFlowIcmpv6EchoCode {
	if obj.obj.Code == nil {
		obj.obj.Code = &snappipb.PatternFlowIcmpv6EchoCode{}
	}
	return &patternFlowIcmpv6EchoCode{obj: obj.obj.Code}

}

// Identifier returns a PatternFlowIcmpv6EchoIdentifier
//  description is TBD
func (obj *flowIcmpv6Echo) Identifier() PatternFlowIcmpv6EchoIdentifier {
	if obj.obj.Identifier == nil {
		obj.obj.Identifier = &snappipb.PatternFlowIcmpv6EchoIdentifier{}
	}
	return &patternFlowIcmpv6EchoIdentifier{obj: obj.obj.Identifier}

}

// SequenceNumber returns a PatternFlowIcmpv6EchoSequenceNumber
//  description is TBD
func (obj *flowIcmpv6Echo) SequenceNumber() PatternFlowIcmpv6EchoSequenceNumber {
	if obj.obj.SequenceNumber == nil {
		obj.obj.SequenceNumber = &snappipb.PatternFlowIcmpv6EchoSequenceNumber{}
	}
	return &patternFlowIcmpv6EchoSequenceNumber{obj: obj.obj.SequenceNumber}

}

// Checksum returns a PatternFlowIcmpv6EchoChecksum
//  description is TBD
func (obj *flowIcmpv6Echo) Checksum() PatternFlowIcmpv6EchoChecksum {
	if obj.obj.Checksum == nil {
		obj.obj.Checksum = &snappipb.PatternFlowIcmpv6EchoChecksum{}
	}
	return &patternFlowIcmpv6EchoChecksum{obj: obj.obj.Checksum}

}

type patternFlowPppAddress struct {
	obj *snappipb.PatternFlowPppAddress
}

func (obj *patternFlowPppAddress) msg() *snappipb.PatternFlowPppAddress {
	return obj.obj
}

func (obj *patternFlowPppAddress) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppAddress) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPppAddress) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppAddress) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPppAddress interface {
	msg() *snappipb.PatternFlowPppAddress
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPppAddress
	Values() []int32
	SetValues(value []int32) PatternFlowPppAddress
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPppAddress
	Increment() PatternFlowPppAddressCounter
	Decrement() PatternFlowPppAddressCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPppAddress) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppAddress) SetValue(value int32) PatternFlowPppAddress {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPppAddress) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPppAddress) SetValues(value []int32) PatternFlowPppAddress {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppAddress) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppAddress) SetMetricGroup(value string) PatternFlowPppAddress {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPppAddressCounter
//  description is TBD
func (obj *patternFlowPppAddress) Increment() PatternFlowPppAddressCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPppAddressCounter{}
	}
	return &patternFlowPppAddressCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPppAddressCounter
//  description is TBD
func (obj *patternFlowPppAddress) Decrement() PatternFlowPppAddressCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPppAddressCounter{}
	}
	return &patternFlowPppAddressCounter{obj: obj.obj.Decrement}

}

type patternFlowPppControl struct {
	obj *snappipb.PatternFlowPppControl
}

func (obj *patternFlowPppControl) msg() *snappipb.PatternFlowPppControl {
	return obj.obj
}

func (obj *patternFlowPppControl) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppControl) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPppControl) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppControl) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPppControl interface {
	msg() *snappipb.PatternFlowPppControl
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPppControl
	Values() []int32
	SetValues(value []int32) PatternFlowPppControl
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPppControl
	Increment() PatternFlowPppControlCounter
	Decrement() PatternFlowPppControlCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPppControl) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppControl) SetValue(value int32) PatternFlowPppControl {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPppControl) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPppControl) SetValues(value []int32) PatternFlowPppControl {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppControl) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppControl) SetMetricGroup(value string) PatternFlowPppControl {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPppControlCounter
//  description is TBD
func (obj *patternFlowPppControl) Increment() PatternFlowPppControlCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPppControlCounter{}
	}
	return &patternFlowPppControlCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPppControlCounter
//  description is TBD
func (obj *patternFlowPppControl) Decrement() PatternFlowPppControlCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPppControlCounter{}
	}
	return &patternFlowPppControlCounter{obj: obj.obj.Decrement}

}

type patternFlowPppProtocolType struct {
	obj *snappipb.PatternFlowPppProtocolType
}

func (obj *patternFlowPppProtocolType) msg() *snappipb.PatternFlowPppProtocolType {
	return obj.obj
}

func (obj *patternFlowPppProtocolType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppProtocolType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPppProtocolType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppProtocolType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPppProtocolType interface {
	msg() *snappipb.PatternFlowPppProtocolType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowPppProtocolType
	Values() []int32
	SetValues(value []int32) PatternFlowPppProtocolType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowPppProtocolType
	Increment() PatternFlowPppProtocolTypeCounter
	Decrement() PatternFlowPppProtocolTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppProtocolType) SetValue(value int32) PatternFlowPppProtocolType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowPppProtocolType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowPppProtocolType) SetValues(value []int32) PatternFlowPppProtocolType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppProtocolType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowPppProtocolType) SetMetricGroup(value string) PatternFlowPppProtocolType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowPppProtocolTypeCounter
//  description is TBD
func (obj *patternFlowPppProtocolType) Increment() PatternFlowPppProtocolTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowPppProtocolTypeCounter{}
	}
	return &patternFlowPppProtocolTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowPppProtocolTypeCounter
//  description is TBD
func (obj *patternFlowPppProtocolType) Decrement() PatternFlowPppProtocolTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowPppProtocolTypeCounter{}
	}
	return &patternFlowPppProtocolTypeCounter{obj: obj.obj.Decrement}

}

type patternFlowIgmpv1Version struct {
	obj *snappipb.PatternFlowIgmpv1Version
}

func (obj *patternFlowIgmpv1Version) msg() *snappipb.PatternFlowIgmpv1Version {
	return obj.obj
}

func (obj *patternFlowIgmpv1Version) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Version) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIgmpv1Version) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Version) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIgmpv1Version interface {
	msg() *snappipb.PatternFlowIgmpv1Version
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIgmpv1Version
	Values() []int32
	SetValues(value []int32) PatternFlowIgmpv1Version
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIgmpv1Version
	Increment() PatternFlowIgmpv1VersionCounter
	Decrement() PatternFlowIgmpv1VersionCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1Version) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1Version) SetValue(value int32) PatternFlowIgmpv1Version {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIgmpv1Version) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1Version) SetValues(value []int32) PatternFlowIgmpv1Version {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Version) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Version) SetMetricGroup(value string) PatternFlowIgmpv1Version {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIgmpv1VersionCounter
//  description is TBD
func (obj *patternFlowIgmpv1Version) Increment() PatternFlowIgmpv1VersionCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIgmpv1VersionCounter{}
	}
	return &patternFlowIgmpv1VersionCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIgmpv1VersionCounter
//  description is TBD
func (obj *patternFlowIgmpv1Version) Decrement() PatternFlowIgmpv1VersionCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIgmpv1VersionCounter{}
	}
	return &patternFlowIgmpv1VersionCounter{obj: obj.obj.Decrement}

}

type patternFlowIgmpv1Type struct {
	obj *snappipb.PatternFlowIgmpv1Type
}

func (obj *patternFlowIgmpv1Type) msg() *snappipb.PatternFlowIgmpv1Type {
	return obj.obj
}

func (obj *patternFlowIgmpv1Type) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Type) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIgmpv1Type) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Type) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIgmpv1Type interface {
	msg() *snappipb.PatternFlowIgmpv1Type
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIgmpv1Type
	Values() []int32
	SetValues(value []int32) PatternFlowIgmpv1Type
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIgmpv1Type
	Increment() PatternFlowIgmpv1TypeCounter
	Decrement() PatternFlowIgmpv1TypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1Type) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1Type) SetValue(value int32) PatternFlowIgmpv1Type {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIgmpv1Type) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1Type) SetValues(value []int32) PatternFlowIgmpv1Type {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Type) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Type) SetMetricGroup(value string) PatternFlowIgmpv1Type {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIgmpv1TypeCounter
//  description is TBD
func (obj *patternFlowIgmpv1Type) Increment() PatternFlowIgmpv1TypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIgmpv1TypeCounter{}
	}
	return &patternFlowIgmpv1TypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIgmpv1TypeCounter
//  description is TBD
func (obj *patternFlowIgmpv1Type) Decrement() PatternFlowIgmpv1TypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIgmpv1TypeCounter{}
	}
	return &patternFlowIgmpv1TypeCounter{obj: obj.obj.Decrement}

}

type patternFlowIgmpv1Unused struct {
	obj *snappipb.PatternFlowIgmpv1Unused
}

func (obj *patternFlowIgmpv1Unused) msg() *snappipb.PatternFlowIgmpv1Unused {
	return obj.obj
}

func (obj *patternFlowIgmpv1Unused) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Unused) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIgmpv1Unused) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Unused) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIgmpv1Unused interface {
	msg() *snappipb.PatternFlowIgmpv1Unused
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIgmpv1Unused
	Values() []int32
	SetValues(value []int32) PatternFlowIgmpv1Unused
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIgmpv1Unused
	Increment() PatternFlowIgmpv1UnusedCounter
	Decrement() PatternFlowIgmpv1UnusedCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1Unused) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1Unused) SetValue(value int32) PatternFlowIgmpv1Unused {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIgmpv1Unused) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1Unused) SetValues(value []int32) PatternFlowIgmpv1Unused {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Unused) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1Unused) SetMetricGroup(value string) PatternFlowIgmpv1Unused {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIgmpv1UnusedCounter
//  description is TBD
func (obj *patternFlowIgmpv1Unused) Increment() PatternFlowIgmpv1UnusedCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIgmpv1UnusedCounter{}
	}
	return &patternFlowIgmpv1UnusedCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIgmpv1UnusedCounter
//  description is TBD
func (obj *patternFlowIgmpv1Unused) Decrement() PatternFlowIgmpv1UnusedCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIgmpv1UnusedCounter{}
	}
	return &patternFlowIgmpv1UnusedCounter{obj: obj.obj.Decrement}

}

type patternFlowIgmpv1Checksum struct {
	obj *snappipb.PatternFlowIgmpv1Checksum
}

func (obj *patternFlowIgmpv1Checksum) msg() *snappipb.PatternFlowIgmpv1Checksum {
	return obj.obj
}

func (obj *patternFlowIgmpv1Checksum) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Checksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIgmpv1Checksum) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1Checksum) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIgmpv1Checksum interface {
	msg() *snappipb.PatternFlowIgmpv1Checksum
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Custom() int32
	SetCustom(value int32) PatternFlowIgmpv1Checksum
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIgmpv1Checksum) Custom() int32 {
	return *obj.obj.Custom
}

// SetCustom sets the int32 value in the None object
//  A custom checksum value
func (obj *patternFlowIgmpv1Checksum) SetCustom(value int32) PatternFlowIgmpv1Checksum {
	obj.obj.Custom = &value
	return obj
}

type patternFlowIgmpv1GroupAddress struct {
	obj *snappipb.PatternFlowIgmpv1GroupAddress
}

func (obj *patternFlowIgmpv1GroupAddress) msg() *snappipb.PatternFlowIgmpv1GroupAddress {
	return obj.obj
}

func (obj *patternFlowIgmpv1GroupAddress) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1GroupAddress) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIgmpv1GroupAddress) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1GroupAddress) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIgmpv1GroupAddress interface {
	msg() *snappipb.PatternFlowIgmpv1GroupAddress
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() string
	SetValue(value string) PatternFlowIgmpv1GroupAddress
	Values() []string
	SetValues(value []string) PatternFlowIgmpv1GroupAddress
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIgmpv1GroupAddress
	Increment() PatternFlowIgmpv1GroupAddressCounter
	Decrement() PatternFlowIgmpv1GroupAddressCounter
}

// Value returns a string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) Value() string {
	return *obj.obj.Value
}

// SetValue sets the string value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) SetValue(value string) PatternFlowIgmpv1GroupAddress {
	obj.obj.Value = &value
	return obj
}

// Values returns a []string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) Values() []string {
	return obj.obj.Values
}

// SetValues sets the []string value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) SetValues(value []string) PatternFlowIgmpv1GroupAddress {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1GroupAddress) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIgmpv1GroupAddress) SetMetricGroup(value string) PatternFlowIgmpv1GroupAddress {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIgmpv1GroupAddressCounter
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) Increment() PatternFlowIgmpv1GroupAddressCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIgmpv1GroupAddressCounter{}
	}
	return &patternFlowIgmpv1GroupAddressCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIgmpv1GroupAddressCounter
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddress) Decrement() PatternFlowIgmpv1GroupAddressCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIgmpv1GroupAddressCounter{}
	}
	return &patternFlowIgmpv1GroupAddressCounter{obj: obj.obj.Decrement}

}

type flowDelay struct {
	obj *snappipb.FlowDelay
}

func (obj *flowDelay) msg() *snappipb.FlowDelay {
	return obj.obj
}

func (obj *flowDelay) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDelay) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowDelay) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDelay) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowDelay interface {
	msg() *snappipb.FlowDelay
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Bytes() float32
	SetBytes(value float32) FlowDelay
	Nanoseconds() float32
	SetNanoseconds(value float32) FlowDelay
	Microseconds() float32
	SetMicroseconds(value float32) FlowDelay
}

// Bytes returns a float32
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) Bytes() float32 {
	return *obj.obj.Bytes
}

// SetBytes sets the float32 value in the None object
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) SetBytes(value float32) FlowDelay {
	obj.obj.Bytes = &value
	return obj
}

// Nanoseconds returns a float32
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) Nanoseconds() float32 {
	return *obj.obj.Nanoseconds
}

// SetNanoseconds sets the float32 value in the None object
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) SetNanoseconds(value float32) FlowDelay {
	obj.obj.Nanoseconds = &value
	return obj
}

// Microseconds returns a float32
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) Microseconds() float32 {
	return *obj.obj.Microseconds
}

// SetMicroseconds sets the float32 value in the None object
//  The delay before starting transmission of packets.
//  A value of 0 indicates no delay.
func (obj *flowDelay) SetMicroseconds(value float32) FlowDelay {
	obj.obj.Microseconds = &value
	return obj
}

type flowDurationInterBurstGap struct {
	obj *snappipb.FlowDurationInterBurstGap
}

func (obj *flowDurationInterBurstGap) msg() *snappipb.FlowDurationInterBurstGap {
	return obj.obj
}

func (obj *flowDurationInterBurstGap) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDurationInterBurstGap) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowDurationInterBurstGap) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowDurationInterBurstGap) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowDurationInterBurstGap interface {
	msg() *snappipb.FlowDurationInterBurstGap
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Bytes() float64
	SetBytes(value float64) FlowDurationInterBurstGap
	Nanoseconds() float64
	SetNanoseconds(value float64) FlowDurationInterBurstGap
	Microseconds() float64
	SetMicroseconds(value float64) FlowDurationInterBurstGap
}

// Bytes returns a float64
//  The amount of time between bursts expressed in bytes.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) Bytes() float64 {
	return *obj.obj.Bytes
}

// SetBytes sets the float64 value in the None object
//  The amount of time between bursts expressed in bytes.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) SetBytes(value float64) FlowDurationInterBurstGap {
	obj.obj.Bytes = &value
	return obj
}

// Nanoseconds returns a float64
//  The amount of time between bursts expressed in nanoseconds.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) Nanoseconds() float64 {
	return *obj.obj.Nanoseconds
}

// SetNanoseconds sets the float64 value in the None object
//  The amount of time between bursts expressed in nanoseconds.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) SetNanoseconds(value float64) FlowDurationInterBurstGap {
	obj.obj.Nanoseconds = &value
	return obj
}

// Microseconds returns a float64
//  The amount of time between bursts expressed in microseconds.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) Microseconds() float64 {
	return *obj.obj.Microseconds
}

// SetMicroseconds sets the float64 value in the None object
//  The amount of time between bursts expressed in microseconds.
//  A value of 0 indicates no gap between bursts.
func (obj *flowDurationInterBurstGap) SetMicroseconds(value float64) FlowDurationInterBurstGap {
	obj.obj.Microseconds = &value
	return obj
}

type deviceBgpAdvanced struct {
	obj *snappipb.DeviceBgpAdvanced
}

func (obj *deviceBgpAdvanced) msg() *snappipb.DeviceBgpAdvanced {
	return obj.obj
}

func (obj *deviceBgpAdvanced) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpAdvanced) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpAdvanced) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpAdvanced) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpAdvanced interface {
	msg() *snappipb.DeviceBgpAdvanced
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	HoldTimeInterval() int32
	SetHoldTimeInterval(value int32) DeviceBgpAdvanced
	KeepAliveInterval() int32
	SetKeepAliveInterval(value int32) DeviceBgpAdvanced
	UpdateInterval() int32
	SetUpdateInterval(value int32) DeviceBgpAdvanced
	TimeToLive() int32
	SetTimeToLive(value int32) DeviceBgpAdvanced
	Md5Key() string
	SetMd5Key(value string) DeviceBgpAdvanced
}

// HoldTimeInterval returns a int32
//  Number of seconds the sender proposes for the value of the Hold Timer
func (obj *deviceBgpAdvanced) HoldTimeInterval() int32 {
	return *obj.obj.HoldTimeInterval
}

// SetHoldTimeInterval sets the int32 value in the None object
//  Number of seconds the sender proposes for the value of the Hold Timer
func (obj *deviceBgpAdvanced) SetHoldTimeInterval(value int32) DeviceBgpAdvanced {
	obj.obj.HoldTimeInterval = &value
	return obj
}

// KeepAliveInterval returns a int32
//  Number of seconds between transmissions of Keep Alive messages by router
func (obj *deviceBgpAdvanced) KeepAliveInterval() int32 {
	return *obj.obj.KeepAliveInterval
}

// SetKeepAliveInterval sets the int32 value in the None object
//  Number of seconds between transmissions of Keep Alive messages by router
func (obj *deviceBgpAdvanced) SetKeepAliveInterval(value int32) DeviceBgpAdvanced {
	obj.obj.KeepAliveInterval = &value
	return obj
}

// UpdateInterval returns a int32
//  The time interval at which UPDATE messages are sent to the DUT, expressed as the number of milliseconds between UPDATE messages.
func (obj *deviceBgpAdvanced) UpdateInterval() int32 {
	return *obj.obj.UpdateInterval
}

// SetUpdateInterval sets the int32 value in the None object
//  The time interval at which UPDATE messages are sent to the DUT, expressed as the number of milliseconds between UPDATE messages.
func (obj *deviceBgpAdvanced) SetUpdateInterval(value int32) DeviceBgpAdvanced {
	obj.obj.UpdateInterval = &value
	return obj
}

// TimeToLive returns a int32
//  The limited number of iterations that a unit of data can experience before the data is discarded. This is placed in the TTL field in the IP header of the  transmitted packets.
func (obj *deviceBgpAdvanced) TimeToLive() int32 {
	return *obj.obj.TimeToLive
}

// SetTimeToLive sets the int32 value in the None object
//  The limited number of iterations that a unit of data can experience before the data is discarded. This is placed in the TTL field in the IP header of the  transmitted packets.
func (obj *deviceBgpAdvanced) SetTimeToLive(value int32) DeviceBgpAdvanced {
	obj.obj.TimeToLive = &value
	return obj
}

// Md5Key returns a string
//  The value to be used as a secret MD5 key for authentication. If null or an empty string then authentication will not be enabled.
func (obj *deviceBgpAdvanced) Md5Key() string {
	return *obj.obj.Md5Key
}

// SetMd5Key sets the string value in the None object
//  The value to be used as a secret MD5 key for authentication. If null or an empty string then authentication will not be enabled.
func (obj *deviceBgpAdvanced) SetMd5Key(value string) DeviceBgpAdvanced {
	obj.obj.Md5Key = &value
	return obj
}

type deviceBgpCapability struct {
	obj *snappipb.DeviceBgpCapability
}

func (obj *deviceBgpCapability) msg() *snappipb.DeviceBgpCapability {
	return obj.obj
}

func (obj *deviceBgpCapability) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpCapability) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpCapability) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpCapability) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpCapability interface {
	msg() *snappipb.DeviceBgpCapability
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Vpls() bool
	SetVpls(value bool) DeviceBgpCapability
	RouteRefresh() bool
	SetRouteRefresh(value bool) DeviceBgpCapability
	RouteConstraint() bool
	SetRouteConstraint(value bool) DeviceBgpCapability
	LinkStateNonVpn() bool
	SetLinkStateNonVpn(value bool) DeviceBgpCapability
	LinkStateVpn() bool
	SetLinkStateVpn(value bool) DeviceBgpCapability
	Evpn() bool
	SetEvpn(value bool) DeviceBgpCapability
	ExtendedNextHopEncoding() bool
	SetExtendedNextHopEncoding(value bool) DeviceBgpCapability
	Ipv4Unicast() bool
	SetIpv4Unicast(value bool) DeviceBgpCapability
	Ipv4Multicast() bool
	SetIpv4Multicast(value bool) DeviceBgpCapability
	Ipv4MulticastVpn() bool
	SetIpv4MulticastVpn(value bool) DeviceBgpCapability
	Ipv4MplsVpn() bool
	SetIpv4MplsVpn(value bool) DeviceBgpCapability
	Ipv4Mdt() bool
	SetIpv4Mdt(value bool) DeviceBgpCapability
	Ipv4MulticastMplsVpn() bool
	SetIpv4MulticastMplsVpn(value bool) DeviceBgpCapability
	Ipv4UnicastFlowSpec() bool
	SetIpv4UnicastFlowSpec(value bool) DeviceBgpCapability
	Ipv4SrTePolicy() bool
	SetIpv4SrTePolicy(value bool) DeviceBgpCapability
	Ipv4UnicastAddPath() bool
	SetIpv4UnicastAddPath(value bool) DeviceBgpCapability
	Ipv6Unicast() bool
	SetIpv6Unicast(value bool) DeviceBgpCapability
	Ipv6Multicast() bool
	SetIpv6Multicast(value bool) DeviceBgpCapability
	Ipv6MulticastVpn() bool
	SetIpv6MulticastVpn(value bool) DeviceBgpCapability
	Ipv6MplsVpn() bool
	SetIpv6MplsVpn(value bool) DeviceBgpCapability
	Ipv6Mdt() bool
	SetIpv6Mdt(value bool) DeviceBgpCapability
	Ipv6MulticastMplsVpn() bool
	SetIpv6MulticastMplsVpn(value bool) DeviceBgpCapability
	Ipv6UnicastFlowSpec() bool
	SetIpv6UnicastFlowSpec(value bool) DeviceBgpCapability
	Ipv6SrTePolicy() bool
	SetIpv6SrTePolicy(value bool) DeviceBgpCapability
	Ipv6UnicastAddPath() bool
	SetIpv6UnicastAddPath(value bool) DeviceBgpCapability
}

// Vpls returns a bool
//  TBD
func (obj *deviceBgpCapability) Vpls() bool {
	return *obj.obj.Vpls
}

// SetVpls sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetVpls(value bool) DeviceBgpCapability {
	obj.obj.Vpls = &value
	return obj
}

// RouteRefresh returns a bool
//  TBD
func (obj *deviceBgpCapability) RouteRefresh() bool {
	return *obj.obj.RouteRefresh
}

// SetRouteRefresh sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetRouteRefresh(value bool) DeviceBgpCapability {
	obj.obj.RouteRefresh = &value
	return obj
}

// RouteConstraint returns a bool
//  TBD
func (obj *deviceBgpCapability) RouteConstraint() bool {
	return *obj.obj.RouteConstraint
}

// SetRouteConstraint sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetRouteConstraint(value bool) DeviceBgpCapability {
	obj.obj.RouteConstraint = &value
	return obj
}

// LinkStateNonVpn returns a bool
//  TBD
func (obj *deviceBgpCapability) LinkStateNonVpn() bool {
	return *obj.obj.LinkStateNonVpn
}

// SetLinkStateNonVpn sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetLinkStateNonVpn(value bool) DeviceBgpCapability {
	obj.obj.LinkStateNonVpn = &value
	return obj
}

// LinkStateVpn returns a bool
//  TBD
func (obj *deviceBgpCapability) LinkStateVpn() bool {
	return *obj.obj.LinkStateVpn
}

// SetLinkStateVpn sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetLinkStateVpn(value bool) DeviceBgpCapability {
	obj.obj.LinkStateVpn = &value
	return obj
}

// Evpn returns a bool
//  TBD
func (obj *deviceBgpCapability) Evpn() bool {
	return *obj.obj.Evpn
}

// SetEvpn sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetEvpn(value bool) DeviceBgpCapability {
	obj.obj.Evpn = &value
	return obj
}

// ExtendedNextHopEncoding returns a bool
//  TBD
func (obj *deviceBgpCapability) ExtendedNextHopEncoding() bool {
	return *obj.obj.ExtendedNextHopEncoding
}

// SetExtendedNextHopEncoding sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetExtendedNextHopEncoding(value bool) DeviceBgpCapability {
	obj.obj.ExtendedNextHopEncoding = &value
	return obj
}

// Ipv4Unicast returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv4Unicast() bool {
	return *obj.obj.Ipv4Unicast
}

// SetIpv4Unicast sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv4Unicast(value bool) DeviceBgpCapability {
	obj.obj.Ipv4Unicast = &value
	return obj
}

// Ipv4Multicast returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv4Multicast() bool {
	return *obj.obj.Ipv4Multicast
}

// SetIpv4Multicast sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv4Multicast(value bool) DeviceBgpCapability {
	obj.obj.Ipv4Multicast = &value
	return obj
}

// Ipv4MulticastVpn returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv4MulticastVpn() bool {
	return *obj.obj.Ipv4MulticastVpn
}

// SetIpv4MulticastVpn sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv4MulticastVpn(value bool) DeviceBgpCapability {
	obj.obj.Ipv4MulticastVpn = &value
	return obj
}

// Ipv4MplsVpn returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv4MplsVpn() bool {
	return *obj.obj.Ipv4MplsVpn
}

// SetIpv4MplsVpn sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv4MplsVpn(value bool) DeviceBgpCapability {
	obj.obj.Ipv4MplsVpn = &value
	return obj
}

// Ipv4Mdt returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv4Mdt() bool {
	return *obj.obj.Ipv4Mdt
}

// SetIpv4Mdt sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv4Mdt(value bool) DeviceBgpCapability {
	obj.obj.Ipv4Mdt = &value
	return obj
}

// Ipv4MulticastMplsVpn returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv4MulticastMplsVpn() bool {
	return *obj.obj.Ipv4MulticastMplsVpn
}

// SetIpv4MulticastMplsVpn sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv4MulticastMplsVpn(value bool) DeviceBgpCapability {
	obj.obj.Ipv4MulticastMplsVpn = &value
	return obj
}

// Ipv4UnicastFlowSpec returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv4UnicastFlowSpec() bool {
	return *obj.obj.Ipv4UnicastFlowSpec
}

// SetIpv4UnicastFlowSpec sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv4UnicastFlowSpec(value bool) DeviceBgpCapability {
	obj.obj.Ipv4UnicastFlowSpec = &value
	return obj
}

// Ipv4SrTePolicy returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv4SrTePolicy() bool {
	return *obj.obj.Ipv4SrTePolicy
}

// SetIpv4SrTePolicy sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv4SrTePolicy(value bool) DeviceBgpCapability {
	obj.obj.Ipv4SrTePolicy = &value
	return obj
}

// Ipv4UnicastAddPath returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv4UnicastAddPath() bool {
	return *obj.obj.Ipv4UnicastAddPath
}

// SetIpv4UnicastAddPath sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv4UnicastAddPath(value bool) DeviceBgpCapability {
	obj.obj.Ipv4UnicastAddPath = &value
	return obj
}

// Ipv6Unicast returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv6Unicast() bool {
	return *obj.obj.Ipv6Unicast
}

// SetIpv6Unicast sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv6Unicast(value bool) DeviceBgpCapability {
	obj.obj.Ipv6Unicast = &value
	return obj
}

// Ipv6Multicast returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv6Multicast() bool {
	return *obj.obj.Ipv6Multicast
}

// SetIpv6Multicast sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv6Multicast(value bool) DeviceBgpCapability {
	obj.obj.Ipv6Multicast = &value
	return obj
}

// Ipv6MulticastVpn returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv6MulticastVpn() bool {
	return *obj.obj.Ipv6MulticastVpn
}

// SetIpv6MulticastVpn sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv6MulticastVpn(value bool) DeviceBgpCapability {
	obj.obj.Ipv6MulticastVpn = &value
	return obj
}

// Ipv6MplsVpn returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv6MplsVpn() bool {
	return *obj.obj.Ipv6MplsVpn
}

// SetIpv6MplsVpn sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv6MplsVpn(value bool) DeviceBgpCapability {
	obj.obj.Ipv6MplsVpn = &value
	return obj
}

// Ipv6Mdt returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv6Mdt() bool {
	return *obj.obj.Ipv6Mdt
}

// SetIpv6Mdt sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv6Mdt(value bool) DeviceBgpCapability {
	obj.obj.Ipv6Mdt = &value
	return obj
}

// Ipv6MulticastMplsVpn returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv6MulticastMplsVpn() bool {
	return *obj.obj.Ipv6MulticastMplsVpn
}

// SetIpv6MulticastMplsVpn sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv6MulticastMplsVpn(value bool) DeviceBgpCapability {
	obj.obj.Ipv6MulticastMplsVpn = &value
	return obj
}

// Ipv6UnicastFlowSpec returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv6UnicastFlowSpec() bool {
	return *obj.obj.Ipv6UnicastFlowSpec
}

// SetIpv6UnicastFlowSpec sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv6UnicastFlowSpec(value bool) DeviceBgpCapability {
	obj.obj.Ipv6UnicastFlowSpec = &value
	return obj
}

// Ipv6SrTePolicy returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv6SrTePolicy() bool {
	return *obj.obj.Ipv6SrTePolicy
}

// SetIpv6SrTePolicy sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv6SrTePolicy(value bool) DeviceBgpCapability {
	obj.obj.Ipv6SrTePolicy = &value
	return obj
}

// Ipv6UnicastAddPath returns a bool
//  TBD
func (obj *deviceBgpCapability) Ipv6UnicastAddPath() bool {
	return *obj.obj.Ipv6UnicastAddPath
}

// SetIpv6UnicastAddPath sets the bool value in the None object
//  TBD
func (obj *deviceBgpCapability) SetIpv6UnicastAddPath(value bool) DeviceBgpCapability {
	obj.obj.Ipv6UnicastAddPath = &value
	return obj
}

type deviceBgpSrTePolicy struct {
	obj *snappipb.DeviceBgpSrTePolicy
}

func (obj *deviceBgpSrTePolicy) msg() *snappipb.DeviceBgpSrTePolicy {
	return obj.obj
}

func (obj *deviceBgpSrTePolicy) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpSrTePolicy) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpSrTePolicy) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpSrTePolicy) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpSrTePolicy interface {
	msg() *snappipb.DeviceBgpSrTePolicy
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Distinguisher() int32
	SetDistinguisher(value int32) DeviceBgpSrTePolicy
	Color() int32
	SetColor(value int32) DeviceBgpSrTePolicy
	Ipv4Endpoint() string
	SetIpv4Endpoint(value string) DeviceBgpSrTePolicy
	Ipv6Endpoint() string
	SetIpv6Endpoint(value string) DeviceBgpSrTePolicy
	NextHop() DeviceBgpSrTePolicyNextHop
	AddPath() DeviceBgpAddPath
	AsPath() DeviceBgpAsPath
	TunnelTlvs() DeviceBgpSrTePolicyDeviceBgpTunnelTlvIter
	Communities() DeviceBgpSrTePolicyDeviceBgpCommunityIter
}

// Distinguisher returns a int32
//  Identifies the policy in the context of (color and endpoint) tuple.  It is used by the SR Policy originator to make unique multiple  occurrences of the same SR Policy.
func (obj *deviceBgpSrTePolicy) Distinguisher() int32 {
	return *obj.obj.Distinguisher
}

// SetDistinguisher sets the int32 value in the None object
//  Identifies the policy in the context of (color and endpoint) tuple.  It is used by the SR Policy originator to make unique multiple  occurrences of the same SR Policy.
func (obj *deviceBgpSrTePolicy) SetDistinguisher(value int32) DeviceBgpSrTePolicy {
	obj.obj.Distinguisher = &value
	return obj
}

// Color returns a int32
//  Identifies the policy. It is used to match the color of the  destination prefixes to steer traffic into the SR Policy.
func (obj *deviceBgpSrTePolicy) Color() int32 {
	return *obj.obj.Color
}

// SetColor sets the int32 value in the None object
//  Identifies the policy. It is used to match the color of the  destination prefixes to steer traffic into the SR Policy.
func (obj *deviceBgpSrTePolicy) SetColor(value int32) DeviceBgpSrTePolicy {
	obj.obj.Color = &value
	return obj
}

// Ipv4Endpoint returns a string
//  Specifies a single node or a set of nodes. It is selected on the basis of the policy_type (AFI).
func (obj *deviceBgpSrTePolicy) Ipv4Endpoint() string {
	return *obj.obj.Ipv4Endpoint
}

// SetIpv4Endpoint sets the string value in the None object
//  Specifies a single node or a set of nodes. It is selected on the basis of the policy_type (AFI).
func (obj *deviceBgpSrTePolicy) SetIpv4Endpoint(value string) DeviceBgpSrTePolicy {
	obj.obj.Ipv4Endpoint = &value
	return obj
}

// Ipv6Endpoint returns a string
//  Specifies a single node or a set of nodes. It is selected on the basis of the policy_type (AFI).
func (obj *deviceBgpSrTePolicy) Ipv6Endpoint() string {
	return *obj.obj.Ipv6Endpoint
}

// SetIpv6Endpoint sets the string value in the None object
//  Specifies a single node or a set of nodes. It is selected on the basis of the policy_type (AFI).
func (obj *deviceBgpSrTePolicy) SetIpv6Endpoint(value string) DeviceBgpSrTePolicy {
	obj.obj.Ipv6Endpoint = &value
	return obj
}

// NextHop returns a DeviceBgpSrTePolicyNextHop
//  description is TBD
func (obj *deviceBgpSrTePolicy) NextHop() DeviceBgpSrTePolicyNextHop {
	if obj.obj.NextHop == nil {
		obj.obj.NextHop = &snappipb.DeviceBgpSrTePolicyNextHop{}
	}
	return &deviceBgpSrTePolicyNextHop{obj: obj.obj.NextHop}

}

// AddPath returns a DeviceBgpAddPath
//  description is TBD
func (obj *deviceBgpSrTePolicy) AddPath() DeviceBgpAddPath {
	if obj.obj.AddPath == nil {
		obj.obj.AddPath = &snappipb.DeviceBgpAddPath{}
	}
	return &deviceBgpAddPath{obj: obj.obj.AddPath}

}

// AsPath returns a DeviceBgpAsPath
//  description is TBD
func (obj *deviceBgpSrTePolicy) AsPath() DeviceBgpAsPath {
	if obj.obj.AsPath == nil {
		obj.obj.AsPath = &snappipb.DeviceBgpAsPath{}
	}
	return &deviceBgpAsPath{obj: obj.obj.AsPath}

}

// TunnelTlvs returns a []DeviceBgpTunnelTlv
//  Optional tunnel TLV settings
func (obj *deviceBgpSrTePolicy) TunnelTlvs() DeviceBgpSrTePolicyDeviceBgpTunnelTlvIter {
	if obj.obj.TunnelTlvs == nil {
		obj.obj.TunnelTlvs = []*snappipb.DeviceBgpTunnelTlv{}
	}
	return &deviceBgpSrTePolicyDeviceBgpTunnelTlvIter{obj: obj}

}

type deviceBgpSrTePolicyDeviceBgpTunnelTlvIter struct {
	obj *deviceBgpSrTePolicy
}

type DeviceBgpSrTePolicyDeviceBgpTunnelTlvIter interface {
	Add() DeviceBgpTunnelTlv
	Items() []DeviceBgpTunnelTlv
}

func (obj *deviceBgpSrTePolicyDeviceBgpTunnelTlvIter) Add() DeviceBgpTunnelTlv {
	newObj := &snappipb.DeviceBgpTunnelTlv{}
	obj.obj.obj.TunnelTlvs = append(obj.obj.obj.TunnelTlvs, newObj)
	return &deviceBgpTunnelTlv{obj: newObj}
}

func (obj *deviceBgpSrTePolicyDeviceBgpTunnelTlvIter) Items() []DeviceBgpTunnelTlv {
	slice := []DeviceBgpTunnelTlv{}
	for _, item := range obj.obj.obj.TunnelTlvs {
		slice = append(slice, &deviceBgpTunnelTlv{obj: item})
	}
	return slice
}

// Communities returns a []DeviceBgpCommunity
//  Optional community settings
func (obj *deviceBgpSrTePolicy) Communities() DeviceBgpSrTePolicyDeviceBgpCommunityIter {
	if obj.obj.Communities == nil {
		obj.obj.Communities = []*snappipb.DeviceBgpCommunity{}
	}
	return &deviceBgpSrTePolicyDeviceBgpCommunityIter{obj: obj}

}

type deviceBgpSrTePolicyDeviceBgpCommunityIter struct {
	obj *deviceBgpSrTePolicy
}

type DeviceBgpSrTePolicyDeviceBgpCommunityIter interface {
	Add() DeviceBgpCommunity
	Items() []DeviceBgpCommunity
}

func (obj *deviceBgpSrTePolicyDeviceBgpCommunityIter) Add() DeviceBgpCommunity {
	newObj := &snappipb.DeviceBgpCommunity{}
	obj.obj.obj.Communities = append(obj.obj.obj.Communities, newObj)
	return &deviceBgpCommunity{obj: newObj}
}

func (obj *deviceBgpSrTePolicyDeviceBgpCommunityIter) Items() []DeviceBgpCommunity {
	slice := []DeviceBgpCommunity{}
	for _, item := range obj.obj.obj.Communities {
		slice = append(slice, &deviceBgpCommunity{obj: item})
	}
	return slice
}

type deviceBgpv4Route struct {
	obj *snappipb.DeviceBgpv4Route
}

func (obj *deviceBgpv4Route) msg() *snappipb.DeviceBgpv4Route {
	return obj.obj
}

func (obj *deviceBgpv4Route) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv4Route) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpv4Route) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv4Route) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpv4Route interface {
	msg() *snappipb.DeviceBgpv4Route
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Addresses() DeviceBgpv4RouteDeviceBgpv4RouteAddressIter
	NextHopAddress() string
	SetNextHopAddress(value string) DeviceBgpv4Route
	Advanced() DeviceBgpRouteAdvanced
	Communities() DeviceBgpv4RouteDeviceBgpCommunityIter
	AsPath() DeviceBgpAsPath
	AddPath() DeviceBgpAddPath
	Name() string
	SetName(value string) DeviceBgpv4Route
}

// Addresses returns a []DeviceBgpv4RouteAddress
//  A list of symmetrical or asymmetrical route addresses
func (obj *deviceBgpv4Route) Addresses() DeviceBgpv4RouteDeviceBgpv4RouteAddressIter {
	if obj.obj.Addresses == nil {
		obj.obj.Addresses = []*snappipb.DeviceBgpv4RouteAddress{}
	}
	return &deviceBgpv4RouteDeviceBgpv4RouteAddressIter{obj: obj}

}

type deviceBgpv4RouteDeviceBgpv4RouteAddressIter struct {
	obj *deviceBgpv4Route
}

type DeviceBgpv4RouteDeviceBgpv4RouteAddressIter interface {
	Add() DeviceBgpv4RouteAddress
	Items() []DeviceBgpv4RouteAddress
}

func (obj *deviceBgpv4RouteDeviceBgpv4RouteAddressIter) Add() DeviceBgpv4RouteAddress {
	newObj := &snappipb.DeviceBgpv4RouteAddress{}
	obj.obj.obj.Addresses = append(obj.obj.obj.Addresses, newObj)
	return &deviceBgpv4RouteAddress{obj: newObj}
}

func (obj *deviceBgpv4RouteDeviceBgpv4RouteAddressIter) Items() []DeviceBgpv4RouteAddress {
	slice := []DeviceBgpv4RouteAddress{}
	for _, item := range obj.obj.obj.Addresses {
		slice = append(slice, &deviceBgpv4RouteAddress{obj: item})
	}
	return slice
}

// NextHopAddress returns a string
//  IP Address of next router to forward a packet to its final destination
func (obj *deviceBgpv4Route) NextHopAddress() string {
	return *obj.obj.NextHopAddress
}

// SetNextHopAddress sets the string value in the None object
//  IP Address of next router to forward a packet to its final destination
func (obj *deviceBgpv4Route) SetNextHopAddress(value string) DeviceBgpv4Route {
	obj.obj.NextHopAddress = &value
	return obj
}

// Advanced returns a DeviceBgpRouteAdvanced
//  description is TBD
func (obj *deviceBgpv4Route) Advanced() DeviceBgpRouteAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = &snappipb.DeviceBgpRouteAdvanced{}
	}
	return &deviceBgpRouteAdvanced{obj: obj.obj.Advanced}

}

// Communities returns a []DeviceBgpCommunity
//  Optional community settings.
func (obj *deviceBgpv4Route) Communities() DeviceBgpv4RouteDeviceBgpCommunityIter {
	if obj.obj.Communities == nil {
		obj.obj.Communities = []*snappipb.DeviceBgpCommunity{}
	}
	return &deviceBgpv4RouteDeviceBgpCommunityIter{obj: obj}

}

type deviceBgpv4RouteDeviceBgpCommunityIter struct {
	obj *deviceBgpv4Route
}

type DeviceBgpv4RouteDeviceBgpCommunityIter interface {
	Add() DeviceBgpCommunity
	Items() []DeviceBgpCommunity
}

func (obj *deviceBgpv4RouteDeviceBgpCommunityIter) Add() DeviceBgpCommunity {
	newObj := &snappipb.DeviceBgpCommunity{}
	obj.obj.obj.Communities = append(obj.obj.obj.Communities, newObj)
	return &deviceBgpCommunity{obj: newObj}
}

func (obj *deviceBgpv4RouteDeviceBgpCommunityIter) Items() []DeviceBgpCommunity {
	slice := []DeviceBgpCommunity{}
	for _, item := range obj.obj.obj.Communities {
		slice = append(slice, &deviceBgpCommunity{obj: item})
	}
	return slice
}

// AsPath returns a DeviceBgpAsPath
//  description is TBD
func (obj *deviceBgpv4Route) AsPath() DeviceBgpAsPath {
	if obj.obj.AsPath == nil {
		obj.obj.AsPath = &snappipb.DeviceBgpAsPath{}
	}
	return &deviceBgpAsPath{obj: obj.obj.AsPath}

}

// AddPath returns a DeviceBgpAddPath
//  description is TBD
func (obj *deviceBgpv4Route) AddPath() DeviceBgpAddPath {
	if obj.obj.AddPath == nil {
		obj.obj.AddPath = &snappipb.DeviceBgpAddPath{}
	}
	return &deviceBgpAddPath{obj: obj.obj.AddPath}

}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceBgpv4Route) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceBgpv4Route) SetName(value string) DeviceBgpv4Route {
	obj.obj.Name = value
	return obj
}

type deviceBgpv6Route struct {
	obj *snappipb.DeviceBgpv6Route
}

func (obj *deviceBgpv6Route) msg() *snappipb.DeviceBgpv6Route {
	return obj.obj
}

func (obj *deviceBgpv6Route) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv6Route) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpv6Route) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv6Route) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpv6Route interface {
	msg() *snappipb.DeviceBgpv6Route
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Addresses() DeviceBgpv6RouteDeviceBgpv6RouteAddressIter
	NextHopAddress() string
	SetNextHopAddress(value string) DeviceBgpv6Route
	Advanced() DeviceBgpRouteAdvanced
	Communities() DeviceBgpv6RouteDeviceBgpCommunityIter
	AsPath() DeviceBgpAsPath
	AddPath() DeviceBgpAddPath
	Name() string
	SetName(value string) DeviceBgpv6Route
}

// Addresses returns a []DeviceBgpv6RouteAddress
//  A list of symmetrical or asymmetrical route addresses
func (obj *deviceBgpv6Route) Addresses() DeviceBgpv6RouteDeviceBgpv6RouteAddressIter {
	if obj.obj.Addresses == nil {
		obj.obj.Addresses = []*snappipb.DeviceBgpv6RouteAddress{}
	}
	return &deviceBgpv6RouteDeviceBgpv6RouteAddressIter{obj: obj}

}

type deviceBgpv6RouteDeviceBgpv6RouteAddressIter struct {
	obj *deviceBgpv6Route
}

type DeviceBgpv6RouteDeviceBgpv6RouteAddressIter interface {
	Add() DeviceBgpv6RouteAddress
	Items() []DeviceBgpv6RouteAddress
}

func (obj *deviceBgpv6RouteDeviceBgpv6RouteAddressIter) Add() DeviceBgpv6RouteAddress {
	newObj := &snappipb.DeviceBgpv6RouteAddress{}
	obj.obj.obj.Addresses = append(obj.obj.obj.Addresses, newObj)
	return &deviceBgpv6RouteAddress{obj: newObj}
}

func (obj *deviceBgpv6RouteDeviceBgpv6RouteAddressIter) Items() []DeviceBgpv6RouteAddress {
	slice := []DeviceBgpv6RouteAddress{}
	for _, item := range obj.obj.obj.Addresses {
		slice = append(slice, &deviceBgpv6RouteAddress{obj: item})
	}
	return slice
}

// NextHopAddress returns a string
//  IP Address of next router to forward a packet to its final destination
func (obj *deviceBgpv6Route) NextHopAddress() string {
	return *obj.obj.NextHopAddress
}

// SetNextHopAddress sets the string value in the None object
//  IP Address of next router to forward a packet to its final destination
func (obj *deviceBgpv6Route) SetNextHopAddress(value string) DeviceBgpv6Route {
	obj.obj.NextHopAddress = &value
	return obj
}

// Advanced returns a DeviceBgpRouteAdvanced
//  description is TBD
func (obj *deviceBgpv6Route) Advanced() DeviceBgpRouteAdvanced {
	if obj.obj.Advanced == nil {
		obj.obj.Advanced = &snappipb.DeviceBgpRouteAdvanced{}
	}
	return &deviceBgpRouteAdvanced{obj: obj.obj.Advanced}

}

// Communities returns a []DeviceBgpCommunity
//  Optional community settings.
func (obj *deviceBgpv6Route) Communities() DeviceBgpv6RouteDeviceBgpCommunityIter {
	if obj.obj.Communities == nil {
		obj.obj.Communities = []*snappipb.DeviceBgpCommunity{}
	}
	return &deviceBgpv6RouteDeviceBgpCommunityIter{obj: obj}

}

type deviceBgpv6RouteDeviceBgpCommunityIter struct {
	obj *deviceBgpv6Route
}

type DeviceBgpv6RouteDeviceBgpCommunityIter interface {
	Add() DeviceBgpCommunity
	Items() []DeviceBgpCommunity
}

func (obj *deviceBgpv6RouteDeviceBgpCommunityIter) Add() DeviceBgpCommunity {
	newObj := &snappipb.DeviceBgpCommunity{}
	obj.obj.obj.Communities = append(obj.obj.obj.Communities, newObj)
	return &deviceBgpCommunity{obj: newObj}
}

func (obj *deviceBgpv6RouteDeviceBgpCommunityIter) Items() []DeviceBgpCommunity {
	slice := []DeviceBgpCommunity{}
	for _, item := range obj.obj.obj.Communities {
		slice = append(slice, &deviceBgpCommunity{obj: item})
	}
	return slice
}

// AsPath returns a DeviceBgpAsPath
//  description is TBD
func (obj *deviceBgpv6Route) AsPath() DeviceBgpAsPath {
	if obj.obj.AsPath == nil {
		obj.obj.AsPath = &snappipb.DeviceBgpAsPath{}
	}
	return &deviceBgpAsPath{obj: obj.obj.AsPath}

}

// AddPath returns a DeviceBgpAddPath
//  description is TBD
func (obj *deviceBgpv6Route) AddPath() DeviceBgpAddPath {
	if obj.obj.AddPath == nil {
		obj.obj.AddPath = &snappipb.DeviceBgpAddPath{}
	}
	return &deviceBgpAddPath{obj: obj.obj.AddPath}

}

// Name returns a string
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceBgpv6Route) Name() string {
	return obj.obj.Name
}

// SetName sets the string value in the None object
//  Globally unique name of an object. It also serves as the primary key for arrays of objects.
func (obj *deviceBgpv6Route) SetName(value string) DeviceBgpv6Route {
	obj.obj.Name = value
	return obj
}

type deviceBgpv6SegmentRouting struct {
	obj *snappipb.DeviceBgpv6SegmentRouting
}

func (obj *deviceBgpv6SegmentRouting) msg() *snappipb.DeviceBgpv6SegmentRouting {
	return obj.obj
}

func (obj *deviceBgpv6SegmentRouting) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv6SegmentRouting) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpv6SegmentRouting) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv6SegmentRouting) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpv6SegmentRouting interface {
	msg() *snappipb.DeviceBgpv6SegmentRouting
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	IngressSupportsVpn() bool
	SetIngressSupportsVpn(value bool) DeviceBgpv6SegmentRouting
	ReducedEncapsulation() bool
	SetReducedEncapsulation(value bool) DeviceBgpv6SegmentRouting
	CopyTimeToLive() bool
	SetCopyTimeToLive(value bool) DeviceBgpv6SegmentRouting
	TimeToLive() int32
	SetTimeToLive(value int32) DeviceBgpv6SegmentRouting
	MaxSidsPerSrh() int32
	SetMaxSidsPerSrh(value int32) DeviceBgpv6SegmentRouting
	AutoGenerateSegmentLeftValue() bool
	SetAutoGenerateSegmentLeftValue(value bool) DeviceBgpv6SegmentRouting
	SegmentLeftValue() int32
	SetSegmentLeftValue(value int32) DeviceBgpv6SegmentRouting
	AdvertiseSrTePolicy() bool
	SetAdvertiseSrTePolicy(value bool) DeviceBgpv6SegmentRouting
}

// IngressSupportsVpn returns a bool
//  TBD
func (obj *deviceBgpv6SegmentRouting) IngressSupportsVpn() bool {
	return *obj.obj.IngressSupportsVpn
}

// SetIngressSupportsVpn sets the bool value in the None object
//  TBD
func (obj *deviceBgpv6SegmentRouting) SetIngressSupportsVpn(value bool) DeviceBgpv6SegmentRouting {
	obj.obj.IngressSupportsVpn = &value
	return obj
}

// ReducedEncapsulation returns a bool
//  TBD
func (obj *deviceBgpv6SegmentRouting) ReducedEncapsulation() bool {
	return *obj.obj.ReducedEncapsulation
}

// SetReducedEncapsulation sets the bool value in the None object
//  TBD
func (obj *deviceBgpv6SegmentRouting) SetReducedEncapsulation(value bool) DeviceBgpv6SegmentRouting {
	obj.obj.ReducedEncapsulation = &value
	return obj
}

// CopyTimeToLive returns a bool
//  TBD
func (obj *deviceBgpv6SegmentRouting) CopyTimeToLive() bool {
	return *obj.obj.CopyTimeToLive
}

// SetCopyTimeToLive sets the bool value in the None object
//  TBD
func (obj *deviceBgpv6SegmentRouting) SetCopyTimeToLive(value bool) DeviceBgpv6SegmentRouting {
	obj.obj.CopyTimeToLive = &value
	return obj
}

// TimeToLive returns a int32
//  TBD
func (obj *deviceBgpv6SegmentRouting) TimeToLive() int32 {
	return *obj.obj.TimeToLive
}

// SetTimeToLive sets the int32 value in the None object
//  TBD
func (obj *deviceBgpv6SegmentRouting) SetTimeToLive(value int32) DeviceBgpv6SegmentRouting {
	obj.obj.TimeToLive = &value
	return obj
}

// MaxSidsPerSrh returns a int32
//  TBD
func (obj *deviceBgpv6SegmentRouting) MaxSidsPerSrh() int32 {
	return *obj.obj.MaxSidsPerSrh
}

// SetMaxSidsPerSrh sets the int32 value in the None object
//  TBD
func (obj *deviceBgpv6SegmentRouting) SetMaxSidsPerSrh(value int32) DeviceBgpv6SegmentRouting {
	obj.obj.MaxSidsPerSrh = &value
	return obj
}

// AutoGenerateSegmentLeftValue returns a bool
//  TBD
func (obj *deviceBgpv6SegmentRouting) AutoGenerateSegmentLeftValue() bool {
	return *obj.obj.AutoGenerateSegmentLeftValue
}

// SetAutoGenerateSegmentLeftValue sets the bool value in the None object
//  TBD
func (obj *deviceBgpv6SegmentRouting) SetAutoGenerateSegmentLeftValue(value bool) DeviceBgpv6SegmentRouting {
	obj.obj.AutoGenerateSegmentLeftValue = &value
	return obj
}

// SegmentLeftValue returns a int32
//  TBD
func (obj *deviceBgpv6SegmentRouting) SegmentLeftValue() int32 {
	return *obj.obj.SegmentLeftValue
}

// SetSegmentLeftValue sets the int32 value in the None object
//  TBD
func (obj *deviceBgpv6SegmentRouting) SetSegmentLeftValue(value int32) DeviceBgpv6SegmentRouting {
	obj.obj.SegmentLeftValue = &value
	return obj
}

// AdvertiseSrTePolicy returns a bool
//  TBD
func (obj *deviceBgpv6SegmentRouting) AdvertiseSrTePolicy() bool {
	return *obj.obj.AdvertiseSrTePolicy
}

// SetAdvertiseSrTePolicy sets the bool value in the None object
//  TBD
func (obj *deviceBgpv6SegmentRouting) SetAdvertiseSrTePolicy(value bool) DeviceBgpv6SegmentRouting {
	obj.obj.AdvertiseSrTePolicy = &value
	return obj
}

type patternFlowEthernetDstCounter struct {
	obj *snappipb.PatternFlowEthernetDstCounter
}

func (obj *patternFlowEthernetDstCounter) msg() *snappipb.PatternFlowEthernetDstCounter {
	return obj.obj
}

func (obj *patternFlowEthernetDstCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetDstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetDstCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetDstCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetDstCounter interface {
	msg() *snappipb.PatternFlowEthernetDstCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowEthernetDstCounter
	Step() string
	SetStep(value string) PatternFlowEthernetDstCounter
	Count() int32
	SetCount(value int32) PatternFlowEthernetDstCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetDstCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetDstCounter) SetStart(value string) PatternFlowEthernetDstCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetDstCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetDstCounter) SetStep(value string) PatternFlowEthernetDstCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetDstCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetDstCounter) SetCount(value int32) PatternFlowEthernetDstCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowEthernetSrcCounter struct {
	obj *snappipb.PatternFlowEthernetSrcCounter
}

func (obj *patternFlowEthernetSrcCounter) msg() *snappipb.PatternFlowEthernetSrcCounter {
	return obj.obj
}

func (obj *patternFlowEthernetSrcCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetSrcCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetSrcCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetSrcCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetSrcCounter interface {
	msg() *snappipb.PatternFlowEthernetSrcCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowEthernetSrcCounter
	Step() string
	SetStep(value string) PatternFlowEthernetSrcCounter
	Count() int32
	SetCount(value int32) PatternFlowEthernetSrcCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) SetStart(value string) PatternFlowEthernetSrcCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) SetStep(value string) PatternFlowEthernetSrcCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetSrcCounter) SetCount(value int32) PatternFlowEthernetSrcCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowEthernetEtherTypeCounter struct {
	obj *snappipb.PatternFlowEthernetEtherTypeCounter
}

func (obj *patternFlowEthernetEtherTypeCounter) msg() *snappipb.PatternFlowEthernetEtherTypeCounter {
	return obj.obj
}

func (obj *patternFlowEthernetEtherTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetEtherTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetEtherTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetEtherTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetEtherTypeCounter interface {
	msg() *snappipb.PatternFlowEthernetEtherTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowEthernetEtherTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowEthernetEtherTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowEthernetEtherTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) SetStart(value int32) PatternFlowEthernetEtherTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) SetStep(value int32) PatternFlowEthernetEtherTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetEtherTypeCounter) SetCount(value int32) PatternFlowEthernetEtherTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowEthernetPfcQueueCounter struct {
	obj *snappipb.PatternFlowEthernetPfcQueueCounter
}

func (obj *patternFlowEthernetPfcQueueCounter) msg() *snappipb.PatternFlowEthernetPfcQueueCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPfcQueueCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPfcQueueCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPfcQueueCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPfcQueueCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPfcQueueCounter interface {
	msg() *snappipb.PatternFlowEthernetPfcQueueCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowEthernetPfcQueueCounter
	Step() int32
	SetStep(value int32) PatternFlowEthernetPfcQueueCounter
	Count() int32
	SetCount(value int32) PatternFlowEthernetPfcQueueCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) SetStart(value int32) PatternFlowEthernetPfcQueueCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) SetStep(value int32) PatternFlowEthernetPfcQueueCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPfcQueueCounter) SetCount(value int32) PatternFlowEthernetPfcQueueCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowVlanPriorityCounter struct {
	obj *snappipb.PatternFlowVlanPriorityCounter
}

func (obj *patternFlowVlanPriorityCounter) msg() *snappipb.PatternFlowVlanPriorityCounter {
	return obj.obj
}

func (obj *patternFlowVlanPriorityCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanPriorityCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVlanPriorityCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanPriorityCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVlanPriorityCounter interface {
	msg() *snappipb.PatternFlowVlanPriorityCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowVlanPriorityCounter
	Step() int32
	SetStep(value int32) PatternFlowVlanPriorityCounter
	Count() int32
	SetCount(value int32) PatternFlowVlanPriorityCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) SetStart(value int32) PatternFlowVlanPriorityCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) SetStep(value int32) PatternFlowVlanPriorityCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanPriorityCounter) SetCount(value int32) PatternFlowVlanPriorityCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowVlanCfiCounter struct {
	obj *snappipb.PatternFlowVlanCfiCounter
}

func (obj *patternFlowVlanCfiCounter) msg() *snappipb.PatternFlowVlanCfiCounter {
	return obj.obj
}

func (obj *patternFlowVlanCfiCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanCfiCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVlanCfiCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanCfiCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVlanCfiCounter interface {
	msg() *snappipb.PatternFlowVlanCfiCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowVlanCfiCounter
	Step() int32
	SetStep(value int32) PatternFlowVlanCfiCounter
	Count() int32
	SetCount(value int32) PatternFlowVlanCfiCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanCfiCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanCfiCounter) SetStart(value int32) PatternFlowVlanCfiCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanCfiCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanCfiCounter) SetStep(value int32) PatternFlowVlanCfiCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanCfiCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanCfiCounter) SetCount(value int32) PatternFlowVlanCfiCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowVlanIdCounter struct {
	obj *snappipb.PatternFlowVlanIdCounter
}

func (obj *patternFlowVlanIdCounter) msg() *snappipb.PatternFlowVlanIdCounter {
	return obj.obj
}

func (obj *patternFlowVlanIdCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanIdCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVlanIdCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanIdCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVlanIdCounter interface {
	msg() *snappipb.PatternFlowVlanIdCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowVlanIdCounter
	Step() int32
	SetStep(value int32) PatternFlowVlanIdCounter
	Count() int32
	SetCount(value int32) PatternFlowVlanIdCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanIdCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanIdCounter) SetStart(value int32) PatternFlowVlanIdCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanIdCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanIdCounter) SetStep(value int32) PatternFlowVlanIdCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanIdCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanIdCounter) SetCount(value int32) PatternFlowVlanIdCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowVlanTpidCounter struct {
	obj *snappipb.PatternFlowVlanTpidCounter
}

func (obj *patternFlowVlanTpidCounter) msg() *snappipb.PatternFlowVlanTpidCounter {
	return obj.obj
}

func (obj *patternFlowVlanTpidCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanTpidCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVlanTpidCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVlanTpidCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVlanTpidCounter interface {
	msg() *snappipb.PatternFlowVlanTpidCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowVlanTpidCounter
	Step() int32
	SetStep(value int32) PatternFlowVlanTpidCounter
	Count() int32
	SetCount(value int32) PatternFlowVlanTpidCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVlanTpidCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanTpidCounter) SetStart(value int32) PatternFlowVlanTpidCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVlanTpidCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanTpidCounter) SetStep(value int32) PatternFlowVlanTpidCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVlanTpidCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVlanTpidCounter) SetCount(value int32) PatternFlowVlanTpidCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowVxlanFlagsCounter struct {
	obj *snappipb.PatternFlowVxlanFlagsCounter
}

func (obj *patternFlowVxlanFlagsCounter) msg() *snappipb.PatternFlowVxlanFlagsCounter {
	return obj.obj
}

func (obj *patternFlowVxlanFlagsCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanFlagsCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVxlanFlagsCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanFlagsCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVxlanFlagsCounter interface {
	msg() *snappipb.PatternFlowVxlanFlagsCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowVxlanFlagsCounter
	Step() int32
	SetStep(value int32) PatternFlowVxlanFlagsCounter
	Count() int32
	SetCount(value int32) PatternFlowVxlanFlagsCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) SetStart(value int32) PatternFlowVxlanFlagsCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) SetStep(value int32) PatternFlowVxlanFlagsCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanFlagsCounter) SetCount(value int32) PatternFlowVxlanFlagsCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowVxlanReserved0Counter struct {
	obj *snappipb.PatternFlowVxlanReserved0Counter
}

func (obj *patternFlowVxlanReserved0Counter) msg() *snappipb.PatternFlowVxlanReserved0Counter {
	return obj.obj
}

func (obj *patternFlowVxlanReserved0Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved0Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVxlanReserved0Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved0Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVxlanReserved0Counter interface {
	msg() *snappipb.PatternFlowVxlanReserved0Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowVxlanReserved0Counter
	Step() int32
	SetStep(value int32) PatternFlowVxlanReserved0Counter
	Count() int32
	SetCount(value int32) PatternFlowVxlanReserved0Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) SetStart(value int32) PatternFlowVxlanReserved0Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) SetStep(value int32) PatternFlowVxlanReserved0Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanReserved0Counter) SetCount(value int32) PatternFlowVxlanReserved0Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowVxlanVniCounter struct {
	obj *snappipb.PatternFlowVxlanVniCounter
}

func (obj *patternFlowVxlanVniCounter) msg() *snappipb.PatternFlowVxlanVniCounter {
	return obj.obj
}

func (obj *patternFlowVxlanVniCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanVniCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVxlanVniCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanVniCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVxlanVniCounter interface {
	msg() *snappipb.PatternFlowVxlanVniCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowVxlanVniCounter
	Step() int32
	SetStep(value int32) PatternFlowVxlanVniCounter
	Count() int32
	SetCount(value int32) PatternFlowVxlanVniCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanVniCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanVniCounter) SetStart(value int32) PatternFlowVxlanVniCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanVniCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanVniCounter) SetStep(value int32) PatternFlowVxlanVniCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanVniCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanVniCounter) SetCount(value int32) PatternFlowVxlanVniCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowVxlanReserved1Counter struct {
	obj *snappipb.PatternFlowVxlanReserved1Counter
}

func (obj *patternFlowVxlanReserved1Counter) msg() *snappipb.PatternFlowVxlanReserved1Counter {
	return obj.obj
}

func (obj *patternFlowVxlanReserved1Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved1Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowVxlanReserved1Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowVxlanReserved1Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowVxlanReserved1Counter interface {
	msg() *snappipb.PatternFlowVxlanReserved1Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowVxlanReserved1Counter
	Step() int32
	SetStep(value int32) PatternFlowVxlanReserved1Counter
	Count() int32
	SetCount(value int32) PatternFlowVxlanReserved1Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) SetStart(value int32) PatternFlowVxlanReserved1Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) SetStep(value int32) PatternFlowVxlanReserved1Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowVxlanReserved1Counter) SetCount(value int32) PatternFlowVxlanReserved1Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4VersionCounter struct {
	obj *snappipb.PatternFlowIpv4VersionCounter
}

func (obj *patternFlowIpv4VersionCounter) msg() *snappipb.PatternFlowIpv4VersionCounter {
	return obj.obj
}

func (obj *patternFlowIpv4VersionCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4VersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4VersionCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4VersionCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4VersionCounter interface {
	msg() *snappipb.PatternFlowIpv4VersionCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4VersionCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4VersionCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4VersionCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) SetStart(value int32) PatternFlowIpv4VersionCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) SetStep(value int32) PatternFlowIpv4VersionCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4VersionCounter) SetCount(value int32) PatternFlowIpv4VersionCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4HeaderLengthCounter struct {
	obj *snappipb.PatternFlowIpv4HeaderLengthCounter
}

func (obj *patternFlowIpv4HeaderLengthCounter) msg() *snappipb.PatternFlowIpv4HeaderLengthCounter {
	return obj.obj
}

func (obj *patternFlowIpv4HeaderLengthCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4HeaderLengthCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4HeaderLengthCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4HeaderLengthCounter interface {
	msg() *snappipb.PatternFlowIpv4HeaderLengthCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4HeaderLengthCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4HeaderLengthCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4HeaderLengthCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) SetStart(value int32) PatternFlowIpv4HeaderLengthCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) SetStep(value int32) PatternFlowIpv4HeaderLengthCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4HeaderLengthCounter) SetCount(value int32) PatternFlowIpv4HeaderLengthCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4PriorityRaw struct {
	obj *snappipb.PatternFlowIpv4PriorityRaw
}

func (obj *patternFlowIpv4PriorityRaw) msg() *snappipb.PatternFlowIpv4PriorityRaw {
	return obj.obj
}

func (obj *patternFlowIpv4PriorityRaw) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4PriorityRaw) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4PriorityRaw) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4PriorityRaw) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4PriorityRaw interface {
	msg() *snappipb.PatternFlowIpv4PriorityRaw
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4PriorityRaw
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4PriorityRaw
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4PriorityRaw
	Increment() PatternFlowIpv4PriorityRawCounter
	Decrement() PatternFlowIpv4PriorityRawCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) SetValue(value int32) PatternFlowIpv4PriorityRaw {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) SetValues(value []int32) PatternFlowIpv4PriorityRaw {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4PriorityRaw) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4PriorityRaw) SetMetricGroup(value string) PatternFlowIpv4PriorityRaw {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4PriorityRawCounter
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) Increment() PatternFlowIpv4PriorityRawCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4PriorityRawCounter{}
	}
	return &patternFlowIpv4PriorityRawCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4PriorityRawCounter
//  description is TBD
func (obj *patternFlowIpv4PriorityRaw) Decrement() PatternFlowIpv4PriorityRawCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4PriorityRawCounter{}
	}
	return &patternFlowIpv4PriorityRawCounter{obj: obj.obj.Decrement}

}

type flowIpv4Tos struct {
	obj *snappipb.FlowIpv4Tos
}

func (obj *flowIpv4Tos) msg() *snappipb.FlowIpv4Tos {
	return obj.obj
}

func (obj *flowIpv4Tos) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Tos) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowIpv4Tos) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Tos) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowIpv4Tos interface {
	msg() *snappipb.FlowIpv4Tos
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Precedence() PatternFlowIpv4TosPrecedence
	Delay() PatternFlowIpv4TosDelay
	Throughput() PatternFlowIpv4TosThroughput
	Reliability() PatternFlowIpv4TosReliability
	Monetary() PatternFlowIpv4TosMonetary
	Unused() PatternFlowIpv4TosUnused
}

// Precedence returns a PatternFlowIpv4TosPrecedence
//  description is TBD
func (obj *flowIpv4Tos) Precedence() PatternFlowIpv4TosPrecedence {
	if obj.obj.Precedence == nil {
		obj.obj.Precedence = &snappipb.PatternFlowIpv4TosPrecedence{}
	}
	return &patternFlowIpv4TosPrecedence{obj: obj.obj.Precedence}

}

// Delay returns a PatternFlowIpv4TosDelay
//  description is TBD
func (obj *flowIpv4Tos) Delay() PatternFlowIpv4TosDelay {
	if obj.obj.Delay == nil {
		obj.obj.Delay = &snappipb.PatternFlowIpv4TosDelay{}
	}
	return &patternFlowIpv4TosDelay{obj: obj.obj.Delay}

}

// Throughput returns a PatternFlowIpv4TosThroughput
//  description is TBD
func (obj *flowIpv4Tos) Throughput() PatternFlowIpv4TosThroughput {
	if obj.obj.Throughput == nil {
		obj.obj.Throughput = &snappipb.PatternFlowIpv4TosThroughput{}
	}
	return &patternFlowIpv4TosThroughput{obj: obj.obj.Throughput}

}

// Reliability returns a PatternFlowIpv4TosReliability
//  description is TBD
func (obj *flowIpv4Tos) Reliability() PatternFlowIpv4TosReliability {
	if obj.obj.Reliability == nil {
		obj.obj.Reliability = &snappipb.PatternFlowIpv4TosReliability{}
	}
	return &patternFlowIpv4TosReliability{obj: obj.obj.Reliability}

}

// Monetary returns a PatternFlowIpv4TosMonetary
//  description is TBD
func (obj *flowIpv4Tos) Monetary() PatternFlowIpv4TosMonetary {
	if obj.obj.Monetary == nil {
		obj.obj.Monetary = &snappipb.PatternFlowIpv4TosMonetary{}
	}
	return &patternFlowIpv4TosMonetary{obj: obj.obj.Monetary}

}

// Unused returns a PatternFlowIpv4TosUnused
//  description is TBD
func (obj *flowIpv4Tos) Unused() PatternFlowIpv4TosUnused {
	if obj.obj.Unused == nil {
		obj.obj.Unused = &snappipb.PatternFlowIpv4TosUnused{}
	}
	return &patternFlowIpv4TosUnused{obj: obj.obj.Unused}

}

type flowIpv4Dscp struct {
	obj *snappipb.FlowIpv4Dscp
}

func (obj *flowIpv4Dscp) msg() *snappipb.FlowIpv4Dscp {
	return obj.obj
}

func (obj *flowIpv4Dscp) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Dscp) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *flowIpv4Dscp) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *flowIpv4Dscp) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type FlowIpv4Dscp interface {
	msg() *snappipb.FlowIpv4Dscp
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Phb() PatternFlowIpv4DscpPhb
	Ecn() PatternFlowIpv4DscpEcn
}

// Phb returns a PatternFlowIpv4DscpPhb
//  description is TBD
func (obj *flowIpv4Dscp) Phb() PatternFlowIpv4DscpPhb {
	if obj.obj.Phb == nil {
		obj.obj.Phb = &snappipb.PatternFlowIpv4DscpPhb{}
	}
	return &patternFlowIpv4DscpPhb{obj: obj.obj.Phb}

}

// Ecn returns a PatternFlowIpv4DscpEcn
//  description is TBD
func (obj *flowIpv4Dscp) Ecn() PatternFlowIpv4DscpEcn {
	if obj.obj.Ecn == nil {
		obj.obj.Ecn = &snappipb.PatternFlowIpv4DscpEcn{}
	}
	return &patternFlowIpv4DscpEcn{obj: obj.obj.Ecn}

}

type patternFlowIpv4TotalLengthCounter struct {
	obj *snappipb.PatternFlowIpv4TotalLengthCounter
}

func (obj *patternFlowIpv4TotalLengthCounter) msg() *snappipb.PatternFlowIpv4TotalLengthCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TotalLengthCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TotalLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TotalLengthCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TotalLengthCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TotalLengthCounter interface {
	msg() *snappipb.PatternFlowIpv4TotalLengthCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4TotalLengthCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4TotalLengthCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4TotalLengthCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) SetStart(value int32) PatternFlowIpv4TotalLengthCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) SetStep(value int32) PatternFlowIpv4TotalLengthCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TotalLengthCounter) SetCount(value int32) PatternFlowIpv4TotalLengthCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4IdentificationCounter struct {
	obj *snappipb.PatternFlowIpv4IdentificationCounter
}

func (obj *patternFlowIpv4IdentificationCounter) msg() *snappipb.PatternFlowIpv4IdentificationCounter {
	return obj.obj
}

func (obj *patternFlowIpv4IdentificationCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4IdentificationCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4IdentificationCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4IdentificationCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4IdentificationCounter interface {
	msg() *snappipb.PatternFlowIpv4IdentificationCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4IdentificationCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4IdentificationCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4IdentificationCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) SetStart(value int32) PatternFlowIpv4IdentificationCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) SetStep(value int32) PatternFlowIpv4IdentificationCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4IdentificationCounter) SetCount(value int32) PatternFlowIpv4IdentificationCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4ReservedCounter struct {
	obj *snappipb.PatternFlowIpv4ReservedCounter
}

func (obj *patternFlowIpv4ReservedCounter) msg() *snappipb.PatternFlowIpv4ReservedCounter {
	return obj.obj
}

func (obj *patternFlowIpv4ReservedCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4ReservedCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4ReservedCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4ReservedCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4ReservedCounter interface {
	msg() *snappipb.PatternFlowIpv4ReservedCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4ReservedCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4ReservedCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4ReservedCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) SetStart(value int32) PatternFlowIpv4ReservedCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) SetStep(value int32) PatternFlowIpv4ReservedCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4ReservedCounter) SetCount(value int32) PatternFlowIpv4ReservedCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4DontFragmentCounter struct {
	obj *snappipb.PatternFlowIpv4DontFragmentCounter
}

func (obj *patternFlowIpv4DontFragmentCounter) msg() *snappipb.PatternFlowIpv4DontFragmentCounter {
	return obj.obj
}

func (obj *patternFlowIpv4DontFragmentCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DontFragmentCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4DontFragmentCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DontFragmentCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4DontFragmentCounter interface {
	msg() *snappipb.PatternFlowIpv4DontFragmentCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4DontFragmentCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4DontFragmentCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4DontFragmentCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) SetStart(value int32) PatternFlowIpv4DontFragmentCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) SetStep(value int32) PatternFlowIpv4DontFragmentCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DontFragmentCounter) SetCount(value int32) PatternFlowIpv4DontFragmentCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4MoreFragmentsCounter struct {
	obj *snappipb.PatternFlowIpv4MoreFragmentsCounter
}

func (obj *patternFlowIpv4MoreFragmentsCounter) msg() *snappipb.PatternFlowIpv4MoreFragmentsCounter {
	return obj.obj
}

func (obj *patternFlowIpv4MoreFragmentsCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4MoreFragmentsCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4MoreFragmentsCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4MoreFragmentsCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4MoreFragmentsCounter interface {
	msg() *snappipb.PatternFlowIpv4MoreFragmentsCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4MoreFragmentsCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4MoreFragmentsCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4MoreFragmentsCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) SetStart(value int32) PatternFlowIpv4MoreFragmentsCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) SetStep(value int32) PatternFlowIpv4MoreFragmentsCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4MoreFragmentsCounter) SetCount(value int32) PatternFlowIpv4MoreFragmentsCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4FragmentOffsetCounter struct {
	obj *snappipb.PatternFlowIpv4FragmentOffsetCounter
}

func (obj *patternFlowIpv4FragmentOffsetCounter) msg() *snappipb.PatternFlowIpv4FragmentOffsetCounter {
	return obj.obj
}

func (obj *patternFlowIpv4FragmentOffsetCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4FragmentOffsetCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4FragmentOffsetCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4FragmentOffsetCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4FragmentOffsetCounter interface {
	msg() *snappipb.PatternFlowIpv4FragmentOffsetCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4FragmentOffsetCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4FragmentOffsetCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4FragmentOffsetCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) SetStart(value int32) PatternFlowIpv4FragmentOffsetCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) SetStep(value int32) PatternFlowIpv4FragmentOffsetCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4FragmentOffsetCounter) SetCount(value int32) PatternFlowIpv4FragmentOffsetCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4TimeToLiveCounter struct {
	obj *snappipb.PatternFlowIpv4TimeToLiveCounter
}

func (obj *patternFlowIpv4TimeToLiveCounter) msg() *snappipb.PatternFlowIpv4TimeToLiveCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TimeToLiveCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TimeToLiveCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TimeToLiveCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TimeToLiveCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TimeToLiveCounter interface {
	msg() *snappipb.PatternFlowIpv4TimeToLiveCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4TimeToLiveCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4TimeToLiveCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4TimeToLiveCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) SetStart(value int32) PatternFlowIpv4TimeToLiveCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) SetStep(value int32) PatternFlowIpv4TimeToLiveCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TimeToLiveCounter) SetCount(value int32) PatternFlowIpv4TimeToLiveCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4ProtocolCounter struct {
	obj *snappipb.PatternFlowIpv4ProtocolCounter
}

func (obj *patternFlowIpv4ProtocolCounter) msg() *snappipb.PatternFlowIpv4ProtocolCounter {
	return obj.obj
}

func (obj *patternFlowIpv4ProtocolCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4ProtocolCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4ProtocolCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4ProtocolCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4ProtocolCounter interface {
	msg() *snappipb.PatternFlowIpv4ProtocolCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4ProtocolCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4ProtocolCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4ProtocolCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) SetStart(value int32) PatternFlowIpv4ProtocolCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) SetStep(value int32) PatternFlowIpv4ProtocolCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4ProtocolCounter) SetCount(value int32) PatternFlowIpv4ProtocolCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4SrcCounter struct {
	obj *snappipb.PatternFlowIpv4SrcCounter
}

func (obj *patternFlowIpv4SrcCounter) msg() *snappipb.PatternFlowIpv4SrcCounter {
	return obj.obj
}

func (obj *patternFlowIpv4SrcCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4SrcCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4SrcCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4SrcCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4SrcCounter interface {
	msg() *snappipb.PatternFlowIpv4SrcCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowIpv4SrcCounter
	Step() string
	SetStep(value string) PatternFlowIpv4SrcCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4SrcCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) SetStart(value string) PatternFlowIpv4SrcCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) SetStep(value string) PatternFlowIpv4SrcCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4SrcCounter) SetCount(value int32) PatternFlowIpv4SrcCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4DstCounter struct {
	obj *snappipb.PatternFlowIpv4DstCounter
}

func (obj *patternFlowIpv4DstCounter) msg() *snappipb.PatternFlowIpv4DstCounter {
	return obj.obj
}

func (obj *patternFlowIpv4DstCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4DstCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DstCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4DstCounter interface {
	msg() *snappipb.PatternFlowIpv4DstCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowIpv4DstCounter
	Step() string
	SetStep(value string) PatternFlowIpv4DstCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4DstCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv4DstCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv4DstCounter) SetStart(value string) PatternFlowIpv4DstCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv4DstCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv4DstCounter) SetStep(value string) PatternFlowIpv4DstCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DstCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DstCounter) SetCount(value int32) PatternFlowIpv4DstCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv6VersionCounter struct {
	obj *snappipb.PatternFlowIpv6VersionCounter
}

func (obj *patternFlowIpv6VersionCounter) msg() *snappipb.PatternFlowIpv6VersionCounter {
	return obj.obj
}

func (obj *patternFlowIpv6VersionCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6VersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6VersionCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6VersionCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6VersionCounter interface {
	msg() *snappipb.PatternFlowIpv6VersionCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv6VersionCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv6VersionCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv6VersionCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) SetStart(value int32) PatternFlowIpv6VersionCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) SetStep(value int32) PatternFlowIpv6VersionCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6VersionCounter) SetCount(value int32) PatternFlowIpv6VersionCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv6TrafficClassCounter struct {
	obj *snappipb.PatternFlowIpv6TrafficClassCounter
}

func (obj *patternFlowIpv6TrafficClassCounter) msg() *snappipb.PatternFlowIpv6TrafficClassCounter {
	return obj.obj
}

func (obj *patternFlowIpv6TrafficClassCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6TrafficClassCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6TrafficClassCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6TrafficClassCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6TrafficClassCounter interface {
	msg() *snappipb.PatternFlowIpv6TrafficClassCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv6TrafficClassCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv6TrafficClassCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv6TrafficClassCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) SetStart(value int32) PatternFlowIpv6TrafficClassCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) SetStep(value int32) PatternFlowIpv6TrafficClassCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6TrafficClassCounter) SetCount(value int32) PatternFlowIpv6TrafficClassCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv6FlowLabelCounter struct {
	obj *snappipb.PatternFlowIpv6FlowLabelCounter
}

func (obj *patternFlowIpv6FlowLabelCounter) msg() *snappipb.PatternFlowIpv6FlowLabelCounter {
	return obj.obj
}

func (obj *patternFlowIpv6FlowLabelCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6FlowLabelCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6FlowLabelCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6FlowLabelCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6FlowLabelCounter interface {
	msg() *snappipb.PatternFlowIpv6FlowLabelCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv6FlowLabelCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv6FlowLabelCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv6FlowLabelCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) SetStart(value int32) PatternFlowIpv6FlowLabelCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) SetStep(value int32) PatternFlowIpv6FlowLabelCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6FlowLabelCounter) SetCount(value int32) PatternFlowIpv6FlowLabelCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv6PayloadLengthCounter struct {
	obj *snappipb.PatternFlowIpv6PayloadLengthCounter
}

func (obj *patternFlowIpv6PayloadLengthCounter) msg() *snappipb.PatternFlowIpv6PayloadLengthCounter {
	return obj.obj
}

func (obj *patternFlowIpv6PayloadLengthCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6PayloadLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6PayloadLengthCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6PayloadLengthCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6PayloadLengthCounter interface {
	msg() *snappipb.PatternFlowIpv6PayloadLengthCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv6PayloadLengthCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv6PayloadLengthCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv6PayloadLengthCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) SetStart(value int32) PatternFlowIpv6PayloadLengthCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) SetStep(value int32) PatternFlowIpv6PayloadLengthCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6PayloadLengthCounter) SetCount(value int32) PatternFlowIpv6PayloadLengthCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv6NextHeaderCounter struct {
	obj *snappipb.PatternFlowIpv6NextHeaderCounter
}

func (obj *patternFlowIpv6NextHeaderCounter) msg() *snappipb.PatternFlowIpv6NextHeaderCounter {
	return obj.obj
}

func (obj *patternFlowIpv6NextHeaderCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6NextHeaderCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6NextHeaderCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6NextHeaderCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6NextHeaderCounter interface {
	msg() *snappipb.PatternFlowIpv6NextHeaderCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv6NextHeaderCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv6NextHeaderCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv6NextHeaderCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) SetStart(value int32) PatternFlowIpv6NextHeaderCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) SetStep(value int32) PatternFlowIpv6NextHeaderCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6NextHeaderCounter) SetCount(value int32) PatternFlowIpv6NextHeaderCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv6HopLimitCounter struct {
	obj *snappipb.PatternFlowIpv6HopLimitCounter
}

func (obj *patternFlowIpv6HopLimitCounter) msg() *snappipb.PatternFlowIpv6HopLimitCounter {
	return obj.obj
}

func (obj *patternFlowIpv6HopLimitCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6HopLimitCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6HopLimitCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6HopLimitCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6HopLimitCounter interface {
	msg() *snappipb.PatternFlowIpv6HopLimitCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv6HopLimitCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv6HopLimitCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv6HopLimitCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) SetStart(value int32) PatternFlowIpv6HopLimitCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) SetStep(value int32) PatternFlowIpv6HopLimitCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6HopLimitCounter) SetCount(value int32) PatternFlowIpv6HopLimitCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv6SrcCounter struct {
	obj *snappipb.PatternFlowIpv6SrcCounter
}

func (obj *patternFlowIpv6SrcCounter) msg() *snappipb.PatternFlowIpv6SrcCounter {
	return obj.obj
}

func (obj *patternFlowIpv6SrcCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6SrcCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6SrcCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6SrcCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6SrcCounter interface {
	msg() *snappipb.PatternFlowIpv6SrcCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowIpv6SrcCounter
	Step() string
	SetStep(value string) PatternFlowIpv6SrcCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv6SrcCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) SetStart(value string) PatternFlowIpv6SrcCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) SetStep(value string) PatternFlowIpv6SrcCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6SrcCounter) SetCount(value int32) PatternFlowIpv6SrcCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv6DstCounter struct {
	obj *snappipb.PatternFlowIpv6DstCounter
}

func (obj *patternFlowIpv6DstCounter) msg() *snappipb.PatternFlowIpv6DstCounter {
	return obj.obj
}

func (obj *patternFlowIpv6DstCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6DstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv6DstCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv6DstCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv6DstCounter interface {
	msg() *snappipb.PatternFlowIpv6DstCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowIpv6DstCounter
	Step() string
	SetStep(value string) PatternFlowIpv6DstCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv6DstCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowIpv6DstCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv6DstCounter) SetStart(value string) PatternFlowIpv6DstCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowIpv6DstCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowIpv6DstCounter) SetStep(value string) PatternFlowIpv6DstCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv6DstCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv6DstCounter) SetCount(value int32) PatternFlowIpv6DstCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPauseDstCounter struct {
	obj *snappipb.PatternFlowPfcPauseDstCounter
}

func (obj *patternFlowPfcPauseDstCounter) msg() *snappipb.PatternFlowPfcPauseDstCounter {
	return obj.obj
}

func (obj *patternFlowPfcPauseDstCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseDstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPauseDstCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseDstCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPauseDstCounter interface {
	msg() *snappipb.PatternFlowPfcPauseDstCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowPfcPauseDstCounter
	Step() string
	SetStep(value string) PatternFlowPfcPauseDstCounter
	Count() int32
	SetCount(value int32) PatternFlowPfcPauseDstCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) SetStart(value string) PatternFlowPfcPauseDstCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) SetStep(value string) PatternFlowPfcPauseDstCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseDstCounter) SetCount(value int32) PatternFlowPfcPauseDstCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPauseSrcCounter struct {
	obj *snappipb.PatternFlowPfcPauseSrcCounter
}

func (obj *patternFlowPfcPauseSrcCounter) msg() *snappipb.PatternFlowPfcPauseSrcCounter {
	return obj.obj
}

func (obj *patternFlowPfcPauseSrcCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseSrcCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPauseSrcCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseSrcCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPauseSrcCounter interface {
	msg() *snappipb.PatternFlowPfcPauseSrcCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowPfcPauseSrcCounter
	Step() string
	SetStep(value string) PatternFlowPfcPauseSrcCounter
	Count() int32
	SetCount(value int32) PatternFlowPfcPauseSrcCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) SetStart(value string) PatternFlowPfcPauseSrcCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) SetStep(value string) PatternFlowPfcPauseSrcCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseSrcCounter) SetCount(value int32) PatternFlowPfcPauseSrcCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPauseEtherTypeCounter struct {
	obj *snappipb.PatternFlowPfcPauseEtherTypeCounter
}

func (obj *patternFlowPfcPauseEtherTypeCounter) msg() *snappipb.PatternFlowPfcPauseEtherTypeCounter {
	return obj.obj
}

func (obj *patternFlowPfcPauseEtherTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseEtherTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPauseEtherTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseEtherTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPauseEtherTypeCounter interface {
	msg() *snappipb.PatternFlowPfcPauseEtherTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPfcPauseEtherTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowPfcPauseEtherTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowPfcPauseEtherTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) SetStart(value int32) PatternFlowPfcPauseEtherTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) SetStep(value int32) PatternFlowPfcPauseEtherTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseEtherTypeCounter) SetCount(value int32) PatternFlowPfcPauseEtherTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPauseControlOpCodeCounter struct {
	obj *snappipb.PatternFlowPfcPauseControlOpCodeCounter
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) msg() *snappipb.PatternFlowPfcPauseControlOpCodeCounter {
	return obj.obj
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseControlOpCodeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPauseControlOpCodeCounter interface {
	msg() *snappipb.PatternFlowPfcPauseControlOpCodeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPfcPauseControlOpCodeCounter
	Step() int32
	SetStep(value int32) PatternFlowPfcPauseControlOpCodeCounter
	Count() int32
	SetCount(value int32) PatternFlowPfcPauseControlOpCodeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) SetStart(value int32) PatternFlowPfcPauseControlOpCodeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) SetStep(value int32) PatternFlowPfcPauseControlOpCodeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseControlOpCodeCounter) SetCount(value int32) PatternFlowPfcPauseControlOpCodeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPauseClassEnableVectorCounter struct {
	obj *snappipb.PatternFlowPfcPauseClassEnableVectorCounter
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) msg() *snappipb.PatternFlowPfcPauseClassEnableVectorCounter {
	return obj.obj
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPauseClassEnableVectorCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPauseClassEnableVectorCounter interface {
	msg() *snappipb.PatternFlowPfcPauseClassEnableVectorCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPfcPauseClassEnableVectorCounter
	Step() int32
	SetStep(value int32) PatternFlowPfcPauseClassEnableVectorCounter
	Count() int32
	SetCount(value int32) PatternFlowPfcPauseClassEnableVectorCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) SetStart(value int32) PatternFlowPfcPauseClassEnableVectorCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) SetStep(value int32) PatternFlowPfcPauseClassEnableVectorCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPauseClassEnableVectorCounter) SetCount(value int32) PatternFlowPfcPauseClassEnableVectorCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPausePauseClass0Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass0Counter
}

func (obj *patternFlowPfcPausePauseClass0Counter) msg() *snappipb.PatternFlowPfcPausePauseClass0Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass0Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass0Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass0Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass0Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass0Counter interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass0Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass0Counter
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass0Counter
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass0Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) SetStart(value int32) PatternFlowPfcPausePauseClass0Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) SetStep(value int32) PatternFlowPfcPausePauseClass0Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass0Counter) SetCount(value int32) PatternFlowPfcPausePauseClass0Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPausePauseClass1Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass1Counter
}

func (obj *patternFlowPfcPausePauseClass1Counter) msg() *snappipb.PatternFlowPfcPausePauseClass1Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass1Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass1Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass1Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass1Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass1Counter interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass1Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass1Counter
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass1Counter
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass1Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) SetStart(value int32) PatternFlowPfcPausePauseClass1Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) SetStep(value int32) PatternFlowPfcPausePauseClass1Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass1Counter) SetCount(value int32) PatternFlowPfcPausePauseClass1Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPausePauseClass2Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass2Counter
}

func (obj *patternFlowPfcPausePauseClass2Counter) msg() *snappipb.PatternFlowPfcPausePauseClass2Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass2Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass2Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass2Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass2Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass2Counter interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass2Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass2Counter
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass2Counter
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass2Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) SetStart(value int32) PatternFlowPfcPausePauseClass2Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) SetStep(value int32) PatternFlowPfcPausePauseClass2Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass2Counter) SetCount(value int32) PatternFlowPfcPausePauseClass2Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPausePauseClass3Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass3Counter
}

func (obj *patternFlowPfcPausePauseClass3Counter) msg() *snappipb.PatternFlowPfcPausePauseClass3Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass3Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass3Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass3Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass3Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass3Counter interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass3Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass3Counter
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass3Counter
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass3Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) SetStart(value int32) PatternFlowPfcPausePauseClass3Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) SetStep(value int32) PatternFlowPfcPausePauseClass3Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass3Counter) SetCount(value int32) PatternFlowPfcPausePauseClass3Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPausePauseClass4Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass4Counter
}

func (obj *patternFlowPfcPausePauseClass4Counter) msg() *snappipb.PatternFlowPfcPausePauseClass4Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass4Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass4Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass4Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass4Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass4Counter interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass4Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass4Counter
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass4Counter
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass4Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) SetStart(value int32) PatternFlowPfcPausePauseClass4Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) SetStep(value int32) PatternFlowPfcPausePauseClass4Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass4Counter) SetCount(value int32) PatternFlowPfcPausePauseClass4Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPausePauseClass5Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass5Counter
}

func (obj *patternFlowPfcPausePauseClass5Counter) msg() *snappipb.PatternFlowPfcPausePauseClass5Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass5Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass5Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass5Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass5Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass5Counter interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass5Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass5Counter
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass5Counter
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass5Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) SetStart(value int32) PatternFlowPfcPausePauseClass5Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) SetStep(value int32) PatternFlowPfcPausePauseClass5Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass5Counter) SetCount(value int32) PatternFlowPfcPausePauseClass5Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPausePauseClass6Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass6Counter
}

func (obj *patternFlowPfcPausePauseClass6Counter) msg() *snappipb.PatternFlowPfcPausePauseClass6Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass6Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass6Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass6Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass6Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass6Counter interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass6Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass6Counter
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass6Counter
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass6Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) SetStart(value int32) PatternFlowPfcPausePauseClass6Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) SetStep(value int32) PatternFlowPfcPausePauseClass6Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass6Counter) SetCount(value int32) PatternFlowPfcPausePauseClass6Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPfcPausePauseClass7Counter struct {
	obj *snappipb.PatternFlowPfcPausePauseClass7Counter
}

func (obj *patternFlowPfcPausePauseClass7Counter) msg() *snappipb.PatternFlowPfcPausePauseClass7Counter {
	return obj.obj
}

func (obj *patternFlowPfcPausePauseClass7Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass7Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPfcPausePauseClass7Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPfcPausePauseClass7Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPfcPausePauseClass7Counter interface {
	msg() *snappipb.PatternFlowPfcPausePauseClass7Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPfcPausePauseClass7Counter
	Step() int32
	SetStep(value int32) PatternFlowPfcPausePauseClass7Counter
	Count() int32
	SetCount(value int32) PatternFlowPfcPausePauseClass7Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) SetStart(value int32) PatternFlowPfcPausePauseClass7Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) SetStep(value int32) PatternFlowPfcPausePauseClass7Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPfcPausePauseClass7Counter) SetCount(value int32) PatternFlowPfcPausePauseClass7Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowEthernetPauseDstCounter struct {
	obj *snappipb.PatternFlowEthernetPauseDstCounter
}

func (obj *patternFlowEthernetPauseDstCounter) msg() *snappipb.PatternFlowEthernetPauseDstCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPauseDstCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseDstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPauseDstCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseDstCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPauseDstCounter interface {
	msg() *snappipb.PatternFlowEthernetPauseDstCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowEthernetPauseDstCounter
	Step() string
	SetStep(value string) PatternFlowEthernetPauseDstCounter
	Count() int32
	SetCount(value int32) PatternFlowEthernetPauseDstCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) SetStart(value string) PatternFlowEthernetPauseDstCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) SetStep(value string) PatternFlowEthernetPauseDstCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseDstCounter) SetCount(value int32) PatternFlowEthernetPauseDstCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowEthernetPauseSrcCounter struct {
	obj *snappipb.PatternFlowEthernetPauseSrcCounter
}

func (obj *patternFlowEthernetPauseSrcCounter) msg() *snappipb.PatternFlowEthernetPauseSrcCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPauseSrcCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseSrcCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPauseSrcCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseSrcCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPauseSrcCounter interface {
	msg() *snappipb.PatternFlowEthernetPauseSrcCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowEthernetPauseSrcCounter
	Step() string
	SetStep(value string) PatternFlowEthernetPauseSrcCounter
	Count() int32
	SetCount(value int32) PatternFlowEthernetPauseSrcCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) SetStart(value string) PatternFlowEthernetPauseSrcCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) SetStep(value string) PatternFlowEthernetPauseSrcCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseSrcCounter) SetCount(value int32) PatternFlowEthernetPauseSrcCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowEthernetPauseEtherTypeCounter struct {
	obj *snappipb.PatternFlowEthernetPauseEtherTypeCounter
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) msg() *snappipb.PatternFlowEthernetPauseEtherTypeCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseEtherTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPauseEtherTypeCounter interface {
	msg() *snappipb.PatternFlowEthernetPauseEtherTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowEthernetPauseEtherTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowEthernetPauseEtherTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowEthernetPauseEtherTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) SetStart(value int32) PatternFlowEthernetPauseEtherTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) SetStep(value int32) PatternFlowEthernetPauseEtherTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseEtherTypeCounter) SetCount(value int32) PatternFlowEthernetPauseEtherTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowEthernetPauseControlOpCodeCounter struct {
	obj *snappipb.PatternFlowEthernetPauseControlOpCodeCounter
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) msg() *snappipb.PatternFlowEthernetPauseControlOpCodeCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseControlOpCodeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPauseControlOpCodeCounter interface {
	msg() *snappipb.PatternFlowEthernetPauseControlOpCodeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowEthernetPauseControlOpCodeCounter
	Step() int32
	SetStep(value int32) PatternFlowEthernetPauseControlOpCodeCounter
	Count() int32
	SetCount(value int32) PatternFlowEthernetPauseControlOpCodeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) SetStart(value int32) PatternFlowEthernetPauseControlOpCodeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) SetStep(value int32) PatternFlowEthernetPauseControlOpCodeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseControlOpCodeCounter) SetCount(value int32) PatternFlowEthernetPauseControlOpCodeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowEthernetPauseTimeCounter struct {
	obj *snappipb.PatternFlowEthernetPauseTimeCounter
}

func (obj *patternFlowEthernetPauseTimeCounter) msg() *snappipb.PatternFlowEthernetPauseTimeCounter {
	return obj.obj
}

func (obj *patternFlowEthernetPauseTimeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseTimeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowEthernetPauseTimeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowEthernetPauseTimeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowEthernetPauseTimeCounter interface {
	msg() *snappipb.PatternFlowEthernetPauseTimeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowEthernetPauseTimeCounter
	Step() int32
	SetStep(value int32) PatternFlowEthernetPauseTimeCounter
	Count() int32
	SetCount(value int32) PatternFlowEthernetPauseTimeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) SetStart(value int32) PatternFlowEthernetPauseTimeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) SetStep(value int32) PatternFlowEthernetPauseTimeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowEthernetPauseTimeCounter) SetCount(value int32) PatternFlowEthernetPauseTimeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpSrcPortCounter struct {
	obj *snappipb.PatternFlowTcpSrcPortCounter
}

func (obj *patternFlowTcpSrcPortCounter) msg() *snappipb.PatternFlowTcpSrcPortCounter {
	return obj.obj
}

func (obj *patternFlowTcpSrcPortCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSrcPortCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpSrcPortCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSrcPortCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpSrcPortCounter interface {
	msg() *snappipb.PatternFlowTcpSrcPortCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpSrcPortCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpSrcPortCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpSrcPortCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) SetStart(value int32) PatternFlowTcpSrcPortCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) SetStep(value int32) PatternFlowTcpSrcPortCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpSrcPortCounter) SetCount(value int32) PatternFlowTcpSrcPortCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpDstPortCounter struct {
	obj *snappipb.PatternFlowTcpDstPortCounter
}

func (obj *patternFlowTcpDstPortCounter) msg() *snappipb.PatternFlowTcpDstPortCounter {
	return obj.obj
}

func (obj *patternFlowTcpDstPortCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDstPortCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpDstPortCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDstPortCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpDstPortCounter interface {
	msg() *snappipb.PatternFlowTcpDstPortCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpDstPortCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpDstPortCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpDstPortCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) SetStart(value int32) PatternFlowTcpDstPortCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) SetStep(value int32) PatternFlowTcpDstPortCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpDstPortCounter) SetCount(value int32) PatternFlowTcpDstPortCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpSeqNumCounter struct {
	obj *snappipb.PatternFlowTcpSeqNumCounter
}

func (obj *patternFlowTcpSeqNumCounter) msg() *snappipb.PatternFlowTcpSeqNumCounter {
	return obj.obj
}

func (obj *patternFlowTcpSeqNumCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSeqNumCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpSeqNumCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpSeqNumCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpSeqNumCounter interface {
	msg() *snappipb.PatternFlowTcpSeqNumCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpSeqNumCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpSeqNumCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpSeqNumCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) SetStart(value int32) PatternFlowTcpSeqNumCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) SetStep(value int32) PatternFlowTcpSeqNumCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpSeqNumCounter) SetCount(value int32) PatternFlowTcpSeqNumCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpAckNumCounter struct {
	obj *snappipb.PatternFlowTcpAckNumCounter
}

func (obj *patternFlowTcpAckNumCounter) msg() *snappipb.PatternFlowTcpAckNumCounter {
	return obj.obj
}

func (obj *patternFlowTcpAckNumCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpAckNumCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpAckNumCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpAckNumCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpAckNumCounter interface {
	msg() *snappipb.PatternFlowTcpAckNumCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpAckNumCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpAckNumCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpAckNumCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) SetStart(value int32) PatternFlowTcpAckNumCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) SetStep(value int32) PatternFlowTcpAckNumCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpAckNumCounter) SetCount(value int32) PatternFlowTcpAckNumCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpDataOffsetCounter struct {
	obj *snappipb.PatternFlowTcpDataOffsetCounter
}

func (obj *patternFlowTcpDataOffsetCounter) msg() *snappipb.PatternFlowTcpDataOffsetCounter {
	return obj.obj
}

func (obj *patternFlowTcpDataOffsetCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDataOffsetCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpDataOffsetCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpDataOffsetCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpDataOffsetCounter interface {
	msg() *snappipb.PatternFlowTcpDataOffsetCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpDataOffsetCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpDataOffsetCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpDataOffsetCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) SetStart(value int32) PatternFlowTcpDataOffsetCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) SetStep(value int32) PatternFlowTcpDataOffsetCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpDataOffsetCounter) SetCount(value int32) PatternFlowTcpDataOffsetCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpEcnNsCounter struct {
	obj *snappipb.PatternFlowTcpEcnNsCounter
}

func (obj *patternFlowTcpEcnNsCounter) msg() *snappipb.PatternFlowTcpEcnNsCounter {
	return obj.obj
}

func (obj *patternFlowTcpEcnNsCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnNsCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpEcnNsCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnNsCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpEcnNsCounter interface {
	msg() *snappipb.PatternFlowTcpEcnNsCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpEcnNsCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpEcnNsCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpEcnNsCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) SetStart(value int32) PatternFlowTcpEcnNsCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) SetStep(value int32) PatternFlowTcpEcnNsCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnNsCounter) SetCount(value int32) PatternFlowTcpEcnNsCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpEcnCwrCounter struct {
	obj *snappipb.PatternFlowTcpEcnCwrCounter
}

func (obj *patternFlowTcpEcnCwrCounter) msg() *snappipb.PatternFlowTcpEcnCwrCounter {
	return obj.obj
}

func (obj *patternFlowTcpEcnCwrCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnCwrCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpEcnCwrCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnCwrCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpEcnCwrCounter interface {
	msg() *snappipb.PatternFlowTcpEcnCwrCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpEcnCwrCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpEcnCwrCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpEcnCwrCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) SetStart(value int32) PatternFlowTcpEcnCwrCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) SetStep(value int32) PatternFlowTcpEcnCwrCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnCwrCounter) SetCount(value int32) PatternFlowTcpEcnCwrCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpEcnEchoCounter struct {
	obj *snappipb.PatternFlowTcpEcnEchoCounter
}

func (obj *patternFlowTcpEcnEchoCounter) msg() *snappipb.PatternFlowTcpEcnEchoCounter {
	return obj.obj
}

func (obj *patternFlowTcpEcnEchoCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnEchoCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpEcnEchoCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpEcnEchoCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpEcnEchoCounter interface {
	msg() *snappipb.PatternFlowTcpEcnEchoCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpEcnEchoCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpEcnEchoCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpEcnEchoCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) SetStart(value int32) PatternFlowTcpEcnEchoCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) SetStep(value int32) PatternFlowTcpEcnEchoCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpEcnEchoCounter) SetCount(value int32) PatternFlowTcpEcnEchoCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpCtlUrgCounter struct {
	obj *snappipb.PatternFlowTcpCtlUrgCounter
}

func (obj *patternFlowTcpCtlUrgCounter) msg() *snappipb.PatternFlowTcpCtlUrgCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlUrgCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlUrgCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlUrgCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlUrgCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlUrgCounter interface {
	msg() *snappipb.PatternFlowTcpCtlUrgCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlUrgCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlUrgCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlUrgCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) SetStart(value int32) PatternFlowTcpCtlUrgCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) SetStep(value int32) PatternFlowTcpCtlUrgCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlUrgCounter) SetCount(value int32) PatternFlowTcpCtlUrgCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpCtlAckCounter struct {
	obj *snappipb.PatternFlowTcpCtlAckCounter
}

func (obj *patternFlowTcpCtlAckCounter) msg() *snappipb.PatternFlowTcpCtlAckCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlAckCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlAckCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlAckCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlAckCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlAckCounter interface {
	msg() *snappipb.PatternFlowTcpCtlAckCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlAckCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlAckCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlAckCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) SetStart(value int32) PatternFlowTcpCtlAckCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) SetStep(value int32) PatternFlowTcpCtlAckCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlAckCounter) SetCount(value int32) PatternFlowTcpCtlAckCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpCtlPshCounter struct {
	obj *snappipb.PatternFlowTcpCtlPshCounter
}

func (obj *patternFlowTcpCtlPshCounter) msg() *snappipb.PatternFlowTcpCtlPshCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlPshCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlPshCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlPshCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlPshCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlPshCounter interface {
	msg() *snappipb.PatternFlowTcpCtlPshCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlPshCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlPshCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlPshCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) SetStart(value int32) PatternFlowTcpCtlPshCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) SetStep(value int32) PatternFlowTcpCtlPshCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlPshCounter) SetCount(value int32) PatternFlowTcpCtlPshCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpCtlRstCounter struct {
	obj *snappipb.PatternFlowTcpCtlRstCounter
}

func (obj *patternFlowTcpCtlRstCounter) msg() *snappipb.PatternFlowTcpCtlRstCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlRstCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlRstCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlRstCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlRstCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlRstCounter interface {
	msg() *snappipb.PatternFlowTcpCtlRstCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlRstCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlRstCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlRstCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) SetStart(value int32) PatternFlowTcpCtlRstCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) SetStep(value int32) PatternFlowTcpCtlRstCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlRstCounter) SetCount(value int32) PatternFlowTcpCtlRstCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpCtlSynCounter struct {
	obj *snappipb.PatternFlowTcpCtlSynCounter
}

func (obj *patternFlowTcpCtlSynCounter) msg() *snappipb.PatternFlowTcpCtlSynCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlSynCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlSynCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlSynCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlSynCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlSynCounter interface {
	msg() *snappipb.PatternFlowTcpCtlSynCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlSynCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlSynCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlSynCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) SetStart(value int32) PatternFlowTcpCtlSynCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) SetStep(value int32) PatternFlowTcpCtlSynCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlSynCounter) SetCount(value int32) PatternFlowTcpCtlSynCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpCtlFinCounter struct {
	obj *snappipb.PatternFlowTcpCtlFinCounter
}

func (obj *patternFlowTcpCtlFinCounter) msg() *snappipb.PatternFlowTcpCtlFinCounter {
	return obj.obj
}

func (obj *patternFlowTcpCtlFinCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlFinCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpCtlFinCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpCtlFinCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpCtlFinCounter interface {
	msg() *snappipb.PatternFlowTcpCtlFinCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpCtlFinCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpCtlFinCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpCtlFinCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) SetStart(value int32) PatternFlowTcpCtlFinCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) SetStep(value int32) PatternFlowTcpCtlFinCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpCtlFinCounter) SetCount(value int32) PatternFlowTcpCtlFinCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowTcpWindowCounter struct {
	obj *snappipb.PatternFlowTcpWindowCounter
}

func (obj *patternFlowTcpWindowCounter) msg() *snappipb.PatternFlowTcpWindowCounter {
	return obj.obj
}

func (obj *patternFlowTcpWindowCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpWindowCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowTcpWindowCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowTcpWindowCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowTcpWindowCounter interface {
	msg() *snappipb.PatternFlowTcpWindowCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowTcpWindowCounter
	Step() int32
	SetStep(value int32) PatternFlowTcpWindowCounter
	Count() int32
	SetCount(value int32) PatternFlowTcpWindowCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowTcpWindowCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpWindowCounter) SetStart(value int32) PatternFlowTcpWindowCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowTcpWindowCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpWindowCounter) SetStep(value int32) PatternFlowTcpWindowCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowTcpWindowCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowTcpWindowCounter) SetCount(value int32) PatternFlowTcpWindowCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowUdpSrcPortCounter struct {
	obj *snappipb.PatternFlowUdpSrcPortCounter
}

func (obj *patternFlowUdpSrcPortCounter) msg() *snappipb.PatternFlowUdpSrcPortCounter {
	return obj.obj
}

func (obj *patternFlowUdpSrcPortCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpSrcPortCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowUdpSrcPortCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpSrcPortCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowUdpSrcPortCounter interface {
	msg() *snappipb.PatternFlowUdpSrcPortCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowUdpSrcPortCounter
	Step() int32
	SetStep(value int32) PatternFlowUdpSrcPortCounter
	Count() int32
	SetCount(value int32) PatternFlowUdpSrcPortCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) SetStart(value int32) PatternFlowUdpSrcPortCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) SetStep(value int32) PatternFlowUdpSrcPortCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpSrcPortCounter) SetCount(value int32) PatternFlowUdpSrcPortCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowUdpDstPortCounter struct {
	obj *snappipb.PatternFlowUdpDstPortCounter
}

func (obj *patternFlowUdpDstPortCounter) msg() *snappipb.PatternFlowUdpDstPortCounter {
	return obj.obj
}

func (obj *patternFlowUdpDstPortCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpDstPortCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowUdpDstPortCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpDstPortCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowUdpDstPortCounter interface {
	msg() *snappipb.PatternFlowUdpDstPortCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowUdpDstPortCounter
	Step() int32
	SetStep(value int32) PatternFlowUdpDstPortCounter
	Count() int32
	SetCount(value int32) PatternFlowUdpDstPortCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) SetStart(value int32) PatternFlowUdpDstPortCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) SetStep(value int32) PatternFlowUdpDstPortCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpDstPortCounter) SetCount(value int32) PatternFlowUdpDstPortCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowUdpLengthCounter struct {
	obj *snappipb.PatternFlowUdpLengthCounter
}

func (obj *patternFlowUdpLengthCounter) msg() *snappipb.PatternFlowUdpLengthCounter {
	return obj.obj
}

func (obj *patternFlowUdpLengthCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowUdpLengthCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowUdpLengthCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowUdpLengthCounter interface {
	msg() *snappipb.PatternFlowUdpLengthCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowUdpLengthCounter
	Step() int32
	SetStep(value int32) PatternFlowUdpLengthCounter
	Count() int32
	SetCount(value int32) PatternFlowUdpLengthCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowUdpLengthCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpLengthCounter) SetStart(value int32) PatternFlowUdpLengthCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowUdpLengthCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpLengthCounter) SetStep(value int32) PatternFlowUdpLengthCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowUdpLengthCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowUdpLengthCounter) SetCount(value int32) PatternFlowUdpLengthCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGreChecksumPresentCounter struct {
	obj *snappipb.PatternFlowGreChecksumPresentCounter
}

func (obj *patternFlowGreChecksumPresentCounter) msg() *snappipb.PatternFlowGreChecksumPresentCounter {
	return obj.obj
}

func (obj *patternFlowGreChecksumPresentCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksumPresentCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGreChecksumPresentCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreChecksumPresentCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGreChecksumPresentCounter interface {
	msg() *snappipb.PatternFlowGreChecksumPresentCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGreChecksumPresentCounter
	Step() int32
	SetStep(value int32) PatternFlowGreChecksumPresentCounter
	Count() int32
	SetCount(value int32) PatternFlowGreChecksumPresentCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) SetStart(value int32) PatternFlowGreChecksumPresentCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) SetStep(value int32) PatternFlowGreChecksumPresentCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreChecksumPresentCounter) SetCount(value int32) PatternFlowGreChecksumPresentCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGreReserved0Counter struct {
	obj *snappipb.PatternFlowGreReserved0Counter
}

func (obj *patternFlowGreReserved0Counter) msg() *snappipb.PatternFlowGreReserved0Counter {
	return obj.obj
}

func (obj *patternFlowGreReserved0Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved0Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGreReserved0Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved0Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGreReserved0Counter interface {
	msg() *snappipb.PatternFlowGreReserved0Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGreReserved0Counter
	Step() int32
	SetStep(value int32) PatternFlowGreReserved0Counter
	Count() int32
	SetCount(value int32) PatternFlowGreReserved0Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreReserved0Counter) SetStart(value int32) PatternFlowGreReserved0Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreReserved0Counter) SetStep(value int32) PatternFlowGreReserved0Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreReserved0Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreReserved0Counter) SetCount(value int32) PatternFlowGreReserved0Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGreVersionCounter struct {
	obj *snappipb.PatternFlowGreVersionCounter
}

func (obj *patternFlowGreVersionCounter) msg() *snappipb.PatternFlowGreVersionCounter {
	return obj.obj
}

func (obj *patternFlowGreVersionCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreVersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGreVersionCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreVersionCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGreVersionCounter interface {
	msg() *snappipb.PatternFlowGreVersionCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGreVersionCounter
	Step() int32
	SetStep(value int32) PatternFlowGreVersionCounter
	Count() int32
	SetCount(value int32) PatternFlowGreVersionCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreVersionCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreVersionCounter) SetStart(value int32) PatternFlowGreVersionCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreVersionCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreVersionCounter) SetStep(value int32) PatternFlowGreVersionCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreVersionCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreVersionCounter) SetCount(value int32) PatternFlowGreVersionCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGreProtocolCounter struct {
	obj *snappipb.PatternFlowGreProtocolCounter
}

func (obj *patternFlowGreProtocolCounter) msg() *snappipb.PatternFlowGreProtocolCounter {
	return obj.obj
}

func (obj *patternFlowGreProtocolCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreProtocolCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGreProtocolCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreProtocolCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGreProtocolCounter interface {
	msg() *snappipb.PatternFlowGreProtocolCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGreProtocolCounter
	Step() int32
	SetStep(value int32) PatternFlowGreProtocolCounter
	Count() int32
	SetCount(value int32) PatternFlowGreProtocolCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreProtocolCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreProtocolCounter) SetStart(value int32) PatternFlowGreProtocolCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreProtocolCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreProtocolCounter) SetStep(value int32) PatternFlowGreProtocolCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreProtocolCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreProtocolCounter) SetCount(value int32) PatternFlowGreProtocolCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGreReserved1Counter struct {
	obj *snappipb.PatternFlowGreReserved1Counter
}

func (obj *patternFlowGreReserved1Counter) msg() *snappipb.PatternFlowGreReserved1Counter {
	return obj.obj
}

func (obj *patternFlowGreReserved1Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved1Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGreReserved1Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGreReserved1Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGreReserved1Counter interface {
	msg() *snappipb.PatternFlowGreReserved1Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGreReserved1Counter
	Step() int32
	SetStep(value int32) PatternFlowGreReserved1Counter
	Count() int32
	SetCount(value int32) PatternFlowGreReserved1Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreReserved1Counter) SetStart(value int32) PatternFlowGreReserved1Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreReserved1Counter) SetStep(value int32) PatternFlowGreReserved1Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGreReserved1Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGreReserved1Counter) SetCount(value int32) PatternFlowGreReserved1Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1VersionCounter struct {
	obj *snappipb.PatternFlowGtpv1VersionCounter
}

func (obj *patternFlowGtpv1VersionCounter) msg() *snappipb.PatternFlowGtpv1VersionCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1VersionCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1VersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1VersionCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1VersionCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1VersionCounter interface {
	msg() *snappipb.PatternFlowGtpv1VersionCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1VersionCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1VersionCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1VersionCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) SetStart(value int32) PatternFlowGtpv1VersionCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) SetStep(value int32) PatternFlowGtpv1VersionCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1VersionCounter) SetCount(value int32) PatternFlowGtpv1VersionCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1ProtocolTypeCounter struct {
	obj *snappipb.PatternFlowGtpv1ProtocolTypeCounter
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) msg() *snappipb.PatternFlowGtpv1ProtocolTypeCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ProtocolTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1ProtocolTypeCounter interface {
	msg() *snappipb.PatternFlowGtpv1ProtocolTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1ProtocolTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1ProtocolTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1ProtocolTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) SetStart(value int32) PatternFlowGtpv1ProtocolTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) SetStep(value int32) PatternFlowGtpv1ProtocolTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1ProtocolTypeCounter) SetCount(value int32) PatternFlowGtpv1ProtocolTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1ReservedCounter struct {
	obj *snappipb.PatternFlowGtpv1ReservedCounter
}

func (obj *patternFlowGtpv1ReservedCounter) msg() *snappipb.PatternFlowGtpv1ReservedCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1ReservedCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ReservedCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1ReservedCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1ReservedCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1ReservedCounter interface {
	msg() *snappipb.PatternFlowGtpv1ReservedCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1ReservedCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1ReservedCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1ReservedCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) SetStart(value int32) PatternFlowGtpv1ReservedCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) SetStep(value int32) PatternFlowGtpv1ReservedCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1ReservedCounter) SetCount(value int32) PatternFlowGtpv1ReservedCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1EFlagCounter struct {
	obj *snappipb.PatternFlowGtpv1EFlagCounter
}

func (obj *patternFlowGtpv1EFlagCounter) msg() *snappipb.PatternFlowGtpv1EFlagCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1EFlagCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1EFlagCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1EFlagCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1EFlagCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1EFlagCounter interface {
	msg() *snappipb.PatternFlowGtpv1EFlagCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1EFlagCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1EFlagCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1EFlagCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) SetStart(value int32) PatternFlowGtpv1EFlagCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) SetStep(value int32) PatternFlowGtpv1EFlagCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1EFlagCounter) SetCount(value int32) PatternFlowGtpv1EFlagCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1SFlagCounter struct {
	obj *snappipb.PatternFlowGtpv1SFlagCounter
}

func (obj *patternFlowGtpv1SFlagCounter) msg() *snappipb.PatternFlowGtpv1SFlagCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1SFlagCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SFlagCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1SFlagCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SFlagCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1SFlagCounter interface {
	msg() *snappipb.PatternFlowGtpv1SFlagCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1SFlagCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1SFlagCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1SFlagCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) SetStart(value int32) PatternFlowGtpv1SFlagCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) SetStep(value int32) PatternFlowGtpv1SFlagCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1SFlagCounter) SetCount(value int32) PatternFlowGtpv1SFlagCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1PnFlagCounter struct {
	obj *snappipb.PatternFlowGtpv1PnFlagCounter
}

func (obj *patternFlowGtpv1PnFlagCounter) msg() *snappipb.PatternFlowGtpv1PnFlagCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1PnFlagCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1PnFlagCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1PnFlagCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1PnFlagCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1PnFlagCounter interface {
	msg() *snappipb.PatternFlowGtpv1PnFlagCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1PnFlagCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1PnFlagCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1PnFlagCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) SetStart(value int32) PatternFlowGtpv1PnFlagCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) SetStep(value int32) PatternFlowGtpv1PnFlagCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1PnFlagCounter) SetCount(value int32) PatternFlowGtpv1PnFlagCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1MessageTypeCounter struct {
	obj *snappipb.PatternFlowGtpv1MessageTypeCounter
}

func (obj *patternFlowGtpv1MessageTypeCounter) msg() *snappipb.PatternFlowGtpv1MessageTypeCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1MessageTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1MessageTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1MessageTypeCounter interface {
	msg() *snappipb.PatternFlowGtpv1MessageTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1MessageTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1MessageTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1MessageTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) SetStart(value int32) PatternFlowGtpv1MessageTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) SetStep(value int32) PatternFlowGtpv1MessageTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1MessageTypeCounter) SetCount(value int32) PatternFlowGtpv1MessageTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1MessageLengthCounter struct {
	obj *snappipb.PatternFlowGtpv1MessageLengthCounter
}

func (obj *patternFlowGtpv1MessageLengthCounter) msg() *snappipb.PatternFlowGtpv1MessageLengthCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1MessageLengthCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1MessageLengthCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1MessageLengthCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1MessageLengthCounter interface {
	msg() *snappipb.PatternFlowGtpv1MessageLengthCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1MessageLengthCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1MessageLengthCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1MessageLengthCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) SetStart(value int32) PatternFlowGtpv1MessageLengthCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) SetStep(value int32) PatternFlowGtpv1MessageLengthCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1MessageLengthCounter) SetCount(value int32) PatternFlowGtpv1MessageLengthCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1TeidCounter struct {
	obj *snappipb.PatternFlowGtpv1TeidCounter
}

func (obj *patternFlowGtpv1TeidCounter) msg() *snappipb.PatternFlowGtpv1TeidCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1TeidCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1TeidCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1TeidCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1TeidCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1TeidCounter interface {
	msg() *snappipb.PatternFlowGtpv1TeidCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1TeidCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1TeidCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1TeidCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) SetStart(value int32) PatternFlowGtpv1TeidCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) SetStep(value int32) PatternFlowGtpv1TeidCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1TeidCounter) SetCount(value int32) PatternFlowGtpv1TeidCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1SquenceNumberCounter struct {
	obj *snappipb.PatternFlowGtpv1SquenceNumberCounter
}

func (obj *patternFlowGtpv1SquenceNumberCounter) msg() *snappipb.PatternFlowGtpv1SquenceNumberCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1SquenceNumberCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SquenceNumberCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1SquenceNumberCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1SquenceNumberCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1SquenceNumberCounter interface {
	msg() *snappipb.PatternFlowGtpv1SquenceNumberCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1SquenceNumberCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1SquenceNumberCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1SquenceNumberCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) SetStart(value int32) PatternFlowGtpv1SquenceNumberCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) SetStep(value int32) PatternFlowGtpv1SquenceNumberCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1SquenceNumberCounter) SetCount(value int32) PatternFlowGtpv1SquenceNumberCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1NPduNumberCounter struct {
	obj *snappipb.PatternFlowGtpv1NPduNumberCounter
}

func (obj *patternFlowGtpv1NPduNumberCounter) msg() *snappipb.PatternFlowGtpv1NPduNumberCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1NPduNumberCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NPduNumberCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1NPduNumberCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NPduNumberCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1NPduNumberCounter interface {
	msg() *snappipb.PatternFlowGtpv1NPduNumberCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1NPduNumberCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1NPduNumberCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1NPduNumberCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) SetStart(value int32) PatternFlowGtpv1NPduNumberCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) SetStep(value int32) PatternFlowGtpv1NPduNumberCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1NPduNumberCounter) SetCount(value int32) PatternFlowGtpv1NPduNumberCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv1NextExtensionHeaderTypeCounter struct {
	obj *snappipb.PatternFlowGtpv1NextExtensionHeaderTypeCounter
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) msg() *snappipb.PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	return obj.obj
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv1NextExtensionHeaderTypeCounter interface {
	msg() *snappipb.PatternFlowGtpv1NextExtensionHeaderTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) SetStart(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) SetStep(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv1NextExtensionHeaderTypeCounter) SetCount(value int32) PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpExtensionExtensionLength struct {
	obj *snappipb.PatternFlowGtpExtensionExtensionLength
}

func (obj *patternFlowGtpExtensionExtensionLength) msg() *snappipb.PatternFlowGtpExtensionExtensionLength {
	return obj.obj
}

func (obj *patternFlowGtpExtensionExtensionLength) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionExtensionLength) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpExtensionExtensionLength) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionExtensionLength) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpExtensionExtensionLength interface {
	msg() *snappipb.PatternFlowGtpExtensionExtensionLength
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpExtensionExtensionLength
	Values() []int32
	SetValues(value []int32) PatternFlowGtpExtensionExtensionLength
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpExtensionExtensionLength
	Increment() PatternFlowGtpExtensionExtensionLengthCounter
	Decrement() PatternFlowGtpExtensionExtensionLengthCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) SetValue(value int32) PatternFlowGtpExtensionExtensionLength {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) SetValues(value []int32) PatternFlowGtpExtensionExtensionLength {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionExtensionLength) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionExtensionLength) SetMetricGroup(value string) PatternFlowGtpExtensionExtensionLength {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpExtensionExtensionLengthCounter
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) Increment() PatternFlowGtpExtensionExtensionLengthCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpExtensionExtensionLengthCounter{}
	}
	return &patternFlowGtpExtensionExtensionLengthCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpExtensionExtensionLengthCounter
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLength) Decrement() PatternFlowGtpExtensionExtensionLengthCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpExtensionExtensionLengthCounter{}
	}
	return &patternFlowGtpExtensionExtensionLengthCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpExtensionContents struct {
	obj *snappipb.PatternFlowGtpExtensionContents
}

func (obj *patternFlowGtpExtensionContents) msg() *snappipb.PatternFlowGtpExtensionContents {
	return obj.obj
}

func (obj *patternFlowGtpExtensionContents) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionContents) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpExtensionContents) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionContents) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpExtensionContents interface {
	msg() *snappipb.PatternFlowGtpExtensionContents
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpExtensionContents
	Values() []int32
	SetValues(value []int32) PatternFlowGtpExtensionContents
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpExtensionContents
	Increment() PatternFlowGtpExtensionContentsCounter
	Decrement() PatternFlowGtpExtensionContentsCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionContents) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionContents) SetValue(value int32) PatternFlowGtpExtensionContents {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpExtensionContents) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionContents) SetValues(value []int32) PatternFlowGtpExtensionContents {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionContents) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionContents) SetMetricGroup(value string) PatternFlowGtpExtensionContents {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpExtensionContentsCounter
//  description is TBD
func (obj *patternFlowGtpExtensionContents) Increment() PatternFlowGtpExtensionContentsCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpExtensionContentsCounter{}
	}
	return &patternFlowGtpExtensionContentsCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpExtensionContentsCounter
//  description is TBD
func (obj *patternFlowGtpExtensionContents) Decrement() PatternFlowGtpExtensionContentsCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpExtensionContentsCounter{}
	}
	return &patternFlowGtpExtensionContentsCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpExtensionNextExtensionHeader struct {
	obj *snappipb.PatternFlowGtpExtensionNextExtensionHeader
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) msg() *snappipb.PatternFlowGtpExtensionNextExtensionHeader {
	return obj.obj
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionNextExtensionHeader) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpExtensionNextExtensionHeader interface {
	msg() *snappipb.PatternFlowGtpExtensionNextExtensionHeader
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowGtpExtensionNextExtensionHeader
	Values() []int32
	SetValues(value []int32) PatternFlowGtpExtensionNextExtensionHeader
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowGtpExtensionNextExtensionHeader
	Increment() PatternFlowGtpExtensionNextExtensionHeaderCounter
	Decrement() PatternFlowGtpExtensionNextExtensionHeaderCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) SetValue(value int32) PatternFlowGtpExtensionNextExtensionHeader {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) SetValues(value []int32) PatternFlowGtpExtensionNextExtensionHeader {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionNextExtensionHeader) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowGtpExtensionNextExtensionHeader) SetMetricGroup(value string) PatternFlowGtpExtensionNextExtensionHeader {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowGtpExtensionNextExtensionHeaderCounter
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) Increment() PatternFlowGtpExtensionNextExtensionHeaderCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowGtpExtensionNextExtensionHeaderCounter{}
	}
	return &patternFlowGtpExtensionNextExtensionHeaderCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowGtpExtensionNextExtensionHeaderCounter
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeader) Decrement() PatternFlowGtpExtensionNextExtensionHeaderCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowGtpExtensionNextExtensionHeaderCounter{}
	}
	return &patternFlowGtpExtensionNextExtensionHeaderCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpv2VersionCounter struct {
	obj *snappipb.PatternFlowGtpv2VersionCounter
}

func (obj *patternFlowGtpv2VersionCounter) msg() *snappipb.PatternFlowGtpv2VersionCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2VersionCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2VersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2VersionCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2VersionCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2VersionCounter interface {
	msg() *snappipb.PatternFlowGtpv2VersionCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv2VersionCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv2VersionCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv2VersionCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) SetStart(value int32) PatternFlowGtpv2VersionCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) SetStep(value int32) PatternFlowGtpv2VersionCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2VersionCounter) SetCount(value int32) PatternFlowGtpv2VersionCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv2PiggybackingFlagCounter struct {
	obj *snappipb.PatternFlowGtpv2PiggybackingFlagCounter
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) msg() *snappipb.PatternFlowGtpv2PiggybackingFlagCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2PiggybackingFlagCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2PiggybackingFlagCounter interface {
	msg() *snappipb.PatternFlowGtpv2PiggybackingFlagCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv2PiggybackingFlagCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv2PiggybackingFlagCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv2PiggybackingFlagCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) SetStart(value int32) PatternFlowGtpv2PiggybackingFlagCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) SetStep(value int32) PatternFlowGtpv2PiggybackingFlagCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2PiggybackingFlagCounter) SetCount(value int32) PatternFlowGtpv2PiggybackingFlagCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv2TeidFlagCounter struct {
	obj *snappipb.PatternFlowGtpv2TeidFlagCounter
}

func (obj *patternFlowGtpv2TeidFlagCounter) msg() *snappipb.PatternFlowGtpv2TeidFlagCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2TeidFlagCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidFlagCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2TeidFlagCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidFlagCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2TeidFlagCounter interface {
	msg() *snappipb.PatternFlowGtpv2TeidFlagCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv2TeidFlagCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv2TeidFlagCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv2TeidFlagCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) SetStart(value int32) PatternFlowGtpv2TeidFlagCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) SetStep(value int32) PatternFlowGtpv2TeidFlagCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2TeidFlagCounter) SetCount(value int32) PatternFlowGtpv2TeidFlagCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv2Spare1Counter struct {
	obj *snappipb.PatternFlowGtpv2Spare1Counter
}

func (obj *patternFlowGtpv2Spare1Counter) msg() *snappipb.PatternFlowGtpv2Spare1Counter {
	return obj.obj
}

func (obj *patternFlowGtpv2Spare1Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare1Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2Spare1Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare1Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2Spare1Counter interface {
	msg() *snappipb.PatternFlowGtpv2Spare1Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv2Spare1Counter
	Step() int32
	SetStep(value int32) PatternFlowGtpv2Spare1Counter
	Count() int32
	SetCount(value int32) PatternFlowGtpv2Spare1Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) SetStart(value int32) PatternFlowGtpv2Spare1Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) SetStep(value int32) PatternFlowGtpv2Spare1Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Spare1Counter) SetCount(value int32) PatternFlowGtpv2Spare1Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv2MessageTypeCounter struct {
	obj *snappipb.PatternFlowGtpv2MessageTypeCounter
}

func (obj *patternFlowGtpv2MessageTypeCounter) msg() *snappipb.PatternFlowGtpv2MessageTypeCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2MessageTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2MessageTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2MessageTypeCounter interface {
	msg() *snappipb.PatternFlowGtpv2MessageTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv2MessageTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv2MessageTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv2MessageTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) SetStart(value int32) PatternFlowGtpv2MessageTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) SetStep(value int32) PatternFlowGtpv2MessageTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2MessageTypeCounter) SetCount(value int32) PatternFlowGtpv2MessageTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv2MessageLengthCounter struct {
	obj *snappipb.PatternFlowGtpv2MessageLengthCounter
}

func (obj *patternFlowGtpv2MessageLengthCounter) msg() *snappipb.PatternFlowGtpv2MessageLengthCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2MessageLengthCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2MessageLengthCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2MessageLengthCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2MessageLengthCounter interface {
	msg() *snappipb.PatternFlowGtpv2MessageLengthCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv2MessageLengthCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv2MessageLengthCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv2MessageLengthCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) SetStart(value int32) PatternFlowGtpv2MessageLengthCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) SetStep(value int32) PatternFlowGtpv2MessageLengthCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2MessageLengthCounter) SetCount(value int32) PatternFlowGtpv2MessageLengthCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv2TeidCounter struct {
	obj *snappipb.PatternFlowGtpv2TeidCounter
}

func (obj *patternFlowGtpv2TeidCounter) msg() *snappipb.PatternFlowGtpv2TeidCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2TeidCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2TeidCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2TeidCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2TeidCounter interface {
	msg() *snappipb.PatternFlowGtpv2TeidCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv2TeidCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv2TeidCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv2TeidCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) SetStart(value int32) PatternFlowGtpv2TeidCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) SetStep(value int32) PatternFlowGtpv2TeidCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2TeidCounter) SetCount(value int32) PatternFlowGtpv2TeidCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv2SequenceNumberCounter struct {
	obj *snappipb.PatternFlowGtpv2SequenceNumberCounter
}

func (obj *patternFlowGtpv2SequenceNumberCounter) msg() *snappipb.PatternFlowGtpv2SequenceNumberCounter {
	return obj.obj
}

func (obj *patternFlowGtpv2SequenceNumberCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2SequenceNumberCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2SequenceNumberCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2SequenceNumberCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2SequenceNumberCounter interface {
	msg() *snappipb.PatternFlowGtpv2SequenceNumberCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv2SequenceNumberCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpv2SequenceNumberCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpv2SequenceNumberCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) SetStart(value int32) PatternFlowGtpv2SequenceNumberCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) SetStep(value int32) PatternFlowGtpv2SequenceNumberCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2SequenceNumberCounter) SetCount(value int32) PatternFlowGtpv2SequenceNumberCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpv2Spare2Counter struct {
	obj *snappipb.PatternFlowGtpv2Spare2Counter
}

func (obj *patternFlowGtpv2Spare2Counter) msg() *snappipb.PatternFlowGtpv2Spare2Counter {
	return obj.obj
}

func (obj *patternFlowGtpv2Spare2Counter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare2Counter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpv2Spare2Counter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpv2Spare2Counter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpv2Spare2Counter interface {
	msg() *snappipb.PatternFlowGtpv2Spare2Counter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpv2Spare2Counter
	Step() int32
	SetStep(value int32) PatternFlowGtpv2Spare2Counter
	Count() int32
	SetCount(value int32) PatternFlowGtpv2Spare2Counter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) SetStart(value int32) PatternFlowGtpv2Spare2Counter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) SetStep(value int32) PatternFlowGtpv2Spare2Counter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpv2Spare2Counter) SetCount(value int32) PatternFlowGtpv2Spare2Counter {
	obj.obj.Count = &value
	return obj
}

type patternFlowArpHardwareTypeCounter struct {
	obj *snappipb.PatternFlowArpHardwareTypeCounter
}

func (obj *patternFlowArpHardwareTypeCounter) msg() *snappipb.PatternFlowArpHardwareTypeCounter {
	return obj.obj
}

func (obj *patternFlowArpHardwareTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpHardwareTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpHardwareTypeCounter interface {
	msg() *snappipb.PatternFlowArpHardwareTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowArpHardwareTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowArpHardwareTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowArpHardwareTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) SetStart(value int32) PatternFlowArpHardwareTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) SetStep(value int32) PatternFlowArpHardwareTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpHardwareTypeCounter) SetCount(value int32) PatternFlowArpHardwareTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowArpProtocolTypeCounter struct {
	obj *snappipb.PatternFlowArpProtocolTypeCounter
}

func (obj *patternFlowArpProtocolTypeCounter) msg() *snappipb.PatternFlowArpProtocolTypeCounter {
	return obj.obj
}

func (obj *patternFlowArpProtocolTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpProtocolTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpProtocolTypeCounter interface {
	msg() *snappipb.PatternFlowArpProtocolTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowArpProtocolTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowArpProtocolTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowArpProtocolTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) SetStart(value int32) PatternFlowArpProtocolTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) SetStep(value int32) PatternFlowArpProtocolTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpProtocolTypeCounter) SetCount(value int32) PatternFlowArpProtocolTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowArpHardwareLengthCounter struct {
	obj *snappipb.PatternFlowArpHardwareLengthCounter
}

func (obj *patternFlowArpHardwareLengthCounter) msg() *snappipb.PatternFlowArpHardwareLengthCounter {
	return obj.obj
}

func (obj *patternFlowArpHardwareLengthCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpHardwareLengthCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpHardwareLengthCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpHardwareLengthCounter interface {
	msg() *snappipb.PatternFlowArpHardwareLengthCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowArpHardwareLengthCounter
	Step() int32
	SetStep(value int32) PatternFlowArpHardwareLengthCounter
	Count() int32
	SetCount(value int32) PatternFlowArpHardwareLengthCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) SetStart(value int32) PatternFlowArpHardwareLengthCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) SetStep(value int32) PatternFlowArpHardwareLengthCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpHardwareLengthCounter) SetCount(value int32) PatternFlowArpHardwareLengthCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowArpProtocolLengthCounter struct {
	obj *snappipb.PatternFlowArpProtocolLengthCounter
}

func (obj *patternFlowArpProtocolLengthCounter) msg() *snappipb.PatternFlowArpProtocolLengthCounter {
	return obj.obj
}

func (obj *patternFlowArpProtocolLengthCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpProtocolLengthCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpProtocolLengthCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpProtocolLengthCounter interface {
	msg() *snappipb.PatternFlowArpProtocolLengthCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowArpProtocolLengthCounter
	Step() int32
	SetStep(value int32) PatternFlowArpProtocolLengthCounter
	Count() int32
	SetCount(value int32) PatternFlowArpProtocolLengthCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) SetStart(value int32) PatternFlowArpProtocolLengthCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) SetStep(value int32) PatternFlowArpProtocolLengthCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpProtocolLengthCounter) SetCount(value int32) PatternFlowArpProtocolLengthCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowArpOperationCounter struct {
	obj *snappipb.PatternFlowArpOperationCounter
}

func (obj *patternFlowArpOperationCounter) msg() *snappipb.PatternFlowArpOperationCounter {
	return obj.obj
}

func (obj *patternFlowArpOperationCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpOperationCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpOperationCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpOperationCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpOperationCounter interface {
	msg() *snappipb.PatternFlowArpOperationCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowArpOperationCounter
	Step() int32
	SetStep(value int32) PatternFlowArpOperationCounter
	Count() int32
	SetCount(value int32) PatternFlowArpOperationCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowArpOperationCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpOperationCounter) SetStart(value int32) PatternFlowArpOperationCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowArpOperationCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpOperationCounter) SetStep(value int32) PatternFlowArpOperationCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpOperationCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpOperationCounter) SetCount(value int32) PatternFlowArpOperationCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowArpSenderHardwareAddrCounter struct {
	obj *snappipb.PatternFlowArpSenderHardwareAddrCounter
}

func (obj *patternFlowArpSenderHardwareAddrCounter) msg() *snappipb.PatternFlowArpSenderHardwareAddrCounter {
	return obj.obj
}

func (obj *patternFlowArpSenderHardwareAddrCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderHardwareAddrCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpSenderHardwareAddrCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderHardwareAddrCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpSenderHardwareAddrCounter interface {
	msg() *snappipb.PatternFlowArpSenderHardwareAddrCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowArpSenderHardwareAddrCounter
	Step() string
	SetStep(value string) PatternFlowArpSenderHardwareAddrCounter
	Count() int32
	SetCount(value int32) PatternFlowArpSenderHardwareAddrCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) SetStart(value string) PatternFlowArpSenderHardwareAddrCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) SetStep(value string) PatternFlowArpSenderHardwareAddrCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpSenderHardwareAddrCounter) SetCount(value int32) PatternFlowArpSenderHardwareAddrCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowArpSenderProtocolAddrCounter struct {
	obj *snappipb.PatternFlowArpSenderProtocolAddrCounter
}

func (obj *patternFlowArpSenderProtocolAddrCounter) msg() *snappipb.PatternFlowArpSenderProtocolAddrCounter {
	return obj.obj
}

func (obj *patternFlowArpSenderProtocolAddrCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderProtocolAddrCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpSenderProtocolAddrCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpSenderProtocolAddrCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpSenderProtocolAddrCounter interface {
	msg() *snappipb.PatternFlowArpSenderProtocolAddrCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowArpSenderProtocolAddrCounter
	Step() string
	SetStep(value string) PatternFlowArpSenderProtocolAddrCounter
	Count() int32
	SetCount(value int32) PatternFlowArpSenderProtocolAddrCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) SetStart(value string) PatternFlowArpSenderProtocolAddrCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) SetStep(value string) PatternFlowArpSenderProtocolAddrCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpSenderProtocolAddrCounter) SetCount(value int32) PatternFlowArpSenderProtocolAddrCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowArpTargetHardwareAddrCounter struct {
	obj *snappipb.PatternFlowArpTargetHardwareAddrCounter
}

func (obj *patternFlowArpTargetHardwareAddrCounter) msg() *snappipb.PatternFlowArpTargetHardwareAddrCounter {
	return obj.obj
}

func (obj *patternFlowArpTargetHardwareAddrCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetHardwareAddrCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpTargetHardwareAddrCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetHardwareAddrCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpTargetHardwareAddrCounter interface {
	msg() *snappipb.PatternFlowArpTargetHardwareAddrCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowArpTargetHardwareAddrCounter
	Step() string
	SetStep(value string) PatternFlowArpTargetHardwareAddrCounter
	Count() int32
	SetCount(value int32) PatternFlowArpTargetHardwareAddrCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) SetStart(value string) PatternFlowArpTargetHardwareAddrCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) SetStep(value string) PatternFlowArpTargetHardwareAddrCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpTargetHardwareAddrCounter) SetCount(value int32) PatternFlowArpTargetHardwareAddrCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowArpTargetProtocolAddrCounter struct {
	obj *snappipb.PatternFlowArpTargetProtocolAddrCounter
}

func (obj *patternFlowArpTargetProtocolAddrCounter) msg() *snappipb.PatternFlowArpTargetProtocolAddrCounter {
	return obj.obj
}

func (obj *patternFlowArpTargetProtocolAddrCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetProtocolAddrCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowArpTargetProtocolAddrCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowArpTargetProtocolAddrCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowArpTargetProtocolAddrCounter interface {
	msg() *snappipb.PatternFlowArpTargetProtocolAddrCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowArpTargetProtocolAddrCounter
	Step() string
	SetStep(value string) PatternFlowArpTargetProtocolAddrCounter
	Count() int32
	SetCount(value int32) PatternFlowArpTargetProtocolAddrCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) SetStart(value string) PatternFlowArpTargetProtocolAddrCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) SetStep(value string) PatternFlowArpTargetProtocolAddrCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowArpTargetProtocolAddrCounter) SetCount(value int32) PatternFlowArpTargetProtocolAddrCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIcmpEchoType struct {
	obj *snappipb.PatternFlowIcmpEchoType
}

func (obj *patternFlowIcmpEchoType) msg() *snappipb.PatternFlowIcmpEchoType {
	return obj.obj
}

func (obj *patternFlowIcmpEchoType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpEchoType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpEchoType interface {
	msg() *snappipb.PatternFlowIcmpEchoType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIcmpEchoType
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpEchoType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpEchoType
	Increment() PatternFlowIcmpEchoTypeCounter
	Decrement() PatternFlowIcmpEchoTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoType) SetValue(value int32) PatternFlowIcmpEchoType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpEchoType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoType) SetValues(value []int32) PatternFlowIcmpEchoType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoType) SetMetricGroup(value string) PatternFlowIcmpEchoType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIcmpEchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoType) Increment() PatternFlowIcmpEchoTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIcmpEchoTypeCounter{}
	}
	return &patternFlowIcmpEchoTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIcmpEchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoType) Decrement() PatternFlowIcmpEchoTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIcmpEchoTypeCounter{}
	}
	return &patternFlowIcmpEchoTypeCounter{obj: obj.obj.Decrement}

}

type patternFlowIcmpEchoCode struct {
	obj *snappipb.PatternFlowIcmpEchoCode
}

func (obj *patternFlowIcmpEchoCode) msg() *snappipb.PatternFlowIcmpEchoCode {
	return obj.obj
}

func (obj *patternFlowIcmpEchoCode) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoCode) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpEchoCode) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoCode) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpEchoCode interface {
	msg() *snappipb.PatternFlowIcmpEchoCode
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIcmpEchoCode
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpEchoCode
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpEchoCode
	Increment() PatternFlowIcmpEchoCodeCounter
	Decrement() PatternFlowIcmpEchoCodeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCode) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoCode) SetValue(value int32) PatternFlowIcmpEchoCode {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpEchoCode) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoCode) SetValues(value []int32) PatternFlowIcmpEchoCode {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoCode) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoCode) SetMetricGroup(value string) PatternFlowIcmpEchoCode {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIcmpEchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoCode) Increment() PatternFlowIcmpEchoCodeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIcmpEchoCodeCounter{}
	}
	return &patternFlowIcmpEchoCodeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIcmpEchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpEchoCode) Decrement() PatternFlowIcmpEchoCodeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIcmpEchoCodeCounter{}
	}
	return &patternFlowIcmpEchoCodeCounter{obj: obj.obj.Decrement}

}

type patternFlowIcmpEchoChecksum struct {
	obj *snappipb.PatternFlowIcmpEchoChecksum
}

func (obj *patternFlowIcmpEchoChecksum) msg() *snappipb.PatternFlowIcmpEchoChecksum {
	return obj.obj
}

func (obj *patternFlowIcmpEchoChecksum) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoChecksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpEchoChecksum) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoChecksum) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpEchoChecksum interface {
	msg() *snappipb.PatternFlowIcmpEchoChecksum
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Custom() int32
	SetCustom(value int32) PatternFlowIcmpEchoChecksum
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIcmpEchoChecksum) Custom() int32 {
	return *obj.obj.Custom
}

// SetCustom sets the int32 value in the None object
//  A custom checksum value
func (obj *patternFlowIcmpEchoChecksum) SetCustom(value int32) PatternFlowIcmpEchoChecksum {
	obj.obj.Custom = &value
	return obj
}

type patternFlowIcmpEchoIdentifier struct {
	obj *snappipb.PatternFlowIcmpEchoIdentifier
}

func (obj *patternFlowIcmpEchoIdentifier) msg() *snappipb.PatternFlowIcmpEchoIdentifier {
	return obj.obj
}

func (obj *patternFlowIcmpEchoIdentifier) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoIdentifier) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpEchoIdentifier) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoIdentifier) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpEchoIdentifier interface {
	msg() *snappipb.PatternFlowIcmpEchoIdentifier
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIcmpEchoIdentifier
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpEchoIdentifier
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpEchoIdentifier
	Increment() PatternFlowIcmpEchoIdentifierCounter
	Decrement() PatternFlowIcmpEchoIdentifierCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) SetValue(value int32) PatternFlowIcmpEchoIdentifier {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) SetValues(value []int32) PatternFlowIcmpEchoIdentifier {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoIdentifier) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoIdentifier) SetMetricGroup(value string) PatternFlowIcmpEchoIdentifier {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIcmpEchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) Increment() PatternFlowIcmpEchoIdentifierCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIcmpEchoIdentifierCounter{}
	}
	return &patternFlowIcmpEchoIdentifierCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIcmpEchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifier) Decrement() PatternFlowIcmpEchoIdentifierCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIcmpEchoIdentifierCounter{}
	}
	return &patternFlowIcmpEchoIdentifierCounter{obj: obj.obj.Decrement}

}

type patternFlowIcmpEchoSequenceNumber struct {
	obj *snappipb.PatternFlowIcmpEchoSequenceNumber
}

func (obj *patternFlowIcmpEchoSequenceNumber) msg() *snappipb.PatternFlowIcmpEchoSequenceNumber {
	return obj.obj
}

func (obj *patternFlowIcmpEchoSequenceNumber) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoSequenceNumber) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpEchoSequenceNumber) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoSequenceNumber) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpEchoSequenceNumber interface {
	msg() *snappipb.PatternFlowIcmpEchoSequenceNumber
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIcmpEchoSequenceNumber
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpEchoSequenceNumber
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpEchoSequenceNumber
	Increment() PatternFlowIcmpEchoSequenceNumberCounter
	Decrement() PatternFlowIcmpEchoSequenceNumberCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) SetValue(value int32) PatternFlowIcmpEchoSequenceNumber {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) SetValues(value []int32) PatternFlowIcmpEchoSequenceNumber {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoSequenceNumber) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpEchoSequenceNumber) SetMetricGroup(value string) PatternFlowIcmpEchoSequenceNumber {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIcmpEchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) Increment() PatternFlowIcmpEchoSequenceNumberCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIcmpEchoSequenceNumberCounter{}
	}
	return &patternFlowIcmpEchoSequenceNumberCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIcmpEchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumber) Decrement() PatternFlowIcmpEchoSequenceNumberCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIcmpEchoSequenceNumberCounter{}
	}
	return &patternFlowIcmpEchoSequenceNumberCounter{obj: obj.obj.Decrement}

}

type patternFlowIcmpv6EchoType struct {
	obj *snappipb.PatternFlowIcmpv6EchoType
}

func (obj *patternFlowIcmpv6EchoType) msg() *snappipb.PatternFlowIcmpv6EchoType {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoType) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoType) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpv6EchoType) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoType) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpv6EchoType interface {
	msg() *snappipb.PatternFlowIcmpv6EchoType
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIcmpv6EchoType
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpv6EchoType
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpv6EchoType
	Increment() PatternFlowIcmpv6EchoTypeCounter
	Decrement() PatternFlowIcmpv6EchoTypeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) SetValue(value int32) PatternFlowIcmpv6EchoType {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) SetValues(value []int32) PatternFlowIcmpv6EchoType {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoType) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoType) SetMetricGroup(value string) PatternFlowIcmpv6EchoType {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIcmpv6EchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) Increment() PatternFlowIcmpv6EchoTypeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIcmpv6EchoTypeCounter{}
	}
	return &patternFlowIcmpv6EchoTypeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIcmpv6EchoTypeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoType) Decrement() PatternFlowIcmpv6EchoTypeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIcmpv6EchoTypeCounter{}
	}
	return &patternFlowIcmpv6EchoTypeCounter{obj: obj.obj.Decrement}

}

type patternFlowIcmpv6EchoCode struct {
	obj *snappipb.PatternFlowIcmpv6EchoCode
}

func (obj *patternFlowIcmpv6EchoCode) msg() *snappipb.PatternFlowIcmpv6EchoCode {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoCode) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoCode) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpv6EchoCode) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoCode) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpv6EchoCode interface {
	msg() *snappipb.PatternFlowIcmpv6EchoCode
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIcmpv6EchoCode
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpv6EchoCode
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpv6EchoCode
	Increment() PatternFlowIcmpv6EchoCodeCounter
	Decrement() PatternFlowIcmpv6EchoCodeCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) SetValue(value int32) PatternFlowIcmpv6EchoCode {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) SetValues(value []int32) PatternFlowIcmpv6EchoCode {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoCode) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoCode) SetMetricGroup(value string) PatternFlowIcmpv6EchoCode {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIcmpv6EchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) Increment() PatternFlowIcmpv6EchoCodeCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIcmpv6EchoCodeCounter{}
	}
	return &patternFlowIcmpv6EchoCodeCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIcmpv6EchoCodeCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoCode) Decrement() PatternFlowIcmpv6EchoCodeCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIcmpv6EchoCodeCounter{}
	}
	return &patternFlowIcmpv6EchoCodeCounter{obj: obj.obj.Decrement}

}

type patternFlowIcmpv6EchoIdentifier struct {
	obj *snappipb.PatternFlowIcmpv6EchoIdentifier
}

func (obj *patternFlowIcmpv6EchoIdentifier) msg() *snappipb.PatternFlowIcmpv6EchoIdentifier {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoIdentifier) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoIdentifier) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpv6EchoIdentifier) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoIdentifier) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpv6EchoIdentifier interface {
	msg() *snappipb.PatternFlowIcmpv6EchoIdentifier
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIcmpv6EchoIdentifier
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpv6EchoIdentifier
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpv6EchoIdentifier
	Increment() PatternFlowIcmpv6EchoIdentifierCounter
	Decrement() PatternFlowIcmpv6EchoIdentifierCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) SetValue(value int32) PatternFlowIcmpv6EchoIdentifier {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) SetValues(value []int32) PatternFlowIcmpv6EchoIdentifier {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoIdentifier) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoIdentifier) SetMetricGroup(value string) PatternFlowIcmpv6EchoIdentifier {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIcmpv6EchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) Increment() PatternFlowIcmpv6EchoIdentifierCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIcmpv6EchoIdentifierCounter{}
	}
	return &patternFlowIcmpv6EchoIdentifierCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIcmpv6EchoIdentifierCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifier) Decrement() PatternFlowIcmpv6EchoIdentifierCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIcmpv6EchoIdentifierCounter{}
	}
	return &patternFlowIcmpv6EchoIdentifierCounter{obj: obj.obj.Decrement}

}

type patternFlowIcmpv6EchoSequenceNumber struct {
	obj *snappipb.PatternFlowIcmpv6EchoSequenceNumber
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) msg() *snappipb.PatternFlowIcmpv6EchoSequenceNumber {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoSequenceNumber) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpv6EchoSequenceNumber interface {
	msg() *snappipb.PatternFlowIcmpv6EchoSequenceNumber
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIcmpv6EchoSequenceNumber
	Values() []int32
	SetValues(value []int32) PatternFlowIcmpv6EchoSequenceNumber
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIcmpv6EchoSequenceNumber
	Increment() PatternFlowIcmpv6EchoSequenceNumberCounter
	Decrement() PatternFlowIcmpv6EchoSequenceNumberCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) SetValue(value int32) PatternFlowIcmpv6EchoSequenceNumber {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) SetValues(value []int32) PatternFlowIcmpv6EchoSequenceNumber {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoSequenceNumber) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIcmpv6EchoSequenceNumber) SetMetricGroup(value string) PatternFlowIcmpv6EchoSequenceNumber {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIcmpv6EchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) Increment() PatternFlowIcmpv6EchoSequenceNumberCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIcmpv6EchoSequenceNumberCounter{}
	}
	return &patternFlowIcmpv6EchoSequenceNumberCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIcmpv6EchoSequenceNumberCounter
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumber) Decrement() PatternFlowIcmpv6EchoSequenceNumberCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIcmpv6EchoSequenceNumberCounter{}
	}
	return &patternFlowIcmpv6EchoSequenceNumberCounter{obj: obj.obj.Decrement}

}

type patternFlowIcmpv6EchoChecksum struct {
	obj *snappipb.PatternFlowIcmpv6EchoChecksum
}

func (obj *patternFlowIcmpv6EchoChecksum) msg() *snappipb.PatternFlowIcmpv6EchoChecksum {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoChecksum) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoChecksum) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpv6EchoChecksum) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoChecksum) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpv6EchoChecksum interface {
	msg() *snappipb.PatternFlowIcmpv6EchoChecksum
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Custom() int32
	SetCustom(value int32) PatternFlowIcmpv6EchoChecksum
}

// Custom returns a int32
//  A custom checksum value
func (obj *patternFlowIcmpv6EchoChecksum) Custom() int32 {
	return *obj.obj.Custom
}

// SetCustom sets the int32 value in the None object
//  A custom checksum value
func (obj *patternFlowIcmpv6EchoChecksum) SetCustom(value int32) PatternFlowIcmpv6EchoChecksum {
	obj.obj.Custom = &value
	return obj
}

type patternFlowPppAddressCounter struct {
	obj *snappipb.PatternFlowPppAddressCounter
}

func (obj *patternFlowPppAddressCounter) msg() *snappipb.PatternFlowPppAddressCounter {
	return obj.obj
}

func (obj *patternFlowPppAddressCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppAddressCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPppAddressCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppAddressCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPppAddressCounter interface {
	msg() *snappipb.PatternFlowPppAddressCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPppAddressCounter
	Step() int32
	SetStep(value int32) PatternFlowPppAddressCounter
	Count() int32
	SetCount(value int32) PatternFlowPppAddressCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPppAddressCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppAddressCounter) SetStart(value int32) PatternFlowPppAddressCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPppAddressCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppAddressCounter) SetStep(value int32) PatternFlowPppAddressCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPppAddressCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppAddressCounter) SetCount(value int32) PatternFlowPppAddressCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPppControlCounter struct {
	obj *snappipb.PatternFlowPppControlCounter
}

func (obj *patternFlowPppControlCounter) msg() *snappipb.PatternFlowPppControlCounter {
	return obj.obj
}

func (obj *patternFlowPppControlCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppControlCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPppControlCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppControlCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPppControlCounter interface {
	msg() *snappipb.PatternFlowPppControlCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPppControlCounter
	Step() int32
	SetStep(value int32) PatternFlowPppControlCounter
	Count() int32
	SetCount(value int32) PatternFlowPppControlCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPppControlCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppControlCounter) SetStart(value int32) PatternFlowPppControlCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPppControlCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppControlCounter) SetStep(value int32) PatternFlowPppControlCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPppControlCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppControlCounter) SetCount(value int32) PatternFlowPppControlCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowPppProtocolTypeCounter struct {
	obj *snappipb.PatternFlowPppProtocolTypeCounter
}

func (obj *patternFlowPppProtocolTypeCounter) msg() *snappipb.PatternFlowPppProtocolTypeCounter {
	return obj.obj
}

func (obj *patternFlowPppProtocolTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppProtocolTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowPppProtocolTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowPppProtocolTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowPppProtocolTypeCounter interface {
	msg() *snappipb.PatternFlowPppProtocolTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowPppProtocolTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowPppProtocolTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowPppProtocolTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) SetStart(value int32) PatternFlowPppProtocolTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) SetStep(value int32) PatternFlowPppProtocolTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowPppProtocolTypeCounter) SetCount(value int32) PatternFlowPppProtocolTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIgmpv1VersionCounter struct {
	obj *snappipb.PatternFlowIgmpv1VersionCounter
}

func (obj *patternFlowIgmpv1VersionCounter) msg() *snappipb.PatternFlowIgmpv1VersionCounter {
	return obj.obj
}

func (obj *patternFlowIgmpv1VersionCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1VersionCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIgmpv1VersionCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1VersionCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIgmpv1VersionCounter interface {
	msg() *snappipb.PatternFlowIgmpv1VersionCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIgmpv1VersionCounter
	Step() int32
	SetStep(value int32) PatternFlowIgmpv1VersionCounter
	Count() int32
	SetCount(value int32) PatternFlowIgmpv1VersionCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) SetStart(value int32) PatternFlowIgmpv1VersionCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) SetStep(value int32) PatternFlowIgmpv1VersionCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1VersionCounter) SetCount(value int32) PatternFlowIgmpv1VersionCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIgmpv1TypeCounter struct {
	obj *snappipb.PatternFlowIgmpv1TypeCounter
}

func (obj *patternFlowIgmpv1TypeCounter) msg() *snappipb.PatternFlowIgmpv1TypeCounter {
	return obj.obj
}

func (obj *patternFlowIgmpv1TypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1TypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIgmpv1TypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1TypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIgmpv1TypeCounter interface {
	msg() *snappipb.PatternFlowIgmpv1TypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIgmpv1TypeCounter
	Step() int32
	SetStep(value int32) PatternFlowIgmpv1TypeCounter
	Count() int32
	SetCount(value int32) PatternFlowIgmpv1TypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) SetStart(value int32) PatternFlowIgmpv1TypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) SetStep(value int32) PatternFlowIgmpv1TypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1TypeCounter) SetCount(value int32) PatternFlowIgmpv1TypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIgmpv1UnusedCounter struct {
	obj *snappipb.PatternFlowIgmpv1UnusedCounter
}

func (obj *patternFlowIgmpv1UnusedCounter) msg() *snappipb.PatternFlowIgmpv1UnusedCounter {
	return obj.obj
}

func (obj *patternFlowIgmpv1UnusedCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1UnusedCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIgmpv1UnusedCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1UnusedCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIgmpv1UnusedCounter interface {
	msg() *snappipb.PatternFlowIgmpv1UnusedCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIgmpv1UnusedCounter
	Step() int32
	SetStep(value int32) PatternFlowIgmpv1UnusedCounter
	Count() int32
	SetCount(value int32) PatternFlowIgmpv1UnusedCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) SetStart(value int32) PatternFlowIgmpv1UnusedCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) SetStep(value int32) PatternFlowIgmpv1UnusedCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1UnusedCounter) SetCount(value int32) PatternFlowIgmpv1UnusedCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIgmpv1GroupAddressCounter struct {
	obj *snappipb.PatternFlowIgmpv1GroupAddressCounter
}

func (obj *patternFlowIgmpv1GroupAddressCounter) msg() *snappipb.PatternFlowIgmpv1GroupAddressCounter {
	return obj.obj
}

func (obj *patternFlowIgmpv1GroupAddressCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1GroupAddressCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIgmpv1GroupAddressCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIgmpv1GroupAddressCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIgmpv1GroupAddressCounter interface {
	msg() *snappipb.PatternFlowIgmpv1GroupAddressCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() string
	SetStart(value string) PatternFlowIgmpv1GroupAddressCounter
	Step() string
	SetStep(value string) PatternFlowIgmpv1GroupAddressCounter
	Count() int32
	SetCount(value int32) PatternFlowIgmpv1GroupAddressCounter
}

// Start returns a string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) Start() string {
	return *obj.obj.Start
}

// SetStart sets the string value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) SetStart(value string) PatternFlowIgmpv1GroupAddressCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a string
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) Step() string {
	return *obj.obj.Step
}

// SetStep sets the string value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) SetStep(value string) PatternFlowIgmpv1GroupAddressCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIgmpv1GroupAddressCounter) SetCount(value int32) PatternFlowIgmpv1GroupAddressCounter {
	obj.obj.Count = &value
	return obj
}

type deviceBgpSrTePolicyNextHop struct {
	obj *snappipb.DeviceBgpSrTePolicyNextHop
}

func (obj *deviceBgpSrTePolicyNextHop) msg() *snappipb.DeviceBgpSrTePolicyNextHop {
	return obj.obj
}

func (obj *deviceBgpSrTePolicyNextHop) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpSrTePolicyNextHop) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpSrTePolicyNextHop) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpSrTePolicyNextHop) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpSrTePolicyNextHop interface {
	msg() *snappipb.DeviceBgpSrTePolicyNextHop
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Ipv4Address() string
	SetIpv4Address(value string) DeviceBgpSrTePolicyNextHop
	Ipv6Address() string
	SetIpv6Address(value string) DeviceBgpSrTePolicyNextHop
}

// Ipv4Address returns a string
//  The IPv4 address of the next hop if the next_hop_mode is manual and the next_hop_address_type is IPv4.
func (obj *deviceBgpSrTePolicyNextHop) Ipv4Address() string {
	return *obj.obj.Ipv4Address
}

// SetIpv4Address sets the string value in the None object
//  The IPv4 address of the next hop if the next_hop_mode is manual and the next_hop_address_type is IPv4.
func (obj *deviceBgpSrTePolicyNextHop) SetIpv4Address(value string) DeviceBgpSrTePolicyNextHop {
	obj.obj.Ipv4Address = &value
	return obj
}

// Ipv6Address returns a string
//  The IPv6 address of the next hop if the next_hop_mode is manual and the next_hop_address_type is IPv6.
func (obj *deviceBgpSrTePolicyNextHop) Ipv6Address() string {
	return *obj.obj.Ipv6Address
}

// SetIpv6Address sets the string value in the None object
//  The IPv6 address of the next hop if the next_hop_mode is manual and the next_hop_address_type is IPv6.
func (obj *deviceBgpSrTePolicyNextHop) SetIpv6Address(value string) DeviceBgpSrTePolicyNextHop {
	obj.obj.Ipv6Address = &value
	return obj
}

type deviceBgpAddPath struct {
	obj *snappipb.DeviceBgpAddPath
}

func (obj *deviceBgpAddPath) msg() *snappipb.DeviceBgpAddPath {
	return obj.obj
}

func (obj *deviceBgpAddPath) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpAddPath) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpAddPath) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpAddPath) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpAddPath interface {
	msg() *snappipb.DeviceBgpAddPath
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	PathId() int32
	SetPathId(value int32) DeviceBgpAddPath
}

// PathId returns a int32
//  The id of the additional path.
func (obj *deviceBgpAddPath) PathId() int32 {
	return *obj.obj.PathId
}

// SetPathId sets the int32 value in the None object
//  The id of the additional path.
func (obj *deviceBgpAddPath) SetPathId(value int32) DeviceBgpAddPath {
	obj.obj.PathId = &value
	return obj
}

type deviceBgpAsPath struct {
	obj *snappipb.DeviceBgpAsPath
}

func (obj *deviceBgpAsPath) msg() *snappipb.DeviceBgpAsPath {
	return obj.obj
}

func (obj *deviceBgpAsPath) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpAsPath) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpAsPath) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpAsPath) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpAsPath interface {
	msg() *snappipb.DeviceBgpAsPath
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	OverridePeerAsSetMode() bool
	SetOverridePeerAsSetMode(value bool) DeviceBgpAsPath
	AsPathSegments() DeviceBgpAsPathDeviceBgpAsPathSegmentIter
}

// OverridePeerAsSetMode returns a bool
//  TBD
func (obj *deviceBgpAsPath) OverridePeerAsSetMode() bool {
	return *obj.obj.OverridePeerAsSetMode
}

// SetOverridePeerAsSetMode sets the bool value in the None object
//  TBD
func (obj *deviceBgpAsPath) SetOverridePeerAsSetMode(value bool) DeviceBgpAsPath {
	obj.obj.OverridePeerAsSetMode = &value
	return obj
}

// AsPathSegments returns a []DeviceBgpAsPathSegment
//  The AS path segments (non random) per route range
func (obj *deviceBgpAsPath) AsPathSegments() DeviceBgpAsPathDeviceBgpAsPathSegmentIter {
	if obj.obj.AsPathSegments == nil {
		obj.obj.AsPathSegments = []*snappipb.DeviceBgpAsPathSegment{}
	}
	return &deviceBgpAsPathDeviceBgpAsPathSegmentIter{obj: obj}

}

type deviceBgpAsPathDeviceBgpAsPathSegmentIter struct {
	obj *deviceBgpAsPath
}

type DeviceBgpAsPathDeviceBgpAsPathSegmentIter interface {
	Add() DeviceBgpAsPathSegment
	Items() []DeviceBgpAsPathSegment
}

func (obj *deviceBgpAsPathDeviceBgpAsPathSegmentIter) Add() DeviceBgpAsPathSegment {
	newObj := &snappipb.DeviceBgpAsPathSegment{}
	obj.obj.obj.AsPathSegments = append(obj.obj.obj.AsPathSegments, newObj)
	return &deviceBgpAsPathSegment{obj: newObj}
}

func (obj *deviceBgpAsPathDeviceBgpAsPathSegmentIter) Items() []DeviceBgpAsPathSegment {
	slice := []DeviceBgpAsPathSegment{}
	for _, item := range obj.obj.obj.AsPathSegments {
		slice = append(slice, &deviceBgpAsPathSegment{obj: item})
	}
	return slice
}

type deviceBgpTunnelTlv struct {
	obj *snappipb.DeviceBgpTunnelTlv
}

func (obj *deviceBgpTunnelTlv) msg() *snappipb.DeviceBgpTunnelTlv {
	return obj.obj
}

func (obj *deviceBgpTunnelTlv) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpTunnelTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpTunnelTlv) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpTunnelTlv) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpTunnelTlv interface {
	msg() *snappipb.DeviceBgpTunnelTlv
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	SegmentLists() DeviceBgpTunnelTlvDeviceBgpSegmentListIter
	RemoteEndpointSubTlv() DeviceBgpRemoteEndpointSubTlv
	PreferenceSubTlv() DeviceBgpPreferenceSubTlv
	BindingSubTlv() DeviceBgpBindingSubTlv
	ExplicitNullLabelPolicySubTlv() DeviceBgpExplicitNullLabelPolicySubTlv
	Active() bool
	SetActive(value bool) DeviceBgpTunnelTlv
}

// SegmentLists returns a []DeviceBgpSegmentList
//  description is TBD
func (obj *deviceBgpTunnelTlv) SegmentLists() DeviceBgpTunnelTlvDeviceBgpSegmentListIter {
	if obj.obj.SegmentLists == nil {
		obj.obj.SegmentLists = []*snappipb.DeviceBgpSegmentList{}
	}
	return &deviceBgpTunnelTlvDeviceBgpSegmentListIter{obj: obj}

}

type deviceBgpTunnelTlvDeviceBgpSegmentListIter struct {
	obj *deviceBgpTunnelTlv
}

type DeviceBgpTunnelTlvDeviceBgpSegmentListIter interface {
	Add() DeviceBgpSegmentList
	Items() []DeviceBgpSegmentList
}

func (obj *deviceBgpTunnelTlvDeviceBgpSegmentListIter) Add() DeviceBgpSegmentList {
	newObj := &snappipb.DeviceBgpSegmentList{}
	obj.obj.obj.SegmentLists = append(obj.obj.obj.SegmentLists, newObj)
	return &deviceBgpSegmentList{obj: newObj}
}

func (obj *deviceBgpTunnelTlvDeviceBgpSegmentListIter) Items() []DeviceBgpSegmentList {
	slice := []DeviceBgpSegmentList{}
	for _, item := range obj.obj.obj.SegmentLists {
		slice = append(slice, &deviceBgpSegmentList{obj: item})
	}
	return slice
}

// RemoteEndpointSubTlv returns a DeviceBgpRemoteEndpointSubTlv
//  description is TBD
func (obj *deviceBgpTunnelTlv) RemoteEndpointSubTlv() DeviceBgpRemoteEndpointSubTlv {
	if obj.obj.RemoteEndpointSubTlv == nil {
		obj.obj.RemoteEndpointSubTlv = &snappipb.DeviceBgpRemoteEndpointSubTlv{}
	}
	return &deviceBgpRemoteEndpointSubTlv{obj: obj.obj.RemoteEndpointSubTlv}

}

// PreferenceSubTlv returns a DeviceBgpPreferenceSubTlv
//  description is TBD
func (obj *deviceBgpTunnelTlv) PreferenceSubTlv() DeviceBgpPreferenceSubTlv {
	if obj.obj.PreferenceSubTlv == nil {
		obj.obj.PreferenceSubTlv = &snappipb.DeviceBgpPreferenceSubTlv{}
	}
	return &deviceBgpPreferenceSubTlv{obj: obj.obj.PreferenceSubTlv}

}

// BindingSubTlv returns a DeviceBgpBindingSubTlv
//  description is TBD
func (obj *deviceBgpTunnelTlv) BindingSubTlv() DeviceBgpBindingSubTlv {
	if obj.obj.BindingSubTlv == nil {
		obj.obj.BindingSubTlv = &snappipb.DeviceBgpBindingSubTlv{}
	}
	return &deviceBgpBindingSubTlv{obj: obj.obj.BindingSubTlv}

}

// ExplicitNullLabelPolicySubTlv returns a DeviceBgpExplicitNullLabelPolicySubTlv
//  description is TBD
func (obj *deviceBgpTunnelTlv) ExplicitNullLabelPolicySubTlv() DeviceBgpExplicitNullLabelPolicySubTlv {
	if obj.obj.ExplicitNullLabelPolicySubTlv == nil {
		obj.obj.ExplicitNullLabelPolicySubTlv = &snappipb.DeviceBgpExplicitNullLabelPolicySubTlv{}
	}
	return &deviceBgpExplicitNullLabelPolicySubTlv{obj: obj.obj.ExplicitNullLabelPolicySubTlv}

}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *deviceBgpTunnelTlv) Active() bool {
	return *obj.obj.Active
}

// SetActive sets the bool value in the None object
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *deviceBgpTunnelTlv) SetActive(value bool) DeviceBgpTunnelTlv {
	obj.obj.Active = &value
	return obj
}

type deviceBgpCommunity struct {
	obj *snappipb.DeviceBgpCommunity
}

func (obj *deviceBgpCommunity) msg() *snappipb.DeviceBgpCommunity {
	return obj.obj
}

func (obj *deviceBgpCommunity) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpCommunity) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpCommunity) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpCommunity) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpCommunity interface {
	msg() *snappipb.DeviceBgpCommunity
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	AsNumber() int32
	SetAsNumber(value int32) DeviceBgpCommunity
	AsCustom() int32
	SetAsCustom(value int32) DeviceBgpCommunity
}

// AsNumber returns a int32
//  First two octets of 32 bit community AS number
func (obj *deviceBgpCommunity) AsNumber() int32 {
	return *obj.obj.AsNumber
}

// SetAsNumber sets the int32 value in the None object
//  First two octets of 32 bit community AS number
func (obj *deviceBgpCommunity) SetAsNumber(value int32) DeviceBgpCommunity {
	obj.obj.AsNumber = &value
	return obj
}

// AsCustom returns a int32
//  Last two octets of the community AS number
func (obj *deviceBgpCommunity) AsCustom() int32 {
	return *obj.obj.AsCustom
}

// SetAsCustom sets the int32 value in the None object
//  Last two octets of the community AS number
func (obj *deviceBgpCommunity) SetAsCustom(value int32) DeviceBgpCommunity {
	obj.obj.AsCustom = &value
	return obj
}

type deviceBgpv4RouteAddress struct {
	obj *snappipb.DeviceBgpv4RouteAddress
}

func (obj *deviceBgpv4RouteAddress) msg() *snappipb.DeviceBgpv4RouteAddress {
	return obj.obj
}

func (obj *deviceBgpv4RouteAddress) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv4RouteAddress) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpv4RouteAddress) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv4RouteAddress) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpv4RouteAddress interface {
	msg() *snappipb.DeviceBgpv4RouteAddress
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Address() string
	SetAddress(value string) DeviceBgpv4RouteAddress
	Prefix() int32
	SetPrefix(value int32) DeviceBgpv4RouteAddress
	Count() int32
	SetCount(value int32) DeviceBgpv4RouteAddress
	Step() int32
	SetStep(value int32) DeviceBgpv4RouteAddress
}

// Address returns a string
//  The starting address of the network
func (obj *deviceBgpv4RouteAddress) Address() string {
	return obj.obj.Address
}

// SetAddress sets the string value in the None object
//  The starting address of the network
func (obj *deviceBgpv4RouteAddress) SetAddress(value string) DeviceBgpv4RouteAddress {
	obj.obj.Address = value
	return obj
}

// Prefix returns a int32
//  The IPv4 network prefix to be applied to the address.
func (obj *deviceBgpv4RouteAddress) Prefix() int32 {
	return *obj.obj.Prefix
}

// SetPrefix sets the int32 value in the None object
//  The IPv4 network prefix to be applied to the address.
func (obj *deviceBgpv4RouteAddress) SetPrefix(value int32) DeviceBgpv4RouteAddress {
	obj.obj.Prefix = &value
	return obj
}

// Count returns a int32
//  The total number of addresses in the range
func (obj *deviceBgpv4RouteAddress) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  The total number of addresses in the range
func (obj *deviceBgpv4RouteAddress) SetCount(value int32) DeviceBgpv4RouteAddress {
	obj.obj.Count = &value
	return obj
}

// Step returns a int32
//  The amount to increase each address by
func (obj *deviceBgpv4RouteAddress) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  The amount to increase each address by
func (obj *deviceBgpv4RouteAddress) SetStep(value int32) DeviceBgpv4RouteAddress {
	obj.obj.Step = &value
	return obj
}

type deviceBgpRouteAdvanced struct {
	obj *snappipb.DeviceBgpRouteAdvanced
}

func (obj *deviceBgpRouteAdvanced) msg() *snappipb.DeviceBgpRouteAdvanced {
	return obj.obj
}

func (obj *deviceBgpRouteAdvanced) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpRouteAdvanced) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpRouteAdvanced) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpRouteAdvanced) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpRouteAdvanced interface {
	msg() *snappipb.DeviceBgpRouteAdvanced
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	MultiExitDiscriminator() int32
	SetMultiExitDiscriminator(value int32) DeviceBgpRouteAdvanced
}

// MultiExitDiscriminator returns a int32
//  The multi exit discriminator (MED) value.  A null value means the MED feature is not enabled.
func (obj *deviceBgpRouteAdvanced) MultiExitDiscriminator() int32 {
	return *obj.obj.MultiExitDiscriminator
}

// SetMultiExitDiscriminator sets the int32 value in the None object
//  The multi exit discriminator (MED) value.  A null value means the MED feature is not enabled.
func (obj *deviceBgpRouteAdvanced) SetMultiExitDiscriminator(value int32) DeviceBgpRouteAdvanced {
	obj.obj.MultiExitDiscriminator = &value
	return obj
}

type deviceBgpv6RouteAddress struct {
	obj *snappipb.DeviceBgpv6RouteAddress
}

func (obj *deviceBgpv6RouteAddress) msg() *snappipb.DeviceBgpv6RouteAddress {
	return obj.obj
}

func (obj *deviceBgpv6RouteAddress) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv6RouteAddress) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpv6RouteAddress) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpv6RouteAddress) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpv6RouteAddress interface {
	msg() *snappipb.DeviceBgpv6RouteAddress
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Address() string
	SetAddress(value string) DeviceBgpv6RouteAddress
	Prefix() int32
	SetPrefix(value int32) DeviceBgpv6RouteAddress
	Count() int32
	SetCount(value int32) DeviceBgpv6RouteAddress
	Step() int32
	SetStep(value int32) DeviceBgpv6RouteAddress
}

// Address returns a string
//  The starting address of the network
func (obj *deviceBgpv6RouteAddress) Address() string {
	return obj.obj.Address
}

// SetAddress sets the string value in the None object
//  The starting address of the network
func (obj *deviceBgpv6RouteAddress) SetAddress(value string) DeviceBgpv6RouteAddress {
	obj.obj.Address = value
	return obj
}

// Prefix returns a int32
//  The IPv6 network prefix to be applied to the address
func (obj *deviceBgpv6RouteAddress) Prefix() int32 {
	return *obj.obj.Prefix
}

// SetPrefix sets the int32 value in the None object
//  The IPv6 network prefix to be applied to the address
func (obj *deviceBgpv6RouteAddress) SetPrefix(value int32) DeviceBgpv6RouteAddress {
	obj.obj.Prefix = &value
	return obj
}

// Count returns a int32
//  The total number of addresses in the range
func (obj *deviceBgpv6RouteAddress) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  The total number of addresses in the range
func (obj *deviceBgpv6RouteAddress) SetCount(value int32) DeviceBgpv6RouteAddress {
	obj.obj.Count = &value
	return obj
}

// Step returns a int32
//  The amount to increase each address by
func (obj *deviceBgpv6RouteAddress) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  The amount to increase each address by
func (obj *deviceBgpv6RouteAddress) SetStep(value int32) DeviceBgpv6RouteAddress {
	obj.obj.Step = &value
	return obj
}

type patternFlowIpv4PriorityRawCounter struct {
	obj *snappipb.PatternFlowIpv4PriorityRawCounter
}

func (obj *patternFlowIpv4PriorityRawCounter) msg() *snappipb.PatternFlowIpv4PriorityRawCounter {
	return obj.obj
}

func (obj *patternFlowIpv4PriorityRawCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4PriorityRawCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4PriorityRawCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4PriorityRawCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4PriorityRawCounter interface {
	msg() *snappipb.PatternFlowIpv4PriorityRawCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4PriorityRawCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4PriorityRawCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4PriorityRawCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) SetStart(value int32) PatternFlowIpv4PriorityRawCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) SetStep(value int32) PatternFlowIpv4PriorityRawCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4PriorityRawCounter) SetCount(value int32) PatternFlowIpv4PriorityRawCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4TosPrecedence struct {
	obj *snappipb.PatternFlowIpv4TosPrecedence
}

func (obj *patternFlowIpv4TosPrecedence) msg() *snappipb.PatternFlowIpv4TosPrecedence {
	return obj.obj
}

func (obj *patternFlowIpv4TosPrecedence) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosPrecedence) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosPrecedence) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosPrecedence) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosPrecedence interface {
	msg() *snappipb.PatternFlowIpv4TosPrecedence
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosPrecedence
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosPrecedence
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosPrecedence
	Increment() PatternFlowIpv4TosPrecedenceCounter
	Decrement() PatternFlowIpv4TosPrecedenceCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) SetValue(value int32) PatternFlowIpv4TosPrecedence {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) SetValues(value []int32) PatternFlowIpv4TosPrecedence {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosPrecedence) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosPrecedence) SetMetricGroup(value string) PatternFlowIpv4TosPrecedence {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4TosPrecedenceCounter
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) Increment() PatternFlowIpv4TosPrecedenceCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4TosPrecedenceCounter{}
	}
	return &patternFlowIpv4TosPrecedenceCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4TosPrecedenceCounter
//  description is TBD
func (obj *patternFlowIpv4TosPrecedence) Decrement() PatternFlowIpv4TosPrecedenceCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4TosPrecedenceCounter{}
	}
	return &patternFlowIpv4TosPrecedenceCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4TosDelay struct {
	obj *snappipb.PatternFlowIpv4TosDelay
}

func (obj *patternFlowIpv4TosDelay) msg() *snappipb.PatternFlowIpv4TosDelay {
	return obj.obj
}

func (obj *patternFlowIpv4TosDelay) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosDelay) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosDelay) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosDelay) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosDelay interface {
	msg() *snappipb.PatternFlowIpv4TosDelay
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosDelay
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosDelay
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosDelay
	Increment() PatternFlowIpv4TosDelayCounter
	Decrement() PatternFlowIpv4TosDelayCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelay) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosDelay) SetValue(value int32) PatternFlowIpv4TosDelay {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosDelay) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosDelay) SetValues(value []int32) PatternFlowIpv4TosDelay {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosDelay) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosDelay) SetMetricGroup(value string) PatternFlowIpv4TosDelay {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4TosDelayCounter
//  description is TBD
func (obj *patternFlowIpv4TosDelay) Increment() PatternFlowIpv4TosDelayCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4TosDelayCounter{}
	}
	return &patternFlowIpv4TosDelayCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4TosDelayCounter
//  description is TBD
func (obj *patternFlowIpv4TosDelay) Decrement() PatternFlowIpv4TosDelayCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4TosDelayCounter{}
	}
	return &patternFlowIpv4TosDelayCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4TosThroughput struct {
	obj *snappipb.PatternFlowIpv4TosThroughput
}

func (obj *patternFlowIpv4TosThroughput) msg() *snappipb.PatternFlowIpv4TosThroughput {
	return obj.obj
}

func (obj *patternFlowIpv4TosThroughput) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosThroughput) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosThroughput) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosThroughput) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosThroughput interface {
	msg() *snappipb.PatternFlowIpv4TosThroughput
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosThroughput
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosThroughput
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosThroughput
	Increment() PatternFlowIpv4TosThroughputCounter
	Decrement() PatternFlowIpv4TosThroughputCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) SetValue(value int32) PatternFlowIpv4TosThroughput {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) SetValues(value []int32) PatternFlowIpv4TosThroughput {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosThroughput) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosThroughput) SetMetricGroup(value string) PatternFlowIpv4TosThroughput {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4TosThroughputCounter
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) Increment() PatternFlowIpv4TosThroughputCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4TosThroughputCounter{}
	}
	return &patternFlowIpv4TosThroughputCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4TosThroughputCounter
//  description is TBD
func (obj *patternFlowIpv4TosThroughput) Decrement() PatternFlowIpv4TosThroughputCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4TosThroughputCounter{}
	}
	return &patternFlowIpv4TosThroughputCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4TosReliability struct {
	obj *snappipb.PatternFlowIpv4TosReliability
}

func (obj *patternFlowIpv4TosReliability) msg() *snappipb.PatternFlowIpv4TosReliability {
	return obj.obj
}

func (obj *patternFlowIpv4TosReliability) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosReliability) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosReliability) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosReliability) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosReliability interface {
	msg() *snappipb.PatternFlowIpv4TosReliability
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosReliability
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosReliability
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosReliability
	Increment() PatternFlowIpv4TosReliabilityCounter
	Decrement() PatternFlowIpv4TosReliabilityCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliability) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosReliability) SetValue(value int32) PatternFlowIpv4TosReliability {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosReliability) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosReliability) SetValues(value []int32) PatternFlowIpv4TosReliability {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosReliability) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosReliability) SetMetricGroup(value string) PatternFlowIpv4TosReliability {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4TosReliabilityCounter
//  description is TBD
func (obj *patternFlowIpv4TosReliability) Increment() PatternFlowIpv4TosReliabilityCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4TosReliabilityCounter{}
	}
	return &patternFlowIpv4TosReliabilityCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4TosReliabilityCounter
//  description is TBD
func (obj *patternFlowIpv4TosReliability) Decrement() PatternFlowIpv4TosReliabilityCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4TosReliabilityCounter{}
	}
	return &patternFlowIpv4TosReliabilityCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4TosMonetary struct {
	obj *snappipb.PatternFlowIpv4TosMonetary
}

func (obj *patternFlowIpv4TosMonetary) msg() *snappipb.PatternFlowIpv4TosMonetary {
	return obj.obj
}

func (obj *patternFlowIpv4TosMonetary) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosMonetary) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosMonetary) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosMonetary) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosMonetary interface {
	msg() *snappipb.PatternFlowIpv4TosMonetary
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosMonetary
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosMonetary
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosMonetary
	Increment() PatternFlowIpv4TosMonetaryCounter
	Decrement() PatternFlowIpv4TosMonetaryCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) SetValue(value int32) PatternFlowIpv4TosMonetary {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) SetValues(value []int32) PatternFlowIpv4TosMonetary {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosMonetary) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosMonetary) SetMetricGroup(value string) PatternFlowIpv4TosMonetary {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4TosMonetaryCounter
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) Increment() PatternFlowIpv4TosMonetaryCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4TosMonetaryCounter{}
	}
	return &patternFlowIpv4TosMonetaryCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4TosMonetaryCounter
//  description is TBD
func (obj *patternFlowIpv4TosMonetary) Decrement() PatternFlowIpv4TosMonetaryCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4TosMonetaryCounter{}
	}
	return &patternFlowIpv4TosMonetaryCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4TosUnused struct {
	obj *snappipb.PatternFlowIpv4TosUnused
}

func (obj *patternFlowIpv4TosUnused) msg() *snappipb.PatternFlowIpv4TosUnused {
	return obj.obj
}

func (obj *patternFlowIpv4TosUnused) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosUnused) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosUnused) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosUnused) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosUnused interface {
	msg() *snappipb.PatternFlowIpv4TosUnused
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4TosUnused
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4TosUnused
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4TosUnused
	Increment() PatternFlowIpv4TosUnusedCounter
	Decrement() PatternFlowIpv4TosUnusedCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnused) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosUnused) SetValue(value int32) PatternFlowIpv4TosUnused {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4TosUnused) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosUnused) SetValues(value []int32) PatternFlowIpv4TosUnused {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosUnused) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4TosUnused) SetMetricGroup(value string) PatternFlowIpv4TosUnused {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4TosUnusedCounter
//  description is TBD
func (obj *patternFlowIpv4TosUnused) Increment() PatternFlowIpv4TosUnusedCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4TosUnusedCounter{}
	}
	return &patternFlowIpv4TosUnusedCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4TosUnusedCounter
//  description is TBD
func (obj *patternFlowIpv4TosUnused) Decrement() PatternFlowIpv4TosUnusedCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4TosUnusedCounter{}
	}
	return &patternFlowIpv4TosUnusedCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4DscpPhb struct {
	obj *snappipb.PatternFlowIpv4DscpPhb
}

func (obj *patternFlowIpv4DscpPhb) msg() *snappipb.PatternFlowIpv4DscpPhb {
	return obj.obj
}

func (obj *patternFlowIpv4DscpPhb) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpPhb) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4DscpPhb) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpPhb) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4DscpPhb interface {
	msg() *snappipb.PatternFlowIpv4DscpPhb
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4DscpPhb
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4DscpPhb
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4DscpPhb
	Increment() PatternFlowIpv4DscpPhbCounter
	Decrement() PatternFlowIpv4DscpPhbCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) SetValue(value int32) PatternFlowIpv4DscpPhb {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) SetValues(value []int32) PatternFlowIpv4DscpPhb {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DscpPhb) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DscpPhb) SetMetricGroup(value string) PatternFlowIpv4DscpPhb {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4DscpPhbCounter
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) Increment() PatternFlowIpv4DscpPhbCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4DscpPhbCounter{}
	}
	return &patternFlowIpv4DscpPhbCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4DscpPhbCounter
//  description is TBD
func (obj *patternFlowIpv4DscpPhb) Decrement() PatternFlowIpv4DscpPhbCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4DscpPhbCounter{}
	}
	return &patternFlowIpv4DscpPhbCounter{obj: obj.obj.Decrement}

}

type patternFlowIpv4DscpEcn struct {
	obj *snappipb.PatternFlowIpv4DscpEcn
}

func (obj *patternFlowIpv4DscpEcn) msg() *snappipb.PatternFlowIpv4DscpEcn {
	return obj.obj
}

func (obj *patternFlowIpv4DscpEcn) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpEcn) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4DscpEcn) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpEcn) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4DscpEcn interface {
	msg() *snappipb.PatternFlowIpv4DscpEcn
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Value() int32
	SetValue(value int32) PatternFlowIpv4DscpEcn
	Values() []int32
	SetValues(value []int32) PatternFlowIpv4DscpEcn
	MetricGroup() string
	SetMetricGroup(value string) PatternFlowIpv4DscpEcn
	Increment() PatternFlowIpv4DscpEcnCounter
	Decrement() PatternFlowIpv4DscpEcnCounter
}

// Value returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) Value() int32 {
	return *obj.obj.Value
}

// SetValue sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) SetValue(value int32) PatternFlowIpv4DscpEcn {
	obj.obj.Value = &value
	return obj
}

// Values returns a []int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) Values() []int32 {
	return obj.obj.Values
}

// SetValues sets the []int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) SetValues(value []int32) PatternFlowIpv4DscpEcn {
	obj.obj.Values = value
	return obj
}

// MetricGroup returns a string
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DscpEcn) MetricGroup() string {
	return *obj.obj.MetricGroup
}

// SetMetricGroup sets the string value in the None object
//  A unique name is used to indicate to the system that the field may extend the metric row key and create an aggregate metric row for every unique value. To have metric group columns appear in the flow metric rows the flow metric request allows for the metric_group value to be specified as part of the request.
func (obj *patternFlowIpv4DscpEcn) SetMetricGroup(value string) PatternFlowIpv4DscpEcn {
	obj.obj.MetricGroup = &value
	return obj
}

// Increment returns a PatternFlowIpv4DscpEcnCounter
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) Increment() PatternFlowIpv4DscpEcnCounter {
	if obj.obj.Increment == nil {
		obj.obj.Increment = &snappipb.PatternFlowIpv4DscpEcnCounter{}
	}
	return &patternFlowIpv4DscpEcnCounter{obj: obj.obj.Increment}

}

// Decrement returns a PatternFlowIpv4DscpEcnCounter
//  description is TBD
func (obj *patternFlowIpv4DscpEcn) Decrement() PatternFlowIpv4DscpEcnCounter {
	if obj.obj.Decrement == nil {
		obj.obj.Decrement = &snappipb.PatternFlowIpv4DscpEcnCounter{}
	}
	return &patternFlowIpv4DscpEcnCounter{obj: obj.obj.Decrement}

}

type patternFlowGtpExtensionExtensionLengthCounter struct {
	obj *snappipb.PatternFlowGtpExtensionExtensionLengthCounter
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) msg() *snappipb.PatternFlowGtpExtensionExtensionLengthCounter {
	return obj.obj
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionExtensionLengthCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpExtensionExtensionLengthCounter interface {
	msg() *snappipb.PatternFlowGtpExtensionExtensionLengthCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpExtensionExtensionLengthCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpExtensionExtensionLengthCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpExtensionExtensionLengthCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) SetStart(value int32) PatternFlowGtpExtensionExtensionLengthCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) SetStep(value int32) PatternFlowGtpExtensionExtensionLengthCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionExtensionLengthCounter) SetCount(value int32) PatternFlowGtpExtensionExtensionLengthCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpExtensionContentsCounter struct {
	obj *snappipb.PatternFlowGtpExtensionContentsCounter
}

func (obj *patternFlowGtpExtensionContentsCounter) msg() *snappipb.PatternFlowGtpExtensionContentsCounter {
	return obj.obj
}

func (obj *patternFlowGtpExtensionContentsCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionContentsCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpExtensionContentsCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionContentsCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpExtensionContentsCounter interface {
	msg() *snappipb.PatternFlowGtpExtensionContentsCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpExtensionContentsCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpExtensionContentsCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpExtensionContentsCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) SetStart(value int32) PatternFlowGtpExtensionContentsCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) SetStep(value int32) PatternFlowGtpExtensionContentsCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionContentsCounter) SetCount(value int32) PatternFlowGtpExtensionContentsCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowGtpExtensionNextExtensionHeaderCounter struct {
	obj *snappipb.PatternFlowGtpExtensionNextExtensionHeaderCounter
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) msg() *snappipb.PatternFlowGtpExtensionNextExtensionHeaderCounter {
	return obj.obj
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowGtpExtensionNextExtensionHeaderCounter interface {
	msg() *snappipb.PatternFlowGtpExtensionNextExtensionHeaderCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter
	Step() int32
	SetStep(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter
	Count() int32
	SetCount(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) SetStart(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) SetStep(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowGtpExtensionNextExtensionHeaderCounter) SetCount(value int32) PatternFlowGtpExtensionNextExtensionHeaderCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIcmpEchoTypeCounter struct {
	obj *snappipb.PatternFlowIcmpEchoTypeCounter
}

func (obj *patternFlowIcmpEchoTypeCounter) msg() *snappipb.PatternFlowIcmpEchoTypeCounter {
	return obj.obj
}

func (obj *patternFlowIcmpEchoTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpEchoTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpEchoTypeCounter interface {
	msg() *snappipb.PatternFlowIcmpEchoTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIcmpEchoTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowIcmpEchoTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowIcmpEchoTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) SetStart(value int32) PatternFlowIcmpEchoTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) SetStep(value int32) PatternFlowIcmpEchoTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoTypeCounter) SetCount(value int32) PatternFlowIcmpEchoTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIcmpEchoCodeCounter struct {
	obj *snappipb.PatternFlowIcmpEchoCodeCounter
}

func (obj *patternFlowIcmpEchoCodeCounter) msg() *snappipb.PatternFlowIcmpEchoCodeCounter {
	return obj.obj
}

func (obj *patternFlowIcmpEchoCodeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoCodeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpEchoCodeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoCodeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpEchoCodeCounter interface {
	msg() *snappipb.PatternFlowIcmpEchoCodeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIcmpEchoCodeCounter
	Step() int32
	SetStep(value int32) PatternFlowIcmpEchoCodeCounter
	Count() int32
	SetCount(value int32) PatternFlowIcmpEchoCodeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) SetStart(value int32) PatternFlowIcmpEchoCodeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) SetStep(value int32) PatternFlowIcmpEchoCodeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoCodeCounter) SetCount(value int32) PatternFlowIcmpEchoCodeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIcmpEchoIdentifierCounter struct {
	obj *snappipb.PatternFlowIcmpEchoIdentifierCounter
}

func (obj *patternFlowIcmpEchoIdentifierCounter) msg() *snappipb.PatternFlowIcmpEchoIdentifierCounter {
	return obj.obj
}

func (obj *patternFlowIcmpEchoIdentifierCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoIdentifierCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpEchoIdentifierCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoIdentifierCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpEchoIdentifierCounter interface {
	msg() *snappipb.PatternFlowIcmpEchoIdentifierCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIcmpEchoIdentifierCounter
	Step() int32
	SetStep(value int32) PatternFlowIcmpEchoIdentifierCounter
	Count() int32
	SetCount(value int32) PatternFlowIcmpEchoIdentifierCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) SetStart(value int32) PatternFlowIcmpEchoIdentifierCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) SetStep(value int32) PatternFlowIcmpEchoIdentifierCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoIdentifierCounter) SetCount(value int32) PatternFlowIcmpEchoIdentifierCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIcmpEchoSequenceNumberCounter struct {
	obj *snappipb.PatternFlowIcmpEchoSequenceNumberCounter
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) msg() *snappipb.PatternFlowIcmpEchoSequenceNumberCounter {
	return obj.obj
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpEchoSequenceNumberCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpEchoSequenceNumberCounter interface {
	msg() *snappipb.PatternFlowIcmpEchoSequenceNumberCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIcmpEchoSequenceNumberCounter
	Step() int32
	SetStep(value int32) PatternFlowIcmpEchoSequenceNumberCounter
	Count() int32
	SetCount(value int32) PatternFlowIcmpEchoSequenceNumberCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) SetStart(value int32) PatternFlowIcmpEchoSequenceNumberCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) SetStep(value int32) PatternFlowIcmpEchoSequenceNumberCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpEchoSequenceNumberCounter) SetCount(value int32) PatternFlowIcmpEchoSequenceNumberCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIcmpv6EchoTypeCounter struct {
	obj *snappipb.PatternFlowIcmpv6EchoTypeCounter
}

func (obj *patternFlowIcmpv6EchoTypeCounter) msg() *snappipb.PatternFlowIcmpv6EchoTypeCounter {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoTypeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoTypeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpv6EchoTypeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoTypeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpv6EchoTypeCounter interface {
	msg() *snappipb.PatternFlowIcmpv6EchoTypeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIcmpv6EchoTypeCounter
	Step() int32
	SetStep(value int32) PatternFlowIcmpv6EchoTypeCounter
	Count() int32
	SetCount(value int32) PatternFlowIcmpv6EchoTypeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) SetStart(value int32) PatternFlowIcmpv6EchoTypeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) SetStep(value int32) PatternFlowIcmpv6EchoTypeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoTypeCounter) SetCount(value int32) PatternFlowIcmpv6EchoTypeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIcmpv6EchoCodeCounter struct {
	obj *snappipb.PatternFlowIcmpv6EchoCodeCounter
}

func (obj *patternFlowIcmpv6EchoCodeCounter) msg() *snappipb.PatternFlowIcmpv6EchoCodeCounter {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoCodeCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoCodeCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpv6EchoCodeCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoCodeCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpv6EchoCodeCounter interface {
	msg() *snappipb.PatternFlowIcmpv6EchoCodeCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIcmpv6EchoCodeCounter
	Step() int32
	SetStep(value int32) PatternFlowIcmpv6EchoCodeCounter
	Count() int32
	SetCount(value int32) PatternFlowIcmpv6EchoCodeCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) SetStart(value int32) PatternFlowIcmpv6EchoCodeCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) SetStep(value int32) PatternFlowIcmpv6EchoCodeCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoCodeCounter) SetCount(value int32) PatternFlowIcmpv6EchoCodeCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIcmpv6EchoIdentifierCounter struct {
	obj *snappipb.PatternFlowIcmpv6EchoIdentifierCounter
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) msg() *snappipb.PatternFlowIcmpv6EchoIdentifierCounter {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoIdentifierCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpv6EchoIdentifierCounter interface {
	msg() *snappipb.PatternFlowIcmpv6EchoIdentifierCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIcmpv6EchoIdentifierCounter
	Step() int32
	SetStep(value int32) PatternFlowIcmpv6EchoIdentifierCounter
	Count() int32
	SetCount(value int32) PatternFlowIcmpv6EchoIdentifierCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) SetStart(value int32) PatternFlowIcmpv6EchoIdentifierCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) SetStep(value int32) PatternFlowIcmpv6EchoIdentifierCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoIdentifierCounter) SetCount(value int32) PatternFlowIcmpv6EchoIdentifierCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIcmpv6EchoSequenceNumberCounter struct {
	obj *snappipb.PatternFlowIcmpv6EchoSequenceNumberCounter
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) msg() *snappipb.PatternFlowIcmpv6EchoSequenceNumberCounter {
	return obj.obj
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIcmpv6EchoSequenceNumberCounter interface {
	msg() *snappipb.PatternFlowIcmpv6EchoSequenceNumberCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter
	Step() int32
	SetStep(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter
	Count() int32
	SetCount(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) SetStart(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) SetStep(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIcmpv6EchoSequenceNumberCounter) SetCount(value int32) PatternFlowIcmpv6EchoSequenceNumberCounter {
	obj.obj.Count = &value
	return obj
}

type deviceBgpAsPathSegment struct {
	obj *snappipb.DeviceBgpAsPathSegment
}

func (obj *deviceBgpAsPathSegment) msg() *snappipb.DeviceBgpAsPathSegment {
	return obj.obj
}

func (obj *deviceBgpAsPathSegment) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpAsPathSegment) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpAsPathSegment) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpAsPathSegment) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpAsPathSegment interface {
	msg() *snappipb.DeviceBgpAsPathSegment
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	AsNumbers() []int32
	SetAsNumbers(value []int32) DeviceBgpAsPathSegment
}

// AsNumbers returns a []int32
//  The AS numbers in this AS path segment.
func (obj *deviceBgpAsPathSegment) AsNumbers() []int32 {
	return obj.obj.AsNumbers
}

// SetAsNumbers sets the []int32 value in the None object
//  The AS numbers in this AS path segment.
func (obj *deviceBgpAsPathSegment) SetAsNumbers(value []int32) DeviceBgpAsPathSegment {
	obj.obj.AsNumbers = value
	return obj
}

type deviceBgpSegmentList struct {
	obj *snappipb.DeviceBgpSegmentList
}

func (obj *deviceBgpSegmentList) msg() *snappipb.DeviceBgpSegmentList {
	return obj.obj
}

func (obj *deviceBgpSegmentList) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpSegmentList) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpSegmentList) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpSegmentList) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpSegmentList interface {
	msg() *snappipb.DeviceBgpSegmentList
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	SegmentWeight() int32
	SetSegmentWeight(value int32) DeviceBgpSegmentList
	Segments() DeviceBgpSegmentListDeviceBgpSegmentIter
	Active() bool
	SetActive(value bool) DeviceBgpSegmentList
}

// SegmentWeight returns a int32
//  The weight associated with a given path.
func (obj *deviceBgpSegmentList) SegmentWeight() int32 {
	return *obj.obj.SegmentWeight
}

// SetSegmentWeight sets the int32 value in the None object
//  The weight associated with a given path.
func (obj *deviceBgpSegmentList) SetSegmentWeight(value int32) DeviceBgpSegmentList {
	obj.obj.SegmentWeight = &value
	return obj
}

// Segments returns a []DeviceBgpSegment
//  description is TBD
func (obj *deviceBgpSegmentList) Segments() DeviceBgpSegmentListDeviceBgpSegmentIter {
	if obj.obj.Segments == nil {
		obj.obj.Segments = []*snappipb.DeviceBgpSegment{}
	}
	return &deviceBgpSegmentListDeviceBgpSegmentIter{obj: obj}

}

type deviceBgpSegmentListDeviceBgpSegmentIter struct {
	obj *deviceBgpSegmentList
}

type DeviceBgpSegmentListDeviceBgpSegmentIter interface {
	Add() DeviceBgpSegment
	Items() []DeviceBgpSegment
}

func (obj *deviceBgpSegmentListDeviceBgpSegmentIter) Add() DeviceBgpSegment {
	newObj := &snappipb.DeviceBgpSegment{}
	obj.obj.obj.Segments = append(obj.obj.obj.Segments, newObj)
	return &deviceBgpSegment{obj: newObj}
}

func (obj *deviceBgpSegmentListDeviceBgpSegmentIter) Items() []DeviceBgpSegment {
	slice := []DeviceBgpSegment{}
	for _, item := range obj.obj.obj.Segments {
		slice = append(slice, &deviceBgpSegment{obj: item})
	}
	return slice
}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *deviceBgpSegmentList) Active() bool {
	return *obj.obj.Active
}

// SetActive sets the bool value in the None object
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *deviceBgpSegmentList) SetActive(value bool) DeviceBgpSegmentList {
	obj.obj.Active = &value
	return obj
}

type deviceBgpRemoteEndpointSubTlv struct {
	obj *snappipb.DeviceBgpRemoteEndpointSubTlv
}

func (obj *deviceBgpRemoteEndpointSubTlv) msg() *snappipb.DeviceBgpRemoteEndpointSubTlv {
	return obj.obj
}

func (obj *deviceBgpRemoteEndpointSubTlv) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpRemoteEndpointSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpRemoteEndpointSubTlv) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpRemoteEndpointSubTlv) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpRemoteEndpointSubTlv interface {
	msg() *snappipb.DeviceBgpRemoteEndpointSubTlv
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	AsNumber() int32
	SetAsNumber(value int32) DeviceBgpRemoteEndpointSubTlv
	Ipv4Address() string
	SetIpv4Address(value string) DeviceBgpRemoteEndpointSubTlv
	Ipv6Address() string
	SetIpv6Address(value string) DeviceBgpRemoteEndpointSubTlv
}

// AsNumber returns a int32
//  Autonomous system (AS) number
func (obj *deviceBgpRemoteEndpointSubTlv) AsNumber() int32 {
	return *obj.obj.AsNumber
}

// SetAsNumber sets the int32 value in the None object
//  Autonomous system (AS) number
func (obj *deviceBgpRemoteEndpointSubTlv) SetAsNumber(value int32) DeviceBgpRemoteEndpointSubTlv {
	obj.obj.AsNumber = &value
	return obj
}

// Ipv4Address returns a string
//  The IPv4 address
func (obj *deviceBgpRemoteEndpointSubTlv) Ipv4Address() string {
	return *obj.obj.Ipv4Address
}

// SetIpv4Address sets the string value in the None object
//  The IPv4 address
func (obj *deviceBgpRemoteEndpointSubTlv) SetIpv4Address(value string) DeviceBgpRemoteEndpointSubTlv {
	obj.obj.Ipv4Address = &value
	return obj
}

// Ipv6Address returns a string
//  The IPv6 address
func (obj *deviceBgpRemoteEndpointSubTlv) Ipv6Address() string {
	return *obj.obj.Ipv6Address
}

// SetIpv6Address sets the string value in the None object
//  The IPv6 address
func (obj *deviceBgpRemoteEndpointSubTlv) SetIpv6Address(value string) DeviceBgpRemoteEndpointSubTlv {
	obj.obj.Ipv6Address = &value
	return obj
}

type deviceBgpPreferenceSubTlv struct {
	obj *snappipb.DeviceBgpPreferenceSubTlv
}

func (obj *deviceBgpPreferenceSubTlv) msg() *snappipb.DeviceBgpPreferenceSubTlv {
	return obj.obj
}

func (obj *deviceBgpPreferenceSubTlv) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpPreferenceSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpPreferenceSubTlv) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpPreferenceSubTlv) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpPreferenceSubTlv interface {
	msg() *snappipb.DeviceBgpPreferenceSubTlv
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Preference() int32
	SetPreference(value int32) DeviceBgpPreferenceSubTlv
}

// Preference returns a int32
//  TBD
func (obj *deviceBgpPreferenceSubTlv) Preference() int32 {
	return *obj.obj.Preference
}

// SetPreference sets the int32 value in the None object
//  TBD
func (obj *deviceBgpPreferenceSubTlv) SetPreference(value int32) DeviceBgpPreferenceSubTlv {
	obj.obj.Preference = &value
	return obj
}

type deviceBgpBindingSubTlv struct {
	obj *snappipb.DeviceBgpBindingSubTlv
}

func (obj *deviceBgpBindingSubTlv) msg() *snappipb.DeviceBgpBindingSubTlv {
	return obj.obj
}

func (obj *deviceBgpBindingSubTlv) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpBindingSubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpBindingSubTlv) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpBindingSubTlv) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpBindingSubTlv interface {
	msg() *snappipb.DeviceBgpBindingSubTlv
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	FourOctetSid() int32
	SetFourOctetSid(value int32) DeviceBgpBindingSubTlv
	BsidAsMplsLabel() bool
	SetBsidAsMplsLabel(value bool) DeviceBgpBindingSubTlv
	Ipv6Sid() string
	SetIpv6Sid(value string) DeviceBgpBindingSubTlv
	SFlag() bool
	SetSFlag(value bool) DeviceBgpBindingSubTlv
	IFlag() bool
	SetIFlag(value bool) DeviceBgpBindingSubTlv
	RemainingFlagBits() int32
	SetRemainingFlagBits(value int32) DeviceBgpBindingSubTlv
}

// FourOctetSid returns a int32
//  TBD
func (obj *deviceBgpBindingSubTlv) FourOctetSid() int32 {
	return *obj.obj.FourOctetSid
}

// SetFourOctetSid sets the int32 value in the None object
//  TBD
func (obj *deviceBgpBindingSubTlv) SetFourOctetSid(value int32) DeviceBgpBindingSubTlv {
	obj.obj.FourOctetSid = &value
	return obj
}

// BsidAsMplsLabel returns a bool
//  Only valid if binding_sid_type is four_octet_sid
func (obj *deviceBgpBindingSubTlv) BsidAsMplsLabel() bool {
	return *obj.obj.BsidAsMplsLabel
}

// SetBsidAsMplsLabel sets the bool value in the None object
//  Only valid if binding_sid_type is four_octet_sid
func (obj *deviceBgpBindingSubTlv) SetBsidAsMplsLabel(value bool) DeviceBgpBindingSubTlv {
	obj.obj.BsidAsMplsLabel = &value
	return obj
}

// Ipv6Sid returns a string
//  Only valid if binding_sid_type is ipv6_sid
func (obj *deviceBgpBindingSubTlv) Ipv6Sid() string {
	return *obj.obj.Ipv6Sid
}

// SetIpv6Sid sets the string value in the None object
//  Only valid if binding_sid_type is ipv6_sid
func (obj *deviceBgpBindingSubTlv) SetIpv6Sid(value string) DeviceBgpBindingSubTlv {
	obj.obj.Ipv6Sid = &value
	return obj
}

// SFlag returns a bool
//  TBD
func (obj *deviceBgpBindingSubTlv) SFlag() bool {
	return *obj.obj.SFlag
}

// SetSFlag sets the bool value in the None object
//  TBD
func (obj *deviceBgpBindingSubTlv) SetSFlag(value bool) DeviceBgpBindingSubTlv {
	obj.obj.SFlag = &value
	return obj
}

// IFlag returns a bool
//  TBD
func (obj *deviceBgpBindingSubTlv) IFlag() bool {
	return *obj.obj.IFlag
}

// SetIFlag sets the bool value in the None object
//  TBD
func (obj *deviceBgpBindingSubTlv) SetIFlag(value bool) DeviceBgpBindingSubTlv {
	obj.obj.IFlag = &value
	return obj
}

// RemainingFlagBits returns a int32
//  TBD
func (obj *deviceBgpBindingSubTlv) RemainingFlagBits() int32 {
	return *obj.obj.RemainingFlagBits
}

// SetRemainingFlagBits sets the int32 value in the None object
//  TBD
func (obj *deviceBgpBindingSubTlv) SetRemainingFlagBits(value int32) DeviceBgpBindingSubTlv {
	obj.obj.RemainingFlagBits = &value
	return obj
}

type deviceBgpExplicitNullLabelPolicySubTlv struct {
	obj *snappipb.DeviceBgpExplicitNullLabelPolicySubTlv
}

func (obj *deviceBgpExplicitNullLabelPolicySubTlv) msg() *snappipb.DeviceBgpExplicitNullLabelPolicySubTlv {
	return obj.obj
}

func (obj *deviceBgpExplicitNullLabelPolicySubTlv) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpExplicitNullLabelPolicySubTlv) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpExplicitNullLabelPolicySubTlv) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpExplicitNullLabelPolicySubTlv) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpExplicitNullLabelPolicySubTlv interface {
	msg() *snappipb.DeviceBgpExplicitNullLabelPolicySubTlv
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}

type patternFlowIpv4TosPrecedenceCounter struct {
	obj *snappipb.PatternFlowIpv4TosPrecedenceCounter
}

func (obj *patternFlowIpv4TosPrecedenceCounter) msg() *snappipb.PatternFlowIpv4TosPrecedenceCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosPrecedenceCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosPrecedenceCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosPrecedenceCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosPrecedenceCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosPrecedenceCounter interface {
	msg() *snappipb.PatternFlowIpv4TosPrecedenceCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosPrecedenceCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosPrecedenceCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosPrecedenceCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) SetStart(value int32) PatternFlowIpv4TosPrecedenceCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) SetStep(value int32) PatternFlowIpv4TosPrecedenceCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosPrecedenceCounter) SetCount(value int32) PatternFlowIpv4TosPrecedenceCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4TosDelayCounter struct {
	obj *snappipb.PatternFlowIpv4TosDelayCounter
}

func (obj *patternFlowIpv4TosDelayCounter) msg() *snappipb.PatternFlowIpv4TosDelayCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosDelayCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosDelayCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosDelayCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosDelayCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosDelayCounter interface {
	msg() *snappipb.PatternFlowIpv4TosDelayCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosDelayCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosDelayCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosDelayCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) SetStart(value int32) PatternFlowIpv4TosDelayCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) SetStep(value int32) PatternFlowIpv4TosDelayCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosDelayCounter) SetCount(value int32) PatternFlowIpv4TosDelayCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4TosThroughputCounter struct {
	obj *snappipb.PatternFlowIpv4TosThroughputCounter
}

func (obj *patternFlowIpv4TosThroughputCounter) msg() *snappipb.PatternFlowIpv4TosThroughputCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosThroughputCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosThroughputCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosThroughputCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosThroughputCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosThroughputCounter interface {
	msg() *snappipb.PatternFlowIpv4TosThroughputCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosThroughputCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosThroughputCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosThroughputCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) SetStart(value int32) PatternFlowIpv4TosThroughputCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) SetStep(value int32) PatternFlowIpv4TosThroughputCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosThroughputCounter) SetCount(value int32) PatternFlowIpv4TosThroughputCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4TosReliabilityCounter struct {
	obj *snappipb.PatternFlowIpv4TosReliabilityCounter
}

func (obj *patternFlowIpv4TosReliabilityCounter) msg() *snappipb.PatternFlowIpv4TosReliabilityCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosReliabilityCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosReliabilityCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosReliabilityCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosReliabilityCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosReliabilityCounter interface {
	msg() *snappipb.PatternFlowIpv4TosReliabilityCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosReliabilityCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosReliabilityCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosReliabilityCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) SetStart(value int32) PatternFlowIpv4TosReliabilityCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) SetStep(value int32) PatternFlowIpv4TosReliabilityCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosReliabilityCounter) SetCount(value int32) PatternFlowIpv4TosReliabilityCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4TosMonetaryCounter struct {
	obj *snappipb.PatternFlowIpv4TosMonetaryCounter
}

func (obj *patternFlowIpv4TosMonetaryCounter) msg() *snappipb.PatternFlowIpv4TosMonetaryCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosMonetaryCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosMonetaryCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosMonetaryCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosMonetaryCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosMonetaryCounter interface {
	msg() *snappipb.PatternFlowIpv4TosMonetaryCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosMonetaryCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosMonetaryCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosMonetaryCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) SetStart(value int32) PatternFlowIpv4TosMonetaryCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) SetStep(value int32) PatternFlowIpv4TosMonetaryCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosMonetaryCounter) SetCount(value int32) PatternFlowIpv4TosMonetaryCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4TosUnusedCounter struct {
	obj *snappipb.PatternFlowIpv4TosUnusedCounter
}

func (obj *patternFlowIpv4TosUnusedCounter) msg() *snappipb.PatternFlowIpv4TosUnusedCounter {
	return obj.obj
}

func (obj *patternFlowIpv4TosUnusedCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosUnusedCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4TosUnusedCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4TosUnusedCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4TosUnusedCounter interface {
	msg() *snappipb.PatternFlowIpv4TosUnusedCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4TosUnusedCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4TosUnusedCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4TosUnusedCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) SetStart(value int32) PatternFlowIpv4TosUnusedCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) SetStep(value int32) PatternFlowIpv4TosUnusedCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4TosUnusedCounter) SetCount(value int32) PatternFlowIpv4TosUnusedCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4DscpPhbCounter struct {
	obj *snappipb.PatternFlowIpv4DscpPhbCounter
}

func (obj *patternFlowIpv4DscpPhbCounter) msg() *snappipb.PatternFlowIpv4DscpPhbCounter {
	return obj.obj
}

func (obj *patternFlowIpv4DscpPhbCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpPhbCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4DscpPhbCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpPhbCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4DscpPhbCounter interface {
	msg() *snappipb.PatternFlowIpv4DscpPhbCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4DscpPhbCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4DscpPhbCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4DscpPhbCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) SetStart(value int32) PatternFlowIpv4DscpPhbCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) SetStep(value int32) PatternFlowIpv4DscpPhbCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DscpPhbCounter) SetCount(value int32) PatternFlowIpv4DscpPhbCounter {
	obj.obj.Count = &value
	return obj
}

type patternFlowIpv4DscpEcnCounter struct {
	obj *snappipb.PatternFlowIpv4DscpEcnCounter
}

func (obj *patternFlowIpv4DscpEcnCounter) msg() *snappipb.PatternFlowIpv4DscpEcnCounter {
	return obj.obj
}

func (obj *patternFlowIpv4DscpEcnCounter) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpEcnCounter) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *patternFlowIpv4DscpEcnCounter) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *patternFlowIpv4DscpEcnCounter) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type PatternFlowIpv4DscpEcnCounter interface {
	msg() *snappipb.PatternFlowIpv4DscpEcnCounter
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	Start() int32
	SetStart(value int32) PatternFlowIpv4DscpEcnCounter
	Step() int32
	SetStep(value int32) PatternFlowIpv4DscpEcnCounter
	Count() int32
	SetCount(value int32) PatternFlowIpv4DscpEcnCounter
}

// Start returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) Start() int32 {
	return *obj.obj.Start
}

// SetStart sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) SetStart(value int32) PatternFlowIpv4DscpEcnCounter {
	obj.obj.Start = &value
	return obj
}

// Step returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) Step() int32 {
	return *obj.obj.Step
}

// SetStep sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) SetStep(value int32) PatternFlowIpv4DscpEcnCounter {
	obj.obj.Step = &value
	return obj
}

// Count returns a int32
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) Count() int32 {
	return *obj.obj.Count
}

// SetCount sets the int32 value in the None object
//  description is TBD
func (obj *patternFlowIpv4DscpEcnCounter) SetCount(value int32) PatternFlowIpv4DscpEcnCounter {
	obj.obj.Count = &value
	return obj
}

type deviceBgpSegment struct {
	obj *snappipb.DeviceBgpSegment
}

func (obj *deviceBgpSegment) msg() *snappipb.DeviceBgpSegment {
	return obj.obj
}

func (obj *deviceBgpSegment) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpSegment) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *deviceBgpSegment) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *deviceBgpSegment) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type DeviceBgpSegment interface {
	msg() *snappipb.DeviceBgpSegment
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
	MplsLabel() int32
	SetMplsLabel(value int32) DeviceBgpSegment
	MplsTc() int32
	SetMplsTc(value int32) DeviceBgpSegment
	MplsTtl() int32
	SetMplsTtl(value int32) DeviceBgpSegment
	VFlag() bool
	SetVFlag(value bool) DeviceBgpSegment
	Ipv6Sid() string
	SetIpv6Sid(value string) DeviceBgpSegment
	RemainingFlagBits() int32
	SetRemainingFlagBits(value int32) DeviceBgpSegment
	Active() bool
	SetActive(value bool) DeviceBgpSegment
}

// MplsLabel returns a int32
//  MPLS label
func (obj *deviceBgpSegment) MplsLabel() int32 {
	return *obj.obj.MplsLabel
}

// SetMplsLabel sets the int32 value in the None object
//  MPLS label
func (obj *deviceBgpSegment) SetMplsLabel(value int32) DeviceBgpSegment {
	obj.obj.MplsLabel = &value
	return obj
}

// MplsTc returns a int32
//  TBD
func (obj *deviceBgpSegment) MplsTc() int32 {
	return *obj.obj.MplsTc
}

// SetMplsTc sets the int32 value in the None object
//  TBD
func (obj *deviceBgpSegment) SetMplsTc(value int32) DeviceBgpSegment {
	obj.obj.MplsTc = &value
	return obj
}

// MplsTtl returns a int32
//  TBD
func (obj *deviceBgpSegment) MplsTtl() int32 {
	return *obj.obj.MplsTtl
}

// SetMplsTtl sets the int32 value in the None object
//  TBD
func (obj *deviceBgpSegment) SetMplsTtl(value int32) DeviceBgpSegment {
	obj.obj.MplsTtl = &value
	return obj
}

// VFlag returns a bool
//  TBD
func (obj *deviceBgpSegment) VFlag() bool {
	return *obj.obj.VFlag
}

// SetVFlag sets the bool value in the None object
//  TBD
func (obj *deviceBgpSegment) SetVFlag(value bool) DeviceBgpSegment {
	obj.obj.VFlag = &value
	return obj
}

// Ipv6Sid returns a string
//  TBD
func (obj *deviceBgpSegment) Ipv6Sid() string {
	return *obj.obj.Ipv6Sid
}

// SetIpv6Sid sets the string value in the None object
//  TBD
func (obj *deviceBgpSegment) SetIpv6Sid(value string) DeviceBgpSegment {
	obj.obj.Ipv6Sid = &value
	return obj
}

// RemainingFlagBits returns a int32
//  TBD
func (obj *deviceBgpSegment) RemainingFlagBits() int32 {
	return *obj.obj.RemainingFlagBits
}

// SetRemainingFlagBits sets the int32 value in the None object
//  TBD
func (obj *deviceBgpSegment) SetRemainingFlagBits(value int32) DeviceBgpSegment {
	obj.obj.RemainingFlagBits = &value
	return obj
}

// Active returns a bool
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *deviceBgpSegment) Active() bool {
	return *obj.obj.Active
}

// SetActive sets the bool value in the None object
//  If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
func (obj *deviceBgpSegment) SetActive(value bool) DeviceBgpSegment {
	obj.obj.Active = &value
	return obj
}

type setConfigResponseStatusCode200 struct {
	obj *snappipb.SetConfigResponse_StatusCode200
}

func (obj *setConfigResponseStatusCode200) msg() *snappipb.SetConfigResponse_StatusCode200 {
	return obj.obj
}

func (obj *setConfigResponseStatusCode200) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setConfigResponseStatusCode200) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *setConfigResponseStatusCode200) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setConfigResponseStatusCode200) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type SetConfigResponse_StatusCode200 interface {
	msg() *snappipb.SetConfigResponse_StatusCode200
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}

type getConfigResponseStatusCode200 struct {
	obj *snappipb.GetConfigResponse_StatusCode200
}

func (obj *getConfigResponseStatusCode200) msg() *snappipb.GetConfigResponse_StatusCode200 {
	return obj.obj
}

func (obj *getConfigResponseStatusCode200) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getConfigResponseStatusCode200) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *getConfigResponseStatusCode200) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getConfigResponseStatusCode200) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type GetConfigResponse_StatusCode200 interface {
	msg() *snappipb.GetConfigResponse_StatusCode200
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}

type setTransmitStateResponseStatusCode200 struct {
	obj *snappipb.SetTransmitStateResponse_StatusCode200
}

func (obj *setTransmitStateResponseStatusCode200) msg() *snappipb.SetTransmitStateResponse_StatusCode200 {
	return obj.obj
}

func (obj *setTransmitStateResponseStatusCode200) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setTransmitStateResponseStatusCode200) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *setTransmitStateResponseStatusCode200) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setTransmitStateResponseStatusCode200) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type SetTransmitStateResponse_StatusCode200 interface {
	msg() *snappipb.SetTransmitStateResponse_StatusCode200
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}

type setLinkStateResponseStatusCode200 struct {
	obj *snappipb.SetLinkStateResponse_StatusCode200
}

func (obj *setLinkStateResponseStatusCode200) msg() *snappipb.SetLinkStateResponse_StatusCode200 {
	return obj.obj
}

func (obj *setLinkStateResponseStatusCode200) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setLinkStateResponseStatusCode200) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *setLinkStateResponseStatusCode200) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setLinkStateResponseStatusCode200) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type SetLinkStateResponse_StatusCode200 interface {
	msg() *snappipb.SetLinkStateResponse_StatusCode200
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}

type setCaptureStateResponseStatusCode200 struct {
	obj *snappipb.SetCaptureStateResponse_StatusCode200
}

func (obj *setCaptureStateResponseStatusCode200) msg() *snappipb.SetCaptureStateResponse_StatusCode200 {
	return obj.obj
}

func (obj *setCaptureStateResponseStatusCode200) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setCaptureStateResponseStatusCode200) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *setCaptureStateResponseStatusCode200) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setCaptureStateResponseStatusCode200) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type SetCaptureStateResponse_StatusCode200 interface {
	msg() *snappipb.SetCaptureStateResponse_StatusCode200
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}

type updateFlowsResponseStatusCode200 struct {
	obj *snappipb.UpdateFlowsResponse_StatusCode200
}

func (obj *updateFlowsResponseStatusCode200) msg() *snappipb.UpdateFlowsResponse_StatusCode200 {
	return obj.obj
}

func (obj *updateFlowsResponseStatusCode200) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *updateFlowsResponseStatusCode200) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *updateFlowsResponseStatusCode200) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *updateFlowsResponseStatusCode200) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type UpdateFlowsResponse_StatusCode200 interface {
	msg() *snappipb.UpdateFlowsResponse_StatusCode200
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}

type setRouteStateResponseStatusCode200 struct {
	obj *snappipb.SetRouteStateResponse_StatusCode200
}

func (obj *setRouteStateResponseStatusCode200) msg() *snappipb.SetRouteStateResponse_StatusCode200 {
	return obj.obj
}

func (obj *setRouteStateResponseStatusCode200) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setRouteStateResponseStatusCode200) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *setRouteStateResponseStatusCode200) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *setRouteStateResponseStatusCode200) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type SetRouteStateResponse_StatusCode200 interface {
	msg() *snappipb.SetRouteStateResponse_StatusCode200
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}

type getMetricsResponseStatusCode200 struct {
	obj *snappipb.GetMetricsResponse_StatusCode200
}

func (obj *getMetricsResponseStatusCode200) msg() *snappipb.GetMetricsResponse_StatusCode200 {
	return obj.obj
}

func (obj *getMetricsResponseStatusCode200) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getMetricsResponseStatusCode200) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *getMetricsResponseStatusCode200) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getMetricsResponseStatusCode200) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type GetMetricsResponse_StatusCode200 interface {
	msg() *snappipb.GetMetricsResponse_StatusCode200
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}

type getStateMetricsResponseStatusCode200 struct {
	obj *snappipb.GetStateMetricsResponse_StatusCode200
}

func (obj *getStateMetricsResponseStatusCode200) msg() *snappipb.GetStateMetricsResponse_StatusCode200 {
	return obj.obj
}

func (obj *getStateMetricsResponseStatusCode200) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getStateMetricsResponseStatusCode200) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *getStateMetricsResponseStatusCode200) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getStateMetricsResponseStatusCode200) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type GetStateMetricsResponse_StatusCode200 interface {
	msg() *snappipb.GetStateMetricsResponse_StatusCode200
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}

type getCaptureResponseStatusCode200 struct {
	obj *snappipb.GetCaptureResponse_StatusCode200
}

func (obj *getCaptureResponseStatusCode200) msg() *snappipb.GetCaptureResponse_StatusCode200 {
	return obj.obj
}

func (obj *getCaptureResponseStatusCode200) ToYaml() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	data, err = yaml.JSONToYAML(data)
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getCaptureResponseStatusCode200) FromYaml(value string) error {
	data, err := yaml.YAMLToJSON([]byte(value))
	if err != nil {
		return err
	}
	return json.Unmarshal(data, obj.msg())
}

func (obj *getCaptureResponseStatusCode200) ToJson() string {
	data, err := json.Marshal(obj.msg())
	if err != nil {
		panic(err)
	}
	return string(data)
}

func (obj *getCaptureResponseStatusCode200) FromJson(value string) error {
	return json.Unmarshal([]byte(value), obj.msg())
}

type GetCaptureResponse_StatusCode200 interface {
	msg() *snappipb.GetCaptureResponse_StatusCode200
	ToYaml() string
	ToJson() string
	FromYaml(value string) error
	FromJson(value string) error
}
