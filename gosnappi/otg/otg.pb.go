// Open Traffic Generator API 0.10.9
// Open Traffic Generator API defines a model-driven, vendor-neutral and standard
// interface for emulating layer 2-7 network devices and generating test traffic.
//
// Contributions can be made in the following ways:
// - [open an issue](https://github.com/open-traffic-generator/models/issues) in the
// models repository
// - [fork the models repository](https://github.com/open-traffic-generator/models)
// and submit a PR
// License: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: otg.proto

package otg

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LagProtocol_Choice_Enum int32

const (
	LagProtocol_Choice_unspecified LagProtocol_Choice_Enum = 0
	LagProtocol_Choice_lacp        LagProtocol_Choice_Enum = 1
	LagProtocol_Choice_static      LagProtocol_Choice_Enum = 2
)

// Enum value maps for LagProtocol_Choice_Enum.
var (
	LagProtocol_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "lacp",
		2: "static",
	}
	LagProtocol_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"lacp":        1,
		"static":      2,
	}
)

func (x LagProtocol_Choice_Enum) Enum() *LagProtocol_Choice_Enum {
	p := new(LagProtocol_Choice_Enum)
	*p = x
	return p
}

func (x LagProtocol_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LagProtocol_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[0].Descriptor()
}

func (LagProtocol_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[0]
}

func (x LagProtocol_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LagProtocol_Choice_Enum.Descriptor instead.
func (LagProtocol_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{6, 0, 0}
}

type LagPortLacp_ActorActivity_Enum int32

const (
	LagPortLacp_ActorActivity_unspecified LagPortLacp_ActorActivity_Enum = 0
	LagPortLacp_ActorActivity_passive     LagPortLacp_ActorActivity_Enum = 1
	LagPortLacp_ActorActivity_active      LagPortLacp_ActorActivity_Enum = 2
)

// Enum value maps for LagPortLacp_ActorActivity_Enum.
var (
	LagPortLacp_ActorActivity_Enum_name = map[int32]string{
		0: "unspecified",
		1: "passive",
		2: "active",
	}
	LagPortLacp_ActorActivity_Enum_value = map[string]int32{
		"unspecified": 0,
		"passive":     1,
		"active":      2,
	}
)

func (x LagPortLacp_ActorActivity_Enum) Enum() *LagPortLacp_ActorActivity_Enum {
	p := new(LagPortLacp_ActorActivity_Enum)
	*p = x
	return p
}

func (x LagPortLacp_ActorActivity_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LagPortLacp_ActorActivity_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[1].Descriptor()
}

func (LagPortLacp_ActorActivity_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[1]
}

func (x LagPortLacp_ActorActivity_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LagPortLacp_ActorActivity_Enum.Descriptor instead.
func (LagPortLacp_ActorActivity_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{9, 0, 0}
}

type EthernetConnection_Choice_Enum int32

const (
	EthernetConnection_Choice_unspecified EthernetConnection_Choice_Enum = 0
	EthernetConnection_Choice_port_name   EthernetConnection_Choice_Enum = 1
	EthernetConnection_Choice_lag_name    EthernetConnection_Choice_Enum = 2
	EthernetConnection_Choice_vxlan_name  EthernetConnection_Choice_Enum = 3
)

// Enum value maps for EthernetConnection_Choice_Enum.
var (
	EthernetConnection_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "port_name",
		2: "lag_name",
		3: "vxlan_name",
	}
	EthernetConnection_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"port_name":   1,
		"lag_name":    2,
		"vxlan_name":  3,
	}
)

func (x EthernetConnection_Choice_Enum) Enum() *EthernetConnection_Choice_Enum {
	p := new(EthernetConnection_Choice_Enum)
	*p = x
	return p
}

func (x EthernetConnection_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthernetConnection_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[2].Descriptor()
}

func (EthernetConnection_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[2]
}

func (x EthernetConnection_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthernetConnection_Choice_Enum.Descriptor instead.
func (EthernetConnection_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{12, 0, 0}
}

type DeviceVlan_Tpid_Enum int32

const (
	DeviceVlan_Tpid_unspecified DeviceVlan_Tpid_Enum = 0
	DeviceVlan_Tpid_x8100       DeviceVlan_Tpid_Enum = 1
	DeviceVlan_Tpid_x88a8       DeviceVlan_Tpid_Enum = 2
	DeviceVlan_Tpid_x9100       DeviceVlan_Tpid_Enum = 3
	DeviceVlan_Tpid_x9200       DeviceVlan_Tpid_Enum = 4
	DeviceVlan_Tpid_x9300       DeviceVlan_Tpid_Enum = 5
)

// Enum value maps for DeviceVlan_Tpid_Enum.
var (
	DeviceVlan_Tpid_Enum_name = map[int32]string{
		0: "unspecified",
		1: "x8100",
		2: "x88a8",
		3: "x9100",
		4: "x9200",
		5: "x9300",
	}
	DeviceVlan_Tpid_Enum_value = map[string]int32{
		"unspecified": 0,
		"x8100":       1,
		"x88a8":       2,
		"x9100":       3,
		"x9200":       4,
		"x9300":       5,
	}
)

func (x DeviceVlan_Tpid_Enum) Enum() *DeviceVlan_Tpid_Enum {
	p := new(DeviceVlan_Tpid_Enum)
	*p = x
	return p
}

func (x DeviceVlan_Tpid_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceVlan_Tpid_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[3].Descriptor()
}

func (DeviceVlan_Tpid_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[3]
}

func (x DeviceVlan_Tpid_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceVlan_Tpid_Enum.Descriptor instead.
func (DeviceVlan_Tpid_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{13, 0, 0}
}

type DeviceIpv4GatewayMAC_Choice_Enum int32

const (
	DeviceIpv4GatewayMAC_Choice_unspecified DeviceIpv4GatewayMAC_Choice_Enum = 0
	DeviceIpv4GatewayMAC_Choice_auto        DeviceIpv4GatewayMAC_Choice_Enum = 1
	DeviceIpv4GatewayMAC_Choice_value       DeviceIpv4GatewayMAC_Choice_Enum = 2
)

// Enum value maps for DeviceIpv4GatewayMAC_Choice_Enum.
var (
	DeviceIpv4GatewayMAC_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "auto",
		2: "value",
	}
	DeviceIpv4GatewayMAC_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"auto":        1,
		"value":       2,
	}
)

func (x DeviceIpv4GatewayMAC_Choice_Enum) Enum() *DeviceIpv4GatewayMAC_Choice_Enum {
	p := new(DeviceIpv4GatewayMAC_Choice_Enum)
	*p = x
	return p
}

func (x DeviceIpv4GatewayMAC_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceIpv4GatewayMAC_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[4].Descriptor()
}

func (DeviceIpv4GatewayMAC_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[4]
}

func (x DeviceIpv4GatewayMAC_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceIpv4GatewayMAC_Choice_Enum.Descriptor instead.
func (DeviceIpv4GatewayMAC_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{16, 0, 0}
}

type DeviceIpv6GatewayMAC_Choice_Enum int32

const (
	DeviceIpv6GatewayMAC_Choice_unspecified DeviceIpv6GatewayMAC_Choice_Enum = 0
	DeviceIpv6GatewayMAC_Choice_auto        DeviceIpv6GatewayMAC_Choice_Enum = 1
	DeviceIpv6GatewayMAC_Choice_value       DeviceIpv6GatewayMAC_Choice_Enum = 2
)

// Enum value maps for DeviceIpv6GatewayMAC_Choice_Enum.
var (
	DeviceIpv6GatewayMAC_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "auto",
		2: "value",
	}
	DeviceIpv6GatewayMAC_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"auto":        1,
		"value":       2,
	}
)

func (x DeviceIpv6GatewayMAC_Choice_Enum) Enum() *DeviceIpv6GatewayMAC_Choice_Enum {
	p := new(DeviceIpv6GatewayMAC_Choice_Enum)
	*p = x
	return p
}

func (x DeviceIpv6GatewayMAC_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceIpv6GatewayMAC_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[5].Descriptor()
}

func (DeviceIpv6GatewayMAC_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[5]
}

func (x DeviceIpv6GatewayMAC_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceIpv6GatewayMAC_Choice_Enum.Descriptor instead.
func (DeviceIpv6GatewayMAC_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{19, 0, 0}
}

type Layer1_Speed_Enum int32

const (
	Layer1_Speed_unspecified       Layer1_Speed_Enum = 0
	Layer1_Speed_speed_10_fd_mbps  Layer1_Speed_Enum = 1
	Layer1_Speed_speed_10_hd_mbps  Layer1_Speed_Enum = 2
	Layer1_Speed_speed_100_fd_mbps Layer1_Speed_Enum = 3
	Layer1_Speed_speed_100_hd_mbps Layer1_Speed_Enum = 4
	Layer1_Speed_speed_1_gbps      Layer1_Speed_Enum = 5
	Layer1_Speed_speed_10_gbps     Layer1_Speed_Enum = 6
	Layer1_Speed_speed_25_gbps     Layer1_Speed_Enum = 7
	Layer1_Speed_speed_40_gbps     Layer1_Speed_Enum = 8
	Layer1_Speed_speed_50_gbps     Layer1_Speed_Enum = 9
	Layer1_Speed_speed_100_gbps    Layer1_Speed_Enum = 10
	Layer1_Speed_speed_200_gbps    Layer1_Speed_Enum = 11
	Layer1_Speed_speed_400_gbps    Layer1_Speed_Enum = 12
)

// Enum value maps for Layer1_Speed_Enum.
var (
	Layer1_Speed_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "speed_10_fd_mbps",
		2:  "speed_10_hd_mbps",
		3:  "speed_100_fd_mbps",
		4:  "speed_100_hd_mbps",
		5:  "speed_1_gbps",
		6:  "speed_10_gbps",
		7:  "speed_25_gbps",
		8:  "speed_40_gbps",
		9:  "speed_50_gbps",
		10: "speed_100_gbps",
		11: "speed_200_gbps",
		12: "speed_400_gbps",
	}
	Layer1_Speed_Enum_value = map[string]int32{
		"unspecified":       0,
		"speed_10_fd_mbps":  1,
		"speed_10_hd_mbps":  2,
		"speed_100_fd_mbps": 3,
		"speed_100_hd_mbps": 4,
		"speed_1_gbps":      5,
		"speed_10_gbps":     6,
		"speed_25_gbps":     7,
		"speed_40_gbps":     8,
		"speed_50_gbps":     9,
		"speed_100_gbps":    10,
		"speed_200_gbps":    11,
		"speed_400_gbps":    12,
	}
)

func (x Layer1_Speed_Enum) Enum() *Layer1_Speed_Enum {
	p := new(Layer1_Speed_Enum)
	*p = x
	return p
}

func (x Layer1_Speed_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Layer1_Speed_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[6].Descriptor()
}

func (Layer1_Speed_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[6]
}

func (x Layer1_Speed_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Layer1_Speed_Enum.Descriptor instead.
func (Layer1_Speed_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{20, 0, 0}
}

type Layer1_Media_Enum int32

const (
	Layer1_Media_unspecified Layer1_Media_Enum = 0
	Layer1_Media_copper      Layer1_Media_Enum = 1
	Layer1_Media_fiber       Layer1_Media_Enum = 2
	Layer1_Media_sgmii       Layer1_Media_Enum = 3
)

// Enum value maps for Layer1_Media_Enum.
var (
	Layer1_Media_Enum_name = map[int32]string{
		0: "unspecified",
		1: "copper",
		2: "fiber",
		3: "sgmii",
	}
	Layer1_Media_Enum_value = map[string]int32{
		"unspecified": 0,
		"copper":      1,
		"fiber":       2,
		"sgmii":       3,
	}
)

func (x Layer1_Media_Enum) Enum() *Layer1_Media_Enum {
	p := new(Layer1_Media_Enum)
	*p = x
	return p
}

func (x Layer1_Media_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Layer1_Media_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[7].Descriptor()
}

func (Layer1_Media_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[7]
}

func (x Layer1_Media_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Layer1_Media_Enum.Descriptor instead.
func (Layer1_Media_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{20, 1, 0}
}

type Layer1FlowControl_Choice_Enum int32

const (
	Layer1FlowControl_Choice_unspecified   Layer1FlowControl_Choice_Enum = 0
	Layer1FlowControl_Choice_ieee_802_1qbb Layer1FlowControl_Choice_Enum = 1
	Layer1FlowControl_Choice_ieee_802_3x   Layer1FlowControl_Choice_Enum = 2
)

// Enum value maps for Layer1FlowControl_Choice_Enum.
var (
	Layer1FlowControl_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ieee_802_1qbb",
		2: "ieee_802_3x",
	}
	Layer1FlowControl_Choice_Enum_value = map[string]int32{
		"unspecified":   0,
		"ieee_802_1qbb": 1,
		"ieee_802_3x":   2,
	}
)

func (x Layer1FlowControl_Choice_Enum) Enum() *Layer1FlowControl_Choice_Enum {
	p := new(Layer1FlowControl_Choice_Enum)
	*p = x
	return p
}

func (x Layer1FlowControl_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Layer1FlowControl_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[8].Descriptor()
}

func (Layer1FlowControl_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[8]
}

func (x Layer1FlowControl_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Layer1FlowControl_Choice_Enum.Descriptor instead.
func (Layer1FlowControl_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{22, 0, 0}
}

type Capture_Format_Enum int32

const (
	Capture_Format_unspecified Capture_Format_Enum = 0
	Capture_Format_pcap        Capture_Format_Enum = 1
	Capture_Format_pcapng      Capture_Format_Enum = 2
)

// Enum value maps for Capture_Format_Enum.
var (
	Capture_Format_Enum_name = map[int32]string{
		0: "unspecified",
		1: "pcap",
		2: "pcapng",
	}
	Capture_Format_Enum_value = map[string]int32{
		"unspecified": 0,
		"pcap":        1,
		"pcapng":      2,
	}
)

func (x Capture_Format_Enum) Enum() *Capture_Format_Enum {
	p := new(Capture_Format_Enum)
	*p = x
	return p
}

func (x Capture_Format_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Capture_Format_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[9].Descriptor()
}

func (Capture_Format_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[9]
}

func (x Capture_Format_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Capture_Format_Enum.Descriptor instead.
func (Capture_Format_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{25, 0, 0}
}

type CaptureFilter_Choice_Enum int32

const (
	CaptureFilter_Choice_unspecified CaptureFilter_Choice_Enum = 0
	CaptureFilter_Choice_custom      CaptureFilter_Choice_Enum = 1
	CaptureFilter_Choice_ethernet    CaptureFilter_Choice_Enum = 2
	CaptureFilter_Choice_vlan        CaptureFilter_Choice_Enum = 3
	CaptureFilter_Choice_ipv4        CaptureFilter_Choice_Enum = 4
	CaptureFilter_Choice_ipv6        CaptureFilter_Choice_Enum = 5
)

// Enum value maps for CaptureFilter_Choice_Enum.
var (
	CaptureFilter_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "custom",
		2: "ethernet",
		3: "vlan",
		4: "ipv4",
		5: "ipv6",
	}
	CaptureFilter_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"custom":      1,
		"ethernet":    2,
		"vlan":        3,
		"ipv4":        4,
		"ipv6":        5,
	}
)

func (x CaptureFilter_Choice_Enum) Enum() *CaptureFilter_Choice_Enum {
	p := new(CaptureFilter_Choice_Enum)
	*p = x
	return p
}

func (x CaptureFilter_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaptureFilter_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[10].Descriptor()
}

func (CaptureFilter_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[10]
}

func (x CaptureFilter_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CaptureFilter_Choice_Enum.Descriptor instead.
func (CaptureFilter_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{26, 0, 0}
}

type IsisInterface_NetworkType_Enum int32

const (
	IsisInterface_NetworkType_unspecified    IsisInterface_NetworkType_Enum = 0
	IsisInterface_NetworkType_broadcast      IsisInterface_NetworkType_Enum = 1
	IsisInterface_NetworkType_point_to_point IsisInterface_NetworkType_Enum = 2
)

// Enum value maps for IsisInterface_NetworkType_Enum.
var (
	IsisInterface_NetworkType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "broadcast",
		2: "point_to_point",
	}
	IsisInterface_NetworkType_Enum_value = map[string]int32{
		"unspecified":    0,
		"broadcast":      1,
		"point_to_point": 2,
	}
)

func (x IsisInterface_NetworkType_Enum) Enum() *IsisInterface_NetworkType_Enum {
	p := new(IsisInterface_NetworkType_Enum)
	*p = x
	return p
}

func (x IsisInterface_NetworkType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisInterface_NetworkType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[11].Descriptor()
}

func (IsisInterface_NetworkType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[11]
}

func (x IsisInterface_NetworkType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisInterface_NetworkType_Enum.Descriptor instead.
func (IsisInterface_NetworkType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{37, 0, 0}
}

type IsisInterface_LevelType_Enum int32

const (
	IsisInterface_LevelType_unspecified IsisInterface_LevelType_Enum = 0
	IsisInterface_LevelType_level_1     IsisInterface_LevelType_Enum = 1
	IsisInterface_LevelType_level_2     IsisInterface_LevelType_Enum = 2
	IsisInterface_LevelType_level_1_2   IsisInterface_LevelType_Enum = 3
)

// Enum value maps for IsisInterface_LevelType_Enum.
var (
	IsisInterface_LevelType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "level_1",
		2: "level_2",
		3: "level_1_2",
	}
	IsisInterface_LevelType_Enum_value = map[string]int32{
		"unspecified": 0,
		"level_1":     1,
		"level_2":     2,
		"level_1_2":   3,
	}
)

func (x IsisInterface_LevelType_Enum) Enum() *IsisInterface_LevelType_Enum {
	p := new(IsisInterface_LevelType_Enum)
	*p = x
	return p
}

func (x IsisInterface_LevelType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisInterface_LevelType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[12].Descriptor()
}

func (IsisInterface_LevelType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[12]
}

func (x IsisInterface_LevelType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisInterface_LevelType_Enum.Descriptor instead.
func (IsisInterface_LevelType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{37, 1, 0}
}

type IsisInterfaceAuthentication_AuthType_Enum int32

const (
	IsisInterfaceAuthentication_AuthType_unspecified IsisInterfaceAuthentication_AuthType_Enum = 0
	IsisInterfaceAuthentication_AuthType_md5         IsisInterfaceAuthentication_AuthType_Enum = 1
	IsisInterfaceAuthentication_AuthType_password    IsisInterfaceAuthentication_AuthType_Enum = 2
)

// Enum value maps for IsisInterfaceAuthentication_AuthType_Enum.
var (
	IsisInterfaceAuthentication_AuthType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "md5",
		2: "password",
	}
	IsisInterfaceAuthentication_AuthType_Enum_value = map[string]int32{
		"unspecified": 0,
		"md5":         1,
		"password":    2,
	}
)

func (x IsisInterfaceAuthentication_AuthType_Enum) Enum() *IsisInterfaceAuthentication_AuthType_Enum {
	p := new(IsisInterfaceAuthentication_AuthType_Enum)
	*p = x
	return p
}

func (x IsisInterfaceAuthentication_AuthType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisInterfaceAuthentication_AuthType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[13].Descriptor()
}

func (IsisInterfaceAuthentication_AuthType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[13]
}

func (x IsisInterfaceAuthentication_AuthType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisInterfaceAuthentication_AuthType_Enum.Descriptor instead.
func (IsisInterfaceAuthentication_AuthType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{42, 0, 0}
}

type IsisAuthenticationBase_AuthType_Enum int32

const (
	IsisAuthenticationBase_AuthType_unspecified IsisAuthenticationBase_AuthType_Enum = 0
	IsisAuthenticationBase_AuthType_md5         IsisAuthenticationBase_AuthType_Enum = 1
	IsisAuthenticationBase_AuthType_password    IsisAuthenticationBase_AuthType_Enum = 2
)

// Enum value maps for IsisAuthenticationBase_AuthType_Enum.
var (
	IsisAuthenticationBase_AuthType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "md5",
		2: "password",
	}
	IsisAuthenticationBase_AuthType_Enum_value = map[string]int32{
		"unspecified": 0,
		"md5":         1,
		"password":    2,
	}
)

func (x IsisAuthenticationBase_AuthType_Enum) Enum() *IsisAuthenticationBase_AuthType_Enum {
	p := new(IsisAuthenticationBase_AuthType_Enum)
	*p = x
	return p
}

func (x IsisAuthenticationBase_AuthType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisAuthenticationBase_AuthType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[14].Descriptor()
}

func (IsisAuthenticationBase_AuthType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[14]
}

func (x IsisAuthenticationBase_AuthType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisAuthenticationBase_AuthType_Enum.Descriptor instead.
func (IsisAuthenticationBase_AuthType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{48, 0, 0}
}

type IsisV4RouteRange_OriginType_Enum int32

const (
	IsisV4RouteRange_OriginType_unspecified IsisV4RouteRange_OriginType_Enum = 0
	IsisV4RouteRange_OriginType_internal    IsisV4RouteRange_OriginType_Enum = 1
	IsisV4RouteRange_OriginType_external    IsisV4RouteRange_OriginType_Enum = 2
)

// Enum value maps for IsisV4RouteRange_OriginType_Enum.
var (
	IsisV4RouteRange_OriginType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "internal",
		2: "external",
	}
	IsisV4RouteRange_OriginType_Enum_value = map[string]int32{
		"unspecified": 0,
		"internal":    1,
		"external":    2,
	}
)

func (x IsisV4RouteRange_OriginType_Enum) Enum() *IsisV4RouteRange_OriginType_Enum {
	p := new(IsisV4RouteRange_OriginType_Enum)
	*p = x
	return p
}

func (x IsisV4RouteRange_OriginType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisV4RouteRange_OriginType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[15].Descriptor()
}

func (IsisV4RouteRange_OriginType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[15]
}

func (x IsisV4RouteRange_OriginType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisV4RouteRange_OriginType_Enum.Descriptor instead.
func (IsisV4RouteRange_OriginType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{49, 0, 0}
}

type IsisV4RouteRange_RedistributionType_Enum int32

const (
	IsisV4RouteRange_RedistributionType_unspecified IsisV4RouteRange_RedistributionType_Enum = 0
	IsisV4RouteRange_RedistributionType_up          IsisV4RouteRange_RedistributionType_Enum = 1
	IsisV4RouteRange_RedistributionType_down        IsisV4RouteRange_RedistributionType_Enum = 2
)

// Enum value maps for IsisV4RouteRange_RedistributionType_Enum.
var (
	IsisV4RouteRange_RedistributionType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	IsisV4RouteRange_RedistributionType_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x IsisV4RouteRange_RedistributionType_Enum) Enum() *IsisV4RouteRange_RedistributionType_Enum {
	p := new(IsisV4RouteRange_RedistributionType_Enum)
	*p = x
	return p
}

func (x IsisV4RouteRange_RedistributionType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisV4RouteRange_RedistributionType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[16].Descriptor()
}

func (IsisV4RouteRange_RedistributionType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[16]
}

func (x IsisV4RouteRange_RedistributionType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisV4RouteRange_RedistributionType_Enum.Descriptor instead.
func (IsisV4RouteRange_RedistributionType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{49, 1, 0}
}

type IsisV6RouteRange_OriginType_Enum int32

const (
	IsisV6RouteRange_OriginType_unspecified IsisV6RouteRange_OriginType_Enum = 0
	IsisV6RouteRange_OriginType_internal    IsisV6RouteRange_OriginType_Enum = 1
	IsisV6RouteRange_OriginType_external    IsisV6RouteRange_OriginType_Enum = 2
)

// Enum value maps for IsisV6RouteRange_OriginType_Enum.
var (
	IsisV6RouteRange_OriginType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "internal",
		2: "external",
	}
	IsisV6RouteRange_OriginType_Enum_value = map[string]int32{
		"unspecified": 0,
		"internal":    1,
		"external":    2,
	}
)

func (x IsisV6RouteRange_OriginType_Enum) Enum() *IsisV6RouteRange_OriginType_Enum {
	p := new(IsisV6RouteRange_OriginType_Enum)
	*p = x
	return p
}

func (x IsisV6RouteRange_OriginType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisV6RouteRange_OriginType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[17].Descriptor()
}

func (IsisV6RouteRange_OriginType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[17]
}

func (x IsisV6RouteRange_OriginType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisV6RouteRange_OriginType_Enum.Descriptor instead.
func (IsisV6RouteRange_OriginType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{53, 0, 0}
}

type IsisV6RouteRange_RedistributionType_Enum int32

const (
	IsisV6RouteRange_RedistributionType_unspecified IsisV6RouteRange_RedistributionType_Enum = 0
	IsisV6RouteRange_RedistributionType_up          IsisV6RouteRange_RedistributionType_Enum = 1
	IsisV6RouteRange_RedistributionType_down        IsisV6RouteRange_RedistributionType_Enum = 2
)

// Enum value maps for IsisV6RouteRange_RedistributionType_Enum.
var (
	IsisV6RouteRange_RedistributionType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	IsisV6RouteRange_RedistributionType_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x IsisV6RouteRange_RedistributionType_Enum) Enum() *IsisV6RouteRange_RedistributionType_Enum {
	p := new(IsisV6RouteRange_RedistributionType_Enum)
	*p = x
	return p
}

func (x IsisV6RouteRange_RedistributionType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisV6RouteRange_RedistributionType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[18].Descriptor()
}

func (IsisV6RouteRange_RedistributionType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[18]
}

func (x IsisV6RouteRange_RedistributionType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisV6RouteRange_RedistributionType_Enum.Descriptor instead.
func (IsisV6RouteRange_RedistributionType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{53, 1, 0}
}

type BgpV4Peer_AsType_Enum int32

const (
	BgpV4Peer_AsType_unspecified BgpV4Peer_AsType_Enum = 0
	BgpV4Peer_AsType_ibgp        BgpV4Peer_AsType_Enum = 1
	BgpV4Peer_AsType_ebgp        BgpV4Peer_AsType_Enum = 2
)

// Enum value maps for BgpV4Peer_AsType_Enum.
var (
	BgpV4Peer_AsType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ibgp",
		2: "ebgp",
	}
	BgpV4Peer_AsType_Enum_value = map[string]int32{
		"unspecified": 0,
		"ibgp":        1,
		"ebgp":        2,
	}
)

func (x BgpV4Peer_AsType_Enum) Enum() *BgpV4Peer_AsType_Enum {
	p := new(BgpV4Peer_AsType_Enum)
	*p = x
	return p
}

func (x BgpV4Peer_AsType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV4Peer_AsType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[19].Descriptor()
}

func (BgpV4Peer_AsType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[19]
}

func (x BgpV4Peer_AsType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV4Peer_AsType_Enum.Descriptor instead.
func (BgpV4Peer_AsType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{55, 0, 0}
}

type BgpV4Peer_AsNumberWidth_Enum int32

const (
	BgpV4Peer_AsNumberWidth_unspecified BgpV4Peer_AsNumberWidth_Enum = 0
	BgpV4Peer_AsNumberWidth_two         BgpV4Peer_AsNumberWidth_Enum = 1
	BgpV4Peer_AsNumberWidth_four        BgpV4Peer_AsNumberWidth_Enum = 2
)

// Enum value maps for BgpV4Peer_AsNumberWidth_Enum.
var (
	BgpV4Peer_AsNumberWidth_Enum_name = map[int32]string{
		0: "unspecified",
		1: "two",
		2: "four",
	}
	BgpV4Peer_AsNumberWidth_Enum_value = map[string]int32{
		"unspecified": 0,
		"two":         1,
		"four":        2,
	}
)

func (x BgpV4Peer_AsNumberWidth_Enum) Enum() *BgpV4Peer_AsNumberWidth_Enum {
	p := new(BgpV4Peer_AsNumberWidth_Enum)
	*p = x
	return p
}

func (x BgpV4Peer_AsNumberWidth_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV4Peer_AsNumberWidth_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[20].Descriptor()
}

func (BgpV4Peer_AsNumberWidth_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[20]
}

func (x BgpV4Peer_AsNumberWidth_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV4Peer_AsNumberWidth_Enum.Descriptor instead.
func (BgpV4Peer_AsNumberWidth_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{55, 1, 0}
}

type BgpV4EthernetSegment_ActiveMode_Enum int32

const (
	BgpV4EthernetSegment_ActiveMode_unspecified   BgpV4EthernetSegment_ActiveMode_Enum = 0
	BgpV4EthernetSegment_ActiveMode_single_active BgpV4EthernetSegment_ActiveMode_Enum = 1
	BgpV4EthernetSegment_ActiveMode_all_active    BgpV4EthernetSegment_ActiveMode_Enum = 2
)

// Enum value maps for BgpV4EthernetSegment_ActiveMode_Enum.
var (
	BgpV4EthernetSegment_ActiveMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "single_active",
		2: "all_active",
	}
	BgpV4EthernetSegment_ActiveMode_Enum_value = map[string]int32{
		"unspecified":   0,
		"single_active": 1,
		"all_active":    2,
	}
)

func (x BgpV4EthernetSegment_ActiveMode_Enum) Enum() *BgpV4EthernetSegment_ActiveMode_Enum {
	p := new(BgpV4EthernetSegment_ActiveMode_Enum)
	*p = x
	return p
}

func (x BgpV4EthernetSegment_ActiveMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV4EthernetSegment_ActiveMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[21].Descriptor()
}

func (BgpV4EthernetSegment_ActiveMode_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[21]
}

func (x BgpV4EthernetSegment_ActiveMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV4EthernetSegment_ActiveMode_Enum.Descriptor instead.
func (BgpV4EthernetSegment_ActiveMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{57, 0, 0}
}

type BgpRouteAdvanced_Origin_Enum int32

const (
	BgpRouteAdvanced_Origin_unspecified BgpRouteAdvanced_Origin_Enum = 0
	BgpRouteAdvanced_Origin_igp         BgpRouteAdvanced_Origin_Enum = 1
	BgpRouteAdvanced_Origin_egp         BgpRouteAdvanced_Origin_Enum = 2
	BgpRouteAdvanced_Origin_incomplete  BgpRouteAdvanced_Origin_Enum = 3
)

// Enum value maps for BgpRouteAdvanced_Origin_Enum.
var (
	BgpRouteAdvanced_Origin_Enum_name = map[int32]string{
		0: "unspecified",
		1: "igp",
		2: "egp",
		3: "incomplete",
	}
	BgpRouteAdvanced_Origin_Enum_value = map[string]int32{
		"unspecified": 0,
		"igp":         1,
		"egp":         2,
		"incomplete":  3,
	}
)

func (x BgpRouteAdvanced_Origin_Enum) Enum() *BgpRouteAdvanced_Origin_Enum {
	p := new(BgpRouteAdvanced_Origin_Enum)
	*p = x
	return p
}

func (x BgpRouteAdvanced_Origin_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteAdvanced_Origin_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[22].Descriptor()
}

func (BgpRouteAdvanced_Origin_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[22]
}

func (x BgpRouteAdvanced_Origin_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteAdvanced_Origin_Enum.Descriptor instead.
func (BgpRouteAdvanced_Origin_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{59, 0, 0}
}

type BgpCommunity_Type_Enum int32

const (
	BgpCommunity_Type_unspecified         BgpCommunity_Type_Enum = 0
	BgpCommunity_Type_manual_as_number    BgpCommunity_Type_Enum = 1
	BgpCommunity_Type_no_export           BgpCommunity_Type_Enum = 2
	BgpCommunity_Type_no_advertised       BgpCommunity_Type_Enum = 3
	BgpCommunity_Type_no_export_subconfed BgpCommunity_Type_Enum = 4
	BgpCommunity_Type_llgr_stale          BgpCommunity_Type_Enum = 5
	BgpCommunity_Type_no_llgr             BgpCommunity_Type_Enum = 6
)

// Enum value maps for BgpCommunity_Type_Enum.
var (
	BgpCommunity_Type_Enum_name = map[int32]string{
		0: "unspecified",
		1: "manual_as_number",
		2: "no_export",
		3: "no_advertised",
		4: "no_export_subconfed",
		5: "llgr_stale",
		6: "no_llgr",
	}
	BgpCommunity_Type_Enum_value = map[string]int32{
		"unspecified":         0,
		"manual_as_number":    1,
		"no_export":           2,
		"no_advertised":       3,
		"no_export_subconfed": 4,
		"llgr_stale":          5,
		"no_llgr":             6,
	}
)

func (x BgpCommunity_Type_Enum) Enum() *BgpCommunity_Type_Enum {
	p := new(BgpCommunity_Type_Enum)
	*p = x
	return p
}

func (x BgpCommunity_Type_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpCommunity_Type_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[23].Descriptor()
}

func (BgpCommunity_Type_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[23]
}

func (x BgpCommunity_Type_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpCommunity_Type_Enum.Descriptor instead.
func (BgpCommunity_Type_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{60, 0, 0}
}

type BgpExtCommunity_Type_Enum int32

const (
	BgpExtCommunity_Type_unspecified                            BgpExtCommunity_Type_Enum = 0
	BgpExtCommunity_Type_administrator_as_2octet                BgpExtCommunity_Type_Enum = 1
	BgpExtCommunity_Type_administrator_ipv4_address             BgpExtCommunity_Type_Enum = 2
	BgpExtCommunity_Type_administrator_as_4octet                BgpExtCommunity_Type_Enum = 3
	BgpExtCommunity_Type_opaque                                 BgpExtCommunity_Type_Enum = 4
	BgpExtCommunity_Type_evpn                                   BgpExtCommunity_Type_Enum = 5
	BgpExtCommunity_Type_administrator_as_2octet_link_bandwidth BgpExtCommunity_Type_Enum = 6
)

// Enum value maps for BgpExtCommunity_Type_Enum.
var (
	BgpExtCommunity_Type_Enum_name = map[int32]string{
		0: "unspecified",
		1: "administrator_as_2octet",
		2: "administrator_ipv4_address",
		3: "administrator_as_4octet",
		4: "opaque",
		5: "evpn",
		6: "administrator_as_2octet_link_bandwidth",
	}
	BgpExtCommunity_Type_Enum_value = map[string]int32{
		"unspecified":                            0,
		"administrator_as_2octet":                1,
		"administrator_ipv4_address":             2,
		"administrator_as_4octet":                3,
		"opaque":                                 4,
		"evpn":                                   5,
		"administrator_as_2octet_link_bandwidth": 6,
	}
)

func (x BgpExtCommunity_Type_Enum) Enum() *BgpExtCommunity_Type_Enum {
	p := new(BgpExtCommunity_Type_Enum)
	*p = x
	return p
}

func (x BgpExtCommunity_Type_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpExtCommunity_Type_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[24].Descriptor()
}

func (BgpExtCommunity_Type_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[24]
}

func (x BgpExtCommunity_Type_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpExtCommunity_Type_Enum.Descriptor instead.
func (BgpExtCommunity_Type_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{61, 0, 0}
}

type BgpExtCommunity_Subtype_Enum int32

const (
	BgpExtCommunity_Subtype_unspecified        BgpExtCommunity_Subtype_Enum = 0
	BgpExtCommunity_Subtype_route_target       BgpExtCommunity_Subtype_Enum = 1
	BgpExtCommunity_Subtype_origin             BgpExtCommunity_Subtype_Enum = 2
	BgpExtCommunity_Subtype_extended_bandwidth BgpExtCommunity_Subtype_Enum = 3
	BgpExtCommunity_Subtype_color              BgpExtCommunity_Subtype_Enum = 4
	BgpExtCommunity_Subtype_encapsulation      BgpExtCommunity_Subtype_Enum = 5
	BgpExtCommunity_Subtype_mac_address        BgpExtCommunity_Subtype_Enum = 6
)

// Enum value maps for BgpExtCommunity_Subtype_Enum.
var (
	BgpExtCommunity_Subtype_Enum_name = map[int32]string{
		0: "unspecified",
		1: "route_target",
		2: "origin",
		3: "extended_bandwidth",
		4: "color",
		5: "encapsulation",
		6: "mac_address",
	}
	BgpExtCommunity_Subtype_Enum_value = map[string]int32{
		"unspecified":        0,
		"route_target":       1,
		"origin":             2,
		"extended_bandwidth": 3,
		"color":              4,
		"encapsulation":      5,
		"mac_address":        6,
	}
)

func (x BgpExtCommunity_Subtype_Enum) Enum() *BgpExtCommunity_Subtype_Enum {
	p := new(BgpExtCommunity_Subtype_Enum)
	*p = x
	return p
}

func (x BgpExtCommunity_Subtype_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpExtCommunity_Subtype_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[25].Descriptor()
}

func (BgpExtCommunity_Subtype_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[25]
}

func (x BgpExtCommunity_Subtype_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpExtCommunity_Subtype_Enum.Descriptor instead.
func (BgpExtCommunity_Subtype_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{61, 1, 0}
}

type BgpAsPath_AsSetMode_Enum int32

const (
	BgpAsPath_AsSetMode_unspecified              BgpAsPath_AsSetMode_Enum = 0
	BgpAsPath_AsSetMode_do_not_include_local_as  BgpAsPath_AsSetMode_Enum = 1
	BgpAsPath_AsSetMode_include_as_seq           BgpAsPath_AsSetMode_Enum = 2
	BgpAsPath_AsSetMode_include_as_set           BgpAsPath_AsSetMode_Enum = 3
	BgpAsPath_AsSetMode_include_as_confed_seq    BgpAsPath_AsSetMode_Enum = 4
	BgpAsPath_AsSetMode_include_as_confed_set    BgpAsPath_AsSetMode_Enum = 5
	BgpAsPath_AsSetMode_prepend_to_first_segment BgpAsPath_AsSetMode_Enum = 6
)

// Enum value maps for BgpAsPath_AsSetMode_Enum.
var (
	BgpAsPath_AsSetMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "do_not_include_local_as",
		2: "include_as_seq",
		3: "include_as_set",
		4: "include_as_confed_seq",
		5: "include_as_confed_set",
		6: "prepend_to_first_segment",
	}
	BgpAsPath_AsSetMode_Enum_value = map[string]int32{
		"unspecified":              0,
		"do_not_include_local_as":  1,
		"include_as_seq":           2,
		"include_as_set":           3,
		"include_as_confed_seq":    4,
		"include_as_confed_set":    5,
		"prepend_to_first_segment": 6,
	}
)

func (x BgpAsPath_AsSetMode_Enum) Enum() *BgpAsPath_AsSetMode_Enum {
	p := new(BgpAsPath_AsSetMode_Enum)
	*p = x
	return p
}

func (x BgpAsPath_AsSetMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpAsPath_AsSetMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[26].Descriptor()
}

func (BgpAsPath_AsSetMode_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[26]
}

func (x BgpAsPath_AsSetMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpAsPath_AsSetMode_Enum.Descriptor instead.
func (BgpAsPath_AsSetMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{62, 0, 0}
}

type BgpAsPathSegment_Type_Enum int32

const (
	BgpAsPathSegment_Type_unspecified   BgpAsPathSegment_Type_Enum = 0
	BgpAsPathSegment_Type_as_seq        BgpAsPathSegment_Type_Enum = 1
	BgpAsPathSegment_Type_as_set        BgpAsPathSegment_Type_Enum = 2
	BgpAsPathSegment_Type_as_confed_seq BgpAsPathSegment_Type_Enum = 3
	BgpAsPathSegment_Type_as_confed_set BgpAsPathSegment_Type_Enum = 4
)

// Enum value maps for BgpAsPathSegment_Type_Enum.
var (
	BgpAsPathSegment_Type_Enum_name = map[int32]string{
		0: "unspecified",
		1: "as_seq",
		2: "as_set",
		3: "as_confed_seq",
		4: "as_confed_set",
	}
	BgpAsPathSegment_Type_Enum_value = map[string]int32{
		"unspecified":   0,
		"as_seq":        1,
		"as_set":        2,
		"as_confed_seq": 3,
		"as_confed_set": 4,
	}
)

func (x BgpAsPathSegment_Type_Enum) Enum() *BgpAsPathSegment_Type_Enum {
	p := new(BgpAsPathSegment_Type_Enum)
	*p = x
	return p
}

func (x BgpAsPathSegment_Type_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpAsPathSegment_Type_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[27].Descriptor()
}

func (BgpAsPathSegment_Type_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[27]
}

func (x BgpAsPathSegment_Type_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpAsPathSegment_Type_Enum.Descriptor instead.
func (BgpAsPathSegment_Type_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{63, 0, 0}
}

type BgpV4EvpnEvis_Choice_Enum int32

const (
	BgpV4EvpnEvis_Choice_unspecified BgpV4EvpnEvis_Choice_Enum = 0
	BgpV4EvpnEvis_Choice_evi_vxlan   BgpV4EvpnEvis_Choice_Enum = 1
)

// Enum value maps for BgpV4EvpnEvis_Choice_Enum.
var (
	BgpV4EvpnEvis_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "evi_vxlan",
	}
	BgpV4EvpnEvis_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"evi_vxlan":   1,
	}
)

func (x BgpV4EvpnEvis_Choice_Enum) Enum() *BgpV4EvpnEvis_Choice_Enum {
	p := new(BgpV4EvpnEvis_Choice_Enum)
	*p = x
	return p
}

func (x BgpV4EvpnEvis_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV4EvpnEvis_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[28].Descriptor()
}

func (BgpV4EvpnEvis_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[28]
}

func (x BgpV4EvpnEvis_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV4EvpnEvis_Choice_Enum.Descriptor instead.
func (BgpV4EvpnEvis_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{64, 0, 0}
}

type BgpV4EviVxlan_ReplicationType_Enum int32

const (
	BgpV4EviVxlan_ReplicationType_unspecified         BgpV4EviVxlan_ReplicationType_Enum = 0
	BgpV4EviVxlan_ReplicationType_ingress_replication BgpV4EviVxlan_ReplicationType_Enum = 1
)

// Enum value maps for BgpV4EviVxlan_ReplicationType_Enum.
var (
	BgpV4EviVxlan_ReplicationType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ingress_replication",
	}
	BgpV4EviVxlan_ReplicationType_Enum_value = map[string]int32{
		"unspecified":         0,
		"ingress_replication": 1,
	}
)

func (x BgpV4EviVxlan_ReplicationType_Enum) Enum() *BgpV4EviVxlan_ReplicationType_Enum {
	p := new(BgpV4EviVxlan_ReplicationType_Enum)
	*p = x
	return p
}

func (x BgpV4EviVxlan_ReplicationType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV4EviVxlan_ReplicationType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[29].Descriptor()
}

func (BgpV4EviVxlan_ReplicationType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[29]
}

func (x BgpV4EviVxlan_ReplicationType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV4EviVxlan_ReplicationType_Enum.Descriptor instead.
func (BgpV4EviVxlan_ReplicationType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{65, 0, 0}
}

type BgpRouteDistinguisher_RdType_Enum int32

const (
	BgpRouteDistinguisher_RdType_unspecified  BgpRouteDistinguisher_RdType_Enum = 0
	BgpRouteDistinguisher_RdType_as_2octet    BgpRouteDistinguisher_RdType_Enum = 1
	BgpRouteDistinguisher_RdType_ipv4_address BgpRouteDistinguisher_RdType_Enum = 2
	BgpRouteDistinguisher_RdType_as_4octet    BgpRouteDistinguisher_RdType_Enum = 3
)

// Enum value maps for BgpRouteDistinguisher_RdType_Enum.
var (
	BgpRouteDistinguisher_RdType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "as_2octet",
		2: "ipv4_address",
		3: "as_4octet",
	}
	BgpRouteDistinguisher_RdType_Enum_value = map[string]int32{
		"unspecified":  0,
		"as_2octet":    1,
		"ipv4_address": 2,
		"as_4octet":    3,
	}
)

func (x BgpRouteDistinguisher_RdType_Enum) Enum() *BgpRouteDistinguisher_RdType_Enum {
	p := new(BgpRouteDistinguisher_RdType_Enum)
	*p = x
	return p
}

func (x BgpRouteDistinguisher_RdType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteDistinguisher_RdType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[30].Descriptor()
}

func (BgpRouteDistinguisher_RdType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[30]
}

func (x BgpRouteDistinguisher_RdType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteDistinguisher_RdType_Enum.Descriptor instead.
func (BgpRouteDistinguisher_RdType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{68, 0, 0}
}

type BgpRouteTarget_RtType_Enum int32

const (
	BgpRouteTarget_RtType_unspecified  BgpRouteTarget_RtType_Enum = 0
	BgpRouteTarget_RtType_as_2octet    BgpRouteTarget_RtType_Enum = 1
	BgpRouteTarget_RtType_ipv4_address BgpRouteTarget_RtType_Enum = 2
	BgpRouteTarget_RtType_as_4octet    BgpRouteTarget_RtType_Enum = 3
)

// Enum value maps for BgpRouteTarget_RtType_Enum.
var (
	BgpRouteTarget_RtType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "as_2octet",
		2: "ipv4_address",
		3: "as_4octet",
	}
	BgpRouteTarget_RtType_Enum_value = map[string]int32{
		"unspecified":  0,
		"as_2octet":    1,
		"ipv4_address": 2,
		"as_4octet":    3,
	}
)

func (x BgpRouteTarget_RtType_Enum) Enum() *BgpRouteTarget_RtType_Enum {
	p := new(BgpRouteTarget_RtType_Enum)
	*p = x
	return p
}

func (x BgpRouteTarget_RtType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteTarget_RtType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[31].Descriptor()
}

func (BgpRouteTarget_RtType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[31]
}

func (x BgpRouteTarget_RtType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteTarget_RtType_Enum.Descriptor instead.
func (BgpRouteTarget_RtType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{69, 0, 0}
}

type BgpV4RouteRange_NextHopMode_Enum int32

const (
	BgpV4RouteRange_NextHopMode_unspecified BgpV4RouteRange_NextHopMode_Enum = 0
	BgpV4RouteRange_NextHopMode_local_ip    BgpV4RouteRange_NextHopMode_Enum = 1
	BgpV4RouteRange_NextHopMode_manual      BgpV4RouteRange_NextHopMode_Enum = 2
)

// Enum value maps for BgpV4RouteRange_NextHopMode_Enum.
var (
	BgpV4RouteRange_NextHopMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "local_ip",
		2: "manual",
	}
	BgpV4RouteRange_NextHopMode_Enum_value = map[string]int32{
		"unspecified": 0,
		"local_ip":    1,
		"manual":      2,
	}
)

func (x BgpV4RouteRange_NextHopMode_Enum) Enum() *BgpV4RouteRange_NextHopMode_Enum {
	p := new(BgpV4RouteRange_NextHopMode_Enum)
	*p = x
	return p
}

func (x BgpV4RouteRange_NextHopMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV4RouteRange_NextHopMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[32].Descriptor()
}

func (BgpV4RouteRange_NextHopMode_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[32]
}

func (x BgpV4RouteRange_NextHopMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV4RouteRange_NextHopMode_Enum.Descriptor instead.
func (BgpV4RouteRange_NextHopMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{73, 0, 0}
}

type BgpV4RouteRange_NextHopAddressType_Enum int32

const (
	BgpV4RouteRange_NextHopAddressType_unspecified BgpV4RouteRange_NextHopAddressType_Enum = 0
	BgpV4RouteRange_NextHopAddressType_ipv4        BgpV4RouteRange_NextHopAddressType_Enum = 1
	BgpV4RouteRange_NextHopAddressType_ipv6        BgpV4RouteRange_NextHopAddressType_Enum = 2
)

// Enum value maps for BgpV4RouteRange_NextHopAddressType_Enum.
var (
	BgpV4RouteRange_NextHopAddressType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ipv4",
		2: "ipv6",
	}
	BgpV4RouteRange_NextHopAddressType_Enum_value = map[string]int32{
		"unspecified": 0,
		"ipv4":        1,
		"ipv6":        2,
	}
)

func (x BgpV4RouteRange_NextHopAddressType_Enum) Enum() *BgpV4RouteRange_NextHopAddressType_Enum {
	p := new(BgpV4RouteRange_NextHopAddressType_Enum)
	*p = x
	return p
}

func (x BgpV4RouteRange_NextHopAddressType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV4RouteRange_NextHopAddressType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[33].Descriptor()
}

func (BgpV4RouteRange_NextHopAddressType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[33]
}

func (x BgpV4RouteRange_NextHopAddressType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV4RouteRange_NextHopAddressType_Enum.Descriptor instead.
func (BgpV4RouteRange_NextHopAddressType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{73, 1, 0}
}

type BgpV6RouteRange_NextHopMode_Enum int32

const (
	BgpV6RouteRange_NextHopMode_unspecified BgpV6RouteRange_NextHopMode_Enum = 0
	BgpV6RouteRange_NextHopMode_local_ip    BgpV6RouteRange_NextHopMode_Enum = 1
	BgpV6RouteRange_NextHopMode_manual      BgpV6RouteRange_NextHopMode_Enum = 2
)

// Enum value maps for BgpV6RouteRange_NextHopMode_Enum.
var (
	BgpV6RouteRange_NextHopMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "local_ip",
		2: "manual",
	}
	BgpV6RouteRange_NextHopMode_Enum_value = map[string]int32{
		"unspecified": 0,
		"local_ip":    1,
		"manual":      2,
	}
)

func (x BgpV6RouteRange_NextHopMode_Enum) Enum() *BgpV6RouteRange_NextHopMode_Enum {
	p := new(BgpV6RouteRange_NextHopMode_Enum)
	*p = x
	return p
}

func (x BgpV6RouteRange_NextHopMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV6RouteRange_NextHopMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[34].Descriptor()
}

func (BgpV6RouteRange_NextHopMode_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[34]
}

func (x BgpV6RouteRange_NextHopMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV6RouteRange_NextHopMode_Enum.Descriptor instead.
func (BgpV6RouteRange_NextHopMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{75, 0, 0}
}

type BgpV6RouteRange_NextHopAddressType_Enum int32

const (
	BgpV6RouteRange_NextHopAddressType_unspecified BgpV6RouteRange_NextHopAddressType_Enum = 0
	BgpV6RouteRange_NextHopAddressType_ipv4        BgpV6RouteRange_NextHopAddressType_Enum = 1
	BgpV6RouteRange_NextHopAddressType_ipv6        BgpV6RouteRange_NextHopAddressType_Enum = 2
)

// Enum value maps for BgpV6RouteRange_NextHopAddressType_Enum.
var (
	BgpV6RouteRange_NextHopAddressType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ipv4",
		2: "ipv6",
	}
	BgpV6RouteRange_NextHopAddressType_Enum_value = map[string]int32{
		"unspecified": 0,
		"ipv4":        1,
		"ipv6":        2,
	}
)

func (x BgpV6RouteRange_NextHopAddressType_Enum) Enum() *BgpV6RouteRange_NextHopAddressType_Enum {
	p := new(BgpV6RouteRange_NextHopAddressType_Enum)
	*p = x
	return p
}

func (x BgpV6RouteRange_NextHopAddressType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV6RouteRange_NextHopAddressType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[35].Descriptor()
}

func (BgpV6RouteRange_NextHopAddressType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[35]
}

func (x BgpV6RouteRange_NextHopAddressType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV6RouteRange_NextHopAddressType_Enum.Descriptor instead.
func (BgpV6RouteRange_NextHopAddressType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{75, 1, 0}
}

type BgpSrteV4Policy_NextHopMode_Enum int32

const (
	BgpSrteV4Policy_NextHopMode_unspecified BgpSrteV4Policy_NextHopMode_Enum = 0
	BgpSrteV4Policy_NextHopMode_local_ip    BgpSrteV4Policy_NextHopMode_Enum = 1
	BgpSrteV4Policy_NextHopMode_manual      BgpSrteV4Policy_NextHopMode_Enum = 2
)

// Enum value maps for BgpSrteV4Policy_NextHopMode_Enum.
var (
	BgpSrteV4Policy_NextHopMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "local_ip",
		2: "manual",
	}
	BgpSrteV4Policy_NextHopMode_Enum_value = map[string]int32{
		"unspecified": 0,
		"local_ip":    1,
		"manual":      2,
	}
)

func (x BgpSrteV4Policy_NextHopMode_Enum) Enum() *BgpSrteV4Policy_NextHopMode_Enum {
	p := new(BgpSrteV4Policy_NextHopMode_Enum)
	*p = x
	return p
}

func (x BgpSrteV4Policy_NextHopMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpSrteV4Policy_NextHopMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[36].Descriptor()
}

func (BgpSrteV4Policy_NextHopMode_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[36]
}

func (x BgpSrteV4Policy_NextHopMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpSrteV4Policy_NextHopMode_Enum.Descriptor instead.
func (BgpSrteV4Policy_NextHopMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{76, 0, 0}
}

type BgpSrteV4Policy_NextHopAddressType_Enum int32

const (
	BgpSrteV4Policy_NextHopAddressType_unspecified BgpSrteV4Policy_NextHopAddressType_Enum = 0
	BgpSrteV4Policy_NextHopAddressType_ipv4        BgpSrteV4Policy_NextHopAddressType_Enum = 1
	BgpSrteV4Policy_NextHopAddressType_ipv6        BgpSrteV4Policy_NextHopAddressType_Enum = 2
)

// Enum value maps for BgpSrteV4Policy_NextHopAddressType_Enum.
var (
	BgpSrteV4Policy_NextHopAddressType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ipv4",
		2: "ipv6",
	}
	BgpSrteV4Policy_NextHopAddressType_Enum_value = map[string]int32{
		"unspecified": 0,
		"ipv4":        1,
		"ipv6":        2,
	}
)

func (x BgpSrteV4Policy_NextHopAddressType_Enum) Enum() *BgpSrteV4Policy_NextHopAddressType_Enum {
	p := new(BgpSrteV4Policy_NextHopAddressType_Enum)
	*p = x
	return p
}

func (x BgpSrteV4Policy_NextHopAddressType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpSrteV4Policy_NextHopAddressType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[37].Descriptor()
}

func (BgpSrteV4Policy_NextHopAddressType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[37]
}

func (x BgpSrteV4Policy_NextHopAddressType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpSrteV4Policy_NextHopAddressType_Enum.Descriptor instead.
func (BgpSrteV4Policy_NextHopAddressType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{76, 1, 0}
}

type BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum int32

const (
	BgpSrteRemoteEndpointSubTlv_AddressFamily_unspecified BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum = 0
	BgpSrteRemoteEndpointSubTlv_AddressFamily_ipv4        BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum = 1
	BgpSrteRemoteEndpointSubTlv_AddressFamily_ipv6        BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum = 2
)

// Enum value maps for BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum.
var (
	BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ipv4",
		2: "ipv6",
	}
	BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum_value = map[string]int32{
		"unspecified": 0,
		"ipv4":        1,
		"ipv6":        2,
	}
)

func (x BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum) Enum() *BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum {
	p := new(BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum)
	*p = x
	return p
}

func (x BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[38].Descriptor()
}

func (BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[38]
}

func (x BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum.Descriptor instead.
func (BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{78, 0, 0}
}

type BgpSrteBindingSubTlv_BindingSidType_Enum int32

const (
	BgpSrteBindingSubTlv_BindingSidType_unspecified    BgpSrteBindingSubTlv_BindingSidType_Enum = 0
	BgpSrteBindingSubTlv_BindingSidType_no_binding     BgpSrteBindingSubTlv_BindingSidType_Enum = 1
	BgpSrteBindingSubTlv_BindingSidType_four_octet_sid BgpSrteBindingSubTlv_BindingSidType_Enum = 2
	BgpSrteBindingSubTlv_BindingSidType_ipv6_sid       BgpSrteBindingSubTlv_BindingSidType_Enum = 3
)

// Enum value maps for BgpSrteBindingSubTlv_BindingSidType_Enum.
var (
	BgpSrteBindingSubTlv_BindingSidType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "no_binding",
		2: "four_octet_sid",
		3: "ipv6_sid",
	}
	BgpSrteBindingSubTlv_BindingSidType_Enum_value = map[string]int32{
		"unspecified":    0,
		"no_binding":     1,
		"four_octet_sid": 2,
		"ipv6_sid":       3,
	}
)

func (x BgpSrteBindingSubTlv_BindingSidType_Enum) Enum() *BgpSrteBindingSubTlv_BindingSidType_Enum {
	p := new(BgpSrteBindingSubTlv_BindingSidType_Enum)
	*p = x
	return p
}

func (x BgpSrteBindingSubTlv_BindingSidType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpSrteBindingSubTlv_BindingSidType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[39].Descriptor()
}

func (BgpSrteBindingSubTlv_BindingSidType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[39]
}

func (x BgpSrteBindingSubTlv_BindingSidType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpSrteBindingSubTlv_BindingSidType_Enum.Descriptor instead.
func (BgpSrteBindingSubTlv_BindingSidType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{80, 0, 0}
}

type BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum int32

const (
	BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_unspecified         BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum = 0
	BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_reserved_enlp       BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum = 1
	BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_push_ipv4_enlp      BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum = 2
	BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_push_ipv6_enlp      BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum = 3
	BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_push_ipv4_ipv6_enlp BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum = 4
	BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_do_not_push_enlp    BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum = 5
)

// Enum value maps for BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum.
var (
	BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum_name = map[int32]string{
		0: "unspecified",
		1: "reserved_enlp",
		2: "push_ipv4_enlp",
		3: "push_ipv6_enlp",
		4: "push_ipv4_ipv6_enlp",
		5: "do_not_push_enlp",
	}
	BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum_value = map[string]int32{
		"unspecified":         0,
		"reserved_enlp":       1,
		"push_ipv4_enlp":      2,
		"push_ipv6_enlp":      3,
		"push_ipv4_ipv6_enlp": 4,
		"do_not_push_enlp":    5,
	}
)

func (x BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum) Enum() *BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum {
	p := new(BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum)
	*p = x
	return p
}

func (x BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[40].Descriptor()
}

func (BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[40]
}

func (x BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum.Descriptor instead.
func (BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{84, 0, 0}
}

type BgpSrteSegment_SegmentType_Enum int32

const (
	BgpSrteSegment_SegmentType_unspecified BgpSrteSegment_SegmentType_Enum = 0
	BgpSrteSegment_SegmentType_type_a      BgpSrteSegment_SegmentType_Enum = 1
	BgpSrteSegment_SegmentType_type_b      BgpSrteSegment_SegmentType_Enum = 2
	BgpSrteSegment_SegmentType_type_c      BgpSrteSegment_SegmentType_Enum = 3
	BgpSrteSegment_SegmentType_type_d      BgpSrteSegment_SegmentType_Enum = 4
	BgpSrteSegment_SegmentType_type_e      BgpSrteSegment_SegmentType_Enum = 5
	BgpSrteSegment_SegmentType_type_f      BgpSrteSegment_SegmentType_Enum = 6
	BgpSrteSegment_SegmentType_type_g      BgpSrteSegment_SegmentType_Enum = 7
	BgpSrteSegment_SegmentType_type_h      BgpSrteSegment_SegmentType_Enum = 8
	BgpSrteSegment_SegmentType_type_i      BgpSrteSegment_SegmentType_Enum = 9
	BgpSrteSegment_SegmentType_type_j      BgpSrteSegment_SegmentType_Enum = 10
	BgpSrteSegment_SegmentType_type_k      BgpSrteSegment_SegmentType_Enum = 11
)

// Enum value maps for BgpSrteSegment_SegmentType_Enum.
var (
	BgpSrteSegment_SegmentType_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "type_a",
		2:  "type_b",
		3:  "type_c",
		4:  "type_d",
		5:  "type_e",
		6:  "type_f",
		7:  "type_g",
		8:  "type_h",
		9:  "type_i",
		10: "type_j",
		11: "type_k",
	}
	BgpSrteSegment_SegmentType_Enum_value = map[string]int32{
		"unspecified": 0,
		"type_a":      1,
		"type_b":      2,
		"type_c":      3,
		"type_d":      4,
		"type_e":      5,
		"type_f":      6,
		"type_g":      7,
		"type_h":      8,
		"type_i":      9,
		"type_j":      10,
		"type_k":      11,
	}
)

func (x BgpSrteSegment_SegmentType_Enum) Enum() *BgpSrteSegment_SegmentType_Enum {
	p := new(BgpSrteSegment_SegmentType_Enum)
	*p = x
	return p
}

func (x BgpSrteSegment_SegmentType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpSrteSegment_SegmentType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[41].Descriptor()
}

func (BgpSrteSegment_SegmentType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[41]
}

func (x BgpSrteSegment_SegmentType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpSrteSegment_SegmentType_Enum.Descriptor instead.
func (BgpSrteSegment_SegmentType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{86, 0, 0}
}

type BgpSrteV6Policy_NextHopMode_Enum int32

const (
	BgpSrteV6Policy_NextHopMode_unspecified BgpSrteV6Policy_NextHopMode_Enum = 0
	BgpSrteV6Policy_NextHopMode_local_ip    BgpSrteV6Policy_NextHopMode_Enum = 1
	BgpSrteV6Policy_NextHopMode_manual      BgpSrteV6Policy_NextHopMode_Enum = 2
)

// Enum value maps for BgpSrteV6Policy_NextHopMode_Enum.
var (
	BgpSrteV6Policy_NextHopMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "local_ip",
		2: "manual",
	}
	BgpSrteV6Policy_NextHopMode_Enum_value = map[string]int32{
		"unspecified": 0,
		"local_ip":    1,
		"manual":      2,
	}
)

func (x BgpSrteV6Policy_NextHopMode_Enum) Enum() *BgpSrteV6Policy_NextHopMode_Enum {
	p := new(BgpSrteV6Policy_NextHopMode_Enum)
	*p = x
	return p
}

func (x BgpSrteV6Policy_NextHopMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpSrteV6Policy_NextHopMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[42].Descriptor()
}

func (BgpSrteV6Policy_NextHopMode_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[42]
}

func (x BgpSrteV6Policy_NextHopMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpSrteV6Policy_NextHopMode_Enum.Descriptor instead.
func (BgpSrteV6Policy_NextHopMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{100, 0, 0}
}

type BgpSrteV6Policy_NextHopAddressType_Enum int32

const (
	BgpSrteV6Policy_NextHopAddressType_unspecified BgpSrteV6Policy_NextHopAddressType_Enum = 0
	BgpSrteV6Policy_NextHopAddressType_ipv4        BgpSrteV6Policy_NextHopAddressType_Enum = 1
	BgpSrteV6Policy_NextHopAddressType_ipv6        BgpSrteV6Policy_NextHopAddressType_Enum = 2
)

// Enum value maps for BgpSrteV6Policy_NextHopAddressType_Enum.
var (
	BgpSrteV6Policy_NextHopAddressType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ipv4",
		2: "ipv6",
	}
	BgpSrteV6Policy_NextHopAddressType_Enum_value = map[string]int32{
		"unspecified": 0,
		"ipv4":        1,
		"ipv6":        2,
	}
)

func (x BgpSrteV6Policy_NextHopAddressType_Enum) Enum() *BgpSrteV6Policy_NextHopAddressType_Enum {
	p := new(BgpSrteV6Policy_NextHopAddressType_Enum)
	*p = x
	return p
}

func (x BgpSrteV6Policy_NextHopAddressType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpSrteV6Policy_NextHopAddressType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[43].Descriptor()
}

func (BgpSrteV6Policy_NextHopAddressType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[43]
}

func (x BgpSrteV6Policy_NextHopAddressType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpSrteV6Policy_NextHopAddressType_Enum.Descriptor instead.
func (BgpSrteV6Policy_NextHopAddressType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{100, 1, 0}
}

type BgpV6Peer_AsType_Enum int32

const (
	BgpV6Peer_AsType_unspecified BgpV6Peer_AsType_Enum = 0
	BgpV6Peer_AsType_ibgp        BgpV6Peer_AsType_Enum = 1
	BgpV6Peer_AsType_ebgp        BgpV6Peer_AsType_Enum = 2
)

// Enum value maps for BgpV6Peer_AsType_Enum.
var (
	BgpV6Peer_AsType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ibgp",
		2: "ebgp",
	}
	BgpV6Peer_AsType_Enum_value = map[string]int32{
		"unspecified": 0,
		"ibgp":        1,
		"ebgp":        2,
	}
)

func (x BgpV6Peer_AsType_Enum) Enum() *BgpV6Peer_AsType_Enum {
	p := new(BgpV6Peer_AsType_Enum)
	*p = x
	return p
}

func (x BgpV6Peer_AsType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV6Peer_AsType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[44].Descriptor()
}

func (BgpV6Peer_AsType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[44]
}

func (x BgpV6Peer_AsType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV6Peer_AsType_Enum.Descriptor instead.
func (BgpV6Peer_AsType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{102, 0, 0}
}

type BgpV6Peer_AsNumberWidth_Enum int32

const (
	BgpV6Peer_AsNumberWidth_unspecified BgpV6Peer_AsNumberWidth_Enum = 0
	BgpV6Peer_AsNumberWidth_two         BgpV6Peer_AsNumberWidth_Enum = 1
	BgpV6Peer_AsNumberWidth_four        BgpV6Peer_AsNumberWidth_Enum = 2
)

// Enum value maps for BgpV6Peer_AsNumberWidth_Enum.
var (
	BgpV6Peer_AsNumberWidth_Enum_name = map[int32]string{
		0: "unspecified",
		1: "two",
		2: "four",
	}
	BgpV6Peer_AsNumberWidth_Enum_value = map[string]int32{
		"unspecified": 0,
		"two":         1,
		"four":        2,
	}
)

func (x BgpV6Peer_AsNumberWidth_Enum) Enum() *BgpV6Peer_AsNumberWidth_Enum {
	p := new(BgpV6Peer_AsNumberWidth_Enum)
	*p = x
	return p
}

func (x BgpV6Peer_AsNumberWidth_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV6Peer_AsNumberWidth_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[45].Descriptor()
}

func (BgpV6Peer_AsNumberWidth_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[45]
}

func (x BgpV6Peer_AsNumberWidth_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV6Peer_AsNumberWidth_Enum.Descriptor instead.
func (BgpV6Peer_AsNumberWidth_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{102, 1, 0}
}

type BgpV6EthernetSegment_ActiveMode_Enum int32

const (
	BgpV6EthernetSegment_ActiveMode_unspecified   BgpV6EthernetSegment_ActiveMode_Enum = 0
	BgpV6EthernetSegment_ActiveMode_single_active BgpV6EthernetSegment_ActiveMode_Enum = 1
	BgpV6EthernetSegment_ActiveMode_all_active    BgpV6EthernetSegment_ActiveMode_Enum = 2
)

// Enum value maps for BgpV6EthernetSegment_ActiveMode_Enum.
var (
	BgpV6EthernetSegment_ActiveMode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "single_active",
		2: "all_active",
	}
	BgpV6EthernetSegment_ActiveMode_Enum_value = map[string]int32{
		"unspecified":   0,
		"single_active": 1,
		"all_active":    2,
	}
)

func (x BgpV6EthernetSegment_ActiveMode_Enum) Enum() *BgpV6EthernetSegment_ActiveMode_Enum {
	p := new(BgpV6EthernetSegment_ActiveMode_Enum)
	*p = x
	return p
}

func (x BgpV6EthernetSegment_ActiveMode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV6EthernetSegment_ActiveMode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[46].Descriptor()
}

func (BgpV6EthernetSegment_ActiveMode_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[46]
}

func (x BgpV6EthernetSegment_ActiveMode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV6EthernetSegment_ActiveMode_Enum.Descriptor instead.
func (BgpV6EthernetSegment_ActiveMode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{105, 0, 0}
}

type BgpV6EvpnEvis_Choice_Enum int32

const (
	BgpV6EvpnEvis_Choice_unspecified BgpV6EvpnEvis_Choice_Enum = 0
	BgpV6EvpnEvis_Choice_evi_vxlan   BgpV6EvpnEvis_Choice_Enum = 1
)

// Enum value maps for BgpV6EvpnEvis_Choice_Enum.
var (
	BgpV6EvpnEvis_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "evi_vxlan",
	}
	BgpV6EvpnEvis_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"evi_vxlan":   1,
	}
)

func (x BgpV6EvpnEvis_Choice_Enum) Enum() *BgpV6EvpnEvis_Choice_Enum {
	p := new(BgpV6EvpnEvis_Choice_Enum)
	*p = x
	return p
}

func (x BgpV6EvpnEvis_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV6EvpnEvis_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[47].Descriptor()
}

func (BgpV6EvpnEvis_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[47]
}

func (x BgpV6EvpnEvis_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV6EvpnEvis_Choice_Enum.Descriptor instead.
func (BgpV6EvpnEvis_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{106, 0, 0}
}

type BgpV6EviVxlan_ReplicationType_Enum int32

const (
	BgpV6EviVxlan_ReplicationType_unspecified         BgpV6EviVxlan_ReplicationType_Enum = 0
	BgpV6EviVxlan_ReplicationType_ingress_replication BgpV6EviVxlan_ReplicationType_Enum = 1
)

// Enum value maps for BgpV6EviVxlan_ReplicationType_Enum.
var (
	BgpV6EviVxlan_ReplicationType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ingress_replication",
	}
	BgpV6EviVxlan_ReplicationType_Enum_value = map[string]int32{
		"unspecified":         0,
		"ingress_replication": 1,
	}
)

func (x BgpV6EviVxlan_ReplicationType_Enum) Enum() *BgpV6EviVxlan_ReplicationType_Enum {
	p := new(BgpV6EviVxlan_ReplicationType_Enum)
	*p = x
	return p
}

func (x BgpV6EviVxlan_ReplicationType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpV6EviVxlan_ReplicationType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[48].Descriptor()
}

func (BgpV6EviVxlan_ReplicationType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[48]
}

func (x BgpV6EviVxlan_ReplicationType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpV6EviVxlan_ReplicationType_Enum.Descriptor instead.
func (BgpV6EviVxlan_ReplicationType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{107, 0, 0}
}

type VxlanV4TunnelDestinationIPMode_Choice_Enum int32

const (
	VxlanV4TunnelDestinationIPMode_Choice_unspecified VxlanV4TunnelDestinationIPMode_Choice_Enum = 0
	VxlanV4TunnelDestinationIPMode_Choice_unicast     VxlanV4TunnelDestinationIPMode_Choice_Enum = 1
	VxlanV4TunnelDestinationIPMode_Choice_multicast   VxlanV4TunnelDestinationIPMode_Choice_Enum = 2
)

// Enum value maps for VxlanV4TunnelDestinationIPMode_Choice_Enum.
var (
	VxlanV4TunnelDestinationIPMode_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "unicast",
		2: "multicast",
	}
	VxlanV4TunnelDestinationIPMode_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"unicast":     1,
		"multicast":   2,
	}
)

func (x VxlanV4TunnelDestinationIPMode_Choice_Enum) Enum() *VxlanV4TunnelDestinationIPMode_Choice_Enum {
	p := new(VxlanV4TunnelDestinationIPMode_Choice_Enum)
	*p = x
	return p
}

func (x VxlanV4TunnelDestinationIPMode_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VxlanV4TunnelDestinationIPMode_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[49].Descriptor()
}

func (VxlanV4TunnelDestinationIPMode_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[49]
}

func (x VxlanV4TunnelDestinationIPMode_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VxlanV4TunnelDestinationIPMode_Choice_Enum.Descriptor instead.
func (VxlanV4TunnelDestinationIPMode_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{112, 0, 0}
}

type VxlanV6TunnelDestinationIPMode_Choice_Enum int32

const (
	VxlanV6TunnelDestinationIPMode_Choice_unspecified VxlanV6TunnelDestinationIPMode_Choice_Enum = 0
	VxlanV6TunnelDestinationIPMode_Choice_unicast     VxlanV6TunnelDestinationIPMode_Choice_Enum = 1
	VxlanV6TunnelDestinationIPMode_Choice_multicast   VxlanV6TunnelDestinationIPMode_Choice_Enum = 2
)

// Enum value maps for VxlanV6TunnelDestinationIPMode_Choice_Enum.
var (
	VxlanV6TunnelDestinationIPMode_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "unicast",
		2: "multicast",
	}
	VxlanV6TunnelDestinationIPMode_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"unicast":     1,
		"multicast":   2,
	}
)

func (x VxlanV6TunnelDestinationIPMode_Choice_Enum) Enum() *VxlanV6TunnelDestinationIPMode_Choice_Enum {
	p := new(VxlanV6TunnelDestinationIPMode_Choice_Enum)
	*p = x
	return p
}

func (x VxlanV6TunnelDestinationIPMode_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VxlanV6TunnelDestinationIPMode_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[50].Descriptor()
}

func (VxlanV6TunnelDestinationIPMode_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[50]
}

func (x VxlanV6TunnelDestinationIPMode_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VxlanV6TunnelDestinationIPMode_Choice_Enum.Descriptor instead.
func (VxlanV6TunnelDestinationIPMode_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{113, 0, 0}
}

type RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum int32

const (
	RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_unspecified     RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum = 0
	RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_shared_explicit RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum = 1
	RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_fixed_filter    RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum = 2
	RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_auto            RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum = 3
)

// Enum value maps for RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum.
var (
	RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum_name = map[int32]string{
		0: "unspecified",
		1: "shared_explicit",
		2: "fixed_filter",
		3: "auto",
	}
	RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum_value = map[string]int32{
		"unspecified":     0,
		"shared_explicit": 1,
		"fixed_filter":    2,
		"auto":            3,
	}
)

func (x RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum) Enum() *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum {
	p := new(RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum)
	*p = x
	return p
}

func (x RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[51].Descriptor()
}

func (RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[51]
}

func (x RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum.Descriptor instead.
func (RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{124, 0, 0}
}

type RsvpEro_PrependNeighborIp_Enum int32

const (
	RsvpEro_PrependNeighborIp_unspecified    RsvpEro_PrependNeighborIp_Enum = 0
	RsvpEro_PrependNeighborIp_dont_prepend   RsvpEro_PrependNeighborIp_Enum = 1
	RsvpEro_PrependNeighborIp_prepend_loose  RsvpEro_PrependNeighborIp_Enum = 2
	RsvpEro_PrependNeighborIp_prepend_strict RsvpEro_PrependNeighborIp_Enum = 3
)

// Enum value maps for RsvpEro_PrependNeighborIp_Enum.
var (
	RsvpEro_PrependNeighborIp_Enum_name = map[int32]string{
		0: "unspecified",
		1: "dont_prepend",
		2: "prepend_loose",
		3: "prepend_strict",
	}
	RsvpEro_PrependNeighborIp_Enum_value = map[string]int32{
		"unspecified":    0,
		"dont_prepend":   1,
		"prepend_loose":  2,
		"prepend_strict": 3,
	}
)

func (x RsvpEro_PrependNeighborIp_Enum) Enum() *RsvpEro_PrependNeighborIp_Enum {
	p := new(RsvpEro_PrependNeighborIp_Enum)
	*p = x
	return p
}

func (x RsvpEro_PrependNeighborIp_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RsvpEro_PrependNeighborIp_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[52].Descriptor()
}

func (RsvpEro_PrependNeighborIp_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[52]
}

func (x RsvpEro_PrependNeighborIp_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RsvpEro_PrependNeighborIp_Enum.Descriptor instead.
func (RsvpEro_PrependNeighborIp_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{130, 0, 0}
}

type RsvpEroSubobject_Type_Enum int32

const (
	RsvpEroSubobject_Type_unspecified RsvpEroSubobject_Type_Enum = 0
	RsvpEroSubobject_Type_ipv4        RsvpEroSubobject_Type_Enum = 1
	RsvpEroSubobject_Type_as_number   RsvpEroSubobject_Type_Enum = 2
)

// Enum value maps for RsvpEroSubobject_Type_Enum.
var (
	RsvpEroSubobject_Type_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ipv4",
		2: "as_number",
	}
	RsvpEroSubobject_Type_Enum_value = map[string]int32{
		"unspecified": 0,
		"ipv4":        1,
		"as_number":   2,
	}
)

func (x RsvpEroSubobject_Type_Enum) Enum() *RsvpEroSubobject_Type_Enum {
	p := new(RsvpEroSubobject_Type_Enum)
	*p = x
	return p
}

func (x RsvpEroSubobject_Type_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RsvpEroSubobject_Type_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[53].Descriptor()
}

func (RsvpEroSubobject_Type_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[53]
}

func (x RsvpEroSubobject_Type_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RsvpEroSubobject_Type_Enum.Descriptor instead.
func (RsvpEroSubobject_Type_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{131, 0, 0}
}

type RsvpEroSubobject_HopType_Enum int32

const (
	RsvpEroSubobject_HopType_unspecified RsvpEroSubobject_HopType_Enum = 0
	RsvpEroSubobject_HopType_strict      RsvpEroSubobject_HopType_Enum = 1
	RsvpEroSubobject_HopType_loose       RsvpEroSubobject_HopType_Enum = 2
)

// Enum value maps for RsvpEroSubobject_HopType_Enum.
var (
	RsvpEroSubobject_HopType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "strict",
		2: "loose",
	}
	RsvpEroSubobject_HopType_Enum_value = map[string]int32{
		"unspecified": 0,
		"strict":      1,
		"loose":       2,
	}
)

func (x RsvpEroSubobject_HopType_Enum) Enum() *RsvpEroSubobject_HopType_Enum {
	p := new(RsvpEroSubobject_HopType_Enum)
	*p = x
	return p
}

func (x RsvpEroSubobject_HopType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RsvpEroSubobject_HopType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[54].Descriptor()
}

func (RsvpEroSubobject_HopType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[54]
}

func (x RsvpEroSubobject_HopType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RsvpEroSubobject_HopType_Enum.Descriptor instead.
func (RsvpEroSubobject_HopType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{131, 1, 0}
}

type FlowTxRx_Choice_Enum int32

const (
	FlowTxRx_Choice_unspecified FlowTxRx_Choice_Enum = 0
	FlowTxRx_Choice_port        FlowTxRx_Choice_Enum = 1
	FlowTxRx_Choice_device      FlowTxRx_Choice_Enum = 2
)

// Enum value maps for FlowTxRx_Choice_Enum.
var (
	FlowTxRx_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "port",
		2: "device",
	}
	FlowTxRx_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"port":        1,
		"device":      2,
	}
)

func (x FlowTxRx_Choice_Enum) Enum() *FlowTxRx_Choice_Enum {
	p := new(FlowTxRx_Choice_Enum)
	*p = x
	return p
}

func (x FlowTxRx_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowTxRx_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[55].Descriptor()
}

func (FlowTxRx_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[55]
}

func (x FlowTxRx_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowTxRx_Choice_Enum.Descriptor instead.
func (FlowTxRx_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{133, 0, 0}
}

type FlowRouter_Mode_Enum int32

const (
	FlowRouter_Mode_unspecified FlowRouter_Mode_Enum = 0
	FlowRouter_Mode_mesh        FlowRouter_Mode_Enum = 1
	FlowRouter_Mode_one_to_one  FlowRouter_Mode_Enum = 2
)

// Enum value maps for FlowRouter_Mode_Enum.
var (
	FlowRouter_Mode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "mesh",
		2: "one_to_one",
	}
	FlowRouter_Mode_Enum_value = map[string]int32{
		"unspecified": 0,
		"mesh":        1,
		"one_to_one":  2,
	}
)

func (x FlowRouter_Mode_Enum) Enum() *FlowRouter_Mode_Enum {
	p := new(FlowRouter_Mode_Enum)
	*p = x
	return p
}

func (x FlowRouter_Mode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowRouter_Mode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[56].Descriptor()
}

func (FlowRouter_Mode_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[56]
}

func (x FlowRouter_Mode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowRouter_Mode_Enum.Descriptor instead.
func (FlowRouter_Mode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{135, 0, 0}
}

type FlowHeader_Choice_Enum int32

const (
	FlowHeader_Choice_unspecified   FlowHeader_Choice_Enum = 0
	FlowHeader_Choice_custom        FlowHeader_Choice_Enum = 1
	FlowHeader_Choice_ethernet      FlowHeader_Choice_Enum = 2
	FlowHeader_Choice_vlan          FlowHeader_Choice_Enum = 3
	FlowHeader_Choice_vxlan         FlowHeader_Choice_Enum = 4
	FlowHeader_Choice_ipv4          FlowHeader_Choice_Enum = 5
	FlowHeader_Choice_ipv6          FlowHeader_Choice_Enum = 6
	FlowHeader_Choice_pfcpause      FlowHeader_Choice_Enum = 7
	FlowHeader_Choice_ethernetpause FlowHeader_Choice_Enum = 8
	FlowHeader_Choice_tcp           FlowHeader_Choice_Enum = 9
	FlowHeader_Choice_udp           FlowHeader_Choice_Enum = 10
	FlowHeader_Choice_gre           FlowHeader_Choice_Enum = 11
	FlowHeader_Choice_gtpv1         FlowHeader_Choice_Enum = 12
	FlowHeader_Choice_gtpv2         FlowHeader_Choice_Enum = 13
	FlowHeader_Choice_arp           FlowHeader_Choice_Enum = 14
	FlowHeader_Choice_icmp          FlowHeader_Choice_Enum = 15
	FlowHeader_Choice_icmpv6        FlowHeader_Choice_Enum = 16
	FlowHeader_Choice_ppp           FlowHeader_Choice_Enum = 17
	FlowHeader_Choice_igmpv1        FlowHeader_Choice_Enum = 18
	FlowHeader_Choice_mpls          FlowHeader_Choice_Enum = 19
)

// Enum value maps for FlowHeader_Choice_Enum.
var (
	FlowHeader_Choice_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "custom",
		2:  "ethernet",
		3:  "vlan",
		4:  "vxlan",
		5:  "ipv4",
		6:  "ipv6",
		7:  "pfcpause",
		8:  "ethernetpause",
		9:  "tcp",
		10: "udp",
		11: "gre",
		12: "gtpv1",
		13: "gtpv2",
		14: "arp",
		15: "icmp",
		16: "icmpv6",
		17: "ppp",
		18: "igmpv1",
		19: "mpls",
	}
	FlowHeader_Choice_Enum_value = map[string]int32{
		"unspecified":   0,
		"custom":        1,
		"ethernet":      2,
		"vlan":          3,
		"vxlan":         4,
		"ipv4":          5,
		"ipv6":          6,
		"pfcpause":      7,
		"ethernetpause": 8,
		"tcp":           9,
		"udp":           10,
		"gre":           11,
		"gtpv1":         12,
		"gtpv2":         13,
		"arp":           14,
		"icmp":          15,
		"icmpv6":        16,
		"ppp":           17,
		"igmpv1":        18,
		"mpls":          19,
	}
)

func (x FlowHeader_Choice_Enum) Enum() *FlowHeader_Choice_Enum {
	p := new(FlowHeader_Choice_Enum)
	*p = x
	return p
}

func (x FlowHeader_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowHeader_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[57].Descriptor()
}

func (FlowHeader_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[57]
}

func (x FlowHeader_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowHeader_Choice_Enum.Descriptor instead.
func (FlowHeader_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{136, 0, 0}
}

type FlowIpv4Priority_Choice_Enum int32

const (
	FlowIpv4Priority_Choice_unspecified FlowIpv4Priority_Choice_Enum = 0
	FlowIpv4Priority_Choice_raw         FlowIpv4Priority_Choice_Enum = 1
	FlowIpv4Priority_Choice_tos         FlowIpv4Priority_Choice_Enum = 2
	FlowIpv4Priority_Choice_dscp        FlowIpv4Priority_Choice_Enum = 3
)

// Enum value maps for FlowIpv4Priority_Choice_Enum.
var (
	FlowIpv4Priority_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "raw",
		2: "tos",
		3: "dscp",
	}
	FlowIpv4Priority_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"raw":         1,
		"tos":         2,
		"dscp":        3,
	}
)

func (x FlowIpv4Priority_Choice_Enum) Enum() *FlowIpv4Priority_Choice_Enum {
	p := new(FlowIpv4Priority_Choice_Enum)
	*p = x
	return p
}

func (x FlowIpv4Priority_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowIpv4Priority_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[58].Descriptor()
}

func (FlowIpv4Priority_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[58]
}

func (x FlowIpv4Priority_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowIpv4Priority_Choice_Enum.Descriptor instead.
func (FlowIpv4Priority_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{142, 0, 0}
}

type FlowIcmp_Choice_Enum int32

const (
	FlowIcmp_Choice_unspecified FlowIcmp_Choice_Enum = 0
	FlowIcmp_Choice_echo        FlowIcmp_Choice_Enum = 1
)

// Enum value maps for FlowIcmp_Choice_Enum.
var (
	FlowIcmp_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "echo",
	}
	FlowIcmp_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"echo":        1,
	}
)

func (x FlowIcmp_Choice_Enum) Enum() *FlowIcmp_Choice_Enum {
	p := new(FlowIcmp_Choice_Enum)
	*p = x
	return p
}

func (x FlowIcmp_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowIcmp_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[59].Descriptor()
}

func (FlowIcmp_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[59]
}

func (x FlowIcmp_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowIcmp_Choice_Enum.Descriptor instead.
func (FlowIcmp_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{155, 0, 0}
}

type FlowIcmpv6_Choice_Enum int32

const (
	FlowIcmpv6_Choice_unspecified FlowIcmpv6_Choice_Enum = 0
	FlowIcmpv6_Choice_echo        FlowIcmpv6_Choice_Enum = 1
)

// Enum value maps for FlowIcmpv6_Choice_Enum.
var (
	FlowIcmpv6_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "echo",
	}
	FlowIcmpv6_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"echo":        1,
	}
)

func (x FlowIcmpv6_Choice_Enum) Enum() *FlowIcmpv6_Choice_Enum {
	p := new(FlowIcmpv6_Choice_Enum)
	*p = x
	return p
}

func (x FlowIcmpv6_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowIcmpv6_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[60].Descriptor()
}

func (FlowIcmpv6_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[60]
}

func (x FlowIcmpv6_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowIcmpv6_Choice_Enum.Descriptor instead.
func (FlowIcmpv6_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{157, 0, 0}
}

type FlowSize_Choice_Enum int32

const (
	FlowSize_Choice_unspecified FlowSize_Choice_Enum = 0
	FlowSize_Choice_fixed       FlowSize_Choice_Enum = 1
	FlowSize_Choice_increment   FlowSize_Choice_Enum = 2
	FlowSize_Choice_random      FlowSize_Choice_Enum = 3
)

// Enum value maps for FlowSize_Choice_Enum.
var (
	FlowSize_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "fixed",
		2: "increment",
		3: "random",
	}
	FlowSize_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"fixed":       1,
		"increment":   2,
		"random":      3,
	}
)

func (x FlowSize_Choice_Enum) Enum() *FlowSize_Choice_Enum {
	p := new(FlowSize_Choice_Enum)
	*p = x
	return p
}

func (x FlowSize_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowSize_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[61].Descriptor()
}

func (FlowSize_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[61]
}

func (x FlowSize_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowSize_Choice_Enum.Descriptor instead.
func (FlowSize_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{162, 0, 0}
}

type FlowRate_Choice_Enum int32

const (
	FlowRate_Choice_unspecified FlowRate_Choice_Enum = 0
	FlowRate_Choice_pps         FlowRate_Choice_Enum = 1
	FlowRate_Choice_bps         FlowRate_Choice_Enum = 2
	FlowRate_Choice_kbps        FlowRate_Choice_Enum = 3
	FlowRate_Choice_mbps        FlowRate_Choice_Enum = 4
	FlowRate_Choice_gbps        FlowRate_Choice_Enum = 5
	FlowRate_Choice_percentage  FlowRate_Choice_Enum = 6
)

// Enum value maps for FlowRate_Choice_Enum.
var (
	FlowRate_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "pps",
		2: "bps",
		3: "kbps",
		4: "mbps",
		5: "gbps",
		6: "percentage",
	}
	FlowRate_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"pps":         1,
		"bps":         2,
		"kbps":        3,
		"mbps":        4,
		"gbps":        5,
		"percentage":  6,
	}
)

func (x FlowRate_Choice_Enum) Enum() *FlowRate_Choice_Enum {
	p := new(FlowRate_Choice_Enum)
	*p = x
	return p
}

func (x FlowRate_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowRate_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[62].Descriptor()
}

func (FlowRate_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[62]
}

func (x FlowRate_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowRate_Choice_Enum.Descriptor instead.
func (FlowRate_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{165, 0, 0}
}

type FlowDuration_Choice_Enum int32

const (
	FlowDuration_Choice_unspecified   FlowDuration_Choice_Enum = 0
	FlowDuration_Choice_fixed_packets FlowDuration_Choice_Enum = 1
	FlowDuration_Choice_fixed_seconds FlowDuration_Choice_Enum = 2
	FlowDuration_Choice_burst         FlowDuration_Choice_Enum = 3
	FlowDuration_Choice_continuous    FlowDuration_Choice_Enum = 4
)

// Enum value maps for FlowDuration_Choice_Enum.
var (
	FlowDuration_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "fixed_packets",
		2: "fixed_seconds",
		3: "burst",
		4: "continuous",
	}
	FlowDuration_Choice_Enum_value = map[string]int32{
		"unspecified":   0,
		"fixed_packets": 1,
		"fixed_seconds": 2,
		"burst":         3,
		"continuous":    4,
	}
)

func (x FlowDuration_Choice_Enum) Enum() *FlowDuration_Choice_Enum {
	p := new(FlowDuration_Choice_Enum)
	*p = x
	return p
}

func (x FlowDuration_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowDuration_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[63].Descriptor()
}

func (FlowDuration_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[63]
}

func (x FlowDuration_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowDuration_Choice_Enum.Descriptor instead.
func (FlowDuration_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{166, 0, 0}
}

type FlowDelay_Choice_Enum int32

const (
	FlowDelay_Choice_unspecified  FlowDelay_Choice_Enum = 0
	FlowDelay_Choice_bytes        FlowDelay_Choice_Enum = 1
	FlowDelay_Choice_nanoseconds  FlowDelay_Choice_Enum = 2
	FlowDelay_Choice_microseconds FlowDelay_Choice_Enum = 3
)

// Enum value maps for FlowDelay_Choice_Enum.
var (
	FlowDelay_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "bytes",
		2: "nanoseconds",
		3: "microseconds",
	}
	FlowDelay_Choice_Enum_value = map[string]int32{
		"unspecified":  0,
		"bytes":        1,
		"nanoseconds":  2,
		"microseconds": 3,
	}
)

func (x FlowDelay_Choice_Enum) Enum() *FlowDelay_Choice_Enum {
	p := new(FlowDelay_Choice_Enum)
	*p = x
	return p
}

func (x FlowDelay_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowDelay_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[64].Descriptor()
}

func (FlowDelay_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[64]
}

func (x FlowDelay_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowDelay_Choice_Enum.Descriptor instead.
func (FlowDelay_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{168, 0, 0}
}

type FlowDurationInterBurstGap_Choice_Enum int32

const (
	FlowDurationInterBurstGap_Choice_unspecified  FlowDurationInterBurstGap_Choice_Enum = 0
	FlowDurationInterBurstGap_Choice_bytes        FlowDurationInterBurstGap_Choice_Enum = 1
	FlowDurationInterBurstGap_Choice_nanoseconds  FlowDurationInterBurstGap_Choice_Enum = 2
	FlowDurationInterBurstGap_Choice_microseconds FlowDurationInterBurstGap_Choice_Enum = 3
)

// Enum value maps for FlowDurationInterBurstGap_Choice_Enum.
var (
	FlowDurationInterBurstGap_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "bytes",
		2: "nanoseconds",
		3: "microseconds",
	}
	FlowDurationInterBurstGap_Choice_Enum_value = map[string]int32{
		"unspecified":  0,
		"bytes":        1,
		"nanoseconds":  2,
		"microseconds": 3,
	}
)

func (x FlowDurationInterBurstGap_Choice_Enum) Enum() *FlowDurationInterBurstGap_Choice_Enum {
	p := new(FlowDurationInterBurstGap_Choice_Enum)
	*p = x
	return p
}

func (x FlowDurationInterBurstGap_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowDurationInterBurstGap_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[65].Descriptor()
}

func (FlowDurationInterBurstGap_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[65]
}

func (x FlowDurationInterBurstGap_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowDurationInterBurstGap_Choice_Enum.Descriptor instead.
func (FlowDurationInterBurstGap_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{172, 0, 0}
}

type FlowLatencyMetrics_Mode_Enum int32

const (
	FlowLatencyMetrics_Mode_unspecified   FlowLatencyMetrics_Mode_Enum = 0
	FlowLatencyMetrics_Mode_store_forward FlowLatencyMetrics_Mode_Enum = 1
	FlowLatencyMetrics_Mode_cut_through   FlowLatencyMetrics_Mode_Enum = 2
)

// Enum value maps for FlowLatencyMetrics_Mode_Enum.
var (
	FlowLatencyMetrics_Mode_Enum_name = map[int32]string{
		0: "unspecified",
		1: "store_forward",
		2: "cut_through",
	}
	FlowLatencyMetrics_Mode_Enum_value = map[string]int32{
		"unspecified":   0,
		"store_forward": 1,
		"cut_through":   2,
	}
)

func (x FlowLatencyMetrics_Mode_Enum) Enum() *FlowLatencyMetrics_Mode_Enum {
	p := new(FlowLatencyMetrics_Mode_Enum)
	*p = x
	return p
}

func (x FlowLatencyMetrics_Mode_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowLatencyMetrics_Mode_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[66].Descriptor()
}

func (FlowLatencyMetrics_Mode_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[66]
}

func (x FlowLatencyMetrics_Mode_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowLatencyMetrics_Mode_Enum.Descriptor instead.
func (FlowLatencyMetrics_Mode_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{174, 0, 0}
}

type EventRequest_Type_Enum int32

const (
	EventRequest_Type_unspecified                  EventRequest_Type_Enum = 0
	EventRequest_Type_link_down                    EventRequest_Type_Enum = 1
	EventRequest_Type_link_up                      EventRequest_Type_Enum = 2
	EventRequest_Type_route_withdraw               EventRequest_Type_Enum = 3
	EventRequest_Type_route_advertise              EventRequest_Type_Enum = 4
	EventRequest_Type_flow_rx_rate_above_threshold EventRequest_Type_Enum = 5
	EventRequest_Type_flow_rx_rate_below_threshold EventRequest_Type_Enum = 6
)

// Enum value maps for EventRequest_Type_Enum.
var (
	EventRequest_Type_Enum_name = map[int32]string{
		0: "unspecified",
		1: "link_down",
		2: "link_up",
		3: "route_withdraw",
		4: "route_advertise",
		5: "flow_rx_rate_above_threshold",
		6: "flow_rx_rate_below_threshold",
	}
	EventRequest_Type_Enum_value = map[string]int32{
		"unspecified":                  0,
		"link_down":                    1,
		"link_up":                      2,
		"route_withdraw":               3,
		"route_advertise":              4,
		"flow_rx_rate_above_threshold": 5,
		"flow_rx_rate_below_threshold": 6,
	}
)

func (x EventRequest_Type_Enum) Enum() *EventRequest_Type_Enum {
	p := new(EventRequest_Type_Enum)
	*p = x
	return p
}

func (x EventRequest_Type_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventRequest_Type_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[67].Descriptor()
}

func (EventRequest_Type_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[67]
}

func (x EventRequest_Type_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventRequest_Type_Enum.Descriptor instead.
func (EventRequest_Type_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{179, 0, 0}
}

type LldpConnection_Choice_Enum int32

const (
	LldpConnection_Choice_unspecified LldpConnection_Choice_Enum = 0
	LldpConnection_Choice_port_name   LldpConnection_Choice_Enum = 1
)

// Enum value maps for LldpConnection_Choice_Enum.
var (
	LldpConnection_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "port_name",
	}
	LldpConnection_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"port_name":   1,
	}
)

func (x LldpConnection_Choice_Enum) Enum() *LldpConnection_Choice_Enum {
	p := new(LldpConnection_Choice_Enum)
	*p = x
	return p
}

func (x LldpConnection_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpConnection_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[68].Descriptor()
}

func (LldpConnection_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[68]
}

func (x LldpConnection_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpConnection_Choice_Enum.Descriptor instead.
func (LldpConnection_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{182, 0, 0}
}

type LldpChassisId_Choice_Enum int32

const (
	LldpChassisId_Choice_unspecified            LldpChassisId_Choice_Enum = 0
	LldpChassisId_Choice_mac_address_subtype    LldpChassisId_Choice_Enum = 1
	LldpChassisId_Choice_interface_name_subtype LldpChassisId_Choice_Enum = 2
	LldpChassisId_Choice_local_subtype          LldpChassisId_Choice_Enum = 3
)

// Enum value maps for LldpChassisId_Choice_Enum.
var (
	LldpChassisId_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "mac_address_subtype",
		2: "interface_name_subtype",
		3: "local_subtype",
	}
	LldpChassisId_Choice_Enum_value = map[string]int32{
		"unspecified":            0,
		"mac_address_subtype":    1,
		"interface_name_subtype": 2,
		"local_subtype":          3,
	}
)

func (x LldpChassisId_Choice_Enum) Enum() *LldpChassisId_Choice_Enum {
	p := new(LldpChassisId_Choice_Enum)
	*p = x
	return p
}

func (x LldpChassisId_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpChassisId_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[69].Descriptor()
}

func (LldpChassisId_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[69]
}

func (x LldpChassisId_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpChassisId_Choice_Enum.Descriptor instead.
func (LldpChassisId_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{183, 0, 0}
}

type LldpPortId_Choice_Enum int32

const (
	LldpPortId_Choice_unspecified            LldpPortId_Choice_Enum = 0
	LldpPortId_Choice_mac_address_subtype    LldpPortId_Choice_Enum = 1
	LldpPortId_Choice_interface_name_subtype LldpPortId_Choice_Enum = 2
	LldpPortId_Choice_local_subtype          LldpPortId_Choice_Enum = 3
)

// Enum value maps for LldpPortId_Choice_Enum.
var (
	LldpPortId_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "mac_address_subtype",
		2: "interface_name_subtype",
		3: "local_subtype",
	}
	LldpPortId_Choice_Enum_value = map[string]int32{
		"unspecified":            0,
		"mac_address_subtype":    1,
		"interface_name_subtype": 2,
		"local_subtype":          3,
	}
)

func (x LldpPortId_Choice_Enum) Enum() *LldpPortId_Choice_Enum {
	p := new(LldpPortId_Choice_Enum)
	*p = x
	return p
}

func (x LldpPortId_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpPortId_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[70].Descriptor()
}

func (LldpPortId_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[70]
}

func (x LldpPortId_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpPortId_Choice_Enum.Descriptor instead.
func (LldpPortId_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{184, 0, 0}
}

type LldpChassisMacSubType_Choice_Enum int32

const (
	LldpChassisMacSubType_Choice_unspecified LldpChassisMacSubType_Choice_Enum = 0
	LldpChassisMacSubType_Choice_auto        LldpChassisMacSubType_Choice_Enum = 1
	LldpChassisMacSubType_Choice_value       LldpChassisMacSubType_Choice_Enum = 2
)

// Enum value maps for LldpChassisMacSubType_Choice_Enum.
var (
	LldpChassisMacSubType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "auto",
		2: "value",
	}
	LldpChassisMacSubType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"auto":        1,
		"value":       2,
	}
)

func (x LldpChassisMacSubType_Choice_Enum) Enum() *LldpChassisMacSubType_Choice_Enum {
	p := new(LldpChassisMacSubType_Choice_Enum)
	*p = x
	return p
}

func (x LldpChassisMacSubType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpChassisMacSubType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[71].Descriptor()
}

func (LldpChassisMacSubType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[71]
}

func (x LldpChassisMacSubType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpChassisMacSubType_Choice_Enum.Descriptor instead.
func (LldpChassisMacSubType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{185, 0, 0}
}

type LldpPortInterfaceNameSubType_Choice_Enum int32

const (
	LldpPortInterfaceNameSubType_Choice_unspecified LldpPortInterfaceNameSubType_Choice_Enum = 0
	LldpPortInterfaceNameSubType_Choice_auto        LldpPortInterfaceNameSubType_Choice_Enum = 1
	LldpPortInterfaceNameSubType_Choice_value       LldpPortInterfaceNameSubType_Choice_Enum = 2
)

// Enum value maps for LldpPortInterfaceNameSubType_Choice_Enum.
var (
	LldpPortInterfaceNameSubType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "auto",
		2: "value",
	}
	LldpPortInterfaceNameSubType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"auto":        1,
		"value":       2,
	}
)

func (x LldpPortInterfaceNameSubType_Choice_Enum) Enum() *LldpPortInterfaceNameSubType_Choice_Enum {
	p := new(LldpPortInterfaceNameSubType_Choice_Enum)
	*p = x
	return p
}

func (x LldpPortInterfaceNameSubType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpPortInterfaceNameSubType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[72].Descriptor()
}

func (LldpPortInterfaceNameSubType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[72]
}

func (x LldpPortInterfaceNameSubType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpPortInterfaceNameSubType_Choice_Enum.Descriptor instead.
func (LldpPortInterfaceNameSubType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{186, 0, 0}
}

type LldpSystemName_Choice_Enum int32

const (
	LldpSystemName_Choice_unspecified LldpSystemName_Choice_Enum = 0
	LldpSystemName_Choice_auto        LldpSystemName_Choice_Enum = 1
	LldpSystemName_Choice_value       LldpSystemName_Choice_Enum = 2
)

// Enum value maps for LldpSystemName_Choice_Enum.
var (
	LldpSystemName_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "auto",
		2: "value",
	}
	LldpSystemName_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"auto":        1,
		"value":       2,
	}
)

func (x LldpSystemName_Choice_Enum) Enum() *LldpSystemName_Choice_Enum {
	p := new(LldpSystemName_Choice_Enum)
	*p = x
	return p
}

func (x LldpSystemName_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpSystemName_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[73].Descriptor()
}

func (LldpSystemName_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[73]
}

func (x LldpSystemName_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpSystemName_Choice_Enum.Descriptor instead.
func (LldpSystemName_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{187, 0, 0}
}

type LinkState_State_Enum int32

const (
	LinkState_State_unspecified LinkState_State_Enum = 0
	LinkState_State_up          LinkState_State_Enum = 1
	LinkState_State_down        LinkState_State_Enum = 2
)

// Enum value maps for LinkState_State_Enum.
var (
	LinkState_State_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	LinkState_State_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x LinkState_State_Enum) Enum() *LinkState_State_Enum {
	p := new(LinkState_State_Enum)
	*p = x
	return p
}

func (x LinkState_State_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkState_State_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[74].Descriptor()
}

func (LinkState_State_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[74]
}

func (x LinkState_State_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkState_State_Enum.Descriptor instead.
func (LinkState_State_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{190, 0, 0}
}

type TransmitState_State_Enum int32

const (
	TransmitState_State_unspecified TransmitState_State_Enum = 0
	TransmitState_State_start       TransmitState_State_Enum = 1
	TransmitState_State_stop        TransmitState_State_Enum = 2
	TransmitState_State_pause       TransmitState_State_Enum = 3
	TransmitState_State_resume      TransmitState_State_Enum = 4
)

// Enum value maps for TransmitState_State_Enum.
var (
	TransmitState_State_Enum_name = map[int32]string{
		0: "unspecified",
		1: "start",
		2: "stop",
		3: "pause",
		4: "resume",
	}
	TransmitState_State_Enum_value = map[string]int32{
		"unspecified": 0,
		"start":       1,
		"stop":        2,
		"pause":       3,
		"resume":      4,
	}
)

func (x TransmitState_State_Enum) Enum() *TransmitState_State_Enum {
	p := new(TransmitState_State_Enum)
	*p = x
	return p
}

func (x TransmitState_State_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransmitState_State_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[75].Descriptor()
}

func (TransmitState_State_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[75]
}

func (x TransmitState_State_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransmitState_State_Enum.Descriptor instead.
func (TransmitState_State_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{191, 0, 0}
}

type CaptureState_State_Enum int32

const (
	CaptureState_State_unspecified CaptureState_State_Enum = 0
	CaptureState_State_start       CaptureState_State_Enum = 1
	CaptureState_State_stop        CaptureState_State_Enum = 2
)

// Enum value maps for CaptureState_State_Enum.
var (
	CaptureState_State_Enum_name = map[int32]string{
		0: "unspecified",
		1: "start",
		2: "stop",
	}
	CaptureState_State_Enum_value = map[string]int32{
		"unspecified": 0,
		"start":       1,
		"stop":        2,
	}
)

func (x CaptureState_State_Enum) Enum() *CaptureState_State_Enum {
	p := new(CaptureState_State_Enum)
	*p = x
	return p
}

func (x CaptureState_State_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaptureState_State_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[76].Descriptor()
}

func (CaptureState_State_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[76]
}

func (x CaptureState_State_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CaptureState_State_Enum.Descriptor instead.
func (CaptureState_State_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{192, 0, 0}
}

type FlowsUpdate_PropertyNames_Enum int32

const (
	FlowsUpdate_PropertyNames_unspecified FlowsUpdate_PropertyNames_Enum = 0
	FlowsUpdate_PropertyNames_rate        FlowsUpdate_PropertyNames_Enum = 1
	FlowsUpdate_PropertyNames_size        FlowsUpdate_PropertyNames_Enum = 2
)

// Enum value maps for FlowsUpdate_PropertyNames_Enum.
var (
	FlowsUpdate_PropertyNames_Enum_name = map[int32]string{
		0: "unspecified",
		1: "rate",
		2: "size",
	}
	FlowsUpdate_PropertyNames_Enum_value = map[string]int32{
		"unspecified": 0,
		"rate":        1,
		"size":        2,
	}
)

func (x FlowsUpdate_PropertyNames_Enum) Enum() *FlowsUpdate_PropertyNames_Enum {
	p := new(FlowsUpdate_PropertyNames_Enum)
	*p = x
	return p
}

func (x FlowsUpdate_PropertyNames_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowsUpdate_PropertyNames_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[77].Descriptor()
}

func (FlowsUpdate_PropertyNames_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[77]
}

func (x FlowsUpdate_PropertyNames_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowsUpdate_PropertyNames_Enum.Descriptor instead.
func (FlowsUpdate_PropertyNames_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{193, 0, 0}
}

type RouteState_State_Enum int32

const (
	RouteState_State_unspecified RouteState_State_Enum = 0
	RouteState_State_withdraw    RouteState_State_Enum = 1
	RouteState_State_advertise   RouteState_State_Enum = 2
)

// Enum value maps for RouteState_State_Enum.
var (
	RouteState_State_Enum_name = map[int32]string{
		0: "unspecified",
		1: "withdraw",
		2: "advertise",
	}
	RouteState_State_Enum_value = map[string]int32{
		"unspecified": 0,
		"withdraw":    1,
		"advertise":   2,
	}
)

func (x RouteState_State_Enum) Enum() *RouteState_State_Enum {
	p := new(RouteState_State_Enum)
	*p = x
	return p
}

func (x RouteState_State_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteState_State_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[78].Descriptor()
}

func (RouteState_State_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[78]
}

func (x RouteState_State_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteState_State_Enum.Descriptor instead.
func (RouteState_State_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{194, 0, 0}
}

type ProtocolState_State_Enum int32

const (
	ProtocolState_State_unspecified ProtocolState_State_Enum = 0
	ProtocolState_State_start       ProtocolState_State_Enum = 1
	ProtocolState_State_stop        ProtocolState_State_Enum = 2
)

// Enum value maps for ProtocolState_State_Enum.
var (
	ProtocolState_State_Enum_name = map[int32]string{
		0: "unspecified",
		1: "start",
		2: "stop",
	}
	ProtocolState_State_Enum_value = map[string]int32{
		"unspecified": 0,
		"start":       1,
		"stop":        2,
	}
)

func (x ProtocolState_State_Enum) Enum() *ProtocolState_State_Enum {
	p := new(ProtocolState_State_Enum)
	*p = x
	return p
}

func (x ProtocolState_State_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolState_State_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[79].Descriptor()
}

func (ProtocolState_State_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[79]
}

func (x ProtocolState_State_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolState_State_Enum.Descriptor instead.
func (ProtocolState_State_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{196, 0, 0}
}

type DeviceState_Choice_Enum int32

const (
	DeviceState_Choice_unspecified       DeviceState_Choice_Enum = 0
	DeviceState_Choice_lacp_member_state DeviceState_Choice_Enum = 1
)

// Enum value maps for DeviceState_Choice_Enum.
var (
	DeviceState_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "lacp_member_state",
	}
	DeviceState_Choice_Enum_value = map[string]int32{
		"unspecified":       0,
		"lacp_member_state": 1,
	}
)

func (x DeviceState_Choice_Enum) Enum() *DeviceState_Choice_Enum {
	p := new(DeviceState_Choice_Enum)
	*p = x
	return p
}

func (x DeviceState_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceState_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[80].Descriptor()
}

func (DeviceState_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[80]
}

func (x DeviceState_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceState_Choice_Enum.Descriptor instead.
func (DeviceState_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{197, 0, 0}
}

type Ping_Choice_Enum int32

const (
	Ping_Choice_unspecified Ping_Choice_Enum = 0
	Ping_Choice_ipv4        Ping_Choice_Enum = 1
	Ping_Choice_ipv6        Ping_Choice_Enum = 2
)

// Enum value maps for Ping_Choice_Enum.
var (
	Ping_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ipv4",
		2: "ipv6",
	}
	Ping_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"ipv4":        1,
		"ipv6":        2,
	}
)

func (x Ping_Choice_Enum) Enum() *Ping_Choice_Enum {
	p := new(Ping_Choice_Enum)
	*p = x
	return p
}

func (x Ping_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ping_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[81].Descriptor()
}

func (Ping_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[81]
}

func (x Ping_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ping_Choice_Enum.Descriptor instead.
func (Ping_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{198, 0, 0}
}

type Response_Result_Enum int32

const (
	Response_Result_unspecified Response_Result_Enum = 0
	Response_Result_success     Response_Result_Enum = 1
	Response_Result_failure     Response_Result_Enum = 2
)

// Enum value maps for Response_Result_Enum.
var (
	Response_Result_Enum_name = map[int32]string{
		0: "unspecified",
		1: "success",
		2: "failure",
	}
	Response_Result_Enum_value = map[string]int32{
		"unspecified": 0,
		"success":     1,
		"failure":     2,
	}
)

func (x Response_Result_Enum) Enum() *Response_Result_Enum {
	p := new(Response_Result_Enum)
	*p = x
	return p
}

func (x Response_Result_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Response_Result_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[82].Descriptor()
}

func (Response_Result_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[82]
}

func (x Response_Result_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Response_Result_Enum.Descriptor instead.
func (Response_Result_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{202, 0, 0}
}

type LacpMemberState_State_Enum int32

const (
	LacpMemberState_State_unspecified LacpMemberState_State_Enum = 0
	LacpMemberState_State_up          LacpMemberState_State_Enum = 1
	LacpMemberState_State_down        LacpMemberState_State_Enum = 2
)

// Enum value maps for LacpMemberState_State_Enum.
var (
	LacpMemberState_State_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	LacpMemberState_State_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x LacpMemberState_State_Enum) Enum() *LacpMemberState_State_Enum {
	p := new(LacpMemberState_State_Enum)
	*p = x
	return p
}

func (x LacpMemberState_State_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LacpMemberState_State_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[83].Descriptor()
}

func (LacpMemberState_State_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[83]
}

func (x LacpMemberState_State_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LacpMemberState_State_Enum.Descriptor instead.
func (LacpMemberState_State_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{203, 0, 0}
}

type MetricsRequest_Choice_Enum int32

const (
	MetricsRequest_Choice_unspecified MetricsRequest_Choice_Enum = 0
	MetricsRequest_Choice_port        MetricsRequest_Choice_Enum = 1
	MetricsRequest_Choice_flow        MetricsRequest_Choice_Enum = 2
	MetricsRequest_Choice_bgpv4       MetricsRequest_Choice_Enum = 3
	MetricsRequest_Choice_bgpv6       MetricsRequest_Choice_Enum = 4
	MetricsRequest_Choice_isis        MetricsRequest_Choice_Enum = 5
	MetricsRequest_Choice_lag         MetricsRequest_Choice_Enum = 6
	MetricsRequest_Choice_lacp        MetricsRequest_Choice_Enum = 7
	MetricsRequest_Choice_lldp        MetricsRequest_Choice_Enum = 8
	MetricsRequest_Choice_rsvp        MetricsRequest_Choice_Enum = 9
)

// Enum value maps for MetricsRequest_Choice_Enum.
var (
	MetricsRequest_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "port",
		2: "flow",
		3: "bgpv4",
		4: "bgpv6",
		5: "isis",
		6: "lag",
		7: "lacp",
		8: "lldp",
		9: "rsvp",
	}
	MetricsRequest_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"port":        1,
		"flow":        2,
		"bgpv4":       3,
		"bgpv6":       4,
		"isis":        5,
		"lag":         6,
		"lacp":        7,
		"lldp":        8,
		"rsvp":        9,
	}
)

func (x MetricsRequest_Choice_Enum) Enum() *MetricsRequest_Choice_Enum {
	p := new(MetricsRequest_Choice_Enum)
	*p = x
	return p
}

func (x MetricsRequest_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricsRequest_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[84].Descriptor()
}

func (MetricsRequest_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[84]
}

func (x MetricsRequest_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricsRequest_Choice_Enum.Descriptor instead.
func (MetricsRequest_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{204, 0, 0}
}

type MetricsResponse_Choice_Enum int32

const (
	MetricsResponse_Choice_unspecified   MetricsResponse_Choice_Enum = 0
	MetricsResponse_Choice_flow_metrics  MetricsResponse_Choice_Enum = 1
	MetricsResponse_Choice_port_metrics  MetricsResponse_Choice_Enum = 2
	MetricsResponse_Choice_bgpv4_metrics MetricsResponse_Choice_Enum = 3
	MetricsResponse_Choice_bgpv6_metrics MetricsResponse_Choice_Enum = 4
	MetricsResponse_Choice_isis_metrics  MetricsResponse_Choice_Enum = 5
	MetricsResponse_Choice_lag_metrics   MetricsResponse_Choice_Enum = 6
	MetricsResponse_Choice_lacp_metrics  MetricsResponse_Choice_Enum = 7
	MetricsResponse_Choice_lldp_metrics  MetricsResponse_Choice_Enum = 8
	MetricsResponse_Choice_rsvp_metrics  MetricsResponse_Choice_Enum = 9
)

// Enum value maps for MetricsResponse_Choice_Enum.
var (
	MetricsResponse_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "flow_metrics",
		2: "port_metrics",
		3: "bgpv4_metrics",
		4: "bgpv6_metrics",
		5: "isis_metrics",
		6: "lag_metrics",
		7: "lacp_metrics",
		8: "lldp_metrics",
		9: "rsvp_metrics",
	}
	MetricsResponse_Choice_Enum_value = map[string]int32{
		"unspecified":   0,
		"flow_metrics":  1,
		"port_metrics":  2,
		"bgpv4_metrics": 3,
		"bgpv6_metrics": 4,
		"isis_metrics":  5,
		"lag_metrics":   6,
		"lacp_metrics":  7,
		"lldp_metrics":  8,
		"rsvp_metrics":  9,
	}
)

func (x MetricsResponse_Choice_Enum) Enum() *MetricsResponse_Choice_Enum {
	p := new(MetricsResponse_Choice_Enum)
	*p = x
	return p
}

func (x MetricsResponse_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricsResponse_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[85].Descriptor()
}

func (MetricsResponse_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[85]
}

func (x MetricsResponse_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricsResponse_Choice_Enum.Descriptor instead.
func (MetricsResponse_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{205, 0, 0}
}

type PortMetricsRequest_ColumnNames_Enum int32

const (
	PortMetricsRequest_ColumnNames_unspecified    PortMetricsRequest_ColumnNames_Enum = 0
	PortMetricsRequest_ColumnNames_transmit       PortMetricsRequest_ColumnNames_Enum = 1
	PortMetricsRequest_ColumnNames_location       PortMetricsRequest_ColumnNames_Enum = 2
	PortMetricsRequest_ColumnNames_link           PortMetricsRequest_ColumnNames_Enum = 3
	PortMetricsRequest_ColumnNames_capture        PortMetricsRequest_ColumnNames_Enum = 4
	PortMetricsRequest_ColumnNames_frames_tx      PortMetricsRequest_ColumnNames_Enum = 5
	PortMetricsRequest_ColumnNames_frames_rx      PortMetricsRequest_ColumnNames_Enum = 6
	PortMetricsRequest_ColumnNames_bytes_tx       PortMetricsRequest_ColumnNames_Enum = 7
	PortMetricsRequest_ColumnNames_bytes_rx       PortMetricsRequest_ColumnNames_Enum = 8
	PortMetricsRequest_ColumnNames_frames_tx_rate PortMetricsRequest_ColumnNames_Enum = 9
	PortMetricsRequest_ColumnNames_frames_rx_rate PortMetricsRequest_ColumnNames_Enum = 10
	PortMetricsRequest_ColumnNames_bytes_tx_rate  PortMetricsRequest_ColumnNames_Enum = 11
	PortMetricsRequest_ColumnNames_bytes_rx_rate  PortMetricsRequest_ColumnNames_Enum = 12
)

// Enum value maps for PortMetricsRequest_ColumnNames_Enum.
var (
	PortMetricsRequest_ColumnNames_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "transmit",
		2:  "location",
		3:  "link",
		4:  "capture",
		5:  "frames_tx",
		6:  "frames_rx",
		7:  "bytes_tx",
		8:  "bytes_rx",
		9:  "frames_tx_rate",
		10: "frames_rx_rate",
		11: "bytes_tx_rate",
		12: "bytes_rx_rate",
	}
	PortMetricsRequest_ColumnNames_Enum_value = map[string]int32{
		"unspecified":    0,
		"transmit":       1,
		"location":       2,
		"link":           3,
		"capture":        4,
		"frames_tx":      5,
		"frames_rx":      6,
		"bytes_tx":       7,
		"bytes_rx":       8,
		"frames_tx_rate": 9,
		"frames_rx_rate": 10,
		"bytes_tx_rate":  11,
		"bytes_rx_rate":  12,
	}
)

func (x PortMetricsRequest_ColumnNames_Enum) Enum() *PortMetricsRequest_ColumnNames_Enum {
	p := new(PortMetricsRequest_ColumnNames_Enum)
	*p = x
	return p
}

func (x PortMetricsRequest_ColumnNames_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortMetricsRequest_ColumnNames_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[86].Descriptor()
}

func (PortMetricsRequest_ColumnNames_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[86]
}

func (x PortMetricsRequest_ColumnNames_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortMetricsRequest_ColumnNames_Enum.Descriptor instead.
func (PortMetricsRequest_ColumnNames_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{206, 0, 0}
}

type PortMetric_Link_Enum int32

const (
	PortMetric_Link_unspecified PortMetric_Link_Enum = 0
	PortMetric_Link_up          PortMetric_Link_Enum = 1
	PortMetric_Link_down        PortMetric_Link_Enum = 2
)

// Enum value maps for PortMetric_Link_Enum.
var (
	PortMetric_Link_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	PortMetric_Link_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x PortMetric_Link_Enum) Enum() *PortMetric_Link_Enum {
	p := new(PortMetric_Link_Enum)
	*p = x
	return p
}

func (x PortMetric_Link_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortMetric_Link_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[87].Descriptor()
}

func (PortMetric_Link_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[87]
}

func (x PortMetric_Link_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortMetric_Link_Enum.Descriptor instead.
func (PortMetric_Link_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{207, 0, 0}
}

type PortMetric_Capture_Enum int32

const (
	PortMetric_Capture_unspecified PortMetric_Capture_Enum = 0
	PortMetric_Capture_started     PortMetric_Capture_Enum = 1
	PortMetric_Capture_stopped     PortMetric_Capture_Enum = 2
)

// Enum value maps for PortMetric_Capture_Enum.
var (
	PortMetric_Capture_Enum_name = map[int32]string{
		0: "unspecified",
		1: "started",
		2: "stopped",
	}
	PortMetric_Capture_Enum_value = map[string]int32{
		"unspecified": 0,
		"started":     1,
		"stopped":     2,
	}
)

func (x PortMetric_Capture_Enum) Enum() *PortMetric_Capture_Enum {
	p := new(PortMetric_Capture_Enum)
	*p = x
	return p
}

func (x PortMetric_Capture_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortMetric_Capture_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[88].Descriptor()
}

func (PortMetric_Capture_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[88]
}

func (x PortMetric_Capture_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortMetric_Capture_Enum.Descriptor instead.
func (PortMetric_Capture_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{207, 1, 0}
}

type PortMetric_Transmit_Enum int32

const (
	PortMetric_Transmit_unspecified PortMetric_Transmit_Enum = 0
	PortMetric_Transmit_started     PortMetric_Transmit_Enum = 1
	PortMetric_Transmit_stopped     PortMetric_Transmit_Enum = 2
)

// Enum value maps for PortMetric_Transmit_Enum.
var (
	PortMetric_Transmit_Enum_name = map[int32]string{
		0: "unspecified",
		1: "started",
		2: "stopped",
	}
	PortMetric_Transmit_Enum_value = map[string]int32{
		"unspecified": 0,
		"started":     1,
		"stopped":     2,
	}
)

func (x PortMetric_Transmit_Enum) Enum() *PortMetric_Transmit_Enum {
	p := new(PortMetric_Transmit_Enum)
	*p = x
	return p
}

func (x PortMetric_Transmit_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortMetric_Transmit_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[89].Descriptor()
}

func (PortMetric_Transmit_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[89]
}

func (x PortMetric_Transmit_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortMetric_Transmit_Enum.Descriptor instead.
func (PortMetric_Transmit_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{207, 2, 0}
}

type FlowMetricsRequest_MetricNames_Enum int32

const (
	FlowMetricsRequest_MetricNames_unspecified    FlowMetricsRequest_MetricNames_Enum = 0
	FlowMetricsRequest_MetricNames_transmit       FlowMetricsRequest_MetricNames_Enum = 1
	FlowMetricsRequest_MetricNames_frames_tx      FlowMetricsRequest_MetricNames_Enum = 2
	FlowMetricsRequest_MetricNames_frames_rx      FlowMetricsRequest_MetricNames_Enum = 3
	FlowMetricsRequest_MetricNames_bytes_tx       FlowMetricsRequest_MetricNames_Enum = 4
	FlowMetricsRequest_MetricNames_bytes_rx       FlowMetricsRequest_MetricNames_Enum = 5
	FlowMetricsRequest_MetricNames_frames_tx_rate FlowMetricsRequest_MetricNames_Enum = 6
	FlowMetricsRequest_MetricNames_frames_rx_rate FlowMetricsRequest_MetricNames_Enum = 7
)

// Enum value maps for FlowMetricsRequest_MetricNames_Enum.
var (
	FlowMetricsRequest_MetricNames_Enum_name = map[int32]string{
		0: "unspecified",
		1: "transmit",
		2: "frames_tx",
		3: "frames_rx",
		4: "bytes_tx",
		5: "bytes_rx",
		6: "frames_tx_rate",
		7: "frames_rx_rate",
	}
	FlowMetricsRequest_MetricNames_Enum_value = map[string]int32{
		"unspecified":    0,
		"transmit":       1,
		"frames_tx":      2,
		"frames_rx":      3,
		"bytes_tx":       4,
		"bytes_rx":       5,
		"frames_tx_rate": 6,
		"frames_rx_rate": 7,
	}
)

func (x FlowMetricsRequest_MetricNames_Enum) Enum() *FlowMetricsRequest_MetricNames_Enum {
	p := new(FlowMetricsRequest_MetricNames_Enum)
	*p = x
	return p
}

func (x FlowMetricsRequest_MetricNames_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowMetricsRequest_MetricNames_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[90].Descriptor()
}

func (FlowMetricsRequest_MetricNames_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[90]
}

func (x FlowMetricsRequest_MetricNames_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowMetricsRequest_MetricNames_Enum.Descriptor instead.
func (FlowMetricsRequest_MetricNames_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{208, 0, 0}
}

type FlowMetricGroupRequest_Choice_Enum int32

const (
	FlowMetricGroupRequest_Choice_unspecified FlowMetricGroupRequest_Choice_Enum = 0
	FlowMetricGroupRequest_Choice_ingress     FlowMetricGroupRequest_Choice_Enum = 1
	FlowMetricGroupRequest_Choice_egress      FlowMetricGroupRequest_Choice_Enum = 2
)

// Enum value maps for FlowMetricGroupRequest_Choice_Enum.
var (
	FlowMetricGroupRequest_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ingress",
		2: "egress",
	}
	FlowMetricGroupRequest_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"ingress":     1,
		"egress":      2,
	}
)

func (x FlowMetricGroupRequest_Choice_Enum) Enum() *FlowMetricGroupRequest_Choice_Enum {
	p := new(FlowMetricGroupRequest_Choice_Enum)
	*p = x
	return p
}

func (x FlowMetricGroupRequest_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowMetricGroupRequest_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[91].Descriptor()
}

func (FlowMetricGroupRequest_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[91]
}

func (x FlowMetricGroupRequest_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowMetricGroupRequest_Choice_Enum.Descriptor instead.
func (FlowMetricGroupRequest_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{209, 0, 0}
}

type FlowMetric_Transmit_Enum int32

const (
	FlowMetric_Transmit_unspecified FlowMetric_Transmit_Enum = 0
	FlowMetric_Transmit_started     FlowMetric_Transmit_Enum = 1
	FlowMetric_Transmit_stopped     FlowMetric_Transmit_Enum = 2
	FlowMetric_Transmit_paused      FlowMetric_Transmit_Enum = 3
)

// Enum value maps for FlowMetric_Transmit_Enum.
var (
	FlowMetric_Transmit_Enum_name = map[int32]string{
		0: "unspecified",
		1: "started",
		2: "stopped",
		3: "paused",
	}
	FlowMetric_Transmit_Enum_value = map[string]int32{
		"unspecified": 0,
		"started":     1,
		"stopped":     2,
		"paused":      3,
	}
)

func (x FlowMetric_Transmit_Enum) Enum() *FlowMetric_Transmit_Enum {
	p := new(FlowMetric_Transmit_Enum)
	*p = x
	return p
}

func (x FlowMetric_Transmit_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowMetric_Transmit_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[92].Descriptor()
}

func (FlowMetric_Transmit_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[92]
}

func (x FlowMetric_Transmit_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlowMetric_Transmit_Enum.Descriptor instead.
func (FlowMetric_Transmit_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{210, 0, 0}
}

type Bgpv4MetricsRequest_ColumnNames_Enum int32

const (
	Bgpv4MetricsRequest_ColumnNames_unspecified              Bgpv4MetricsRequest_ColumnNames_Enum = 0
	Bgpv4MetricsRequest_ColumnNames_session_state            Bgpv4MetricsRequest_ColumnNames_Enum = 1
	Bgpv4MetricsRequest_ColumnNames_session_flap_count       Bgpv4MetricsRequest_ColumnNames_Enum = 2
	Bgpv4MetricsRequest_ColumnNames_routes_advertised        Bgpv4MetricsRequest_ColumnNames_Enum = 3
	Bgpv4MetricsRequest_ColumnNames_routes_received          Bgpv4MetricsRequest_ColumnNames_Enum = 4
	Bgpv4MetricsRequest_ColumnNames_route_withdraws_sent     Bgpv4MetricsRequest_ColumnNames_Enum = 5
	Bgpv4MetricsRequest_ColumnNames_route_withdraws_received Bgpv4MetricsRequest_ColumnNames_Enum = 6
	Bgpv4MetricsRequest_ColumnNames_updates_sent             Bgpv4MetricsRequest_ColumnNames_Enum = 7
	Bgpv4MetricsRequest_ColumnNames_updates_received         Bgpv4MetricsRequest_ColumnNames_Enum = 8
	Bgpv4MetricsRequest_ColumnNames_opens_sent               Bgpv4MetricsRequest_ColumnNames_Enum = 9
	Bgpv4MetricsRequest_ColumnNames_opens_received           Bgpv4MetricsRequest_ColumnNames_Enum = 10
	Bgpv4MetricsRequest_ColumnNames_keepalives_sent          Bgpv4MetricsRequest_ColumnNames_Enum = 11
	Bgpv4MetricsRequest_ColumnNames_keepalives_received      Bgpv4MetricsRequest_ColumnNames_Enum = 12
	Bgpv4MetricsRequest_ColumnNames_notifications_sent       Bgpv4MetricsRequest_ColumnNames_Enum = 13
	Bgpv4MetricsRequest_ColumnNames_notifications_received   Bgpv4MetricsRequest_ColumnNames_Enum = 14
	Bgpv4MetricsRequest_ColumnNames_fsm_state                Bgpv4MetricsRequest_ColumnNames_Enum = 15
)

// Enum value maps for Bgpv4MetricsRequest_ColumnNames_Enum.
var (
	Bgpv4MetricsRequest_ColumnNames_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "session_state",
		2:  "session_flap_count",
		3:  "routes_advertised",
		4:  "routes_received",
		5:  "route_withdraws_sent",
		6:  "route_withdraws_received",
		7:  "updates_sent",
		8:  "updates_received",
		9:  "opens_sent",
		10: "opens_received",
		11: "keepalives_sent",
		12: "keepalives_received",
		13: "notifications_sent",
		14: "notifications_received",
		15: "fsm_state",
	}
	Bgpv4MetricsRequest_ColumnNames_Enum_value = map[string]int32{
		"unspecified":              0,
		"session_state":            1,
		"session_flap_count":       2,
		"routes_advertised":        3,
		"routes_received":          4,
		"route_withdraws_sent":     5,
		"route_withdraws_received": 6,
		"updates_sent":             7,
		"updates_received":         8,
		"opens_sent":               9,
		"opens_received":           10,
		"keepalives_sent":          11,
		"keepalives_received":      12,
		"notifications_sent":       13,
		"notifications_received":   14,
		"fsm_state":                15,
	}
)

func (x Bgpv4MetricsRequest_ColumnNames_Enum) Enum() *Bgpv4MetricsRequest_ColumnNames_Enum {
	p := new(Bgpv4MetricsRequest_ColumnNames_Enum)
	*p = x
	return p
}

func (x Bgpv4MetricsRequest_ColumnNames_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bgpv4MetricsRequest_ColumnNames_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[93].Descriptor()
}

func (Bgpv4MetricsRequest_ColumnNames_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[93]
}

func (x Bgpv4MetricsRequest_ColumnNames_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bgpv4MetricsRequest_ColumnNames_Enum.Descriptor instead.
func (Bgpv4MetricsRequest_ColumnNames_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{214, 0, 0}
}

type Bgpv4Metric_SessionState_Enum int32

const (
	Bgpv4Metric_SessionState_unspecified Bgpv4Metric_SessionState_Enum = 0
	Bgpv4Metric_SessionState_up          Bgpv4Metric_SessionState_Enum = 1
	Bgpv4Metric_SessionState_down        Bgpv4Metric_SessionState_Enum = 2
)

// Enum value maps for Bgpv4Metric_SessionState_Enum.
var (
	Bgpv4Metric_SessionState_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	Bgpv4Metric_SessionState_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x Bgpv4Metric_SessionState_Enum) Enum() *Bgpv4Metric_SessionState_Enum {
	p := new(Bgpv4Metric_SessionState_Enum)
	*p = x
	return p
}

func (x Bgpv4Metric_SessionState_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bgpv4Metric_SessionState_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[94].Descriptor()
}

func (Bgpv4Metric_SessionState_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[94]
}

func (x Bgpv4Metric_SessionState_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bgpv4Metric_SessionState_Enum.Descriptor instead.
func (Bgpv4Metric_SessionState_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{215, 0, 0}
}

type Bgpv4Metric_FsmState_Enum int32

const (
	Bgpv4Metric_FsmState_unspecified Bgpv4Metric_FsmState_Enum = 0
	Bgpv4Metric_FsmState_idle        Bgpv4Metric_FsmState_Enum = 1
	Bgpv4Metric_FsmState_connect     Bgpv4Metric_FsmState_Enum = 2
	Bgpv4Metric_FsmState_active      Bgpv4Metric_FsmState_Enum = 3
	Bgpv4Metric_FsmState_opensent    Bgpv4Metric_FsmState_Enum = 4
	Bgpv4Metric_FsmState_openconfirm Bgpv4Metric_FsmState_Enum = 5
	Bgpv4Metric_FsmState_established Bgpv4Metric_FsmState_Enum = 6
)

// Enum value maps for Bgpv4Metric_FsmState_Enum.
var (
	Bgpv4Metric_FsmState_Enum_name = map[int32]string{
		0: "unspecified",
		1: "idle",
		2: "connect",
		3: "active",
		4: "opensent",
		5: "openconfirm",
		6: "established",
	}
	Bgpv4Metric_FsmState_Enum_value = map[string]int32{
		"unspecified": 0,
		"idle":        1,
		"connect":     2,
		"active":      3,
		"opensent":    4,
		"openconfirm": 5,
		"established": 6,
	}
)

func (x Bgpv4Metric_FsmState_Enum) Enum() *Bgpv4Metric_FsmState_Enum {
	p := new(Bgpv4Metric_FsmState_Enum)
	*p = x
	return p
}

func (x Bgpv4Metric_FsmState_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bgpv4Metric_FsmState_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[95].Descriptor()
}

func (Bgpv4Metric_FsmState_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[95]
}

func (x Bgpv4Metric_FsmState_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bgpv4Metric_FsmState_Enum.Descriptor instead.
func (Bgpv4Metric_FsmState_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{215, 1, 0}
}

type Bgpv6MetricsRequest_ColumnNames_Enum int32

const (
	Bgpv6MetricsRequest_ColumnNames_unspecified              Bgpv6MetricsRequest_ColumnNames_Enum = 0
	Bgpv6MetricsRequest_ColumnNames_session_state            Bgpv6MetricsRequest_ColumnNames_Enum = 1
	Bgpv6MetricsRequest_ColumnNames_session_flap_count       Bgpv6MetricsRequest_ColumnNames_Enum = 2
	Bgpv6MetricsRequest_ColumnNames_routes_advertised        Bgpv6MetricsRequest_ColumnNames_Enum = 3
	Bgpv6MetricsRequest_ColumnNames_routes_received          Bgpv6MetricsRequest_ColumnNames_Enum = 4
	Bgpv6MetricsRequest_ColumnNames_route_withdraws_sent     Bgpv6MetricsRequest_ColumnNames_Enum = 5
	Bgpv6MetricsRequest_ColumnNames_route_withdraws_received Bgpv6MetricsRequest_ColumnNames_Enum = 6
	Bgpv6MetricsRequest_ColumnNames_updates_sent             Bgpv6MetricsRequest_ColumnNames_Enum = 7
	Bgpv6MetricsRequest_ColumnNames_updates_received         Bgpv6MetricsRequest_ColumnNames_Enum = 8
	Bgpv6MetricsRequest_ColumnNames_opens_sent               Bgpv6MetricsRequest_ColumnNames_Enum = 9
	Bgpv6MetricsRequest_ColumnNames_opens_received           Bgpv6MetricsRequest_ColumnNames_Enum = 10
	Bgpv6MetricsRequest_ColumnNames_keepalives_sent          Bgpv6MetricsRequest_ColumnNames_Enum = 11
	Bgpv6MetricsRequest_ColumnNames_keepalives_received      Bgpv6MetricsRequest_ColumnNames_Enum = 12
	Bgpv6MetricsRequest_ColumnNames_notifications_sent       Bgpv6MetricsRequest_ColumnNames_Enum = 13
	Bgpv6MetricsRequest_ColumnNames_notifications_received   Bgpv6MetricsRequest_ColumnNames_Enum = 14
	Bgpv6MetricsRequest_ColumnNames_fsm_state                Bgpv6MetricsRequest_ColumnNames_Enum = 15
)

// Enum value maps for Bgpv6MetricsRequest_ColumnNames_Enum.
var (
	Bgpv6MetricsRequest_ColumnNames_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "session_state",
		2:  "session_flap_count",
		3:  "routes_advertised",
		4:  "routes_received",
		5:  "route_withdraws_sent",
		6:  "route_withdraws_received",
		7:  "updates_sent",
		8:  "updates_received",
		9:  "opens_sent",
		10: "opens_received",
		11: "keepalives_sent",
		12: "keepalives_received",
		13: "notifications_sent",
		14: "notifications_received",
		15: "fsm_state",
	}
	Bgpv6MetricsRequest_ColumnNames_Enum_value = map[string]int32{
		"unspecified":              0,
		"session_state":            1,
		"session_flap_count":       2,
		"routes_advertised":        3,
		"routes_received":          4,
		"route_withdraws_sent":     5,
		"route_withdraws_received": 6,
		"updates_sent":             7,
		"updates_received":         8,
		"opens_sent":               9,
		"opens_received":           10,
		"keepalives_sent":          11,
		"keepalives_received":      12,
		"notifications_sent":       13,
		"notifications_received":   14,
		"fsm_state":                15,
	}
)

func (x Bgpv6MetricsRequest_ColumnNames_Enum) Enum() *Bgpv6MetricsRequest_ColumnNames_Enum {
	p := new(Bgpv6MetricsRequest_ColumnNames_Enum)
	*p = x
	return p
}

func (x Bgpv6MetricsRequest_ColumnNames_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bgpv6MetricsRequest_ColumnNames_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[96].Descriptor()
}

func (Bgpv6MetricsRequest_ColumnNames_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[96]
}

func (x Bgpv6MetricsRequest_ColumnNames_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bgpv6MetricsRequest_ColumnNames_Enum.Descriptor instead.
func (Bgpv6MetricsRequest_ColumnNames_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{216, 0, 0}
}

type Bgpv6Metric_SessionState_Enum int32

const (
	Bgpv6Metric_SessionState_unspecified Bgpv6Metric_SessionState_Enum = 0
	Bgpv6Metric_SessionState_up          Bgpv6Metric_SessionState_Enum = 1
	Bgpv6Metric_SessionState_down        Bgpv6Metric_SessionState_Enum = 2
)

// Enum value maps for Bgpv6Metric_SessionState_Enum.
var (
	Bgpv6Metric_SessionState_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	Bgpv6Metric_SessionState_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x Bgpv6Metric_SessionState_Enum) Enum() *Bgpv6Metric_SessionState_Enum {
	p := new(Bgpv6Metric_SessionState_Enum)
	*p = x
	return p
}

func (x Bgpv6Metric_SessionState_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bgpv6Metric_SessionState_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[97].Descriptor()
}

func (Bgpv6Metric_SessionState_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[97]
}

func (x Bgpv6Metric_SessionState_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bgpv6Metric_SessionState_Enum.Descriptor instead.
func (Bgpv6Metric_SessionState_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{217, 0, 0}
}

type Bgpv6Metric_FsmState_Enum int32

const (
	Bgpv6Metric_FsmState_unspecified Bgpv6Metric_FsmState_Enum = 0
	Bgpv6Metric_FsmState_idle        Bgpv6Metric_FsmState_Enum = 1
	Bgpv6Metric_FsmState_connect     Bgpv6Metric_FsmState_Enum = 2
	Bgpv6Metric_FsmState_active      Bgpv6Metric_FsmState_Enum = 3
	Bgpv6Metric_FsmState_opensent    Bgpv6Metric_FsmState_Enum = 4
	Bgpv6Metric_FsmState_openconfirm Bgpv6Metric_FsmState_Enum = 5
	Bgpv6Metric_FsmState_established Bgpv6Metric_FsmState_Enum = 6
)

// Enum value maps for Bgpv6Metric_FsmState_Enum.
var (
	Bgpv6Metric_FsmState_Enum_name = map[int32]string{
		0: "unspecified",
		1: "idle",
		2: "connect",
		3: "active",
		4: "opensent",
		5: "openconfirm",
		6: "established",
	}
	Bgpv6Metric_FsmState_Enum_value = map[string]int32{
		"unspecified": 0,
		"idle":        1,
		"connect":     2,
		"active":      3,
		"opensent":    4,
		"openconfirm": 5,
		"established": 6,
	}
)

func (x Bgpv6Metric_FsmState_Enum) Enum() *Bgpv6Metric_FsmState_Enum {
	p := new(Bgpv6Metric_FsmState_Enum)
	*p = x
	return p
}

func (x Bgpv6Metric_FsmState_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bgpv6Metric_FsmState_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[98].Descriptor()
}

func (Bgpv6Metric_FsmState_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[98]
}

func (x Bgpv6Metric_FsmState_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bgpv6Metric_FsmState_Enum.Descriptor instead.
func (Bgpv6Metric_FsmState_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{217, 1, 0}
}

type IsisMetricsRequest_ColumnNames_Enum int32

const (
	IsisMetricsRequest_ColumnNames_unspecified                       IsisMetricsRequest_ColumnNames_Enum = 0
	IsisMetricsRequest_ColumnNames_l1_sessions_up                    IsisMetricsRequest_ColumnNames_Enum = 1
	IsisMetricsRequest_ColumnNames_l1_session_flap                   IsisMetricsRequest_ColumnNames_Enum = 2
	IsisMetricsRequest_ColumnNames_l1_database_size                  IsisMetricsRequest_ColumnNames_Enum = 3
	IsisMetricsRequest_ColumnNames_l1_broadcast_hellos_sent          IsisMetricsRequest_ColumnNames_Enum = 4
	IsisMetricsRequest_ColumnNames_l1_broadcast_hellos_received      IsisMetricsRequest_ColumnNames_Enum = 5
	IsisMetricsRequest_ColumnNames_l1_point_to_point_hellos_sent     IsisMetricsRequest_ColumnNames_Enum = 6
	IsisMetricsRequest_ColumnNames_l1_point_to_point_hellos_received IsisMetricsRequest_ColumnNames_Enum = 7
	IsisMetricsRequest_ColumnNames_l1_psnp_sent                      IsisMetricsRequest_ColumnNames_Enum = 8
	IsisMetricsRequest_ColumnNames_l1_psnp_received                  IsisMetricsRequest_ColumnNames_Enum = 9
	IsisMetricsRequest_ColumnNames_l1_csnp_sent                      IsisMetricsRequest_ColumnNames_Enum = 10
	IsisMetricsRequest_ColumnNames_l1_csnp_received                  IsisMetricsRequest_ColumnNames_Enum = 11
	IsisMetricsRequest_ColumnNames_l1_lsp_sent                       IsisMetricsRequest_ColumnNames_Enum = 12
	IsisMetricsRequest_ColumnNames_l1_lsp_received                   IsisMetricsRequest_ColumnNames_Enum = 13
	IsisMetricsRequest_ColumnNames_l2_sessions_up                    IsisMetricsRequest_ColumnNames_Enum = 14
	IsisMetricsRequest_ColumnNames_l2_session_flap                   IsisMetricsRequest_ColumnNames_Enum = 15
	IsisMetricsRequest_ColumnNames_l2_database_size                  IsisMetricsRequest_ColumnNames_Enum = 16
	IsisMetricsRequest_ColumnNames_l2_broadcast_hellos_sent          IsisMetricsRequest_ColumnNames_Enum = 17
	IsisMetricsRequest_ColumnNames_l2_broadcast_hellos_received      IsisMetricsRequest_ColumnNames_Enum = 18
	IsisMetricsRequest_ColumnNames_l2_point_to_point_hellos_sent     IsisMetricsRequest_ColumnNames_Enum = 19
	IsisMetricsRequest_ColumnNames_l2_point_to_point_hellos_received IsisMetricsRequest_ColumnNames_Enum = 20
	IsisMetricsRequest_ColumnNames_l2_psnp_sent                      IsisMetricsRequest_ColumnNames_Enum = 21
	IsisMetricsRequest_ColumnNames_l2_psnp_received                  IsisMetricsRequest_ColumnNames_Enum = 22
	IsisMetricsRequest_ColumnNames_l2_csnp_sent                      IsisMetricsRequest_ColumnNames_Enum = 23
	IsisMetricsRequest_ColumnNames_l2_csnp_received                  IsisMetricsRequest_ColumnNames_Enum = 24
	IsisMetricsRequest_ColumnNames_l2_lsp_sent                       IsisMetricsRequest_ColumnNames_Enum = 25
	IsisMetricsRequest_ColumnNames_l2_lsp_received                   IsisMetricsRequest_ColumnNames_Enum = 26
)

// Enum value maps for IsisMetricsRequest_ColumnNames_Enum.
var (
	IsisMetricsRequest_ColumnNames_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "l1_sessions_up",
		2:  "l1_session_flap",
		3:  "l1_database_size",
		4:  "l1_broadcast_hellos_sent",
		5:  "l1_broadcast_hellos_received",
		6:  "l1_point_to_point_hellos_sent",
		7:  "l1_point_to_point_hellos_received",
		8:  "l1_psnp_sent",
		9:  "l1_psnp_received",
		10: "l1_csnp_sent",
		11: "l1_csnp_received",
		12: "l1_lsp_sent",
		13: "l1_lsp_received",
		14: "l2_sessions_up",
		15: "l2_session_flap",
		16: "l2_database_size",
		17: "l2_broadcast_hellos_sent",
		18: "l2_broadcast_hellos_received",
		19: "l2_point_to_point_hellos_sent",
		20: "l2_point_to_point_hellos_received",
		21: "l2_psnp_sent",
		22: "l2_psnp_received",
		23: "l2_csnp_sent",
		24: "l2_csnp_received",
		25: "l2_lsp_sent",
		26: "l2_lsp_received",
	}
	IsisMetricsRequest_ColumnNames_Enum_value = map[string]int32{
		"unspecified":                       0,
		"l1_sessions_up":                    1,
		"l1_session_flap":                   2,
		"l1_database_size":                  3,
		"l1_broadcast_hellos_sent":          4,
		"l1_broadcast_hellos_received":      5,
		"l1_point_to_point_hellos_sent":     6,
		"l1_point_to_point_hellos_received": 7,
		"l1_psnp_sent":                      8,
		"l1_psnp_received":                  9,
		"l1_csnp_sent":                      10,
		"l1_csnp_received":                  11,
		"l1_lsp_sent":                       12,
		"l1_lsp_received":                   13,
		"l2_sessions_up":                    14,
		"l2_session_flap":                   15,
		"l2_database_size":                  16,
		"l2_broadcast_hellos_sent":          17,
		"l2_broadcast_hellos_received":      18,
		"l2_point_to_point_hellos_sent":     19,
		"l2_point_to_point_hellos_received": 20,
		"l2_psnp_sent":                      21,
		"l2_psnp_received":                  22,
		"l2_csnp_sent":                      23,
		"l2_csnp_received":                  24,
		"l2_lsp_sent":                       25,
		"l2_lsp_received":                   26,
	}
)

func (x IsisMetricsRequest_ColumnNames_Enum) Enum() *IsisMetricsRequest_ColumnNames_Enum {
	p := new(IsisMetricsRequest_ColumnNames_Enum)
	*p = x
	return p
}

func (x IsisMetricsRequest_ColumnNames_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisMetricsRequest_ColumnNames_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[99].Descriptor()
}

func (IsisMetricsRequest_ColumnNames_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[99]
}

func (x IsisMetricsRequest_ColumnNames_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisMetricsRequest_ColumnNames_Enum.Descriptor instead.
func (IsisMetricsRequest_ColumnNames_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{218, 0, 0}
}

type LagMetricsRequest_ColumnNames_Enum int32

const (
	LagMetricsRequest_ColumnNames_unspecified     LagMetricsRequest_ColumnNames_Enum = 0
	LagMetricsRequest_ColumnNames_oper_status     LagMetricsRequest_ColumnNames_Enum = 1
	LagMetricsRequest_ColumnNames_member_ports_up LagMetricsRequest_ColumnNames_Enum = 2
	LagMetricsRequest_ColumnNames_frames_tx       LagMetricsRequest_ColumnNames_Enum = 3
	LagMetricsRequest_ColumnNames_frames_rx       LagMetricsRequest_ColumnNames_Enum = 4
	LagMetricsRequest_ColumnNames_bytes_tx        LagMetricsRequest_ColumnNames_Enum = 5
	LagMetricsRequest_ColumnNames_bytes_rx        LagMetricsRequest_ColumnNames_Enum = 6
	LagMetricsRequest_ColumnNames_frames_tx_rate  LagMetricsRequest_ColumnNames_Enum = 7
	LagMetricsRequest_ColumnNames_frames_rx_rate  LagMetricsRequest_ColumnNames_Enum = 8
	LagMetricsRequest_ColumnNames_bytes_tx_rate   LagMetricsRequest_ColumnNames_Enum = 9
	LagMetricsRequest_ColumnNames_bytes_rx_rate   LagMetricsRequest_ColumnNames_Enum = 10
)

// Enum value maps for LagMetricsRequest_ColumnNames_Enum.
var (
	LagMetricsRequest_ColumnNames_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "oper_status",
		2:  "member_ports_up",
		3:  "frames_tx",
		4:  "frames_rx",
		5:  "bytes_tx",
		6:  "bytes_rx",
		7:  "frames_tx_rate",
		8:  "frames_rx_rate",
		9:  "bytes_tx_rate",
		10: "bytes_rx_rate",
	}
	LagMetricsRequest_ColumnNames_Enum_value = map[string]int32{
		"unspecified":     0,
		"oper_status":     1,
		"member_ports_up": 2,
		"frames_tx":       3,
		"frames_rx":       4,
		"bytes_tx":        5,
		"bytes_rx":        6,
		"frames_tx_rate":  7,
		"frames_rx_rate":  8,
		"bytes_tx_rate":   9,
		"bytes_rx_rate":   10,
	}
)

func (x LagMetricsRequest_ColumnNames_Enum) Enum() *LagMetricsRequest_ColumnNames_Enum {
	p := new(LagMetricsRequest_ColumnNames_Enum)
	*p = x
	return p
}

func (x LagMetricsRequest_ColumnNames_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LagMetricsRequest_ColumnNames_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[100].Descriptor()
}

func (LagMetricsRequest_ColumnNames_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[100]
}

func (x LagMetricsRequest_ColumnNames_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LagMetricsRequest_ColumnNames_Enum.Descriptor instead.
func (LagMetricsRequest_ColumnNames_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{220, 0, 0}
}

type LagMetric_OperStatus_Enum int32

const (
	LagMetric_OperStatus_unspecified LagMetric_OperStatus_Enum = 0
	LagMetric_OperStatus_up          LagMetric_OperStatus_Enum = 1
	LagMetric_OperStatus_down        LagMetric_OperStatus_Enum = 2
)

// Enum value maps for LagMetric_OperStatus_Enum.
var (
	LagMetric_OperStatus_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	LagMetric_OperStatus_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x LagMetric_OperStatus_Enum) Enum() *LagMetric_OperStatus_Enum {
	p := new(LagMetric_OperStatus_Enum)
	*p = x
	return p
}

func (x LagMetric_OperStatus_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LagMetric_OperStatus_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[101].Descriptor()
}

func (LagMetric_OperStatus_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[101]
}

func (x LagMetric_OperStatus_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LagMetric_OperStatus_Enum.Descriptor instead.
func (LagMetric_OperStatus_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{221, 0, 0}
}

type LacpMetricsRequest_ColumnNames_Enum int32

const (
	LacpMetricsRequest_ColumnNames_unspecified      LacpMetricsRequest_ColumnNames_Enum = 0
	LacpMetricsRequest_ColumnNames_lacp_packets_rx  LacpMetricsRequest_ColumnNames_Enum = 1
	LacpMetricsRequest_ColumnNames_lacp_packets_tx  LacpMetricsRequest_ColumnNames_Enum = 2
	LacpMetricsRequest_ColumnNames_lacp_rx_errors   LacpMetricsRequest_ColumnNames_Enum = 3
	LacpMetricsRequest_ColumnNames_activity         LacpMetricsRequest_ColumnNames_Enum = 4
	LacpMetricsRequest_ColumnNames_timeout          LacpMetricsRequest_ColumnNames_Enum = 5
	LacpMetricsRequest_ColumnNames_synchronization  LacpMetricsRequest_ColumnNames_Enum = 6
	LacpMetricsRequest_ColumnNames_aggregatable     LacpMetricsRequest_ColumnNames_Enum = 7
	LacpMetricsRequest_ColumnNames_collecting       LacpMetricsRequest_ColumnNames_Enum = 8
	LacpMetricsRequest_ColumnNames_distributing     LacpMetricsRequest_ColumnNames_Enum = 9
	LacpMetricsRequest_ColumnNames_system_id        LacpMetricsRequest_ColumnNames_Enum = 10
	LacpMetricsRequest_ColumnNames_oper_key         LacpMetricsRequest_ColumnNames_Enum = 11
	LacpMetricsRequest_ColumnNames_partner_id       LacpMetricsRequest_ColumnNames_Enum = 12
	LacpMetricsRequest_ColumnNames_partner_key      LacpMetricsRequest_ColumnNames_Enum = 13
	LacpMetricsRequest_ColumnNames_port_num         LacpMetricsRequest_ColumnNames_Enum = 14
	LacpMetricsRequest_ColumnNames_partner_port_num LacpMetricsRequest_ColumnNames_Enum = 15
)

// Enum value maps for LacpMetricsRequest_ColumnNames_Enum.
var (
	LacpMetricsRequest_ColumnNames_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "lacp_packets_rx",
		2:  "lacp_packets_tx",
		3:  "lacp_rx_errors",
		4:  "activity",
		5:  "timeout",
		6:  "synchronization",
		7:  "aggregatable",
		8:  "collecting",
		9:  "distributing",
		10: "system_id",
		11: "oper_key",
		12: "partner_id",
		13: "partner_key",
		14: "port_num",
		15: "partner_port_num",
	}
	LacpMetricsRequest_ColumnNames_Enum_value = map[string]int32{
		"unspecified":      0,
		"lacp_packets_rx":  1,
		"lacp_packets_tx":  2,
		"lacp_rx_errors":   3,
		"activity":         4,
		"timeout":          5,
		"synchronization":  6,
		"aggregatable":     7,
		"collecting":       8,
		"distributing":     9,
		"system_id":        10,
		"oper_key":         11,
		"partner_id":       12,
		"partner_key":      13,
		"port_num":         14,
		"partner_port_num": 15,
	}
)

func (x LacpMetricsRequest_ColumnNames_Enum) Enum() *LacpMetricsRequest_ColumnNames_Enum {
	p := new(LacpMetricsRequest_ColumnNames_Enum)
	*p = x
	return p
}

func (x LacpMetricsRequest_ColumnNames_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LacpMetricsRequest_ColumnNames_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[102].Descriptor()
}

func (LacpMetricsRequest_ColumnNames_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[102]
}

func (x LacpMetricsRequest_ColumnNames_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LacpMetricsRequest_ColumnNames_Enum.Descriptor instead.
func (LacpMetricsRequest_ColumnNames_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{222, 0, 0}
}

type LacpMetric_Activity_Enum int32

const (
	LacpMetric_Activity_unspecified LacpMetric_Activity_Enum = 0
	LacpMetric_Activity_active      LacpMetric_Activity_Enum = 1
	LacpMetric_Activity_passive     LacpMetric_Activity_Enum = 2
)

// Enum value maps for LacpMetric_Activity_Enum.
var (
	LacpMetric_Activity_Enum_name = map[int32]string{
		0: "unspecified",
		1: "active",
		2: "passive",
	}
	LacpMetric_Activity_Enum_value = map[string]int32{
		"unspecified": 0,
		"active":      1,
		"passive":     2,
	}
)

func (x LacpMetric_Activity_Enum) Enum() *LacpMetric_Activity_Enum {
	p := new(LacpMetric_Activity_Enum)
	*p = x
	return p
}

func (x LacpMetric_Activity_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LacpMetric_Activity_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[103].Descriptor()
}

func (LacpMetric_Activity_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[103]
}

func (x LacpMetric_Activity_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LacpMetric_Activity_Enum.Descriptor instead.
func (LacpMetric_Activity_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{223, 0, 0}
}

type LacpMetric_Timeout_Enum int32

const (
	LacpMetric_Timeout_unspecified LacpMetric_Timeout_Enum = 0
	LacpMetric_Timeout_short       LacpMetric_Timeout_Enum = 1
	LacpMetric_Timeout_long        LacpMetric_Timeout_Enum = 2
)

// Enum value maps for LacpMetric_Timeout_Enum.
var (
	LacpMetric_Timeout_Enum_name = map[int32]string{
		0: "unspecified",
		1: "short",
		2: "long",
	}
	LacpMetric_Timeout_Enum_value = map[string]int32{
		"unspecified": 0,
		"short":       1,
		"long":        2,
	}
)

func (x LacpMetric_Timeout_Enum) Enum() *LacpMetric_Timeout_Enum {
	p := new(LacpMetric_Timeout_Enum)
	*p = x
	return p
}

func (x LacpMetric_Timeout_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LacpMetric_Timeout_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[104].Descriptor()
}

func (LacpMetric_Timeout_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[104]
}

func (x LacpMetric_Timeout_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LacpMetric_Timeout_Enum.Descriptor instead.
func (LacpMetric_Timeout_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{223, 1, 0}
}

type LacpMetric_Synchronization_Enum int32

const (
	LacpMetric_Synchronization_unspecified LacpMetric_Synchronization_Enum = 0
	LacpMetric_Synchronization_in_sync     LacpMetric_Synchronization_Enum = 1
	LacpMetric_Synchronization_out_sync    LacpMetric_Synchronization_Enum = 2
)

// Enum value maps for LacpMetric_Synchronization_Enum.
var (
	LacpMetric_Synchronization_Enum_name = map[int32]string{
		0: "unspecified",
		1: "in_sync",
		2: "out_sync",
	}
	LacpMetric_Synchronization_Enum_value = map[string]int32{
		"unspecified": 0,
		"in_sync":     1,
		"out_sync":    2,
	}
)

func (x LacpMetric_Synchronization_Enum) Enum() *LacpMetric_Synchronization_Enum {
	p := new(LacpMetric_Synchronization_Enum)
	*p = x
	return p
}

func (x LacpMetric_Synchronization_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LacpMetric_Synchronization_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[105].Descriptor()
}

func (LacpMetric_Synchronization_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[105]
}

func (x LacpMetric_Synchronization_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LacpMetric_Synchronization_Enum.Descriptor instead.
func (LacpMetric_Synchronization_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{223, 2, 0}
}

type LldpMetricsRequest_ColumnNames_Enum int32

const (
	LldpMetricsRequest_ColumnNames_unspecified     LldpMetricsRequest_ColumnNames_Enum = 0
	LldpMetricsRequest_ColumnNames_frames_rx       LldpMetricsRequest_ColumnNames_Enum = 1
	LldpMetricsRequest_ColumnNames_frames_tx       LldpMetricsRequest_ColumnNames_Enum = 2
	LldpMetricsRequest_ColumnNames_frames_error_rx LldpMetricsRequest_ColumnNames_Enum = 3
	LldpMetricsRequest_ColumnNames_frames_discard  LldpMetricsRequest_ColumnNames_Enum = 4
	LldpMetricsRequest_ColumnNames_tlvs_discard    LldpMetricsRequest_ColumnNames_Enum = 5
	LldpMetricsRequest_ColumnNames_tlvs_unknown    LldpMetricsRequest_ColumnNames_Enum = 6
)

// Enum value maps for LldpMetricsRequest_ColumnNames_Enum.
var (
	LldpMetricsRequest_ColumnNames_Enum_name = map[int32]string{
		0: "unspecified",
		1: "frames_rx",
		2: "frames_tx",
		3: "frames_error_rx",
		4: "frames_discard",
		5: "tlvs_discard",
		6: "tlvs_unknown",
	}
	LldpMetricsRequest_ColumnNames_Enum_value = map[string]int32{
		"unspecified":     0,
		"frames_rx":       1,
		"frames_tx":       2,
		"frames_error_rx": 3,
		"frames_discard":  4,
		"tlvs_discard":    5,
		"tlvs_unknown":    6,
	}
)

func (x LldpMetricsRequest_ColumnNames_Enum) Enum() *LldpMetricsRequest_ColumnNames_Enum {
	p := new(LldpMetricsRequest_ColumnNames_Enum)
	*p = x
	return p
}

func (x LldpMetricsRequest_ColumnNames_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpMetricsRequest_ColumnNames_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[106].Descriptor()
}

func (LldpMetricsRequest_ColumnNames_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[106]
}

func (x LldpMetricsRequest_ColumnNames_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpMetricsRequest_ColumnNames_Enum.Descriptor instead.
func (LldpMetricsRequest_ColumnNames_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{224, 0, 0}
}

type RsvpMetricsRequest_ColumnNames_Enum int32

const (
	RsvpMetricsRequest_ColumnNames_unspecified                  RsvpMetricsRequest_ColumnNames_Enum = 0
	RsvpMetricsRequest_ColumnNames_ingress_p2p_lsps_configured  RsvpMetricsRequest_ColumnNames_Enum = 1
	RsvpMetricsRequest_ColumnNames_ingress_p2p_lsps_up          RsvpMetricsRequest_ColumnNames_Enum = 2
	RsvpMetricsRequest_ColumnNames_egress_p2p_lsps_up           RsvpMetricsRequest_ColumnNames_Enum = 3
	RsvpMetricsRequest_ColumnNames_lsp_flap_count               RsvpMetricsRequest_ColumnNames_Enum = 4
	RsvpMetricsRequest_ColumnNames_paths_tx                     RsvpMetricsRequest_ColumnNames_Enum = 5
	RsvpMetricsRequest_ColumnNames_paths_rx                     RsvpMetricsRequest_ColumnNames_Enum = 6
	RsvpMetricsRequest_ColumnNames_resvs_tx                     RsvpMetricsRequest_ColumnNames_Enum = 7
	RsvpMetricsRequest_ColumnNames_resvs_rx                     RsvpMetricsRequest_ColumnNames_Enum = 8
	RsvpMetricsRequest_ColumnNames_path_tears_tx                RsvpMetricsRequest_ColumnNames_Enum = 9
	RsvpMetricsRequest_ColumnNames_path_tears_rx                RsvpMetricsRequest_ColumnNames_Enum = 10
	RsvpMetricsRequest_ColumnNames_resv_tears_tx                RsvpMetricsRequest_ColumnNames_Enum = 11
	RsvpMetricsRequest_ColumnNames_resv_tears_rx                RsvpMetricsRequest_ColumnNames_Enum = 12
	RsvpMetricsRequest_ColumnNames_path_errors_tx               RsvpMetricsRequest_ColumnNames_Enum = 13
	RsvpMetricsRequest_ColumnNames_path_errors_rx               RsvpMetricsRequest_ColumnNames_Enum = 14
	RsvpMetricsRequest_ColumnNames_resv_errors_tx               RsvpMetricsRequest_ColumnNames_Enum = 15
	RsvpMetricsRequest_ColumnNames_resv_errors_rx               RsvpMetricsRequest_ColumnNames_Enum = 16
	RsvpMetricsRequest_ColumnNames_resv_conf_tx                 RsvpMetricsRequest_ColumnNames_Enum = 17
	RsvpMetricsRequest_ColumnNames_resv_conf_rx                 RsvpMetricsRequest_ColumnNames_Enum = 18
	RsvpMetricsRequest_ColumnNames_hellos_tx                    RsvpMetricsRequest_ColumnNames_Enum = 19
	RsvpMetricsRequest_ColumnNames_hellos_rx                    RsvpMetricsRequest_ColumnNames_Enum = 20
	RsvpMetricsRequest_ColumnNames_acks_tx                      RsvpMetricsRequest_ColumnNames_Enum = 21
	RsvpMetricsRequest_ColumnNames_acks_rx                      RsvpMetricsRequest_ColumnNames_Enum = 22
	RsvpMetricsRequest_ColumnNames_nacks_tx                     RsvpMetricsRequest_ColumnNames_Enum = 23
	RsvpMetricsRequest_ColumnNames_nacks_rx                     RsvpMetricsRequest_ColumnNames_Enum = 24
	RsvpMetricsRequest_ColumnNames_srefresh_tx                  RsvpMetricsRequest_ColumnNames_Enum = 25
	RsvpMetricsRequest_ColumnNames_srefresh_rx                  RsvpMetricsRequest_ColumnNames_Enum = 26
	RsvpMetricsRequest_ColumnNames_bundle_tx                    RsvpMetricsRequest_ColumnNames_Enum = 27
	RsvpMetricsRequest_ColumnNames_bundle_rx                    RsvpMetricsRequest_ColumnNames_Enum = 28
	RsvpMetricsRequest_ColumnNames_path_reevaluation_request_tx RsvpMetricsRequest_ColumnNames_Enum = 29
	RsvpMetricsRequest_ColumnNames_path_reoptimizations         RsvpMetricsRequest_ColumnNames_Enum = 30
)

// Enum value maps for RsvpMetricsRequest_ColumnNames_Enum.
var (
	RsvpMetricsRequest_ColumnNames_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "ingress_p2p_lsps_configured",
		2:  "ingress_p2p_lsps_up",
		3:  "egress_p2p_lsps_up",
		4:  "lsp_flap_count",
		5:  "paths_tx",
		6:  "paths_rx",
		7:  "resvs_tx",
		8:  "resvs_rx",
		9:  "path_tears_tx",
		10: "path_tears_rx",
		11: "resv_tears_tx",
		12: "resv_tears_rx",
		13: "path_errors_tx",
		14: "path_errors_rx",
		15: "resv_errors_tx",
		16: "resv_errors_rx",
		17: "resv_conf_tx",
		18: "resv_conf_rx",
		19: "hellos_tx",
		20: "hellos_rx",
		21: "acks_tx",
		22: "acks_rx",
		23: "nacks_tx",
		24: "nacks_rx",
		25: "srefresh_tx",
		26: "srefresh_rx",
		27: "bundle_tx",
		28: "bundle_rx",
		29: "path_reevaluation_request_tx",
		30: "path_reoptimizations",
	}
	RsvpMetricsRequest_ColumnNames_Enum_value = map[string]int32{
		"unspecified":                  0,
		"ingress_p2p_lsps_configured":  1,
		"ingress_p2p_lsps_up":          2,
		"egress_p2p_lsps_up":           3,
		"lsp_flap_count":               4,
		"paths_tx":                     5,
		"paths_rx":                     6,
		"resvs_tx":                     7,
		"resvs_rx":                     8,
		"path_tears_tx":                9,
		"path_tears_rx":                10,
		"resv_tears_tx":                11,
		"resv_tears_rx":                12,
		"path_errors_tx":               13,
		"path_errors_rx":               14,
		"resv_errors_tx":               15,
		"resv_errors_rx":               16,
		"resv_conf_tx":                 17,
		"resv_conf_rx":                 18,
		"hellos_tx":                    19,
		"hellos_rx":                    20,
		"acks_tx":                      21,
		"acks_rx":                      22,
		"nacks_tx":                     23,
		"nacks_rx":                     24,
		"srefresh_tx":                  25,
		"srefresh_rx":                  26,
		"bundle_tx":                    27,
		"bundle_rx":                    28,
		"path_reevaluation_request_tx": 29,
		"path_reoptimizations":         30,
	}
)

func (x RsvpMetricsRequest_ColumnNames_Enum) Enum() *RsvpMetricsRequest_ColumnNames_Enum {
	p := new(RsvpMetricsRequest_ColumnNames_Enum)
	*p = x
	return p
}

func (x RsvpMetricsRequest_ColumnNames_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RsvpMetricsRequest_ColumnNames_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[107].Descriptor()
}

func (RsvpMetricsRequest_ColumnNames_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[107]
}

func (x RsvpMetricsRequest_ColumnNames_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RsvpMetricsRequest_ColumnNames_Enum.Descriptor instead.
func (RsvpMetricsRequest_ColumnNames_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{226, 0, 0}
}

type StatesRequest_Choice_Enum int32

const (
	StatesRequest_Choice_unspecified    StatesRequest_Choice_Enum = 0
	StatesRequest_Choice_ipv4_neighbors StatesRequest_Choice_Enum = 1
	StatesRequest_Choice_ipv6_neighbors StatesRequest_Choice_Enum = 2
	StatesRequest_Choice_bgp_prefixes   StatesRequest_Choice_Enum = 3
	StatesRequest_Choice_isis_lsps      StatesRequest_Choice_Enum = 4
	StatesRequest_Choice_lldp_neighbors StatesRequest_Choice_Enum = 5
	StatesRequest_Choice_rsvp_lsps      StatesRequest_Choice_Enum = 6
)

// Enum value maps for StatesRequest_Choice_Enum.
var (
	StatesRequest_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ipv4_neighbors",
		2: "ipv6_neighbors",
		3: "bgp_prefixes",
		4: "isis_lsps",
		5: "lldp_neighbors",
		6: "rsvp_lsps",
	}
	StatesRequest_Choice_Enum_value = map[string]int32{
		"unspecified":    0,
		"ipv4_neighbors": 1,
		"ipv6_neighbors": 2,
		"bgp_prefixes":   3,
		"isis_lsps":      4,
		"lldp_neighbors": 5,
		"rsvp_lsps":      6,
	}
)

func (x StatesRequest_Choice_Enum) Enum() *StatesRequest_Choice_Enum {
	p := new(StatesRequest_Choice_Enum)
	*p = x
	return p
}

func (x StatesRequest_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatesRequest_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[108].Descriptor()
}

func (StatesRequest_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[108]
}

func (x StatesRequest_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatesRequest_Choice_Enum.Descriptor instead.
func (StatesRequest_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{228, 0, 0}
}

type StatesResponse_Choice_Enum int32

const (
	StatesResponse_Choice_unspecified    StatesResponse_Choice_Enum = 0
	StatesResponse_Choice_ipv4_neighbors StatesResponse_Choice_Enum = 1
	StatesResponse_Choice_ipv6_neighbors StatesResponse_Choice_Enum = 2
	StatesResponse_Choice_bgp_prefixes   StatesResponse_Choice_Enum = 3
	StatesResponse_Choice_isis_lsps      StatesResponse_Choice_Enum = 4
	StatesResponse_Choice_lldp_neighbors StatesResponse_Choice_Enum = 5
	StatesResponse_Choice_rsvp_lsps      StatesResponse_Choice_Enum = 6
)

// Enum value maps for StatesResponse_Choice_Enum.
var (
	StatesResponse_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ipv4_neighbors",
		2: "ipv6_neighbors",
		3: "bgp_prefixes",
		4: "isis_lsps",
		5: "lldp_neighbors",
		6: "rsvp_lsps",
	}
	StatesResponse_Choice_Enum_value = map[string]int32{
		"unspecified":    0,
		"ipv4_neighbors": 1,
		"ipv6_neighbors": 2,
		"bgp_prefixes":   3,
		"isis_lsps":      4,
		"lldp_neighbors": 5,
		"rsvp_lsps":      6,
	}
)

func (x StatesResponse_Choice_Enum) Enum() *StatesResponse_Choice_Enum {
	p := new(StatesResponse_Choice_Enum)
	*p = x
	return p
}

func (x StatesResponse_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatesResponse_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[109].Descriptor()
}

func (StatesResponse_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[109]
}

func (x StatesResponse_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatesResponse_Choice_Enum.Descriptor instead.
func (StatesResponse_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{229, 0, 0}
}

type BgpPrefixStateRequest_PrefixFilters_Enum int32

const (
	BgpPrefixStateRequest_PrefixFilters_unspecified  BgpPrefixStateRequest_PrefixFilters_Enum = 0
	BgpPrefixStateRequest_PrefixFilters_ipv4_unicast BgpPrefixStateRequest_PrefixFilters_Enum = 1
	BgpPrefixStateRequest_PrefixFilters_ipv6_unicast BgpPrefixStateRequest_PrefixFilters_Enum = 2
)

// Enum value maps for BgpPrefixStateRequest_PrefixFilters_Enum.
var (
	BgpPrefixStateRequest_PrefixFilters_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ipv4_unicast",
		2: "ipv6_unicast",
	}
	BgpPrefixStateRequest_PrefixFilters_Enum_value = map[string]int32{
		"unspecified":  0,
		"ipv4_unicast": 1,
		"ipv6_unicast": 2,
	}
)

func (x BgpPrefixStateRequest_PrefixFilters_Enum) Enum() *BgpPrefixStateRequest_PrefixFilters_Enum {
	p := new(BgpPrefixStateRequest_PrefixFilters_Enum)
	*p = x
	return p
}

func (x BgpPrefixStateRequest_PrefixFilters_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpPrefixStateRequest_PrefixFilters_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[110].Descriptor()
}

func (BgpPrefixStateRequest_PrefixFilters_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[110]
}

func (x BgpPrefixStateRequest_PrefixFilters_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpPrefixStateRequest_PrefixFilters_Enum.Descriptor instead.
func (BgpPrefixStateRequest_PrefixFilters_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{234, 0, 0}
}

type BgpPrefixIpv4UnicastFilter_Origin_Enum int32

const (
	BgpPrefixIpv4UnicastFilter_Origin_unspecified BgpPrefixIpv4UnicastFilter_Origin_Enum = 0
	BgpPrefixIpv4UnicastFilter_Origin_igp         BgpPrefixIpv4UnicastFilter_Origin_Enum = 1
	BgpPrefixIpv4UnicastFilter_Origin_egp         BgpPrefixIpv4UnicastFilter_Origin_Enum = 2
	BgpPrefixIpv4UnicastFilter_Origin_incomplete  BgpPrefixIpv4UnicastFilter_Origin_Enum = 3
)

// Enum value maps for BgpPrefixIpv4UnicastFilter_Origin_Enum.
var (
	BgpPrefixIpv4UnicastFilter_Origin_Enum_name = map[int32]string{
		0: "unspecified",
		1: "igp",
		2: "egp",
		3: "incomplete",
	}
	BgpPrefixIpv4UnicastFilter_Origin_Enum_value = map[string]int32{
		"unspecified": 0,
		"igp":         1,
		"egp":         2,
		"incomplete":  3,
	}
)

func (x BgpPrefixIpv4UnicastFilter_Origin_Enum) Enum() *BgpPrefixIpv4UnicastFilter_Origin_Enum {
	p := new(BgpPrefixIpv4UnicastFilter_Origin_Enum)
	*p = x
	return p
}

func (x BgpPrefixIpv4UnicastFilter_Origin_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpPrefixIpv4UnicastFilter_Origin_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[111].Descriptor()
}

func (BgpPrefixIpv4UnicastFilter_Origin_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[111]
}

func (x BgpPrefixIpv4UnicastFilter_Origin_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpPrefixIpv4UnicastFilter_Origin_Enum.Descriptor instead.
func (BgpPrefixIpv4UnicastFilter_Origin_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{235, 0, 0}
}

type BgpPrefixIpv6UnicastFilter_Origin_Enum int32

const (
	BgpPrefixIpv6UnicastFilter_Origin_unspecified BgpPrefixIpv6UnicastFilter_Origin_Enum = 0
	BgpPrefixIpv6UnicastFilter_Origin_igp         BgpPrefixIpv6UnicastFilter_Origin_Enum = 1
	BgpPrefixIpv6UnicastFilter_Origin_egp         BgpPrefixIpv6UnicastFilter_Origin_Enum = 2
	BgpPrefixIpv6UnicastFilter_Origin_incomplete  BgpPrefixIpv6UnicastFilter_Origin_Enum = 3
)

// Enum value maps for BgpPrefixIpv6UnicastFilter_Origin_Enum.
var (
	BgpPrefixIpv6UnicastFilter_Origin_Enum_name = map[int32]string{
		0: "unspecified",
		1: "igp",
		2: "egp",
		3: "incomplete",
	}
	BgpPrefixIpv6UnicastFilter_Origin_Enum_value = map[string]int32{
		"unspecified": 0,
		"igp":         1,
		"egp":         2,
		"incomplete":  3,
	}
)

func (x BgpPrefixIpv6UnicastFilter_Origin_Enum) Enum() *BgpPrefixIpv6UnicastFilter_Origin_Enum {
	p := new(BgpPrefixIpv6UnicastFilter_Origin_Enum)
	*p = x
	return p
}

func (x BgpPrefixIpv6UnicastFilter_Origin_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpPrefixIpv6UnicastFilter_Origin_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[112].Descriptor()
}

func (BgpPrefixIpv6UnicastFilter_Origin_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[112]
}

func (x BgpPrefixIpv6UnicastFilter_Origin_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpPrefixIpv6UnicastFilter_Origin_Enum.Descriptor instead.
func (BgpPrefixIpv6UnicastFilter_Origin_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{236, 0, 0}
}

type BgpPrefixIpv4UnicastState_Origin_Enum int32

const (
	BgpPrefixIpv4UnicastState_Origin_unspecified BgpPrefixIpv4UnicastState_Origin_Enum = 0
	BgpPrefixIpv4UnicastState_Origin_igp         BgpPrefixIpv4UnicastState_Origin_Enum = 1
	BgpPrefixIpv4UnicastState_Origin_egp         BgpPrefixIpv4UnicastState_Origin_Enum = 2
	BgpPrefixIpv4UnicastState_Origin_incomplete  BgpPrefixIpv4UnicastState_Origin_Enum = 3
)

// Enum value maps for BgpPrefixIpv4UnicastState_Origin_Enum.
var (
	BgpPrefixIpv4UnicastState_Origin_Enum_name = map[int32]string{
		0: "unspecified",
		1: "igp",
		2: "egp",
		3: "incomplete",
	}
	BgpPrefixIpv4UnicastState_Origin_Enum_value = map[string]int32{
		"unspecified": 0,
		"igp":         1,
		"egp":         2,
		"incomplete":  3,
	}
)

func (x BgpPrefixIpv4UnicastState_Origin_Enum) Enum() *BgpPrefixIpv4UnicastState_Origin_Enum {
	p := new(BgpPrefixIpv4UnicastState_Origin_Enum)
	*p = x
	return p
}

func (x BgpPrefixIpv4UnicastState_Origin_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpPrefixIpv4UnicastState_Origin_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[113].Descriptor()
}

func (BgpPrefixIpv4UnicastState_Origin_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[113]
}

func (x BgpPrefixIpv4UnicastState_Origin_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpPrefixIpv4UnicastState_Origin_Enum.Descriptor instead.
func (BgpPrefixIpv4UnicastState_Origin_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{238, 0, 0}
}

type BgpPrefixIpv6UnicastState_Origin_Enum int32

const (
	BgpPrefixIpv6UnicastState_Origin_unspecified BgpPrefixIpv6UnicastState_Origin_Enum = 0
	BgpPrefixIpv6UnicastState_Origin_igp         BgpPrefixIpv6UnicastState_Origin_Enum = 1
	BgpPrefixIpv6UnicastState_Origin_egp         BgpPrefixIpv6UnicastState_Origin_Enum = 2
	BgpPrefixIpv6UnicastState_Origin_incomplete  BgpPrefixIpv6UnicastState_Origin_Enum = 3
)

// Enum value maps for BgpPrefixIpv6UnicastState_Origin_Enum.
var (
	BgpPrefixIpv6UnicastState_Origin_Enum_name = map[int32]string{
		0: "unspecified",
		1: "igp",
		2: "egp",
		3: "incomplete",
	}
	BgpPrefixIpv6UnicastState_Origin_Enum_value = map[string]int32{
		"unspecified": 0,
		"igp":         1,
		"egp":         2,
		"incomplete":  3,
	}
)

func (x BgpPrefixIpv6UnicastState_Origin_Enum) Enum() *BgpPrefixIpv6UnicastState_Origin_Enum {
	p := new(BgpPrefixIpv6UnicastState_Origin_Enum)
	*p = x
	return p
}

func (x BgpPrefixIpv6UnicastState_Origin_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpPrefixIpv6UnicastState_Origin_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[114].Descriptor()
}

func (BgpPrefixIpv6UnicastState_Origin_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[114]
}

func (x BgpPrefixIpv6UnicastState_Origin_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpPrefixIpv6UnicastState_Origin_Enum.Descriptor instead.
func (BgpPrefixIpv6UnicastState_Origin_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{239, 0, 0}
}

type ResultBgpCommunity_Type_Enum int32

const (
	ResultBgpCommunity_Type_unspecified         ResultBgpCommunity_Type_Enum = 0
	ResultBgpCommunity_Type_manual_as_number    ResultBgpCommunity_Type_Enum = 1
	ResultBgpCommunity_Type_no_export           ResultBgpCommunity_Type_Enum = 2
	ResultBgpCommunity_Type_no_advertised       ResultBgpCommunity_Type_Enum = 3
	ResultBgpCommunity_Type_no_export_subconfed ResultBgpCommunity_Type_Enum = 4
	ResultBgpCommunity_Type_llgr_stale          ResultBgpCommunity_Type_Enum = 5
	ResultBgpCommunity_Type_no_llgr             ResultBgpCommunity_Type_Enum = 6
)

// Enum value maps for ResultBgpCommunity_Type_Enum.
var (
	ResultBgpCommunity_Type_Enum_name = map[int32]string{
		0: "unspecified",
		1: "manual_as_number",
		2: "no_export",
		3: "no_advertised",
		4: "no_export_subconfed",
		5: "llgr_stale",
		6: "no_llgr",
	}
	ResultBgpCommunity_Type_Enum_value = map[string]int32{
		"unspecified":         0,
		"manual_as_number":    1,
		"no_export":           2,
		"no_advertised":       3,
		"no_export_subconfed": 4,
		"llgr_stale":          5,
		"no_llgr":             6,
	}
)

func (x ResultBgpCommunity_Type_Enum) Enum() *ResultBgpCommunity_Type_Enum {
	p := new(ResultBgpCommunity_Type_Enum)
	*p = x
	return p
}

func (x ResultBgpCommunity_Type_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultBgpCommunity_Type_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[115].Descriptor()
}

func (ResultBgpCommunity_Type_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[115]
}

func (x ResultBgpCommunity_Type_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultBgpCommunity_Type_Enum.Descriptor instead.
func (ResultBgpCommunity_Type_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{240, 0, 0}
}

type ResultBgpAsPathSegment_Type_Enum int32

const (
	ResultBgpAsPathSegment_Type_unspecified   ResultBgpAsPathSegment_Type_Enum = 0
	ResultBgpAsPathSegment_Type_as_seq        ResultBgpAsPathSegment_Type_Enum = 1
	ResultBgpAsPathSegment_Type_as_set        ResultBgpAsPathSegment_Type_Enum = 2
	ResultBgpAsPathSegment_Type_as_confed_seq ResultBgpAsPathSegment_Type_Enum = 3
	ResultBgpAsPathSegment_Type_as_confed_set ResultBgpAsPathSegment_Type_Enum = 4
)

// Enum value maps for ResultBgpAsPathSegment_Type_Enum.
var (
	ResultBgpAsPathSegment_Type_Enum_name = map[int32]string{
		0: "unspecified",
		1: "as_seq",
		2: "as_set",
		3: "as_confed_seq",
		4: "as_confed_set",
	}
	ResultBgpAsPathSegment_Type_Enum_value = map[string]int32{
		"unspecified":   0,
		"as_seq":        1,
		"as_set":        2,
		"as_confed_seq": 3,
		"as_confed_set": 4,
	}
)

func (x ResultBgpAsPathSegment_Type_Enum) Enum() *ResultBgpAsPathSegment_Type_Enum {
	p := new(ResultBgpAsPathSegment_Type_Enum)
	*p = x
	return p
}

func (x ResultBgpAsPathSegment_Type_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultBgpAsPathSegment_Type_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[116].Descriptor()
}

func (ResultBgpAsPathSegment_Type_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[116]
}

func (x ResultBgpAsPathSegment_Type_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultBgpAsPathSegment_Type_Enum.Descriptor instead.
func (ResultBgpAsPathSegment_Type_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{242, 0, 0}
}

type IsisLspState_PduType_Enum int32

const (
	IsisLspState_PduType_unspecified IsisLspState_PduType_Enum = 0
	IsisLspState_PduType_level_1     IsisLspState_PduType_Enum = 1
	IsisLspState_PduType_level_2     IsisLspState_PduType_Enum = 2
)

// Enum value maps for IsisLspState_PduType_Enum.
var (
	IsisLspState_PduType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "level_1",
		2: "level_2",
	}
	IsisLspState_PduType_Enum_value = map[string]int32{
		"unspecified": 0,
		"level_1":     1,
		"level_2":     2,
	}
)

func (x IsisLspState_PduType_Enum) Enum() *IsisLspState_PduType_Enum {
	p := new(IsisLspState_PduType_Enum)
	*p = x
	return p
}

func (x IsisLspState_PduType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisLspState_PduType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[117].Descriptor()
}

func (IsisLspState_PduType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[117]
}

func (x IsisLspState_PduType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisLspState_PduType_Enum.Descriptor instead.
func (IsisLspState_PduType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{245, 0, 0}
}

type IsisLspV4Prefix_RedistributionType_Enum int32

const (
	IsisLspV4Prefix_RedistributionType_unspecified IsisLspV4Prefix_RedistributionType_Enum = 0
	IsisLspV4Prefix_RedistributionType_up          IsisLspV4Prefix_RedistributionType_Enum = 1
	IsisLspV4Prefix_RedistributionType_down        IsisLspV4Prefix_RedistributionType_Enum = 2
)

// Enum value maps for IsisLspV4Prefix_RedistributionType_Enum.
var (
	IsisLspV4Prefix_RedistributionType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	IsisLspV4Prefix_RedistributionType_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x IsisLspV4Prefix_RedistributionType_Enum) Enum() *IsisLspV4Prefix_RedistributionType_Enum {
	p := new(IsisLspV4Prefix_RedistributionType_Enum)
	*p = x
	return p
}

func (x IsisLspV4Prefix_RedistributionType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisLspV4Prefix_RedistributionType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[118].Descriptor()
}

func (IsisLspV4Prefix_RedistributionType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[118]
}

func (x IsisLspV4Prefix_RedistributionType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisLspV4Prefix_RedistributionType_Enum.Descriptor instead.
func (IsisLspV4Prefix_RedistributionType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{254, 0, 0}
}

type IsisLspV4Prefix_OriginType_Enum int32

const (
	IsisLspV4Prefix_OriginType_unspecified IsisLspV4Prefix_OriginType_Enum = 0
	IsisLspV4Prefix_OriginType_internal    IsisLspV4Prefix_OriginType_Enum = 1
	IsisLspV4Prefix_OriginType_external    IsisLspV4Prefix_OriginType_Enum = 2
)

// Enum value maps for IsisLspV4Prefix_OriginType_Enum.
var (
	IsisLspV4Prefix_OriginType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "internal",
		2: "external",
	}
	IsisLspV4Prefix_OriginType_Enum_value = map[string]int32{
		"unspecified": 0,
		"internal":    1,
		"external":    2,
	}
)

func (x IsisLspV4Prefix_OriginType_Enum) Enum() *IsisLspV4Prefix_OriginType_Enum {
	p := new(IsisLspV4Prefix_OriginType_Enum)
	*p = x
	return p
}

func (x IsisLspV4Prefix_OriginType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisLspV4Prefix_OriginType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[119].Descriptor()
}

func (IsisLspV4Prefix_OriginType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[119]
}

func (x IsisLspV4Prefix_OriginType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisLspV4Prefix_OriginType_Enum.Descriptor instead.
func (IsisLspV4Prefix_OriginType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{254, 1, 0}
}

type IsisLspExtendedV4Prefix_RedistributionType_Enum int32

const (
	IsisLspExtendedV4Prefix_RedistributionType_unspecified IsisLspExtendedV4Prefix_RedistributionType_Enum = 0
	IsisLspExtendedV4Prefix_RedistributionType_up          IsisLspExtendedV4Prefix_RedistributionType_Enum = 1
	IsisLspExtendedV4Prefix_RedistributionType_down        IsisLspExtendedV4Prefix_RedistributionType_Enum = 2
)

// Enum value maps for IsisLspExtendedV4Prefix_RedistributionType_Enum.
var (
	IsisLspExtendedV4Prefix_RedistributionType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	IsisLspExtendedV4Prefix_RedistributionType_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x IsisLspExtendedV4Prefix_RedistributionType_Enum) Enum() *IsisLspExtendedV4Prefix_RedistributionType_Enum {
	p := new(IsisLspExtendedV4Prefix_RedistributionType_Enum)
	*p = x
	return p
}

func (x IsisLspExtendedV4Prefix_RedistributionType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisLspExtendedV4Prefix_RedistributionType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[120].Descriptor()
}

func (IsisLspExtendedV4Prefix_RedistributionType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[120]
}

func (x IsisLspExtendedV4Prefix_RedistributionType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisLspExtendedV4Prefix_RedistributionType_Enum.Descriptor instead.
func (IsisLspExtendedV4Prefix_RedistributionType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{256, 0, 0}
}

type IsisLspV6Prefix_RedistributionType_Enum int32

const (
	IsisLspV6Prefix_RedistributionType_unspecified IsisLspV6Prefix_RedistributionType_Enum = 0
	IsisLspV6Prefix_RedistributionType_up          IsisLspV6Prefix_RedistributionType_Enum = 1
	IsisLspV6Prefix_RedistributionType_down        IsisLspV6Prefix_RedistributionType_Enum = 2
)

// Enum value maps for IsisLspV6Prefix_RedistributionType_Enum.
var (
	IsisLspV6Prefix_RedistributionType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	IsisLspV6Prefix_RedistributionType_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x IsisLspV6Prefix_RedistributionType_Enum) Enum() *IsisLspV6Prefix_RedistributionType_Enum {
	p := new(IsisLspV6Prefix_RedistributionType_Enum)
	*p = x
	return p
}

func (x IsisLspV6Prefix_RedistributionType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisLspV6Prefix_RedistributionType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[121].Descriptor()
}

func (IsisLspV6Prefix_RedistributionType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[121]
}

func (x IsisLspV6Prefix_RedistributionType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisLspV6Prefix_RedistributionType_Enum.Descriptor instead.
func (IsisLspV6Prefix_RedistributionType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{258, 0, 0}
}

type IsisLspV6Prefix_OriginType_Enum int32

const (
	IsisLspV6Prefix_OriginType_unspecified IsisLspV6Prefix_OriginType_Enum = 0
	IsisLspV6Prefix_OriginType_internal    IsisLspV6Prefix_OriginType_Enum = 1
	IsisLspV6Prefix_OriginType_external    IsisLspV6Prefix_OriginType_Enum = 2
)

// Enum value maps for IsisLspV6Prefix_OriginType_Enum.
var (
	IsisLspV6Prefix_OriginType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "internal",
		2: "external",
	}
	IsisLspV6Prefix_OriginType_Enum_value = map[string]int32{
		"unspecified": 0,
		"internal":    1,
		"external":    2,
	}
)

func (x IsisLspV6Prefix_OriginType_Enum) Enum() *IsisLspV6Prefix_OriginType_Enum {
	p := new(IsisLspV6Prefix_OriginType_Enum)
	*p = x
	return p
}

func (x IsisLspV6Prefix_OriginType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsisLspV6Prefix_OriginType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[122].Descriptor()
}

func (IsisLspV6Prefix_OriginType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[122]
}

func (x IsisLspV6Prefix_OriginType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsisLspV6Prefix_OriginType_Enum.Descriptor instead.
func (IsisLspV6Prefix_OriginType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{258, 1, 0}
}

type LldpNeighborsState_ChassisIdType_Enum int32

const (
	LldpNeighborsState_ChassisIdType_unspecified       LldpNeighborsState_ChassisIdType_Enum = 0
	LldpNeighborsState_ChassisIdType_port_component    LldpNeighborsState_ChassisIdType_Enum = 1
	LldpNeighborsState_ChassisIdType_network_address   LldpNeighborsState_ChassisIdType_Enum = 2
	LldpNeighborsState_ChassisIdType_chassis_component LldpNeighborsState_ChassisIdType_Enum = 3
	LldpNeighborsState_ChassisIdType_mac_address       LldpNeighborsState_ChassisIdType_Enum = 4
	LldpNeighborsState_ChassisIdType_interface_name    LldpNeighborsState_ChassisIdType_Enum = 5
	LldpNeighborsState_ChassisIdType_local             LldpNeighborsState_ChassisIdType_Enum = 6
	LldpNeighborsState_ChassisIdType_interface_alias   LldpNeighborsState_ChassisIdType_Enum = 7
)

// Enum value maps for LldpNeighborsState_ChassisIdType_Enum.
var (
	LldpNeighborsState_ChassisIdType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "port_component",
		2: "network_address",
		3: "chassis_component",
		4: "mac_address",
		5: "interface_name",
		6: "local",
		7: "interface_alias",
	}
	LldpNeighborsState_ChassisIdType_Enum_value = map[string]int32{
		"unspecified":       0,
		"port_component":    1,
		"network_address":   2,
		"chassis_component": 3,
		"mac_address":       4,
		"interface_name":    5,
		"local":             6,
		"interface_alias":   7,
	}
)

func (x LldpNeighborsState_ChassisIdType_Enum) Enum() *LldpNeighborsState_ChassisIdType_Enum {
	p := new(LldpNeighborsState_ChassisIdType_Enum)
	*p = x
	return p
}

func (x LldpNeighborsState_ChassisIdType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpNeighborsState_ChassisIdType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[123].Descriptor()
}

func (LldpNeighborsState_ChassisIdType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[123]
}

func (x LldpNeighborsState_ChassisIdType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpNeighborsState_ChassisIdType_Enum.Descriptor instead.
func (LldpNeighborsState_ChassisIdType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{261, 0, 0}
}

type LldpNeighborsState_PortIdType_Enum int32

const (
	LldpNeighborsState_PortIdType_unspecified      LldpNeighborsState_PortIdType_Enum = 0
	LldpNeighborsState_PortIdType_port_component   LldpNeighborsState_PortIdType_Enum = 1
	LldpNeighborsState_PortIdType_network_address  LldpNeighborsState_PortIdType_Enum = 2
	LldpNeighborsState_PortIdType_agent_circuit_id LldpNeighborsState_PortIdType_Enum = 3
	LldpNeighborsState_PortIdType_mac_address      LldpNeighborsState_PortIdType_Enum = 4
	LldpNeighborsState_PortIdType_interface_name   LldpNeighborsState_PortIdType_Enum = 5
	LldpNeighborsState_PortIdType_local            LldpNeighborsState_PortIdType_Enum = 6
	LldpNeighborsState_PortIdType_interface_alias  LldpNeighborsState_PortIdType_Enum = 7
)

// Enum value maps for LldpNeighborsState_PortIdType_Enum.
var (
	LldpNeighborsState_PortIdType_Enum_name = map[int32]string{
		0: "unspecified",
		1: "port_component",
		2: "network_address",
		3: "agent_circuit_id",
		4: "mac_address",
		5: "interface_name",
		6: "local",
		7: "interface_alias",
	}
	LldpNeighborsState_PortIdType_Enum_value = map[string]int32{
		"unspecified":      0,
		"port_component":   1,
		"network_address":  2,
		"agent_circuit_id": 3,
		"mac_address":      4,
		"interface_name":   5,
		"local":            6,
		"interface_alias":  7,
	}
)

func (x LldpNeighborsState_PortIdType_Enum) Enum() *LldpNeighborsState_PortIdType_Enum {
	p := new(LldpNeighborsState_PortIdType_Enum)
	*p = x
	return p
}

func (x LldpNeighborsState_PortIdType_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpNeighborsState_PortIdType_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[124].Descriptor()
}

func (LldpNeighborsState_PortIdType_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[124]
}

func (x LldpNeighborsState_PortIdType_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpNeighborsState_PortIdType_Enum.Descriptor instead.
func (LldpNeighborsState_PortIdType_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{261, 1, 0}
}

type LldpCapabilityState_CapabilityName_Enum int32

const (
	LldpCapabilityState_CapabilityName_unspecified         LldpCapabilityState_CapabilityName_Enum = 0
	LldpCapabilityState_CapabilityName_mac_bridge          LldpCapabilityState_CapabilityName_Enum = 1
	LldpCapabilityState_CapabilityName_two_port_mac_relay  LldpCapabilityState_CapabilityName_Enum = 2
	LldpCapabilityState_CapabilityName_repeater            LldpCapabilityState_CapabilityName_Enum = 3
	LldpCapabilityState_CapabilityName_docsis_cable_device LldpCapabilityState_CapabilityName_Enum = 4
	LldpCapabilityState_CapabilityName_s_vlan              LldpCapabilityState_CapabilityName_Enum = 5
	LldpCapabilityState_CapabilityName_telephone           LldpCapabilityState_CapabilityName_Enum = 6
	LldpCapabilityState_CapabilityName_other               LldpCapabilityState_CapabilityName_Enum = 7
	LldpCapabilityState_CapabilityName_router              LldpCapabilityState_CapabilityName_Enum = 8
	LldpCapabilityState_CapabilityName_c_vlan              LldpCapabilityState_CapabilityName_Enum = 9
	LldpCapabilityState_CapabilityName_station_only        LldpCapabilityState_CapabilityName_Enum = 10
	LldpCapabilityState_CapabilityName_wlan_access_point   LldpCapabilityState_CapabilityName_Enum = 11
)

// Enum value maps for LldpCapabilityState_CapabilityName_Enum.
var (
	LldpCapabilityState_CapabilityName_Enum_name = map[int32]string{
		0:  "unspecified",
		1:  "mac_bridge",
		2:  "two_port_mac_relay",
		3:  "repeater",
		4:  "docsis_cable_device",
		5:  "s_vlan",
		6:  "telephone",
		7:  "other",
		8:  "router",
		9:  "c_vlan",
		10: "station_only",
		11: "wlan_access_point",
	}
	LldpCapabilityState_CapabilityName_Enum_value = map[string]int32{
		"unspecified":         0,
		"mac_bridge":          1,
		"two_port_mac_relay":  2,
		"repeater":            3,
		"docsis_cable_device": 4,
		"s_vlan":              5,
		"telephone":           6,
		"other":               7,
		"router":              8,
		"c_vlan":              9,
		"station_only":        10,
		"wlan_access_point":   11,
	}
)

func (x LldpCapabilityState_CapabilityName_Enum) Enum() *LldpCapabilityState_CapabilityName_Enum {
	p := new(LldpCapabilityState_CapabilityName_Enum)
	*p = x
	return p
}

func (x LldpCapabilityState_CapabilityName_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LldpCapabilityState_CapabilityName_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[125].Descriptor()
}

func (LldpCapabilityState_CapabilityName_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[125]
}

func (x LldpCapabilityState_CapabilityName_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LldpCapabilityState_CapabilityName_Enum.Descriptor instead.
func (LldpCapabilityState_CapabilityName_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{263, 0, 0}
}

type RsvpLspState_SessionStatus_Enum int32

const (
	RsvpLspState_SessionStatus_unspecified RsvpLspState_SessionStatus_Enum = 0
	RsvpLspState_SessionStatus_up          RsvpLspState_SessionStatus_Enum = 1
	RsvpLspState_SessionStatus_down        RsvpLspState_SessionStatus_Enum = 2
)

// Enum value maps for RsvpLspState_SessionStatus_Enum.
var (
	RsvpLspState_SessionStatus_Enum_name = map[int32]string{
		0: "unspecified",
		1: "up",
		2: "down",
	}
	RsvpLspState_SessionStatus_Enum_value = map[string]int32{
		"unspecified": 0,
		"up":          1,
		"down":        2,
	}
)

func (x RsvpLspState_SessionStatus_Enum) Enum() *RsvpLspState_SessionStatus_Enum {
	p := new(RsvpLspState_SessionStatus_Enum)
	*p = x
	return p
}

func (x RsvpLspState_SessionStatus_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RsvpLspState_SessionStatus_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[126].Descriptor()
}

func (RsvpLspState_SessionStatus_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[126]
}

func (x RsvpLspState_SessionStatus_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RsvpLspState_SessionStatus_Enum.Descriptor instead.
func (RsvpLspState_SessionStatus_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{267, 0, 0}
}

type RsvpLspState_LastFlapReason_Enum int32

const (
	RsvpLspState_LastFlapReason_unspecified  RsvpLspState_LastFlapReason_Enum = 0
	RsvpLspState_LastFlapReason_resv_tear    RsvpLspState_LastFlapReason_Enum = 1
	RsvpLspState_LastFlapReason_path_tear    RsvpLspState_LastFlapReason_Enum = 2
	RsvpLspState_LastFlapReason_path_timeout RsvpLspState_LastFlapReason_Enum = 3
)

// Enum value maps for RsvpLspState_LastFlapReason_Enum.
var (
	RsvpLspState_LastFlapReason_Enum_name = map[int32]string{
		0: "unspecified",
		1: "resv_tear",
		2: "path_tear",
		3: "path_timeout",
	}
	RsvpLspState_LastFlapReason_Enum_value = map[string]int32{
		"unspecified":  0,
		"resv_tear":    1,
		"path_tear":    2,
		"path_timeout": 3,
	}
)

func (x RsvpLspState_LastFlapReason_Enum) Enum() *RsvpLspState_LastFlapReason_Enum {
	p := new(RsvpLspState_LastFlapReason_Enum)
	*p = x
	return p
}

func (x RsvpLspState_LastFlapReason_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RsvpLspState_LastFlapReason_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[127].Descriptor()
}

func (RsvpLspState_LastFlapReason_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[127]
}

func (x RsvpLspState_LastFlapReason_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RsvpLspState_LastFlapReason_Enum.Descriptor instead.
func (RsvpLspState_LastFlapReason_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{267, 1, 0}
}

type RsvpLspIpv4Ero_Type_Enum int32

const (
	RsvpLspIpv4Ero_Type_unspecified          RsvpLspIpv4Ero_Type_Enum = 0
	RsvpLspIpv4Ero_Type_ipv4                 RsvpLspIpv4Ero_Type_Enum = 1
	RsvpLspIpv4Ero_Type_ipv6                 RsvpLspIpv4Ero_Type_Enum = 2
	RsvpLspIpv4Ero_Type_asn                  RsvpLspIpv4Ero_Type_Enum = 3
	RsvpLspIpv4Ero_Type_asn4                 RsvpLspIpv4Ero_Type_Enum = 4
	RsvpLspIpv4Ero_Type_label                RsvpLspIpv4Ero_Type_Enum = 5
	RsvpLspIpv4Ero_Type_unnumbered_interface RsvpLspIpv4Ero_Type_Enum = 6
)

// Enum value maps for RsvpLspIpv4Ero_Type_Enum.
var (
	RsvpLspIpv4Ero_Type_Enum_name = map[int32]string{
		0: "unspecified",
		1: "ipv4",
		2: "ipv6",
		3: "asn",
		4: "asn4",
		5: "label",
		6: "unnumbered_interface",
	}
	RsvpLspIpv4Ero_Type_Enum_value = map[string]int32{
		"unspecified":          0,
		"ipv4":                 1,
		"ipv6":                 2,
		"asn":                  3,
		"asn4":                 4,
		"label":                5,
		"unnumbered_interface": 6,
	}
)

func (x RsvpLspIpv4Ero_Type_Enum) Enum() *RsvpLspIpv4Ero_Type_Enum {
	p := new(RsvpLspIpv4Ero_Type_Enum)
	*p = x
	return p
}

func (x RsvpLspIpv4Ero_Type_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RsvpLspIpv4Ero_Type_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[128].Descriptor()
}

func (RsvpLspIpv4Ero_Type_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[128]
}

func (x RsvpLspIpv4Ero_Type_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RsvpLspIpv4Ero_Type_Enum.Descriptor instead.
func (RsvpLspIpv4Ero_Type_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{269, 0, 0}
}

type PatternFlowEthernetDst_Choice_Enum int32

const (
	PatternFlowEthernetDst_Choice_unspecified PatternFlowEthernetDst_Choice_Enum = 0
	PatternFlowEthernetDst_Choice_value       PatternFlowEthernetDst_Choice_Enum = 2
	PatternFlowEthernetDst_Choice_values      PatternFlowEthernetDst_Choice_Enum = 3
	PatternFlowEthernetDst_Choice_auto        PatternFlowEthernetDst_Choice_Enum = 1
	PatternFlowEthernetDst_Choice_increment   PatternFlowEthernetDst_Choice_Enum = 4
	PatternFlowEthernetDst_Choice_decrement   PatternFlowEthernetDst_Choice_Enum = 5
)

// Enum value maps for PatternFlowEthernetDst_Choice_Enum.
var (
	PatternFlowEthernetDst_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		1: "auto",
		4: "increment",
		5: "decrement",
	}
	PatternFlowEthernetDst_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"auto":        1,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowEthernetDst_Choice_Enum) Enum() *PatternFlowEthernetDst_Choice_Enum {
	p := new(PatternFlowEthernetDst_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowEthernetDst_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowEthernetDst_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[129].Descriptor()
}

func (PatternFlowEthernetDst_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[129]
}

func (x PatternFlowEthernetDst_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowEthernetDst_Choice_Enum.Descriptor instead.
func (PatternFlowEthernetDst_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{272, 0, 0}
}

type PatternFlowEthernetSrc_Choice_Enum int32

const (
	PatternFlowEthernetSrc_Choice_unspecified PatternFlowEthernetSrc_Choice_Enum = 0
	PatternFlowEthernetSrc_Choice_value       PatternFlowEthernetSrc_Choice_Enum = 2
	PatternFlowEthernetSrc_Choice_values      PatternFlowEthernetSrc_Choice_Enum = 3
	PatternFlowEthernetSrc_Choice_increment   PatternFlowEthernetSrc_Choice_Enum = 4
	PatternFlowEthernetSrc_Choice_decrement   PatternFlowEthernetSrc_Choice_Enum = 5
)

// Enum value maps for PatternFlowEthernetSrc_Choice_Enum.
var (
	PatternFlowEthernetSrc_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowEthernetSrc_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowEthernetSrc_Choice_Enum) Enum() *PatternFlowEthernetSrc_Choice_Enum {
	p := new(PatternFlowEthernetSrc_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowEthernetSrc_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowEthernetSrc_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[130].Descriptor()
}

func (PatternFlowEthernetSrc_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[130]
}

func (x PatternFlowEthernetSrc_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowEthernetSrc_Choice_Enum.Descriptor instead.
func (PatternFlowEthernetSrc_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{274, 0, 0}
}

type PatternFlowEthernetEtherType_Choice_Enum int32

const (
	PatternFlowEthernetEtherType_Choice_unspecified PatternFlowEthernetEtherType_Choice_Enum = 0
	PatternFlowEthernetEtherType_Choice_value       PatternFlowEthernetEtherType_Choice_Enum = 2
	PatternFlowEthernetEtherType_Choice_values      PatternFlowEthernetEtherType_Choice_Enum = 3
	PatternFlowEthernetEtherType_Choice_auto        PatternFlowEthernetEtherType_Choice_Enum = 1
	PatternFlowEthernetEtherType_Choice_increment   PatternFlowEthernetEtherType_Choice_Enum = 4
	PatternFlowEthernetEtherType_Choice_decrement   PatternFlowEthernetEtherType_Choice_Enum = 5
)

// Enum value maps for PatternFlowEthernetEtherType_Choice_Enum.
var (
	PatternFlowEthernetEtherType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		1: "auto",
		4: "increment",
		5: "decrement",
	}
	PatternFlowEthernetEtherType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"auto":        1,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowEthernetEtherType_Choice_Enum) Enum() *PatternFlowEthernetEtherType_Choice_Enum {
	p := new(PatternFlowEthernetEtherType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowEthernetEtherType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowEthernetEtherType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[131].Descriptor()
}

func (PatternFlowEthernetEtherType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[131]
}

func (x PatternFlowEthernetEtherType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowEthernetEtherType_Choice_Enum.Descriptor instead.
func (PatternFlowEthernetEtherType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{276, 0, 0}
}

type PatternFlowEthernetPfcQueue_Choice_Enum int32

const (
	PatternFlowEthernetPfcQueue_Choice_unspecified PatternFlowEthernetPfcQueue_Choice_Enum = 0
	PatternFlowEthernetPfcQueue_Choice_value       PatternFlowEthernetPfcQueue_Choice_Enum = 2
	PatternFlowEthernetPfcQueue_Choice_values      PatternFlowEthernetPfcQueue_Choice_Enum = 3
	PatternFlowEthernetPfcQueue_Choice_increment   PatternFlowEthernetPfcQueue_Choice_Enum = 4
	PatternFlowEthernetPfcQueue_Choice_decrement   PatternFlowEthernetPfcQueue_Choice_Enum = 5
)

// Enum value maps for PatternFlowEthernetPfcQueue_Choice_Enum.
var (
	PatternFlowEthernetPfcQueue_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowEthernetPfcQueue_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowEthernetPfcQueue_Choice_Enum) Enum() *PatternFlowEthernetPfcQueue_Choice_Enum {
	p := new(PatternFlowEthernetPfcQueue_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowEthernetPfcQueue_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowEthernetPfcQueue_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[132].Descriptor()
}

func (PatternFlowEthernetPfcQueue_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[132]
}

func (x PatternFlowEthernetPfcQueue_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowEthernetPfcQueue_Choice_Enum.Descriptor instead.
func (PatternFlowEthernetPfcQueue_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{278, 0, 0}
}

type PatternFlowVlanPriority_Choice_Enum int32

const (
	PatternFlowVlanPriority_Choice_unspecified PatternFlowVlanPriority_Choice_Enum = 0
	PatternFlowVlanPriority_Choice_value       PatternFlowVlanPriority_Choice_Enum = 2
	PatternFlowVlanPriority_Choice_values      PatternFlowVlanPriority_Choice_Enum = 3
	PatternFlowVlanPriority_Choice_increment   PatternFlowVlanPriority_Choice_Enum = 4
	PatternFlowVlanPriority_Choice_decrement   PatternFlowVlanPriority_Choice_Enum = 5
)

// Enum value maps for PatternFlowVlanPriority_Choice_Enum.
var (
	PatternFlowVlanPriority_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowVlanPriority_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowVlanPriority_Choice_Enum) Enum() *PatternFlowVlanPriority_Choice_Enum {
	p := new(PatternFlowVlanPriority_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowVlanPriority_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowVlanPriority_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[133].Descriptor()
}

func (PatternFlowVlanPriority_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[133]
}

func (x PatternFlowVlanPriority_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowVlanPriority_Choice_Enum.Descriptor instead.
func (PatternFlowVlanPriority_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{280, 0, 0}
}

type PatternFlowVlanCfi_Choice_Enum int32

const (
	PatternFlowVlanCfi_Choice_unspecified PatternFlowVlanCfi_Choice_Enum = 0
	PatternFlowVlanCfi_Choice_value       PatternFlowVlanCfi_Choice_Enum = 2
	PatternFlowVlanCfi_Choice_values      PatternFlowVlanCfi_Choice_Enum = 3
	PatternFlowVlanCfi_Choice_increment   PatternFlowVlanCfi_Choice_Enum = 4
	PatternFlowVlanCfi_Choice_decrement   PatternFlowVlanCfi_Choice_Enum = 5
)

// Enum value maps for PatternFlowVlanCfi_Choice_Enum.
var (
	PatternFlowVlanCfi_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowVlanCfi_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowVlanCfi_Choice_Enum) Enum() *PatternFlowVlanCfi_Choice_Enum {
	p := new(PatternFlowVlanCfi_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowVlanCfi_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowVlanCfi_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[134].Descriptor()
}

func (PatternFlowVlanCfi_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[134]
}

func (x PatternFlowVlanCfi_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowVlanCfi_Choice_Enum.Descriptor instead.
func (PatternFlowVlanCfi_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{282, 0, 0}
}

type PatternFlowVlanId_Choice_Enum int32

const (
	PatternFlowVlanId_Choice_unspecified PatternFlowVlanId_Choice_Enum = 0
	PatternFlowVlanId_Choice_value       PatternFlowVlanId_Choice_Enum = 2
	PatternFlowVlanId_Choice_values      PatternFlowVlanId_Choice_Enum = 3
	PatternFlowVlanId_Choice_increment   PatternFlowVlanId_Choice_Enum = 4
	PatternFlowVlanId_Choice_decrement   PatternFlowVlanId_Choice_Enum = 5
)

// Enum value maps for PatternFlowVlanId_Choice_Enum.
var (
	PatternFlowVlanId_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowVlanId_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowVlanId_Choice_Enum) Enum() *PatternFlowVlanId_Choice_Enum {
	p := new(PatternFlowVlanId_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowVlanId_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowVlanId_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[135].Descriptor()
}

func (PatternFlowVlanId_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[135]
}

func (x PatternFlowVlanId_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowVlanId_Choice_Enum.Descriptor instead.
func (PatternFlowVlanId_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{284, 0, 0}
}

type PatternFlowVlanTpid_Choice_Enum int32

const (
	PatternFlowVlanTpid_Choice_unspecified PatternFlowVlanTpid_Choice_Enum = 0
	PatternFlowVlanTpid_Choice_value       PatternFlowVlanTpid_Choice_Enum = 2
	PatternFlowVlanTpid_Choice_values      PatternFlowVlanTpid_Choice_Enum = 3
	PatternFlowVlanTpid_Choice_increment   PatternFlowVlanTpid_Choice_Enum = 4
	PatternFlowVlanTpid_Choice_decrement   PatternFlowVlanTpid_Choice_Enum = 5
)

// Enum value maps for PatternFlowVlanTpid_Choice_Enum.
var (
	PatternFlowVlanTpid_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowVlanTpid_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowVlanTpid_Choice_Enum) Enum() *PatternFlowVlanTpid_Choice_Enum {
	p := new(PatternFlowVlanTpid_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowVlanTpid_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowVlanTpid_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[136].Descriptor()
}

func (PatternFlowVlanTpid_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[136]
}

func (x PatternFlowVlanTpid_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowVlanTpid_Choice_Enum.Descriptor instead.
func (PatternFlowVlanTpid_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{286, 0, 0}
}

type PatternFlowVxlanFlags_Choice_Enum int32

const (
	PatternFlowVxlanFlags_Choice_unspecified PatternFlowVxlanFlags_Choice_Enum = 0
	PatternFlowVxlanFlags_Choice_value       PatternFlowVxlanFlags_Choice_Enum = 2
	PatternFlowVxlanFlags_Choice_values      PatternFlowVxlanFlags_Choice_Enum = 3
	PatternFlowVxlanFlags_Choice_increment   PatternFlowVxlanFlags_Choice_Enum = 4
	PatternFlowVxlanFlags_Choice_decrement   PatternFlowVxlanFlags_Choice_Enum = 5
)

// Enum value maps for PatternFlowVxlanFlags_Choice_Enum.
var (
	PatternFlowVxlanFlags_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowVxlanFlags_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowVxlanFlags_Choice_Enum) Enum() *PatternFlowVxlanFlags_Choice_Enum {
	p := new(PatternFlowVxlanFlags_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowVxlanFlags_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowVxlanFlags_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[137].Descriptor()
}

func (PatternFlowVxlanFlags_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[137]
}

func (x PatternFlowVxlanFlags_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowVxlanFlags_Choice_Enum.Descriptor instead.
func (PatternFlowVxlanFlags_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{288, 0, 0}
}

type PatternFlowVxlanReserved0_Choice_Enum int32

const (
	PatternFlowVxlanReserved0_Choice_unspecified PatternFlowVxlanReserved0_Choice_Enum = 0
	PatternFlowVxlanReserved0_Choice_value       PatternFlowVxlanReserved0_Choice_Enum = 2
	PatternFlowVxlanReserved0_Choice_values      PatternFlowVxlanReserved0_Choice_Enum = 3
	PatternFlowVxlanReserved0_Choice_increment   PatternFlowVxlanReserved0_Choice_Enum = 4
	PatternFlowVxlanReserved0_Choice_decrement   PatternFlowVxlanReserved0_Choice_Enum = 5
)

// Enum value maps for PatternFlowVxlanReserved0_Choice_Enum.
var (
	PatternFlowVxlanReserved0_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowVxlanReserved0_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowVxlanReserved0_Choice_Enum) Enum() *PatternFlowVxlanReserved0_Choice_Enum {
	p := new(PatternFlowVxlanReserved0_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowVxlanReserved0_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowVxlanReserved0_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[138].Descriptor()
}

func (PatternFlowVxlanReserved0_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[138]
}

func (x PatternFlowVxlanReserved0_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowVxlanReserved0_Choice_Enum.Descriptor instead.
func (PatternFlowVxlanReserved0_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{290, 0, 0}
}

type PatternFlowVxlanVni_Choice_Enum int32

const (
	PatternFlowVxlanVni_Choice_unspecified PatternFlowVxlanVni_Choice_Enum = 0
	PatternFlowVxlanVni_Choice_value       PatternFlowVxlanVni_Choice_Enum = 2
	PatternFlowVxlanVni_Choice_values      PatternFlowVxlanVni_Choice_Enum = 3
	PatternFlowVxlanVni_Choice_auto        PatternFlowVxlanVni_Choice_Enum = 1
	PatternFlowVxlanVni_Choice_increment   PatternFlowVxlanVni_Choice_Enum = 4
	PatternFlowVxlanVni_Choice_decrement   PatternFlowVxlanVni_Choice_Enum = 5
)

// Enum value maps for PatternFlowVxlanVni_Choice_Enum.
var (
	PatternFlowVxlanVni_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		1: "auto",
		4: "increment",
		5: "decrement",
	}
	PatternFlowVxlanVni_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"auto":        1,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowVxlanVni_Choice_Enum) Enum() *PatternFlowVxlanVni_Choice_Enum {
	p := new(PatternFlowVxlanVni_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowVxlanVni_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowVxlanVni_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[139].Descriptor()
}

func (PatternFlowVxlanVni_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[139]
}

func (x PatternFlowVxlanVni_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowVxlanVni_Choice_Enum.Descriptor instead.
func (PatternFlowVxlanVni_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{292, 0, 0}
}

type PatternFlowVxlanReserved1_Choice_Enum int32

const (
	PatternFlowVxlanReserved1_Choice_unspecified PatternFlowVxlanReserved1_Choice_Enum = 0
	PatternFlowVxlanReserved1_Choice_value       PatternFlowVxlanReserved1_Choice_Enum = 2
	PatternFlowVxlanReserved1_Choice_values      PatternFlowVxlanReserved1_Choice_Enum = 3
	PatternFlowVxlanReserved1_Choice_increment   PatternFlowVxlanReserved1_Choice_Enum = 4
	PatternFlowVxlanReserved1_Choice_decrement   PatternFlowVxlanReserved1_Choice_Enum = 5
)

// Enum value maps for PatternFlowVxlanReserved1_Choice_Enum.
var (
	PatternFlowVxlanReserved1_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowVxlanReserved1_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowVxlanReserved1_Choice_Enum) Enum() *PatternFlowVxlanReserved1_Choice_Enum {
	p := new(PatternFlowVxlanReserved1_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowVxlanReserved1_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowVxlanReserved1_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[140].Descriptor()
}

func (PatternFlowVxlanReserved1_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[140]
}

func (x PatternFlowVxlanReserved1_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowVxlanReserved1_Choice_Enum.Descriptor instead.
func (PatternFlowVxlanReserved1_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{294, 0, 0}
}

type PatternFlowIpv4Version_Choice_Enum int32

const (
	PatternFlowIpv4Version_Choice_unspecified PatternFlowIpv4Version_Choice_Enum = 0
	PatternFlowIpv4Version_Choice_value       PatternFlowIpv4Version_Choice_Enum = 2
	PatternFlowIpv4Version_Choice_values      PatternFlowIpv4Version_Choice_Enum = 3
	PatternFlowIpv4Version_Choice_increment   PatternFlowIpv4Version_Choice_Enum = 4
	PatternFlowIpv4Version_Choice_decrement   PatternFlowIpv4Version_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4Version_Choice_Enum.
var (
	PatternFlowIpv4Version_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4Version_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4Version_Choice_Enum) Enum() *PatternFlowIpv4Version_Choice_Enum {
	p := new(PatternFlowIpv4Version_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4Version_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4Version_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[141].Descriptor()
}

func (PatternFlowIpv4Version_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[141]
}

func (x PatternFlowIpv4Version_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4Version_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4Version_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{296, 0, 0}
}

type PatternFlowIpv4HeaderLength_Choice_Enum int32

const (
	PatternFlowIpv4HeaderLength_Choice_unspecified PatternFlowIpv4HeaderLength_Choice_Enum = 0
	PatternFlowIpv4HeaderLength_Choice_value       PatternFlowIpv4HeaderLength_Choice_Enum = 2
	PatternFlowIpv4HeaderLength_Choice_values      PatternFlowIpv4HeaderLength_Choice_Enum = 3
	PatternFlowIpv4HeaderLength_Choice_auto        PatternFlowIpv4HeaderLength_Choice_Enum = 1
	PatternFlowIpv4HeaderLength_Choice_increment   PatternFlowIpv4HeaderLength_Choice_Enum = 4
	PatternFlowIpv4HeaderLength_Choice_decrement   PatternFlowIpv4HeaderLength_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4HeaderLength_Choice_Enum.
var (
	PatternFlowIpv4HeaderLength_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		1: "auto",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4HeaderLength_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"auto":        1,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4HeaderLength_Choice_Enum) Enum() *PatternFlowIpv4HeaderLength_Choice_Enum {
	p := new(PatternFlowIpv4HeaderLength_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4HeaderLength_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4HeaderLength_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[142].Descriptor()
}

func (PatternFlowIpv4HeaderLength_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[142]
}

func (x PatternFlowIpv4HeaderLength_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4HeaderLength_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4HeaderLength_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{298, 0, 0}
}

type PatternFlowIpv4TotalLength_Choice_Enum int32

const (
	PatternFlowIpv4TotalLength_Choice_unspecified PatternFlowIpv4TotalLength_Choice_Enum = 0
	PatternFlowIpv4TotalLength_Choice_value       PatternFlowIpv4TotalLength_Choice_Enum = 2
	PatternFlowIpv4TotalLength_Choice_values      PatternFlowIpv4TotalLength_Choice_Enum = 3
	PatternFlowIpv4TotalLength_Choice_auto        PatternFlowIpv4TotalLength_Choice_Enum = 1
	PatternFlowIpv4TotalLength_Choice_increment   PatternFlowIpv4TotalLength_Choice_Enum = 4
	PatternFlowIpv4TotalLength_Choice_decrement   PatternFlowIpv4TotalLength_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4TotalLength_Choice_Enum.
var (
	PatternFlowIpv4TotalLength_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		1: "auto",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4TotalLength_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"auto":        1,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4TotalLength_Choice_Enum) Enum() *PatternFlowIpv4TotalLength_Choice_Enum {
	p := new(PatternFlowIpv4TotalLength_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4TotalLength_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4TotalLength_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[143].Descriptor()
}

func (PatternFlowIpv4TotalLength_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[143]
}

func (x PatternFlowIpv4TotalLength_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4TotalLength_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4TotalLength_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{300, 0, 0}
}

type PatternFlowIpv4Identification_Choice_Enum int32

const (
	PatternFlowIpv4Identification_Choice_unspecified PatternFlowIpv4Identification_Choice_Enum = 0
	PatternFlowIpv4Identification_Choice_value       PatternFlowIpv4Identification_Choice_Enum = 2
	PatternFlowIpv4Identification_Choice_values      PatternFlowIpv4Identification_Choice_Enum = 3
	PatternFlowIpv4Identification_Choice_increment   PatternFlowIpv4Identification_Choice_Enum = 4
	PatternFlowIpv4Identification_Choice_decrement   PatternFlowIpv4Identification_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4Identification_Choice_Enum.
var (
	PatternFlowIpv4Identification_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4Identification_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4Identification_Choice_Enum) Enum() *PatternFlowIpv4Identification_Choice_Enum {
	p := new(PatternFlowIpv4Identification_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4Identification_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4Identification_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[144].Descriptor()
}

func (PatternFlowIpv4Identification_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[144]
}

func (x PatternFlowIpv4Identification_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4Identification_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4Identification_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{302, 0, 0}
}

type PatternFlowIpv4Reserved_Choice_Enum int32

const (
	PatternFlowIpv4Reserved_Choice_unspecified PatternFlowIpv4Reserved_Choice_Enum = 0
	PatternFlowIpv4Reserved_Choice_value       PatternFlowIpv4Reserved_Choice_Enum = 2
	PatternFlowIpv4Reserved_Choice_values      PatternFlowIpv4Reserved_Choice_Enum = 3
	PatternFlowIpv4Reserved_Choice_increment   PatternFlowIpv4Reserved_Choice_Enum = 4
	PatternFlowIpv4Reserved_Choice_decrement   PatternFlowIpv4Reserved_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4Reserved_Choice_Enum.
var (
	PatternFlowIpv4Reserved_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4Reserved_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4Reserved_Choice_Enum) Enum() *PatternFlowIpv4Reserved_Choice_Enum {
	p := new(PatternFlowIpv4Reserved_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4Reserved_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4Reserved_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[145].Descriptor()
}

func (PatternFlowIpv4Reserved_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[145]
}

func (x PatternFlowIpv4Reserved_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4Reserved_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4Reserved_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{304, 0, 0}
}

type PatternFlowIpv4DontFragment_Choice_Enum int32

const (
	PatternFlowIpv4DontFragment_Choice_unspecified PatternFlowIpv4DontFragment_Choice_Enum = 0
	PatternFlowIpv4DontFragment_Choice_value       PatternFlowIpv4DontFragment_Choice_Enum = 2
	PatternFlowIpv4DontFragment_Choice_values      PatternFlowIpv4DontFragment_Choice_Enum = 3
	PatternFlowIpv4DontFragment_Choice_increment   PatternFlowIpv4DontFragment_Choice_Enum = 4
	PatternFlowIpv4DontFragment_Choice_decrement   PatternFlowIpv4DontFragment_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4DontFragment_Choice_Enum.
var (
	PatternFlowIpv4DontFragment_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4DontFragment_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4DontFragment_Choice_Enum) Enum() *PatternFlowIpv4DontFragment_Choice_Enum {
	p := new(PatternFlowIpv4DontFragment_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4DontFragment_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4DontFragment_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[146].Descriptor()
}

func (PatternFlowIpv4DontFragment_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[146]
}

func (x PatternFlowIpv4DontFragment_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4DontFragment_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4DontFragment_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{306, 0, 0}
}

type PatternFlowIpv4MoreFragments_Choice_Enum int32

const (
	PatternFlowIpv4MoreFragments_Choice_unspecified PatternFlowIpv4MoreFragments_Choice_Enum = 0
	PatternFlowIpv4MoreFragments_Choice_value       PatternFlowIpv4MoreFragments_Choice_Enum = 2
	PatternFlowIpv4MoreFragments_Choice_values      PatternFlowIpv4MoreFragments_Choice_Enum = 3
	PatternFlowIpv4MoreFragments_Choice_increment   PatternFlowIpv4MoreFragments_Choice_Enum = 4
	PatternFlowIpv4MoreFragments_Choice_decrement   PatternFlowIpv4MoreFragments_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4MoreFragments_Choice_Enum.
var (
	PatternFlowIpv4MoreFragments_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4MoreFragments_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4MoreFragments_Choice_Enum) Enum() *PatternFlowIpv4MoreFragments_Choice_Enum {
	p := new(PatternFlowIpv4MoreFragments_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4MoreFragments_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4MoreFragments_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[147].Descriptor()
}

func (PatternFlowIpv4MoreFragments_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[147]
}

func (x PatternFlowIpv4MoreFragments_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4MoreFragments_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4MoreFragments_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{308, 0, 0}
}

type PatternFlowIpv4FragmentOffset_Choice_Enum int32

const (
	PatternFlowIpv4FragmentOffset_Choice_unspecified PatternFlowIpv4FragmentOffset_Choice_Enum = 0
	PatternFlowIpv4FragmentOffset_Choice_value       PatternFlowIpv4FragmentOffset_Choice_Enum = 2
	PatternFlowIpv4FragmentOffset_Choice_values      PatternFlowIpv4FragmentOffset_Choice_Enum = 3
	PatternFlowIpv4FragmentOffset_Choice_increment   PatternFlowIpv4FragmentOffset_Choice_Enum = 4
	PatternFlowIpv4FragmentOffset_Choice_decrement   PatternFlowIpv4FragmentOffset_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4FragmentOffset_Choice_Enum.
var (
	PatternFlowIpv4FragmentOffset_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4FragmentOffset_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4FragmentOffset_Choice_Enum) Enum() *PatternFlowIpv4FragmentOffset_Choice_Enum {
	p := new(PatternFlowIpv4FragmentOffset_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4FragmentOffset_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4FragmentOffset_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[148].Descriptor()
}

func (PatternFlowIpv4FragmentOffset_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[148]
}

func (x PatternFlowIpv4FragmentOffset_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4FragmentOffset_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4FragmentOffset_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{310, 0, 0}
}

type PatternFlowIpv4TimeToLive_Choice_Enum int32

const (
	PatternFlowIpv4TimeToLive_Choice_unspecified PatternFlowIpv4TimeToLive_Choice_Enum = 0
	PatternFlowIpv4TimeToLive_Choice_value       PatternFlowIpv4TimeToLive_Choice_Enum = 2
	PatternFlowIpv4TimeToLive_Choice_values      PatternFlowIpv4TimeToLive_Choice_Enum = 3
	PatternFlowIpv4TimeToLive_Choice_increment   PatternFlowIpv4TimeToLive_Choice_Enum = 4
	PatternFlowIpv4TimeToLive_Choice_decrement   PatternFlowIpv4TimeToLive_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4TimeToLive_Choice_Enum.
var (
	PatternFlowIpv4TimeToLive_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4TimeToLive_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4TimeToLive_Choice_Enum) Enum() *PatternFlowIpv4TimeToLive_Choice_Enum {
	p := new(PatternFlowIpv4TimeToLive_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4TimeToLive_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4TimeToLive_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[149].Descriptor()
}

func (PatternFlowIpv4TimeToLive_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[149]
}

func (x PatternFlowIpv4TimeToLive_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4TimeToLive_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4TimeToLive_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{312, 0, 0}
}

type PatternFlowIpv4Protocol_Choice_Enum int32

const (
	PatternFlowIpv4Protocol_Choice_unspecified PatternFlowIpv4Protocol_Choice_Enum = 0
	PatternFlowIpv4Protocol_Choice_value       PatternFlowIpv4Protocol_Choice_Enum = 2
	PatternFlowIpv4Protocol_Choice_values      PatternFlowIpv4Protocol_Choice_Enum = 3
	PatternFlowIpv4Protocol_Choice_auto        PatternFlowIpv4Protocol_Choice_Enum = 1
	PatternFlowIpv4Protocol_Choice_increment   PatternFlowIpv4Protocol_Choice_Enum = 4
	PatternFlowIpv4Protocol_Choice_decrement   PatternFlowIpv4Protocol_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4Protocol_Choice_Enum.
var (
	PatternFlowIpv4Protocol_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		1: "auto",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4Protocol_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"auto":        1,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4Protocol_Choice_Enum) Enum() *PatternFlowIpv4Protocol_Choice_Enum {
	p := new(PatternFlowIpv4Protocol_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4Protocol_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4Protocol_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[150].Descriptor()
}

func (PatternFlowIpv4Protocol_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[150]
}

func (x PatternFlowIpv4Protocol_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4Protocol_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4Protocol_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{314, 0, 0}
}

type PatternFlowIpv4HeaderChecksum_Choice_Enum int32

const (
	PatternFlowIpv4HeaderChecksum_Choice_unspecified PatternFlowIpv4HeaderChecksum_Choice_Enum = 0
	PatternFlowIpv4HeaderChecksum_Choice_generated   PatternFlowIpv4HeaderChecksum_Choice_Enum = 1
	PatternFlowIpv4HeaderChecksum_Choice_custom      PatternFlowIpv4HeaderChecksum_Choice_Enum = 2
)

// Enum value maps for PatternFlowIpv4HeaderChecksum_Choice_Enum.
var (
	PatternFlowIpv4HeaderChecksum_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "generated",
		2: "custom",
	}
	PatternFlowIpv4HeaderChecksum_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"generated":   1,
		"custom":      2,
	}
)

func (x PatternFlowIpv4HeaderChecksum_Choice_Enum) Enum() *PatternFlowIpv4HeaderChecksum_Choice_Enum {
	p := new(PatternFlowIpv4HeaderChecksum_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4HeaderChecksum_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4HeaderChecksum_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[151].Descriptor()
}

func (PatternFlowIpv4HeaderChecksum_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[151]
}

func (x PatternFlowIpv4HeaderChecksum_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4HeaderChecksum_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4HeaderChecksum_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{315, 0, 0}
}

type PatternFlowIpv4HeaderChecksum_Generated_Enum int32

const (
	PatternFlowIpv4HeaderChecksum_Generated_unspecified PatternFlowIpv4HeaderChecksum_Generated_Enum = 0
	PatternFlowIpv4HeaderChecksum_Generated_good        PatternFlowIpv4HeaderChecksum_Generated_Enum = 1
	PatternFlowIpv4HeaderChecksum_Generated_bad         PatternFlowIpv4HeaderChecksum_Generated_Enum = 2
)

// Enum value maps for PatternFlowIpv4HeaderChecksum_Generated_Enum.
var (
	PatternFlowIpv4HeaderChecksum_Generated_Enum_name = map[int32]string{
		0: "unspecified",
		1: "good",
		2: "bad",
	}
	PatternFlowIpv4HeaderChecksum_Generated_Enum_value = map[string]int32{
		"unspecified": 0,
		"good":        1,
		"bad":         2,
	}
)

func (x PatternFlowIpv4HeaderChecksum_Generated_Enum) Enum() *PatternFlowIpv4HeaderChecksum_Generated_Enum {
	p := new(PatternFlowIpv4HeaderChecksum_Generated_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4HeaderChecksum_Generated_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4HeaderChecksum_Generated_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[152].Descriptor()
}

func (PatternFlowIpv4HeaderChecksum_Generated_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[152]
}

func (x PatternFlowIpv4HeaderChecksum_Generated_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4HeaderChecksum_Generated_Enum.Descriptor instead.
func (PatternFlowIpv4HeaderChecksum_Generated_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{315, 1, 0}
}

type PatternFlowIpv4Src_Choice_Enum int32

const (
	PatternFlowIpv4Src_Choice_unspecified PatternFlowIpv4Src_Choice_Enum = 0
	PatternFlowIpv4Src_Choice_value       PatternFlowIpv4Src_Choice_Enum = 2
	PatternFlowIpv4Src_Choice_values      PatternFlowIpv4Src_Choice_Enum = 3
	PatternFlowIpv4Src_Choice_increment   PatternFlowIpv4Src_Choice_Enum = 4
	PatternFlowIpv4Src_Choice_decrement   PatternFlowIpv4Src_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4Src_Choice_Enum.
var (
	PatternFlowIpv4Src_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4Src_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4Src_Choice_Enum) Enum() *PatternFlowIpv4Src_Choice_Enum {
	p := new(PatternFlowIpv4Src_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4Src_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4Src_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[153].Descriptor()
}

func (PatternFlowIpv4Src_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[153]
}

func (x PatternFlowIpv4Src_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4Src_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4Src_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{317, 0, 0}
}

type PatternFlowIpv4Dst_Choice_Enum int32

const (
	PatternFlowIpv4Dst_Choice_unspecified PatternFlowIpv4Dst_Choice_Enum = 0
	PatternFlowIpv4Dst_Choice_value       PatternFlowIpv4Dst_Choice_Enum = 2
	PatternFlowIpv4Dst_Choice_values      PatternFlowIpv4Dst_Choice_Enum = 3
	PatternFlowIpv4Dst_Choice_increment   PatternFlowIpv4Dst_Choice_Enum = 4
	PatternFlowIpv4Dst_Choice_decrement   PatternFlowIpv4Dst_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4Dst_Choice_Enum.
var (
	PatternFlowIpv4Dst_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4Dst_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4Dst_Choice_Enum) Enum() *PatternFlowIpv4Dst_Choice_Enum {
	p := new(PatternFlowIpv4Dst_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4Dst_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4Dst_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[154].Descriptor()
}

func (PatternFlowIpv4Dst_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[154]
}

func (x PatternFlowIpv4Dst_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4Dst_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4Dst_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{319, 0, 0}
}

type PatternFlowIpv4PriorityRaw_Choice_Enum int32

const (
	PatternFlowIpv4PriorityRaw_Choice_unspecified PatternFlowIpv4PriorityRaw_Choice_Enum = 0
	PatternFlowIpv4PriorityRaw_Choice_value       PatternFlowIpv4PriorityRaw_Choice_Enum = 2
	PatternFlowIpv4PriorityRaw_Choice_values      PatternFlowIpv4PriorityRaw_Choice_Enum = 3
	PatternFlowIpv4PriorityRaw_Choice_increment   PatternFlowIpv4PriorityRaw_Choice_Enum = 4
	PatternFlowIpv4PriorityRaw_Choice_decrement   PatternFlowIpv4PriorityRaw_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4PriorityRaw_Choice_Enum.
var (
	PatternFlowIpv4PriorityRaw_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4PriorityRaw_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4PriorityRaw_Choice_Enum) Enum() *PatternFlowIpv4PriorityRaw_Choice_Enum {
	p := new(PatternFlowIpv4PriorityRaw_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4PriorityRaw_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4PriorityRaw_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[155].Descriptor()
}

func (PatternFlowIpv4PriorityRaw_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[155]
}

func (x PatternFlowIpv4PriorityRaw_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4PriorityRaw_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4PriorityRaw_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{321, 0, 0}
}

type PatternFlowIpv4DscpPhb_Choice_Enum int32

const (
	PatternFlowIpv4DscpPhb_Choice_unspecified PatternFlowIpv4DscpPhb_Choice_Enum = 0
	PatternFlowIpv4DscpPhb_Choice_value       PatternFlowIpv4DscpPhb_Choice_Enum = 2
	PatternFlowIpv4DscpPhb_Choice_values      PatternFlowIpv4DscpPhb_Choice_Enum = 3
	PatternFlowIpv4DscpPhb_Choice_increment   PatternFlowIpv4DscpPhb_Choice_Enum = 4
	PatternFlowIpv4DscpPhb_Choice_decrement   PatternFlowIpv4DscpPhb_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4DscpPhb_Choice_Enum.
var (
	PatternFlowIpv4DscpPhb_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4DscpPhb_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4DscpPhb_Choice_Enum) Enum() *PatternFlowIpv4DscpPhb_Choice_Enum {
	p := new(PatternFlowIpv4DscpPhb_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4DscpPhb_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4DscpPhb_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[156].Descriptor()
}

func (PatternFlowIpv4DscpPhb_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[156]
}

func (x PatternFlowIpv4DscpPhb_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4DscpPhb_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4DscpPhb_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{323, 0, 0}
}

type PatternFlowIpv4DscpEcn_Choice_Enum int32

const (
	PatternFlowIpv4DscpEcn_Choice_unspecified PatternFlowIpv4DscpEcn_Choice_Enum = 0
	PatternFlowIpv4DscpEcn_Choice_value       PatternFlowIpv4DscpEcn_Choice_Enum = 2
	PatternFlowIpv4DscpEcn_Choice_values      PatternFlowIpv4DscpEcn_Choice_Enum = 3
	PatternFlowIpv4DscpEcn_Choice_increment   PatternFlowIpv4DscpEcn_Choice_Enum = 4
	PatternFlowIpv4DscpEcn_Choice_decrement   PatternFlowIpv4DscpEcn_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4DscpEcn_Choice_Enum.
var (
	PatternFlowIpv4DscpEcn_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4DscpEcn_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4DscpEcn_Choice_Enum) Enum() *PatternFlowIpv4DscpEcn_Choice_Enum {
	p := new(PatternFlowIpv4DscpEcn_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4DscpEcn_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4DscpEcn_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[157].Descriptor()
}

func (PatternFlowIpv4DscpEcn_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[157]
}

func (x PatternFlowIpv4DscpEcn_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4DscpEcn_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4DscpEcn_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{325, 0, 0}
}

type PatternFlowIpv4TosPrecedence_Choice_Enum int32

const (
	PatternFlowIpv4TosPrecedence_Choice_unspecified PatternFlowIpv4TosPrecedence_Choice_Enum = 0
	PatternFlowIpv4TosPrecedence_Choice_value       PatternFlowIpv4TosPrecedence_Choice_Enum = 2
	PatternFlowIpv4TosPrecedence_Choice_values      PatternFlowIpv4TosPrecedence_Choice_Enum = 3
	PatternFlowIpv4TosPrecedence_Choice_increment   PatternFlowIpv4TosPrecedence_Choice_Enum = 4
	PatternFlowIpv4TosPrecedence_Choice_decrement   PatternFlowIpv4TosPrecedence_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4TosPrecedence_Choice_Enum.
var (
	PatternFlowIpv4TosPrecedence_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4TosPrecedence_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4TosPrecedence_Choice_Enum) Enum() *PatternFlowIpv4TosPrecedence_Choice_Enum {
	p := new(PatternFlowIpv4TosPrecedence_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4TosPrecedence_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4TosPrecedence_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[158].Descriptor()
}

func (PatternFlowIpv4TosPrecedence_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[158]
}

func (x PatternFlowIpv4TosPrecedence_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4TosPrecedence_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4TosPrecedence_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{327, 0, 0}
}

type PatternFlowIpv4TosDelay_Choice_Enum int32

const (
	PatternFlowIpv4TosDelay_Choice_unspecified PatternFlowIpv4TosDelay_Choice_Enum = 0
	PatternFlowIpv4TosDelay_Choice_value       PatternFlowIpv4TosDelay_Choice_Enum = 2
	PatternFlowIpv4TosDelay_Choice_values      PatternFlowIpv4TosDelay_Choice_Enum = 3
	PatternFlowIpv4TosDelay_Choice_increment   PatternFlowIpv4TosDelay_Choice_Enum = 4
	PatternFlowIpv4TosDelay_Choice_decrement   PatternFlowIpv4TosDelay_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4TosDelay_Choice_Enum.
var (
	PatternFlowIpv4TosDelay_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4TosDelay_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4TosDelay_Choice_Enum) Enum() *PatternFlowIpv4TosDelay_Choice_Enum {
	p := new(PatternFlowIpv4TosDelay_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4TosDelay_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4TosDelay_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[159].Descriptor()
}

func (PatternFlowIpv4TosDelay_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[159]
}

func (x PatternFlowIpv4TosDelay_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4TosDelay_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4TosDelay_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{329, 0, 0}
}

type PatternFlowIpv4TosThroughput_Choice_Enum int32

const (
	PatternFlowIpv4TosThroughput_Choice_unspecified PatternFlowIpv4TosThroughput_Choice_Enum = 0
	PatternFlowIpv4TosThroughput_Choice_value       PatternFlowIpv4TosThroughput_Choice_Enum = 2
	PatternFlowIpv4TosThroughput_Choice_values      PatternFlowIpv4TosThroughput_Choice_Enum = 3
	PatternFlowIpv4TosThroughput_Choice_increment   PatternFlowIpv4TosThroughput_Choice_Enum = 4
	PatternFlowIpv4TosThroughput_Choice_decrement   PatternFlowIpv4TosThroughput_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4TosThroughput_Choice_Enum.
var (
	PatternFlowIpv4TosThroughput_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4TosThroughput_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4TosThroughput_Choice_Enum) Enum() *PatternFlowIpv4TosThroughput_Choice_Enum {
	p := new(PatternFlowIpv4TosThroughput_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4TosThroughput_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4TosThroughput_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[160].Descriptor()
}

func (PatternFlowIpv4TosThroughput_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[160]
}

func (x PatternFlowIpv4TosThroughput_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4TosThroughput_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4TosThroughput_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{331, 0, 0}
}

type PatternFlowIpv4TosReliability_Choice_Enum int32

const (
	PatternFlowIpv4TosReliability_Choice_unspecified PatternFlowIpv4TosReliability_Choice_Enum = 0
	PatternFlowIpv4TosReliability_Choice_value       PatternFlowIpv4TosReliability_Choice_Enum = 2
	PatternFlowIpv4TosReliability_Choice_values      PatternFlowIpv4TosReliability_Choice_Enum = 3
	PatternFlowIpv4TosReliability_Choice_increment   PatternFlowIpv4TosReliability_Choice_Enum = 4
	PatternFlowIpv4TosReliability_Choice_decrement   PatternFlowIpv4TosReliability_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4TosReliability_Choice_Enum.
var (
	PatternFlowIpv4TosReliability_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4TosReliability_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4TosReliability_Choice_Enum) Enum() *PatternFlowIpv4TosReliability_Choice_Enum {
	p := new(PatternFlowIpv4TosReliability_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4TosReliability_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4TosReliability_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[161].Descriptor()
}

func (PatternFlowIpv4TosReliability_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[161]
}

func (x PatternFlowIpv4TosReliability_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4TosReliability_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4TosReliability_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{333, 0, 0}
}

type PatternFlowIpv4TosMonetary_Choice_Enum int32

const (
	PatternFlowIpv4TosMonetary_Choice_unspecified PatternFlowIpv4TosMonetary_Choice_Enum = 0
	PatternFlowIpv4TosMonetary_Choice_value       PatternFlowIpv4TosMonetary_Choice_Enum = 2
	PatternFlowIpv4TosMonetary_Choice_values      PatternFlowIpv4TosMonetary_Choice_Enum = 3
	PatternFlowIpv4TosMonetary_Choice_increment   PatternFlowIpv4TosMonetary_Choice_Enum = 4
	PatternFlowIpv4TosMonetary_Choice_decrement   PatternFlowIpv4TosMonetary_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4TosMonetary_Choice_Enum.
var (
	PatternFlowIpv4TosMonetary_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4TosMonetary_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4TosMonetary_Choice_Enum) Enum() *PatternFlowIpv4TosMonetary_Choice_Enum {
	p := new(PatternFlowIpv4TosMonetary_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4TosMonetary_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4TosMonetary_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[162].Descriptor()
}

func (PatternFlowIpv4TosMonetary_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[162]
}

func (x PatternFlowIpv4TosMonetary_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4TosMonetary_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4TosMonetary_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{335, 0, 0}
}

type PatternFlowIpv4TosUnused_Choice_Enum int32

const (
	PatternFlowIpv4TosUnused_Choice_unspecified PatternFlowIpv4TosUnused_Choice_Enum = 0
	PatternFlowIpv4TosUnused_Choice_value       PatternFlowIpv4TosUnused_Choice_Enum = 2
	PatternFlowIpv4TosUnused_Choice_values      PatternFlowIpv4TosUnused_Choice_Enum = 3
	PatternFlowIpv4TosUnused_Choice_increment   PatternFlowIpv4TosUnused_Choice_Enum = 4
	PatternFlowIpv4TosUnused_Choice_decrement   PatternFlowIpv4TosUnused_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv4TosUnused_Choice_Enum.
var (
	PatternFlowIpv4TosUnused_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv4TosUnused_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv4TosUnused_Choice_Enum) Enum() *PatternFlowIpv4TosUnused_Choice_Enum {
	p := new(PatternFlowIpv4TosUnused_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv4TosUnused_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv4TosUnused_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[163].Descriptor()
}

func (PatternFlowIpv4TosUnused_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[163]
}

func (x PatternFlowIpv4TosUnused_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv4TosUnused_Choice_Enum.Descriptor instead.
func (PatternFlowIpv4TosUnused_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{337, 0, 0}
}

type PatternFlowIpv6Version_Choice_Enum int32

const (
	PatternFlowIpv6Version_Choice_unspecified PatternFlowIpv6Version_Choice_Enum = 0
	PatternFlowIpv6Version_Choice_value       PatternFlowIpv6Version_Choice_Enum = 2
	PatternFlowIpv6Version_Choice_values      PatternFlowIpv6Version_Choice_Enum = 3
	PatternFlowIpv6Version_Choice_increment   PatternFlowIpv6Version_Choice_Enum = 4
	PatternFlowIpv6Version_Choice_decrement   PatternFlowIpv6Version_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv6Version_Choice_Enum.
var (
	PatternFlowIpv6Version_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv6Version_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv6Version_Choice_Enum) Enum() *PatternFlowIpv6Version_Choice_Enum {
	p := new(PatternFlowIpv6Version_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv6Version_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv6Version_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[164].Descriptor()
}

func (PatternFlowIpv6Version_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[164]
}

func (x PatternFlowIpv6Version_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv6Version_Choice_Enum.Descriptor instead.
func (PatternFlowIpv6Version_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{339, 0, 0}
}

type PatternFlowIpv6TrafficClass_Choice_Enum int32

const (
	PatternFlowIpv6TrafficClass_Choice_unspecified PatternFlowIpv6TrafficClass_Choice_Enum = 0
	PatternFlowIpv6TrafficClass_Choice_value       PatternFlowIpv6TrafficClass_Choice_Enum = 2
	PatternFlowIpv6TrafficClass_Choice_values      PatternFlowIpv6TrafficClass_Choice_Enum = 3
	PatternFlowIpv6TrafficClass_Choice_increment   PatternFlowIpv6TrafficClass_Choice_Enum = 4
	PatternFlowIpv6TrafficClass_Choice_decrement   PatternFlowIpv6TrafficClass_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv6TrafficClass_Choice_Enum.
var (
	PatternFlowIpv6TrafficClass_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv6TrafficClass_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv6TrafficClass_Choice_Enum) Enum() *PatternFlowIpv6TrafficClass_Choice_Enum {
	p := new(PatternFlowIpv6TrafficClass_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv6TrafficClass_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv6TrafficClass_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[165].Descriptor()
}

func (PatternFlowIpv6TrafficClass_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[165]
}

func (x PatternFlowIpv6TrafficClass_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv6TrafficClass_Choice_Enum.Descriptor instead.
func (PatternFlowIpv6TrafficClass_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{341, 0, 0}
}

type PatternFlowIpv6FlowLabel_Choice_Enum int32

const (
	PatternFlowIpv6FlowLabel_Choice_unspecified PatternFlowIpv6FlowLabel_Choice_Enum = 0
	PatternFlowIpv6FlowLabel_Choice_value       PatternFlowIpv6FlowLabel_Choice_Enum = 2
	PatternFlowIpv6FlowLabel_Choice_values      PatternFlowIpv6FlowLabel_Choice_Enum = 3
	PatternFlowIpv6FlowLabel_Choice_increment   PatternFlowIpv6FlowLabel_Choice_Enum = 4
	PatternFlowIpv6FlowLabel_Choice_decrement   PatternFlowIpv6FlowLabel_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv6FlowLabel_Choice_Enum.
var (
	PatternFlowIpv6FlowLabel_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv6FlowLabel_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv6FlowLabel_Choice_Enum) Enum() *PatternFlowIpv6FlowLabel_Choice_Enum {
	p := new(PatternFlowIpv6FlowLabel_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv6FlowLabel_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv6FlowLabel_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[166].Descriptor()
}

func (PatternFlowIpv6FlowLabel_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[166]
}

func (x PatternFlowIpv6FlowLabel_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv6FlowLabel_Choice_Enum.Descriptor instead.
func (PatternFlowIpv6FlowLabel_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{343, 0, 0}
}

type PatternFlowIpv6PayloadLength_Choice_Enum int32

const (
	PatternFlowIpv6PayloadLength_Choice_unspecified PatternFlowIpv6PayloadLength_Choice_Enum = 0
	PatternFlowIpv6PayloadLength_Choice_value       PatternFlowIpv6PayloadLength_Choice_Enum = 2
	PatternFlowIpv6PayloadLength_Choice_values      PatternFlowIpv6PayloadLength_Choice_Enum = 3
	PatternFlowIpv6PayloadLength_Choice_auto        PatternFlowIpv6PayloadLength_Choice_Enum = 1
	PatternFlowIpv6PayloadLength_Choice_increment   PatternFlowIpv6PayloadLength_Choice_Enum = 4
	PatternFlowIpv6PayloadLength_Choice_decrement   PatternFlowIpv6PayloadLength_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv6PayloadLength_Choice_Enum.
var (
	PatternFlowIpv6PayloadLength_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		1: "auto",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv6PayloadLength_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"auto":        1,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv6PayloadLength_Choice_Enum) Enum() *PatternFlowIpv6PayloadLength_Choice_Enum {
	p := new(PatternFlowIpv6PayloadLength_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv6PayloadLength_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv6PayloadLength_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[167].Descriptor()
}

func (PatternFlowIpv6PayloadLength_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[167]
}

func (x PatternFlowIpv6PayloadLength_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv6PayloadLength_Choice_Enum.Descriptor instead.
func (PatternFlowIpv6PayloadLength_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{345, 0, 0}
}

type PatternFlowIpv6NextHeader_Choice_Enum int32

const (
	PatternFlowIpv6NextHeader_Choice_unspecified PatternFlowIpv6NextHeader_Choice_Enum = 0
	PatternFlowIpv6NextHeader_Choice_value       PatternFlowIpv6NextHeader_Choice_Enum = 2
	PatternFlowIpv6NextHeader_Choice_values      PatternFlowIpv6NextHeader_Choice_Enum = 3
	PatternFlowIpv6NextHeader_Choice_auto        PatternFlowIpv6NextHeader_Choice_Enum = 1
	PatternFlowIpv6NextHeader_Choice_increment   PatternFlowIpv6NextHeader_Choice_Enum = 4
	PatternFlowIpv6NextHeader_Choice_decrement   PatternFlowIpv6NextHeader_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv6NextHeader_Choice_Enum.
var (
	PatternFlowIpv6NextHeader_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		1: "auto",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv6NextHeader_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"auto":        1,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv6NextHeader_Choice_Enum) Enum() *PatternFlowIpv6NextHeader_Choice_Enum {
	p := new(PatternFlowIpv6NextHeader_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv6NextHeader_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv6NextHeader_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[168].Descriptor()
}

func (PatternFlowIpv6NextHeader_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[168]
}

func (x PatternFlowIpv6NextHeader_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv6NextHeader_Choice_Enum.Descriptor instead.
func (PatternFlowIpv6NextHeader_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{347, 0, 0}
}

type PatternFlowIpv6HopLimit_Choice_Enum int32

const (
	PatternFlowIpv6HopLimit_Choice_unspecified PatternFlowIpv6HopLimit_Choice_Enum = 0
	PatternFlowIpv6HopLimit_Choice_value       PatternFlowIpv6HopLimit_Choice_Enum = 2
	PatternFlowIpv6HopLimit_Choice_values      PatternFlowIpv6HopLimit_Choice_Enum = 3
	PatternFlowIpv6HopLimit_Choice_increment   PatternFlowIpv6HopLimit_Choice_Enum = 4
	PatternFlowIpv6HopLimit_Choice_decrement   PatternFlowIpv6HopLimit_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv6HopLimit_Choice_Enum.
var (
	PatternFlowIpv6HopLimit_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv6HopLimit_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv6HopLimit_Choice_Enum) Enum() *PatternFlowIpv6HopLimit_Choice_Enum {
	p := new(PatternFlowIpv6HopLimit_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv6HopLimit_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv6HopLimit_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[169].Descriptor()
}

func (PatternFlowIpv6HopLimit_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[169]
}

func (x PatternFlowIpv6HopLimit_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv6HopLimit_Choice_Enum.Descriptor instead.
func (PatternFlowIpv6HopLimit_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{349, 0, 0}
}

type PatternFlowIpv6Src_Choice_Enum int32

const (
	PatternFlowIpv6Src_Choice_unspecified PatternFlowIpv6Src_Choice_Enum = 0
	PatternFlowIpv6Src_Choice_value       PatternFlowIpv6Src_Choice_Enum = 2
	PatternFlowIpv6Src_Choice_values      PatternFlowIpv6Src_Choice_Enum = 3
	PatternFlowIpv6Src_Choice_increment   PatternFlowIpv6Src_Choice_Enum = 4
	PatternFlowIpv6Src_Choice_decrement   PatternFlowIpv6Src_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv6Src_Choice_Enum.
var (
	PatternFlowIpv6Src_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv6Src_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv6Src_Choice_Enum) Enum() *PatternFlowIpv6Src_Choice_Enum {
	p := new(PatternFlowIpv6Src_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv6Src_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv6Src_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[170].Descriptor()
}

func (PatternFlowIpv6Src_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[170]
}

func (x PatternFlowIpv6Src_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv6Src_Choice_Enum.Descriptor instead.
func (PatternFlowIpv6Src_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{351, 0, 0}
}

type PatternFlowIpv6Dst_Choice_Enum int32

const (
	PatternFlowIpv6Dst_Choice_unspecified PatternFlowIpv6Dst_Choice_Enum = 0
	PatternFlowIpv6Dst_Choice_value       PatternFlowIpv6Dst_Choice_Enum = 2
	PatternFlowIpv6Dst_Choice_values      PatternFlowIpv6Dst_Choice_Enum = 3
	PatternFlowIpv6Dst_Choice_increment   PatternFlowIpv6Dst_Choice_Enum = 4
	PatternFlowIpv6Dst_Choice_decrement   PatternFlowIpv6Dst_Choice_Enum = 5
)

// Enum value maps for PatternFlowIpv6Dst_Choice_Enum.
var (
	PatternFlowIpv6Dst_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIpv6Dst_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIpv6Dst_Choice_Enum) Enum() *PatternFlowIpv6Dst_Choice_Enum {
	p := new(PatternFlowIpv6Dst_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIpv6Dst_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIpv6Dst_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[171].Descriptor()
}

func (PatternFlowIpv6Dst_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[171]
}

func (x PatternFlowIpv6Dst_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIpv6Dst_Choice_Enum.Descriptor instead.
func (PatternFlowIpv6Dst_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{353, 0, 0}
}

type PatternFlowPfcPauseDst_Choice_Enum int32

const (
	PatternFlowPfcPauseDst_Choice_unspecified PatternFlowPfcPauseDst_Choice_Enum = 0
	PatternFlowPfcPauseDst_Choice_value       PatternFlowPfcPauseDst_Choice_Enum = 2
	PatternFlowPfcPauseDst_Choice_values      PatternFlowPfcPauseDst_Choice_Enum = 3
	PatternFlowPfcPauseDst_Choice_increment   PatternFlowPfcPauseDst_Choice_Enum = 4
	PatternFlowPfcPauseDst_Choice_decrement   PatternFlowPfcPauseDst_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPauseDst_Choice_Enum.
var (
	PatternFlowPfcPauseDst_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPauseDst_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPauseDst_Choice_Enum) Enum() *PatternFlowPfcPauseDst_Choice_Enum {
	p := new(PatternFlowPfcPauseDst_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPauseDst_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPauseDst_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[172].Descriptor()
}

func (PatternFlowPfcPauseDst_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[172]
}

func (x PatternFlowPfcPauseDst_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPauseDst_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPauseDst_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{355, 0, 0}
}

type PatternFlowPfcPauseSrc_Choice_Enum int32

const (
	PatternFlowPfcPauseSrc_Choice_unspecified PatternFlowPfcPauseSrc_Choice_Enum = 0
	PatternFlowPfcPauseSrc_Choice_value       PatternFlowPfcPauseSrc_Choice_Enum = 2
	PatternFlowPfcPauseSrc_Choice_values      PatternFlowPfcPauseSrc_Choice_Enum = 3
	PatternFlowPfcPauseSrc_Choice_increment   PatternFlowPfcPauseSrc_Choice_Enum = 4
	PatternFlowPfcPauseSrc_Choice_decrement   PatternFlowPfcPauseSrc_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPauseSrc_Choice_Enum.
var (
	PatternFlowPfcPauseSrc_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPauseSrc_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPauseSrc_Choice_Enum) Enum() *PatternFlowPfcPauseSrc_Choice_Enum {
	p := new(PatternFlowPfcPauseSrc_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPauseSrc_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPauseSrc_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[173].Descriptor()
}

func (PatternFlowPfcPauseSrc_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[173]
}

func (x PatternFlowPfcPauseSrc_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPauseSrc_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPauseSrc_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{357, 0, 0}
}

type PatternFlowPfcPauseEtherType_Choice_Enum int32

const (
	PatternFlowPfcPauseEtherType_Choice_unspecified PatternFlowPfcPauseEtherType_Choice_Enum = 0
	PatternFlowPfcPauseEtherType_Choice_value       PatternFlowPfcPauseEtherType_Choice_Enum = 2
	PatternFlowPfcPauseEtherType_Choice_values      PatternFlowPfcPauseEtherType_Choice_Enum = 3
	PatternFlowPfcPauseEtherType_Choice_increment   PatternFlowPfcPauseEtherType_Choice_Enum = 4
	PatternFlowPfcPauseEtherType_Choice_decrement   PatternFlowPfcPauseEtherType_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPauseEtherType_Choice_Enum.
var (
	PatternFlowPfcPauseEtherType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPauseEtherType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPauseEtherType_Choice_Enum) Enum() *PatternFlowPfcPauseEtherType_Choice_Enum {
	p := new(PatternFlowPfcPauseEtherType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPauseEtherType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPauseEtherType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[174].Descriptor()
}

func (PatternFlowPfcPauseEtherType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[174]
}

func (x PatternFlowPfcPauseEtherType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPauseEtherType_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPauseEtherType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{359, 0, 0}
}

type PatternFlowPfcPauseControlOpCode_Choice_Enum int32

const (
	PatternFlowPfcPauseControlOpCode_Choice_unspecified PatternFlowPfcPauseControlOpCode_Choice_Enum = 0
	PatternFlowPfcPauseControlOpCode_Choice_value       PatternFlowPfcPauseControlOpCode_Choice_Enum = 2
	PatternFlowPfcPauseControlOpCode_Choice_values      PatternFlowPfcPauseControlOpCode_Choice_Enum = 3
	PatternFlowPfcPauseControlOpCode_Choice_increment   PatternFlowPfcPauseControlOpCode_Choice_Enum = 4
	PatternFlowPfcPauseControlOpCode_Choice_decrement   PatternFlowPfcPauseControlOpCode_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPauseControlOpCode_Choice_Enum.
var (
	PatternFlowPfcPauseControlOpCode_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPauseControlOpCode_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPauseControlOpCode_Choice_Enum) Enum() *PatternFlowPfcPauseControlOpCode_Choice_Enum {
	p := new(PatternFlowPfcPauseControlOpCode_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPauseControlOpCode_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPauseControlOpCode_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[175].Descriptor()
}

func (PatternFlowPfcPauseControlOpCode_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[175]
}

func (x PatternFlowPfcPauseControlOpCode_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPauseControlOpCode_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPauseControlOpCode_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{361, 0, 0}
}

type PatternFlowPfcPauseClassEnableVector_Choice_Enum int32

const (
	PatternFlowPfcPauseClassEnableVector_Choice_unspecified PatternFlowPfcPauseClassEnableVector_Choice_Enum = 0
	PatternFlowPfcPauseClassEnableVector_Choice_value       PatternFlowPfcPauseClassEnableVector_Choice_Enum = 2
	PatternFlowPfcPauseClassEnableVector_Choice_values      PatternFlowPfcPauseClassEnableVector_Choice_Enum = 3
	PatternFlowPfcPauseClassEnableVector_Choice_increment   PatternFlowPfcPauseClassEnableVector_Choice_Enum = 4
	PatternFlowPfcPauseClassEnableVector_Choice_decrement   PatternFlowPfcPauseClassEnableVector_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPauseClassEnableVector_Choice_Enum.
var (
	PatternFlowPfcPauseClassEnableVector_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPauseClassEnableVector_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPauseClassEnableVector_Choice_Enum) Enum() *PatternFlowPfcPauseClassEnableVector_Choice_Enum {
	p := new(PatternFlowPfcPauseClassEnableVector_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPauseClassEnableVector_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPauseClassEnableVector_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[176].Descriptor()
}

func (PatternFlowPfcPauseClassEnableVector_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[176]
}

func (x PatternFlowPfcPauseClassEnableVector_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPauseClassEnableVector_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPauseClassEnableVector_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{363, 0, 0}
}

type PatternFlowPfcPausePauseClass0_Choice_Enum int32

const (
	PatternFlowPfcPausePauseClass0_Choice_unspecified PatternFlowPfcPausePauseClass0_Choice_Enum = 0
	PatternFlowPfcPausePauseClass0_Choice_value       PatternFlowPfcPausePauseClass0_Choice_Enum = 2
	PatternFlowPfcPausePauseClass0_Choice_values      PatternFlowPfcPausePauseClass0_Choice_Enum = 3
	PatternFlowPfcPausePauseClass0_Choice_increment   PatternFlowPfcPausePauseClass0_Choice_Enum = 4
	PatternFlowPfcPausePauseClass0_Choice_decrement   PatternFlowPfcPausePauseClass0_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPausePauseClass0_Choice_Enum.
var (
	PatternFlowPfcPausePauseClass0_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPausePauseClass0_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPausePauseClass0_Choice_Enum) Enum() *PatternFlowPfcPausePauseClass0_Choice_Enum {
	p := new(PatternFlowPfcPausePauseClass0_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPausePauseClass0_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPausePauseClass0_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[177].Descriptor()
}

func (PatternFlowPfcPausePauseClass0_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[177]
}

func (x PatternFlowPfcPausePauseClass0_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass0_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPausePauseClass0_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{365, 0, 0}
}

type PatternFlowPfcPausePauseClass1_Choice_Enum int32

const (
	PatternFlowPfcPausePauseClass1_Choice_unspecified PatternFlowPfcPausePauseClass1_Choice_Enum = 0
	PatternFlowPfcPausePauseClass1_Choice_value       PatternFlowPfcPausePauseClass1_Choice_Enum = 2
	PatternFlowPfcPausePauseClass1_Choice_values      PatternFlowPfcPausePauseClass1_Choice_Enum = 3
	PatternFlowPfcPausePauseClass1_Choice_increment   PatternFlowPfcPausePauseClass1_Choice_Enum = 4
	PatternFlowPfcPausePauseClass1_Choice_decrement   PatternFlowPfcPausePauseClass1_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPausePauseClass1_Choice_Enum.
var (
	PatternFlowPfcPausePauseClass1_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPausePauseClass1_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPausePauseClass1_Choice_Enum) Enum() *PatternFlowPfcPausePauseClass1_Choice_Enum {
	p := new(PatternFlowPfcPausePauseClass1_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPausePauseClass1_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPausePauseClass1_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[178].Descriptor()
}

func (PatternFlowPfcPausePauseClass1_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[178]
}

func (x PatternFlowPfcPausePauseClass1_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass1_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPausePauseClass1_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{367, 0, 0}
}

type PatternFlowPfcPausePauseClass2_Choice_Enum int32

const (
	PatternFlowPfcPausePauseClass2_Choice_unspecified PatternFlowPfcPausePauseClass2_Choice_Enum = 0
	PatternFlowPfcPausePauseClass2_Choice_value       PatternFlowPfcPausePauseClass2_Choice_Enum = 2
	PatternFlowPfcPausePauseClass2_Choice_values      PatternFlowPfcPausePauseClass2_Choice_Enum = 3
	PatternFlowPfcPausePauseClass2_Choice_increment   PatternFlowPfcPausePauseClass2_Choice_Enum = 4
	PatternFlowPfcPausePauseClass2_Choice_decrement   PatternFlowPfcPausePauseClass2_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPausePauseClass2_Choice_Enum.
var (
	PatternFlowPfcPausePauseClass2_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPausePauseClass2_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPausePauseClass2_Choice_Enum) Enum() *PatternFlowPfcPausePauseClass2_Choice_Enum {
	p := new(PatternFlowPfcPausePauseClass2_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPausePauseClass2_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPausePauseClass2_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[179].Descriptor()
}

func (PatternFlowPfcPausePauseClass2_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[179]
}

func (x PatternFlowPfcPausePauseClass2_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass2_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPausePauseClass2_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{369, 0, 0}
}

type PatternFlowPfcPausePauseClass3_Choice_Enum int32

const (
	PatternFlowPfcPausePauseClass3_Choice_unspecified PatternFlowPfcPausePauseClass3_Choice_Enum = 0
	PatternFlowPfcPausePauseClass3_Choice_value       PatternFlowPfcPausePauseClass3_Choice_Enum = 2
	PatternFlowPfcPausePauseClass3_Choice_values      PatternFlowPfcPausePauseClass3_Choice_Enum = 3
	PatternFlowPfcPausePauseClass3_Choice_increment   PatternFlowPfcPausePauseClass3_Choice_Enum = 4
	PatternFlowPfcPausePauseClass3_Choice_decrement   PatternFlowPfcPausePauseClass3_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPausePauseClass3_Choice_Enum.
var (
	PatternFlowPfcPausePauseClass3_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPausePauseClass3_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPausePauseClass3_Choice_Enum) Enum() *PatternFlowPfcPausePauseClass3_Choice_Enum {
	p := new(PatternFlowPfcPausePauseClass3_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPausePauseClass3_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPausePauseClass3_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[180].Descriptor()
}

func (PatternFlowPfcPausePauseClass3_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[180]
}

func (x PatternFlowPfcPausePauseClass3_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass3_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPausePauseClass3_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{371, 0, 0}
}

type PatternFlowPfcPausePauseClass4_Choice_Enum int32

const (
	PatternFlowPfcPausePauseClass4_Choice_unspecified PatternFlowPfcPausePauseClass4_Choice_Enum = 0
	PatternFlowPfcPausePauseClass4_Choice_value       PatternFlowPfcPausePauseClass4_Choice_Enum = 2
	PatternFlowPfcPausePauseClass4_Choice_values      PatternFlowPfcPausePauseClass4_Choice_Enum = 3
	PatternFlowPfcPausePauseClass4_Choice_increment   PatternFlowPfcPausePauseClass4_Choice_Enum = 4
	PatternFlowPfcPausePauseClass4_Choice_decrement   PatternFlowPfcPausePauseClass4_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPausePauseClass4_Choice_Enum.
var (
	PatternFlowPfcPausePauseClass4_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPausePauseClass4_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPausePauseClass4_Choice_Enum) Enum() *PatternFlowPfcPausePauseClass4_Choice_Enum {
	p := new(PatternFlowPfcPausePauseClass4_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPausePauseClass4_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPausePauseClass4_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[181].Descriptor()
}

func (PatternFlowPfcPausePauseClass4_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[181]
}

func (x PatternFlowPfcPausePauseClass4_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass4_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPausePauseClass4_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{373, 0, 0}
}

type PatternFlowPfcPausePauseClass5_Choice_Enum int32

const (
	PatternFlowPfcPausePauseClass5_Choice_unspecified PatternFlowPfcPausePauseClass5_Choice_Enum = 0
	PatternFlowPfcPausePauseClass5_Choice_value       PatternFlowPfcPausePauseClass5_Choice_Enum = 2
	PatternFlowPfcPausePauseClass5_Choice_values      PatternFlowPfcPausePauseClass5_Choice_Enum = 3
	PatternFlowPfcPausePauseClass5_Choice_increment   PatternFlowPfcPausePauseClass5_Choice_Enum = 4
	PatternFlowPfcPausePauseClass5_Choice_decrement   PatternFlowPfcPausePauseClass5_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPausePauseClass5_Choice_Enum.
var (
	PatternFlowPfcPausePauseClass5_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPausePauseClass5_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPausePauseClass5_Choice_Enum) Enum() *PatternFlowPfcPausePauseClass5_Choice_Enum {
	p := new(PatternFlowPfcPausePauseClass5_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPausePauseClass5_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPausePauseClass5_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[182].Descriptor()
}

func (PatternFlowPfcPausePauseClass5_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[182]
}

func (x PatternFlowPfcPausePauseClass5_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass5_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPausePauseClass5_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{375, 0, 0}
}

type PatternFlowPfcPausePauseClass6_Choice_Enum int32

const (
	PatternFlowPfcPausePauseClass6_Choice_unspecified PatternFlowPfcPausePauseClass6_Choice_Enum = 0
	PatternFlowPfcPausePauseClass6_Choice_value       PatternFlowPfcPausePauseClass6_Choice_Enum = 2
	PatternFlowPfcPausePauseClass6_Choice_values      PatternFlowPfcPausePauseClass6_Choice_Enum = 3
	PatternFlowPfcPausePauseClass6_Choice_increment   PatternFlowPfcPausePauseClass6_Choice_Enum = 4
	PatternFlowPfcPausePauseClass6_Choice_decrement   PatternFlowPfcPausePauseClass6_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPausePauseClass6_Choice_Enum.
var (
	PatternFlowPfcPausePauseClass6_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPausePauseClass6_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPausePauseClass6_Choice_Enum) Enum() *PatternFlowPfcPausePauseClass6_Choice_Enum {
	p := new(PatternFlowPfcPausePauseClass6_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPausePauseClass6_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPausePauseClass6_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[183].Descriptor()
}

func (PatternFlowPfcPausePauseClass6_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[183]
}

func (x PatternFlowPfcPausePauseClass6_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass6_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPausePauseClass6_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{377, 0, 0}
}

type PatternFlowPfcPausePauseClass7_Choice_Enum int32

const (
	PatternFlowPfcPausePauseClass7_Choice_unspecified PatternFlowPfcPausePauseClass7_Choice_Enum = 0
	PatternFlowPfcPausePauseClass7_Choice_value       PatternFlowPfcPausePauseClass7_Choice_Enum = 2
	PatternFlowPfcPausePauseClass7_Choice_values      PatternFlowPfcPausePauseClass7_Choice_Enum = 3
	PatternFlowPfcPausePauseClass7_Choice_increment   PatternFlowPfcPausePauseClass7_Choice_Enum = 4
	PatternFlowPfcPausePauseClass7_Choice_decrement   PatternFlowPfcPausePauseClass7_Choice_Enum = 5
)

// Enum value maps for PatternFlowPfcPausePauseClass7_Choice_Enum.
var (
	PatternFlowPfcPausePauseClass7_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPfcPausePauseClass7_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPfcPausePauseClass7_Choice_Enum) Enum() *PatternFlowPfcPausePauseClass7_Choice_Enum {
	p := new(PatternFlowPfcPausePauseClass7_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPfcPausePauseClass7_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPfcPausePauseClass7_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[184].Descriptor()
}

func (PatternFlowPfcPausePauseClass7_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[184]
}

func (x PatternFlowPfcPausePauseClass7_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass7_Choice_Enum.Descriptor instead.
func (PatternFlowPfcPausePauseClass7_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{379, 0, 0}
}

type PatternFlowEthernetPauseDst_Choice_Enum int32

const (
	PatternFlowEthernetPauseDst_Choice_unspecified PatternFlowEthernetPauseDst_Choice_Enum = 0
	PatternFlowEthernetPauseDst_Choice_value       PatternFlowEthernetPauseDst_Choice_Enum = 2
	PatternFlowEthernetPauseDst_Choice_values      PatternFlowEthernetPauseDst_Choice_Enum = 3
	PatternFlowEthernetPauseDst_Choice_increment   PatternFlowEthernetPauseDst_Choice_Enum = 4
	PatternFlowEthernetPauseDst_Choice_decrement   PatternFlowEthernetPauseDst_Choice_Enum = 5
)

// Enum value maps for PatternFlowEthernetPauseDst_Choice_Enum.
var (
	PatternFlowEthernetPauseDst_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowEthernetPauseDst_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowEthernetPauseDst_Choice_Enum) Enum() *PatternFlowEthernetPauseDst_Choice_Enum {
	p := new(PatternFlowEthernetPauseDst_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowEthernetPauseDst_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowEthernetPauseDst_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[185].Descriptor()
}

func (PatternFlowEthernetPauseDst_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[185]
}

func (x PatternFlowEthernetPauseDst_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowEthernetPauseDst_Choice_Enum.Descriptor instead.
func (PatternFlowEthernetPauseDst_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{381, 0, 0}
}

type PatternFlowEthernetPauseSrc_Choice_Enum int32

const (
	PatternFlowEthernetPauseSrc_Choice_unspecified PatternFlowEthernetPauseSrc_Choice_Enum = 0
	PatternFlowEthernetPauseSrc_Choice_value       PatternFlowEthernetPauseSrc_Choice_Enum = 2
	PatternFlowEthernetPauseSrc_Choice_values      PatternFlowEthernetPauseSrc_Choice_Enum = 3
	PatternFlowEthernetPauseSrc_Choice_increment   PatternFlowEthernetPauseSrc_Choice_Enum = 4
	PatternFlowEthernetPauseSrc_Choice_decrement   PatternFlowEthernetPauseSrc_Choice_Enum = 5
)

// Enum value maps for PatternFlowEthernetPauseSrc_Choice_Enum.
var (
	PatternFlowEthernetPauseSrc_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowEthernetPauseSrc_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowEthernetPauseSrc_Choice_Enum) Enum() *PatternFlowEthernetPauseSrc_Choice_Enum {
	p := new(PatternFlowEthernetPauseSrc_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowEthernetPauseSrc_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowEthernetPauseSrc_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[186].Descriptor()
}

func (PatternFlowEthernetPauseSrc_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[186]
}

func (x PatternFlowEthernetPauseSrc_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowEthernetPauseSrc_Choice_Enum.Descriptor instead.
func (PatternFlowEthernetPauseSrc_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{383, 0, 0}
}

type PatternFlowEthernetPauseEtherType_Choice_Enum int32

const (
	PatternFlowEthernetPauseEtherType_Choice_unspecified PatternFlowEthernetPauseEtherType_Choice_Enum = 0
	PatternFlowEthernetPauseEtherType_Choice_value       PatternFlowEthernetPauseEtherType_Choice_Enum = 2
	PatternFlowEthernetPauseEtherType_Choice_values      PatternFlowEthernetPauseEtherType_Choice_Enum = 3
	PatternFlowEthernetPauseEtherType_Choice_increment   PatternFlowEthernetPauseEtherType_Choice_Enum = 4
	PatternFlowEthernetPauseEtherType_Choice_decrement   PatternFlowEthernetPauseEtherType_Choice_Enum = 5
)

// Enum value maps for PatternFlowEthernetPauseEtherType_Choice_Enum.
var (
	PatternFlowEthernetPauseEtherType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowEthernetPauseEtherType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowEthernetPauseEtherType_Choice_Enum) Enum() *PatternFlowEthernetPauseEtherType_Choice_Enum {
	p := new(PatternFlowEthernetPauseEtherType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowEthernetPauseEtherType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowEthernetPauseEtherType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[187].Descriptor()
}

func (PatternFlowEthernetPauseEtherType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[187]
}

func (x PatternFlowEthernetPauseEtherType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowEthernetPauseEtherType_Choice_Enum.Descriptor instead.
func (PatternFlowEthernetPauseEtherType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{385, 0, 0}
}

type PatternFlowEthernetPauseControlOpCode_Choice_Enum int32

const (
	PatternFlowEthernetPauseControlOpCode_Choice_unspecified PatternFlowEthernetPauseControlOpCode_Choice_Enum = 0
	PatternFlowEthernetPauseControlOpCode_Choice_value       PatternFlowEthernetPauseControlOpCode_Choice_Enum = 2
	PatternFlowEthernetPauseControlOpCode_Choice_values      PatternFlowEthernetPauseControlOpCode_Choice_Enum = 3
	PatternFlowEthernetPauseControlOpCode_Choice_increment   PatternFlowEthernetPauseControlOpCode_Choice_Enum = 4
	PatternFlowEthernetPauseControlOpCode_Choice_decrement   PatternFlowEthernetPauseControlOpCode_Choice_Enum = 5
)

// Enum value maps for PatternFlowEthernetPauseControlOpCode_Choice_Enum.
var (
	PatternFlowEthernetPauseControlOpCode_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowEthernetPauseControlOpCode_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowEthernetPauseControlOpCode_Choice_Enum) Enum() *PatternFlowEthernetPauseControlOpCode_Choice_Enum {
	p := new(PatternFlowEthernetPauseControlOpCode_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowEthernetPauseControlOpCode_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowEthernetPauseControlOpCode_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[188].Descriptor()
}

func (PatternFlowEthernetPauseControlOpCode_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[188]
}

func (x PatternFlowEthernetPauseControlOpCode_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowEthernetPauseControlOpCode_Choice_Enum.Descriptor instead.
func (PatternFlowEthernetPauseControlOpCode_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{387, 0, 0}
}

type PatternFlowEthernetPauseTime_Choice_Enum int32

const (
	PatternFlowEthernetPauseTime_Choice_unspecified PatternFlowEthernetPauseTime_Choice_Enum = 0
	PatternFlowEthernetPauseTime_Choice_value       PatternFlowEthernetPauseTime_Choice_Enum = 2
	PatternFlowEthernetPauseTime_Choice_values      PatternFlowEthernetPauseTime_Choice_Enum = 3
	PatternFlowEthernetPauseTime_Choice_increment   PatternFlowEthernetPauseTime_Choice_Enum = 4
	PatternFlowEthernetPauseTime_Choice_decrement   PatternFlowEthernetPauseTime_Choice_Enum = 5
)

// Enum value maps for PatternFlowEthernetPauseTime_Choice_Enum.
var (
	PatternFlowEthernetPauseTime_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowEthernetPauseTime_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowEthernetPauseTime_Choice_Enum) Enum() *PatternFlowEthernetPauseTime_Choice_Enum {
	p := new(PatternFlowEthernetPauseTime_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowEthernetPauseTime_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowEthernetPauseTime_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[189].Descriptor()
}

func (PatternFlowEthernetPauseTime_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[189]
}

func (x PatternFlowEthernetPauseTime_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowEthernetPauseTime_Choice_Enum.Descriptor instead.
func (PatternFlowEthernetPauseTime_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{389, 0, 0}
}

type PatternFlowTcpSrcPort_Choice_Enum int32

const (
	PatternFlowTcpSrcPort_Choice_unspecified PatternFlowTcpSrcPort_Choice_Enum = 0
	PatternFlowTcpSrcPort_Choice_value       PatternFlowTcpSrcPort_Choice_Enum = 2
	PatternFlowTcpSrcPort_Choice_values      PatternFlowTcpSrcPort_Choice_Enum = 3
	PatternFlowTcpSrcPort_Choice_increment   PatternFlowTcpSrcPort_Choice_Enum = 4
	PatternFlowTcpSrcPort_Choice_decrement   PatternFlowTcpSrcPort_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpSrcPort_Choice_Enum.
var (
	PatternFlowTcpSrcPort_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpSrcPort_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpSrcPort_Choice_Enum) Enum() *PatternFlowTcpSrcPort_Choice_Enum {
	p := new(PatternFlowTcpSrcPort_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpSrcPort_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpSrcPort_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[190].Descriptor()
}

func (PatternFlowTcpSrcPort_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[190]
}

func (x PatternFlowTcpSrcPort_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpSrcPort_Choice_Enum.Descriptor instead.
func (PatternFlowTcpSrcPort_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{391, 0, 0}
}

type PatternFlowTcpDstPort_Choice_Enum int32

const (
	PatternFlowTcpDstPort_Choice_unspecified PatternFlowTcpDstPort_Choice_Enum = 0
	PatternFlowTcpDstPort_Choice_value       PatternFlowTcpDstPort_Choice_Enum = 2
	PatternFlowTcpDstPort_Choice_values      PatternFlowTcpDstPort_Choice_Enum = 3
	PatternFlowTcpDstPort_Choice_increment   PatternFlowTcpDstPort_Choice_Enum = 4
	PatternFlowTcpDstPort_Choice_decrement   PatternFlowTcpDstPort_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpDstPort_Choice_Enum.
var (
	PatternFlowTcpDstPort_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpDstPort_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpDstPort_Choice_Enum) Enum() *PatternFlowTcpDstPort_Choice_Enum {
	p := new(PatternFlowTcpDstPort_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpDstPort_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpDstPort_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[191].Descriptor()
}

func (PatternFlowTcpDstPort_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[191]
}

func (x PatternFlowTcpDstPort_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpDstPort_Choice_Enum.Descriptor instead.
func (PatternFlowTcpDstPort_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{393, 0, 0}
}

type PatternFlowTcpSeqNum_Choice_Enum int32

const (
	PatternFlowTcpSeqNum_Choice_unspecified PatternFlowTcpSeqNum_Choice_Enum = 0
	PatternFlowTcpSeqNum_Choice_value       PatternFlowTcpSeqNum_Choice_Enum = 2
	PatternFlowTcpSeqNum_Choice_values      PatternFlowTcpSeqNum_Choice_Enum = 3
	PatternFlowTcpSeqNum_Choice_increment   PatternFlowTcpSeqNum_Choice_Enum = 4
	PatternFlowTcpSeqNum_Choice_decrement   PatternFlowTcpSeqNum_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpSeqNum_Choice_Enum.
var (
	PatternFlowTcpSeqNum_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpSeqNum_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpSeqNum_Choice_Enum) Enum() *PatternFlowTcpSeqNum_Choice_Enum {
	p := new(PatternFlowTcpSeqNum_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpSeqNum_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpSeqNum_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[192].Descriptor()
}

func (PatternFlowTcpSeqNum_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[192]
}

func (x PatternFlowTcpSeqNum_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpSeqNum_Choice_Enum.Descriptor instead.
func (PatternFlowTcpSeqNum_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{395, 0, 0}
}

type PatternFlowTcpAckNum_Choice_Enum int32

const (
	PatternFlowTcpAckNum_Choice_unspecified PatternFlowTcpAckNum_Choice_Enum = 0
	PatternFlowTcpAckNum_Choice_value       PatternFlowTcpAckNum_Choice_Enum = 2
	PatternFlowTcpAckNum_Choice_values      PatternFlowTcpAckNum_Choice_Enum = 3
	PatternFlowTcpAckNum_Choice_increment   PatternFlowTcpAckNum_Choice_Enum = 4
	PatternFlowTcpAckNum_Choice_decrement   PatternFlowTcpAckNum_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpAckNum_Choice_Enum.
var (
	PatternFlowTcpAckNum_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpAckNum_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpAckNum_Choice_Enum) Enum() *PatternFlowTcpAckNum_Choice_Enum {
	p := new(PatternFlowTcpAckNum_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpAckNum_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpAckNum_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[193].Descriptor()
}

func (PatternFlowTcpAckNum_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[193]
}

func (x PatternFlowTcpAckNum_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpAckNum_Choice_Enum.Descriptor instead.
func (PatternFlowTcpAckNum_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{397, 0, 0}
}

type PatternFlowTcpDataOffset_Choice_Enum int32

const (
	PatternFlowTcpDataOffset_Choice_unspecified PatternFlowTcpDataOffset_Choice_Enum = 0
	PatternFlowTcpDataOffset_Choice_value       PatternFlowTcpDataOffset_Choice_Enum = 2
	PatternFlowTcpDataOffset_Choice_values      PatternFlowTcpDataOffset_Choice_Enum = 3
	PatternFlowTcpDataOffset_Choice_increment   PatternFlowTcpDataOffset_Choice_Enum = 4
	PatternFlowTcpDataOffset_Choice_decrement   PatternFlowTcpDataOffset_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpDataOffset_Choice_Enum.
var (
	PatternFlowTcpDataOffset_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpDataOffset_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpDataOffset_Choice_Enum) Enum() *PatternFlowTcpDataOffset_Choice_Enum {
	p := new(PatternFlowTcpDataOffset_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpDataOffset_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpDataOffset_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[194].Descriptor()
}

func (PatternFlowTcpDataOffset_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[194]
}

func (x PatternFlowTcpDataOffset_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpDataOffset_Choice_Enum.Descriptor instead.
func (PatternFlowTcpDataOffset_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{399, 0, 0}
}

type PatternFlowTcpEcnNs_Choice_Enum int32

const (
	PatternFlowTcpEcnNs_Choice_unspecified PatternFlowTcpEcnNs_Choice_Enum = 0
	PatternFlowTcpEcnNs_Choice_value       PatternFlowTcpEcnNs_Choice_Enum = 2
	PatternFlowTcpEcnNs_Choice_values      PatternFlowTcpEcnNs_Choice_Enum = 3
	PatternFlowTcpEcnNs_Choice_increment   PatternFlowTcpEcnNs_Choice_Enum = 4
	PatternFlowTcpEcnNs_Choice_decrement   PatternFlowTcpEcnNs_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpEcnNs_Choice_Enum.
var (
	PatternFlowTcpEcnNs_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpEcnNs_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpEcnNs_Choice_Enum) Enum() *PatternFlowTcpEcnNs_Choice_Enum {
	p := new(PatternFlowTcpEcnNs_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpEcnNs_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpEcnNs_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[195].Descriptor()
}

func (PatternFlowTcpEcnNs_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[195]
}

func (x PatternFlowTcpEcnNs_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpEcnNs_Choice_Enum.Descriptor instead.
func (PatternFlowTcpEcnNs_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{401, 0, 0}
}

type PatternFlowTcpEcnCwr_Choice_Enum int32

const (
	PatternFlowTcpEcnCwr_Choice_unspecified PatternFlowTcpEcnCwr_Choice_Enum = 0
	PatternFlowTcpEcnCwr_Choice_value       PatternFlowTcpEcnCwr_Choice_Enum = 2
	PatternFlowTcpEcnCwr_Choice_values      PatternFlowTcpEcnCwr_Choice_Enum = 3
	PatternFlowTcpEcnCwr_Choice_increment   PatternFlowTcpEcnCwr_Choice_Enum = 4
	PatternFlowTcpEcnCwr_Choice_decrement   PatternFlowTcpEcnCwr_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpEcnCwr_Choice_Enum.
var (
	PatternFlowTcpEcnCwr_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpEcnCwr_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpEcnCwr_Choice_Enum) Enum() *PatternFlowTcpEcnCwr_Choice_Enum {
	p := new(PatternFlowTcpEcnCwr_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpEcnCwr_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpEcnCwr_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[196].Descriptor()
}

func (PatternFlowTcpEcnCwr_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[196]
}

func (x PatternFlowTcpEcnCwr_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpEcnCwr_Choice_Enum.Descriptor instead.
func (PatternFlowTcpEcnCwr_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{403, 0, 0}
}

type PatternFlowTcpEcnEcho_Choice_Enum int32

const (
	PatternFlowTcpEcnEcho_Choice_unspecified PatternFlowTcpEcnEcho_Choice_Enum = 0
	PatternFlowTcpEcnEcho_Choice_value       PatternFlowTcpEcnEcho_Choice_Enum = 2
	PatternFlowTcpEcnEcho_Choice_values      PatternFlowTcpEcnEcho_Choice_Enum = 3
	PatternFlowTcpEcnEcho_Choice_increment   PatternFlowTcpEcnEcho_Choice_Enum = 4
	PatternFlowTcpEcnEcho_Choice_decrement   PatternFlowTcpEcnEcho_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpEcnEcho_Choice_Enum.
var (
	PatternFlowTcpEcnEcho_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpEcnEcho_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpEcnEcho_Choice_Enum) Enum() *PatternFlowTcpEcnEcho_Choice_Enum {
	p := new(PatternFlowTcpEcnEcho_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpEcnEcho_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpEcnEcho_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[197].Descriptor()
}

func (PatternFlowTcpEcnEcho_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[197]
}

func (x PatternFlowTcpEcnEcho_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpEcnEcho_Choice_Enum.Descriptor instead.
func (PatternFlowTcpEcnEcho_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{405, 0, 0}
}

type PatternFlowTcpCtlUrg_Choice_Enum int32

const (
	PatternFlowTcpCtlUrg_Choice_unspecified PatternFlowTcpCtlUrg_Choice_Enum = 0
	PatternFlowTcpCtlUrg_Choice_value       PatternFlowTcpCtlUrg_Choice_Enum = 2
	PatternFlowTcpCtlUrg_Choice_values      PatternFlowTcpCtlUrg_Choice_Enum = 3
	PatternFlowTcpCtlUrg_Choice_increment   PatternFlowTcpCtlUrg_Choice_Enum = 4
	PatternFlowTcpCtlUrg_Choice_decrement   PatternFlowTcpCtlUrg_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpCtlUrg_Choice_Enum.
var (
	PatternFlowTcpCtlUrg_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpCtlUrg_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpCtlUrg_Choice_Enum) Enum() *PatternFlowTcpCtlUrg_Choice_Enum {
	p := new(PatternFlowTcpCtlUrg_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpCtlUrg_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpCtlUrg_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[198].Descriptor()
}

func (PatternFlowTcpCtlUrg_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[198]
}

func (x PatternFlowTcpCtlUrg_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpCtlUrg_Choice_Enum.Descriptor instead.
func (PatternFlowTcpCtlUrg_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{407, 0, 0}
}

type PatternFlowTcpCtlAck_Choice_Enum int32

const (
	PatternFlowTcpCtlAck_Choice_unspecified PatternFlowTcpCtlAck_Choice_Enum = 0
	PatternFlowTcpCtlAck_Choice_value       PatternFlowTcpCtlAck_Choice_Enum = 2
	PatternFlowTcpCtlAck_Choice_values      PatternFlowTcpCtlAck_Choice_Enum = 3
	PatternFlowTcpCtlAck_Choice_increment   PatternFlowTcpCtlAck_Choice_Enum = 4
	PatternFlowTcpCtlAck_Choice_decrement   PatternFlowTcpCtlAck_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpCtlAck_Choice_Enum.
var (
	PatternFlowTcpCtlAck_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpCtlAck_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpCtlAck_Choice_Enum) Enum() *PatternFlowTcpCtlAck_Choice_Enum {
	p := new(PatternFlowTcpCtlAck_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpCtlAck_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpCtlAck_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[199].Descriptor()
}

func (PatternFlowTcpCtlAck_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[199]
}

func (x PatternFlowTcpCtlAck_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpCtlAck_Choice_Enum.Descriptor instead.
func (PatternFlowTcpCtlAck_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{409, 0, 0}
}

type PatternFlowTcpCtlPsh_Choice_Enum int32

const (
	PatternFlowTcpCtlPsh_Choice_unspecified PatternFlowTcpCtlPsh_Choice_Enum = 0
	PatternFlowTcpCtlPsh_Choice_value       PatternFlowTcpCtlPsh_Choice_Enum = 2
	PatternFlowTcpCtlPsh_Choice_values      PatternFlowTcpCtlPsh_Choice_Enum = 3
	PatternFlowTcpCtlPsh_Choice_increment   PatternFlowTcpCtlPsh_Choice_Enum = 4
	PatternFlowTcpCtlPsh_Choice_decrement   PatternFlowTcpCtlPsh_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpCtlPsh_Choice_Enum.
var (
	PatternFlowTcpCtlPsh_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpCtlPsh_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpCtlPsh_Choice_Enum) Enum() *PatternFlowTcpCtlPsh_Choice_Enum {
	p := new(PatternFlowTcpCtlPsh_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpCtlPsh_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpCtlPsh_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[200].Descriptor()
}

func (PatternFlowTcpCtlPsh_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[200]
}

func (x PatternFlowTcpCtlPsh_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpCtlPsh_Choice_Enum.Descriptor instead.
func (PatternFlowTcpCtlPsh_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{411, 0, 0}
}

type PatternFlowTcpCtlRst_Choice_Enum int32

const (
	PatternFlowTcpCtlRst_Choice_unspecified PatternFlowTcpCtlRst_Choice_Enum = 0
	PatternFlowTcpCtlRst_Choice_value       PatternFlowTcpCtlRst_Choice_Enum = 2
	PatternFlowTcpCtlRst_Choice_values      PatternFlowTcpCtlRst_Choice_Enum = 3
	PatternFlowTcpCtlRst_Choice_increment   PatternFlowTcpCtlRst_Choice_Enum = 4
	PatternFlowTcpCtlRst_Choice_decrement   PatternFlowTcpCtlRst_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpCtlRst_Choice_Enum.
var (
	PatternFlowTcpCtlRst_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpCtlRst_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpCtlRst_Choice_Enum) Enum() *PatternFlowTcpCtlRst_Choice_Enum {
	p := new(PatternFlowTcpCtlRst_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpCtlRst_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpCtlRst_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[201].Descriptor()
}

func (PatternFlowTcpCtlRst_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[201]
}

func (x PatternFlowTcpCtlRst_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpCtlRst_Choice_Enum.Descriptor instead.
func (PatternFlowTcpCtlRst_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{413, 0, 0}
}

type PatternFlowTcpCtlSyn_Choice_Enum int32

const (
	PatternFlowTcpCtlSyn_Choice_unspecified PatternFlowTcpCtlSyn_Choice_Enum = 0
	PatternFlowTcpCtlSyn_Choice_value       PatternFlowTcpCtlSyn_Choice_Enum = 2
	PatternFlowTcpCtlSyn_Choice_values      PatternFlowTcpCtlSyn_Choice_Enum = 3
	PatternFlowTcpCtlSyn_Choice_increment   PatternFlowTcpCtlSyn_Choice_Enum = 4
	PatternFlowTcpCtlSyn_Choice_decrement   PatternFlowTcpCtlSyn_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpCtlSyn_Choice_Enum.
var (
	PatternFlowTcpCtlSyn_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpCtlSyn_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpCtlSyn_Choice_Enum) Enum() *PatternFlowTcpCtlSyn_Choice_Enum {
	p := new(PatternFlowTcpCtlSyn_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpCtlSyn_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpCtlSyn_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[202].Descriptor()
}

func (PatternFlowTcpCtlSyn_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[202]
}

func (x PatternFlowTcpCtlSyn_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpCtlSyn_Choice_Enum.Descriptor instead.
func (PatternFlowTcpCtlSyn_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{415, 0, 0}
}

type PatternFlowTcpCtlFin_Choice_Enum int32

const (
	PatternFlowTcpCtlFin_Choice_unspecified PatternFlowTcpCtlFin_Choice_Enum = 0
	PatternFlowTcpCtlFin_Choice_value       PatternFlowTcpCtlFin_Choice_Enum = 2
	PatternFlowTcpCtlFin_Choice_values      PatternFlowTcpCtlFin_Choice_Enum = 3
	PatternFlowTcpCtlFin_Choice_increment   PatternFlowTcpCtlFin_Choice_Enum = 4
	PatternFlowTcpCtlFin_Choice_decrement   PatternFlowTcpCtlFin_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpCtlFin_Choice_Enum.
var (
	PatternFlowTcpCtlFin_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpCtlFin_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpCtlFin_Choice_Enum) Enum() *PatternFlowTcpCtlFin_Choice_Enum {
	p := new(PatternFlowTcpCtlFin_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpCtlFin_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpCtlFin_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[203].Descriptor()
}

func (PatternFlowTcpCtlFin_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[203]
}

func (x PatternFlowTcpCtlFin_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpCtlFin_Choice_Enum.Descriptor instead.
func (PatternFlowTcpCtlFin_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{417, 0, 0}
}

type PatternFlowTcpWindow_Choice_Enum int32

const (
	PatternFlowTcpWindow_Choice_unspecified PatternFlowTcpWindow_Choice_Enum = 0
	PatternFlowTcpWindow_Choice_value       PatternFlowTcpWindow_Choice_Enum = 2
	PatternFlowTcpWindow_Choice_values      PatternFlowTcpWindow_Choice_Enum = 3
	PatternFlowTcpWindow_Choice_increment   PatternFlowTcpWindow_Choice_Enum = 4
	PatternFlowTcpWindow_Choice_decrement   PatternFlowTcpWindow_Choice_Enum = 5
)

// Enum value maps for PatternFlowTcpWindow_Choice_Enum.
var (
	PatternFlowTcpWindow_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowTcpWindow_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowTcpWindow_Choice_Enum) Enum() *PatternFlowTcpWindow_Choice_Enum {
	p := new(PatternFlowTcpWindow_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowTcpWindow_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowTcpWindow_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[204].Descriptor()
}

func (PatternFlowTcpWindow_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[204]
}

func (x PatternFlowTcpWindow_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowTcpWindow_Choice_Enum.Descriptor instead.
func (PatternFlowTcpWindow_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{419, 0, 0}
}

type PatternFlowUdpSrcPort_Choice_Enum int32

const (
	PatternFlowUdpSrcPort_Choice_unspecified PatternFlowUdpSrcPort_Choice_Enum = 0
	PatternFlowUdpSrcPort_Choice_value       PatternFlowUdpSrcPort_Choice_Enum = 2
	PatternFlowUdpSrcPort_Choice_values      PatternFlowUdpSrcPort_Choice_Enum = 3
	PatternFlowUdpSrcPort_Choice_increment   PatternFlowUdpSrcPort_Choice_Enum = 4
	PatternFlowUdpSrcPort_Choice_decrement   PatternFlowUdpSrcPort_Choice_Enum = 5
)

// Enum value maps for PatternFlowUdpSrcPort_Choice_Enum.
var (
	PatternFlowUdpSrcPort_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowUdpSrcPort_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowUdpSrcPort_Choice_Enum) Enum() *PatternFlowUdpSrcPort_Choice_Enum {
	p := new(PatternFlowUdpSrcPort_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowUdpSrcPort_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowUdpSrcPort_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[205].Descriptor()
}

func (PatternFlowUdpSrcPort_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[205]
}

func (x PatternFlowUdpSrcPort_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowUdpSrcPort_Choice_Enum.Descriptor instead.
func (PatternFlowUdpSrcPort_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{421, 0, 0}
}

type PatternFlowUdpDstPort_Choice_Enum int32

const (
	PatternFlowUdpDstPort_Choice_unspecified PatternFlowUdpDstPort_Choice_Enum = 0
	PatternFlowUdpDstPort_Choice_value       PatternFlowUdpDstPort_Choice_Enum = 2
	PatternFlowUdpDstPort_Choice_values      PatternFlowUdpDstPort_Choice_Enum = 3
	PatternFlowUdpDstPort_Choice_increment   PatternFlowUdpDstPort_Choice_Enum = 4
	PatternFlowUdpDstPort_Choice_decrement   PatternFlowUdpDstPort_Choice_Enum = 5
)

// Enum value maps for PatternFlowUdpDstPort_Choice_Enum.
var (
	PatternFlowUdpDstPort_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowUdpDstPort_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowUdpDstPort_Choice_Enum) Enum() *PatternFlowUdpDstPort_Choice_Enum {
	p := new(PatternFlowUdpDstPort_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowUdpDstPort_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowUdpDstPort_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[206].Descriptor()
}

func (PatternFlowUdpDstPort_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[206]
}

func (x PatternFlowUdpDstPort_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowUdpDstPort_Choice_Enum.Descriptor instead.
func (PatternFlowUdpDstPort_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{423, 0, 0}
}

type PatternFlowUdpLength_Choice_Enum int32

const (
	PatternFlowUdpLength_Choice_unspecified PatternFlowUdpLength_Choice_Enum = 0
	PatternFlowUdpLength_Choice_value       PatternFlowUdpLength_Choice_Enum = 2
	PatternFlowUdpLength_Choice_values      PatternFlowUdpLength_Choice_Enum = 3
	PatternFlowUdpLength_Choice_increment   PatternFlowUdpLength_Choice_Enum = 4
	PatternFlowUdpLength_Choice_decrement   PatternFlowUdpLength_Choice_Enum = 5
)

// Enum value maps for PatternFlowUdpLength_Choice_Enum.
var (
	PatternFlowUdpLength_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowUdpLength_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowUdpLength_Choice_Enum) Enum() *PatternFlowUdpLength_Choice_Enum {
	p := new(PatternFlowUdpLength_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowUdpLength_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowUdpLength_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[207].Descriptor()
}

func (PatternFlowUdpLength_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[207]
}

func (x PatternFlowUdpLength_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowUdpLength_Choice_Enum.Descriptor instead.
func (PatternFlowUdpLength_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{425, 0, 0}
}

type PatternFlowUdpChecksum_Choice_Enum int32

const (
	PatternFlowUdpChecksum_Choice_unspecified PatternFlowUdpChecksum_Choice_Enum = 0
	PatternFlowUdpChecksum_Choice_generated   PatternFlowUdpChecksum_Choice_Enum = 1
	PatternFlowUdpChecksum_Choice_custom      PatternFlowUdpChecksum_Choice_Enum = 2
)

// Enum value maps for PatternFlowUdpChecksum_Choice_Enum.
var (
	PatternFlowUdpChecksum_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "generated",
		2: "custom",
	}
	PatternFlowUdpChecksum_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"generated":   1,
		"custom":      2,
	}
)

func (x PatternFlowUdpChecksum_Choice_Enum) Enum() *PatternFlowUdpChecksum_Choice_Enum {
	p := new(PatternFlowUdpChecksum_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowUdpChecksum_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowUdpChecksum_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[208].Descriptor()
}

func (PatternFlowUdpChecksum_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[208]
}

func (x PatternFlowUdpChecksum_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowUdpChecksum_Choice_Enum.Descriptor instead.
func (PatternFlowUdpChecksum_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{426, 0, 0}
}

type PatternFlowUdpChecksum_Generated_Enum int32

const (
	PatternFlowUdpChecksum_Generated_unspecified PatternFlowUdpChecksum_Generated_Enum = 0
	PatternFlowUdpChecksum_Generated_good        PatternFlowUdpChecksum_Generated_Enum = 1
	PatternFlowUdpChecksum_Generated_bad         PatternFlowUdpChecksum_Generated_Enum = 2
)

// Enum value maps for PatternFlowUdpChecksum_Generated_Enum.
var (
	PatternFlowUdpChecksum_Generated_Enum_name = map[int32]string{
		0: "unspecified",
		1: "good",
		2: "bad",
	}
	PatternFlowUdpChecksum_Generated_Enum_value = map[string]int32{
		"unspecified": 0,
		"good":        1,
		"bad":         2,
	}
)

func (x PatternFlowUdpChecksum_Generated_Enum) Enum() *PatternFlowUdpChecksum_Generated_Enum {
	p := new(PatternFlowUdpChecksum_Generated_Enum)
	*p = x
	return p
}

func (x PatternFlowUdpChecksum_Generated_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowUdpChecksum_Generated_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[209].Descriptor()
}

func (PatternFlowUdpChecksum_Generated_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[209]
}

func (x PatternFlowUdpChecksum_Generated_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowUdpChecksum_Generated_Enum.Descriptor instead.
func (PatternFlowUdpChecksum_Generated_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{426, 1, 0}
}

type PatternFlowGreChecksumPresent_Choice_Enum int32

const (
	PatternFlowGreChecksumPresent_Choice_unspecified PatternFlowGreChecksumPresent_Choice_Enum = 0
	PatternFlowGreChecksumPresent_Choice_value       PatternFlowGreChecksumPresent_Choice_Enum = 2
	PatternFlowGreChecksumPresent_Choice_values      PatternFlowGreChecksumPresent_Choice_Enum = 3
	PatternFlowGreChecksumPresent_Choice_increment   PatternFlowGreChecksumPresent_Choice_Enum = 4
	PatternFlowGreChecksumPresent_Choice_decrement   PatternFlowGreChecksumPresent_Choice_Enum = 5
)

// Enum value maps for PatternFlowGreChecksumPresent_Choice_Enum.
var (
	PatternFlowGreChecksumPresent_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGreChecksumPresent_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGreChecksumPresent_Choice_Enum) Enum() *PatternFlowGreChecksumPresent_Choice_Enum {
	p := new(PatternFlowGreChecksumPresent_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGreChecksumPresent_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGreChecksumPresent_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[210].Descriptor()
}

func (PatternFlowGreChecksumPresent_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[210]
}

func (x PatternFlowGreChecksumPresent_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGreChecksumPresent_Choice_Enum.Descriptor instead.
func (PatternFlowGreChecksumPresent_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{428, 0, 0}
}

type PatternFlowGreReserved0_Choice_Enum int32

const (
	PatternFlowGreReserved0_Choice_unspecified PatternFlowGreReserved0_Choice_Enum = 0
	PatternFlowGreReserved0_Choice_value       PatternFlowGreReserved0_Choice_Enum = 2
	PatternFlowGreReserved0_Choice_values      PatternFlowGreReserved0_Choice_Enum = 3
	PatternFlowGreReserved0_Choice_increment   PatternFlowGreReserved0_Choice_Enum = 4
	PatternFlowGreReserved0_Choice_decrement   PatternFlowGreReserved0_Choice_Enum = 5
)

// Enum value maps for PatternFlowGreReserved0_Choice_Enum.
var (
	PatternFlowGreReserved0_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGreReserved0_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGreReserved0_Choice_Enum) Enum() *PatternFlowGreReserved0_Choice_Enum {
	p := new(PatternFlowGreReserved0_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGreReserved0_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGreReserved0_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[211].Descriptor()
}

func (PatternFlowGreReserved0_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[211]
}

func (x PatternFlowGreReserved0_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGreReserved0_Choice_Enum.Descriptor instead.
func (PatternFlowGreReserved0_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{430, 0, 0}
}

type PatternFlowGreVersion_Choice_Enum int32

const (
	PatternFlowGreVersion_Choice_unspecified PatternFlowGreVersion_Choice_Enum = 0
	PatternFlowGreVersion_Choice_value       PatternFlowGreVersion_Choice_Enum = 2
	PatternFlowGreVersion_Choice_values      PatternFlowGreVersion_Choice_Enum = 3
	PatternFlowGreVersion_Choice_increment   PatternFlowGreVersion_Choice_Enum = 4
	PatternFlowGreVersion_Choice_decrement   PatternFlowGreVersion_Choice_Enum = 5
)

// Enum value maps for PatternFlowGreVersion_Choice_Enum.
var (
	PatternFlowGreVersion_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGreVersion_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGreVersion_Choice_Enum) Enum() *PatternFlowGreVersion_Choice_Enum {
	p := new(PatternFlowGreVersion_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGreVersion_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGreVersion_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[212].Descriptor()
}

func (PatternFlowGreVersion_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[212]
}

func (x PatternFlowGreVersion_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGreVersion_Choice_Enum.Descriptor instead.
func (PatternFlowGreVersion_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{432, 0, 0}
}

type PatternFlowGreProtocol_Choice_Enum int32

const (
	PatternFlowGreProtocol_Choice_unspecified PatternFlowGreProtocol_Choice_Enum = 0
	PatternFlowGreProtocol_Choice_value       PatternFlowGreProtocol_Choice_Enum = 2
	PatternFlowGreProtocol_Choice_values      PatternFlowGreProtocol_Choice_Enum = 3
	PatternFlowGreProtocol_Choice_increment   PatternFlowGreProtocol_Choice_Enum = 4
	PatternFlowGreProtocol_Choice_decrement   PatternFlowGreProtocol_Choice_Enum = 5
)

// Enum value maps for PatternFlowGreProtocol_Choice_Enum.
var (
	PatternFlowGreProtocol_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGreProtocol_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGreProtocol_Choice_Enum) Enum() *PatternFlowGreProtocol_Choice_Enum {
	p := new(PatternFlowGreProtocol_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGreProtocol_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGreProtocol_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[213].Descriptor()
}

func (PatternFlowGreProtocol_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[213]
}

func (x PatternFlowGreProtocol_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGreProtocol_Choice_Enum.Descriptor instead.
func (PatternFlowGreProtocol_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{434, 0, 0}
}

type PatternFlowGreChecksum_Choice_Enum int32

const (
	PatternFlowGreChecksum_Choice_unspecified PatternFlowGreChecksum_Choice_Enum = 0
	PatternFlowGreChecksum_Choice_generated   PatternFlowGreChecksum_Choice_Enum = 1
	PatternFlowGreChecksum_Choice_custom      PatternFlowGreChecksum_Choice_Enum = 2
)

// Enum value maps for PatternFlowGreChecksum_Choice_Enum.
var (
	PatternFlowGreChecksum_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "generated",
		2: "custom",
	}
	PatternFlowGreChecksum_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"generated":   1,
		"custom":      2,
	}
)

func (x PatternFlowGreChecksum_Choice_Enum) Enum() *PatternFlowGreChecksum_Choice_Enum {
	p := new(PatternFlowGreChecksum_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGreChecksum_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGreChecksum_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[214].Descriptor()
}

func (PatternFlowGreChecksum_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[214]
}

func (x PatternFlowGreChecksum_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGreChecksum_Choice_Enum.Descriptor instead.
func (PatternFlowGreChecksum_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{435, 0, 0}
}

type PatternFlowGreChecksum_Generated_Enum int32

const (
	PatternFlowGreChecksum_Generated_unspecified PatternFlowGreChecksum_Generated_Enum = 0
	PatternFlowGreChecksum_Generated_good        PatternFlowGreChecksum_Generated_Enum = 1
	PatternFlowGreChecksum_Generated_bad         PatternFlowGreChecksum_Generated_Enum = 2
)

// Enum value maps for PatternFlowGreChecksum_Generated_Enum.
var (
	PatternFlowGreChecksum_Generated_Enum_name = map[int32]string{
		0: "unspecified",
		1: "good",
		2: "bad",
	}
	PatternFlowGreChecksum_Generated_Enum_value = map[string]int32{
		"unspecified": 0,
		"good":        1,
		"bad":         2,
	}
)

func (x PatternFlowGreChecksum_Generated_Enum) Enum() *PatternFlowGreChecksum_Generated_Enum {
	p := new(PatternFlowGreChecksum_Generated_Enum)
	*p = x
	return p
}

func (x PatternFlowGreChecksum_Generated_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGreChecksum_Generated_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[215].Descriptor()
}

func (PatternFlowGreChecksum_Generated_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[215]
}

func (x PatternFlowGreChecksum_Generated_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGreChecksum_Generated_Enum.Descriptor instead.
func (PatternFlowGreChecksum_Generated_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{435, 1, 0}
}

type PatternFlowGreReserved1_Choice_Enum int32

const (
	PatternFlowGreReserved1_Choice_unspecified PatternFlowGreReserved1_Choice_Enum = 0
	PatternFlowGreReserved1_Choice_value       PatternFlowGreReserved1_Choice_Enum = 2
	PatternFlowGreReserved1_Choice_values      PatternFlowGreReserved1_Choice_Enum = 3
	PatternFlowGreReserved1_Choice_increment   PatternFlowGreReserved1_Choice_Enum = 4
	PatternFlowGreReserved1_Choice_decrement   PatternFlowGreReserved1_Choice_Enum = 5
)

// Enum value maps for PatternFlowGreReserved1_Choice_Enum.
var (
	PatternFlowGreReserved1_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGreReserved1_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGreReserved1_Choice_Enum) Enum() *PatternFlowGreReserved1_Choice_Enum {
	p := new(PatternFlowGreReserved1_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGreReserved1_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGreReserved1_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[216].Descriptor()
}

func (PatternFlowGreReserved1_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[216]
}

func (x PatternFlowGreReserved1_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGreReserved1_Choice_Enum.Descriptor instead.
func (PatternFlowGreReserved1_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{437, 0, 0}
}

type PatternFlowGtpv1Version_Choice_Enum int32

const (
	PatternFlowGtpv1Version_Choice_unspecified PatternFlowGtpv1Version_Choice_Enum = 0
	PatternFlowGtpv1Version_Choice_value       PatternFlowGtpv1Version_Choice_Enum = 2
	PatternFlowGtpv1Version_Choice_values      PatternFlowGtpv1Version_Choice_Enum = 3
	PatternFlowGtpv1Version_Choice_increment   PatternFlowGtpv1Version_Choice_Enum = 4
	PatternFlowGtpv1Version_Choice_decrement   PatternFlowGtpv1Version_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1Version_Choice_Enum.
var (
	PatternFlowGtpv1Version_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1Version_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1Version_Choice_Enum) Enum() *PatternFlowGtpv1Version_Choice_Enum {
	p := new(PatternFlowGtpv1Version_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1Version_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1Version_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[217].Descriptor()
}

func (PatternFlowGtpv1Version_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[217]
}

func (x PatternFlowGtpv1Version_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1Version_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1Version_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{439, 0, 0}
}

type PatternFlowGtpv1ProtocolType_Choice_Enum int32

const (
	PatternFlowGtpv1ProtocolType_Choice_unspecified PatternFlowGtpv1ProtocolType_Choice_Enum = 0
	PatternFlowGtpv1ProtocolType_Choice_value       PatternFlowGtpv1ProtocolType_Choice_Enum = 2
	PatternFlowGtpv1ProtocolType_Choice_values      PatternFlowGtpv1ProtocolType_Choice_Enum = 3
	PatternFlowGtpv1ProtocolType_Choice_increment   PatternFlowGtpv1ProtocolType_Choice_Enum = 4
	PatternFlowGtpv1ProtocolType_Choice_decrement   PatternFlowGtpv1ProtocolType_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1ProtocolType_Choice_Enum.
var (
	PatternFlowGtpv1ProtocolType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1ProtocolType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1ProtocolType_Choice_Enum) Enum() *PatternFlowGtpv1ProtocolType_Choice_Enum {
	p := new(PatternFlowGtpv1ProtocolType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1ProtocolType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1ProtocolType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[218].Descriptor()
}

func (PatternFlowGtpv1ProtocolType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[218]
}

func (x PatternFlowGtpv1ProtocolType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1ProtocolType_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1ProtocolType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{441, 0, 0}
}

type PatternFlowGtpv1Reserved_Choice_Enum int32

const (
	PatternFlowGtpv1Reserved_Choice_unspecified PatternFlowGtpv1Reserved_Choice_Enum = 0
	PatternFlowGtpv1Reserved_Choice_value       PatternFlowGtpv1Reserved_Choice_Enum = 2
	PatternFlowGtpv1Reserved_Choice_values      PatternFlowGtpv1Reserved_Choice_Enum = 3
	PatternFlowGtpv1Reserved_Choice_increment   PatternFlowGtpv1Reserved_Choice_Enum = 4
	PatternFlowGtpv1Reserved_Choice_decrement   PatternFlowGtpv1Reserved_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1Reserved_Choice_Enum.
var (
	PatternFlowGtpv1Reserved_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1Reserved_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1Reserved_Choice_Enum) Enum() *PatternFlowGtpv1Reserved_Choice_Enum {
	p := new(PatternFlowGtpv1Reserved_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1Reserved_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1Reserved_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[219].Descriptor()
}

func (PatternFlowGtpv1Reserved_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[219]
}

func (x PatternFlowGtpv1Reserved_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1Reserved_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1Reserved_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{443, 0, 0}
}

type PatternFlowGtpv1EFlag_Choice_Enum int32

const (
	PatternFlowGtpv1EFlag_Choice_unspecified PatternFlowGtpv1EFlag_Choice_Enum = 0
	PatternFlowGtpv1EFlag_Choice_value       PatternFlowGtpv1EFlag_Choice_Enum = 2
	PatternFlowGtpv1EFlag_Choice_values      PatternFlowGtpv1EFlag_Choice_Enum = 3
	PatternFlowGtpv1EFlag_Choice_increment   PatternFlowGtpv1EFlag_Choice_Enum = 4
	PatternFlowGtpv1EFlag_Choice_decrement   PatternFlowGtpv1EFlag_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1EFlag_Choice_Enum.
var (
	PatternFlowGtpv1EFlag_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1EFlag_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1EFlag_Choice_Enum) Enum() *PatternFlowGtpv1EFlag_Choice_Enum {
	p := new(PatternFlowGtpv1EFlag_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1EFlag_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1EFlag_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[220].Descriptor()
}

func (PatternFlowGtpv1EFlag_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[220]
}

func (x PatternFlowGtpv1EFlag_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1EFlag_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1EFlag_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{445, 0, 0}
}

type PatternFlowGtpv1SFlag_Choice_Enum int32

const (
	PatternFlowGtpv1SFlag_Choice_unspecified PatternFlowGtpv1SFlag_Choice_Enum = 0
	PatternFlowGtpv1SFlag_Choice_value       PatternFlowGtpv1SFlag_Choice_Enum = 2
	PatternFlowGtpv1SFlag_Choice_values      PatternFlowGtpv1SFlag_Choice_Enum = 3
	PatternFlowGtpv1SFlag_Choice_increment   PatternFlowGtpv1SFlag_Choice_Enum = 4
	PatternFlowGtpv1SFlag_Choice_decrement   PatternFlowGtpv1SFlag_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1SFlag_Choice_Enum.
var (
	PatternFlowGtpv1SFlag_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1SFlag_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1SFlag_Choice_Enum) Enum() *PatternFlowGtpv1SFlag_Choice_Enum {
	p := new(PatternFlowGtpv1SFlag_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1SFlag_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1SFlag_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[221].Descriptor()
}

func (PatternFlowGtpv1SFlag_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[221]
}

func (x PatternFlowGtpv1SFlag_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1SFlag_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1SFlag_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{447, 0, 0}
}

type PatternFlowGtpv1PnFlag_Choice_Enum int32

const (
	PatternFlowGtpv1PnFlag_Choice_unspecified PatternFlowGtpv1PnFlag_Choice_Enum = 0
	PatternFlowGtpv1PnFlag_Choice_value       PatternFlowGtpv1PnFlag_Choice_Enum = 2
	PatternFlowGtpv1PnFlag_Choice_values      PatternFlowGtpv1PnFlag_Choice_Enum = 3
	PatternFlowGtpv1PnFlag_Choice_increment   PatternFlowGtpv1PnFlag_Choice_Enum = 4
	PatternFlowGtpv1PnFlag_Choice_decrement   PatternFlowGtpv1PnFlag_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1PnFlag_Choice_Enum.
var (
	PatternFlowGtpv1PnFlag_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1PnFlag_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1PnFlag_Choice_Enum) Enum() *PatternFlowGtpv1PnFlag_Choice_Enum {
	p := new(PatternFlowGtpv1PnFlag_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1PnFlag_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1PnFlag_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[222].Descriptor()
}

func (PatternFlowGtpv1PnFlag_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[222]
}

func (x PatternFlowGtpv1PnFlag_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1PnFlag_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1PnFlag_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{449, 0, 0}
}

type PatternFlowGtpv1MessageType_Choice_Enum int32

const (
	PatternFlowGtpv1MessageType_Choice_unspecified PatternFlowGtpv1MessageType_Choice_Enum = 0
	PatternFlowGtpv1MessageType_Choice_value       PatternFlowGtpv1MessageType_Choice_Enum = 2
	PatternFlowGtpv1MessageType_Choice_values      PatternFlowGtpv1MessageType_Choice_Enum = 3
	PatternFlowGtpv1MessageType_Choice_increment   PatternFlowGtpv1MessageType_Choice_Enum = 4
	PatternFlowGtpv1MessageType_Choice_decrement   PatternFlowGtpv1MessageType_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1MessageType_Choice_Enum.
var (
	PatternFlowGtpv1MessageType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1MessageType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1MessageType_Choice_Enum) Enum() *PatternFlowGtpv1MessageType_Choice_Enum {
	p := new(PatternFlowGtpv1MessageType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1MessageType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1MessageType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[223].Descriptor()
}

func (PatternFlowGtpv1MessageType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[223]
}

func (x PatternFlowGtpv1MessageType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1MessageType_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1MessageType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{451, 0, 0}
}

type PatternFlowGtpv1MessageLength_Choice_Enum int32

const (
	PatternFlowGtpv1MessageLength_Choice_unspecified PatternFlowGtpv1MessageLength_Choice_Enum = 0
	PatternFlowGtpv1MessageLength_Choice_value       PatternFlowGtpv1MessageLength_Choice_Enum = 2
	PatternFlowGtpv1MessageLength_Choice_values      PatternFlowGtpv1MessageLength_Choice_Enum = 3
	PatternFlowGtpv1MessageLength_Choice_increment   PatternFlowGtpv1MessageLength_Choice_Enum = 4
	PatternFlowGtpv1MessageLength_Choice_decrement   PatternFlowGtpv1MessageLength_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1MessageLength_Choice_Enum.
var (
	PatternFlowGtpv1MessageLength_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1MessageLength_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1MessageLength_Choice_Enum) Enum() *PatternFlowGtpv1MessageLength_Choice_Enum {
	p := new(PatternFlowGtpv1MessageLength_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1MessageLength_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1MessageLength_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[224].Descriptor()
}

func (PatternFlowGtpv1MessageLength_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[224]
}

func (x PatternFlowGtpv1MessageLength_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1MessageLength_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1MessageLength_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{453, 0, 0}
}

type PatternFlowGtpv1Teid_Choice_Enum int32

const (
	PatternFlowGtpv1Teid_Choice_unspecified PatternFlowGtpv1Teid_Choice_Enum = 0
	PatternFlowGtpv1Teid_Choice_value       PatternFlowGtpv1Teid_Choice_Enum = 2
	PatternFlowGtpv1Teid_Choice_values      PatternFlowGtpv1Teid_Choice_Enum = 3
	PatternFlowGtpv1Teid_Choice_increment   PatternFlowGtpv1Teid_Choice_Enum = 4
	PatternFlowGtpv1Teid_Choice_decrement   PatternFlowGtpv1Teid_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1Teid_Choice_Enum.
var (
	PatternFlowGtpv1Teid_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1Teid_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1Teid_Choice_Enum) Enum() *PatternFlowGtpv1Teid_Choice_Enum {
	p := new(PatternFlowGtpv1Teid_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1Teid_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1Teid_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[225].Descriptor()
}

func (PatternFlowGtpv1Teid_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[225]
}

func (x PatternFlowGtpv1Teid_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1Teid_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1Teid_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{455, 0, 0}
}

type PatternFlowGtpv1SquenceNumber_Choice_Enum int32

const (
	PatternFlowGtpv1SquenceNumber_Choice_unspecified PatternFlowGtpv1SquenceNumber_Choice_Enum = 0
	PatternFlowGtpv1SquenceNumber_Choice_value       PatternFlowGtpv1SquenceNumber_Choice_Enum = 2
	PatternFlowGtpv1SquenceNumber_Choice_values      PatternFlowGtpv1SquenceNumber_Choice_Enum = 3
	PatternFlowGtpv1SquenceNumber_Choice_increment   PatternFlowGtpv1SquenceNumber_Choice_Enum = 4
	PatternFlowGtpv1SquenceNumber_Choice_decrement   PatternFlowGtpv1SquenceNumber_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1SquenceNumber_Choice_Enum.
var (
	PatternFlowGtpv1SquenceNumber_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1SquenceNumber_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1SquenceNumber_Choice_Enum) Enum() *PatternFlowGtpv1SquenceNumber_Choice_Enum {
	p := new(PatternFlowGtpv1SquenceNumber_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1SquenceNumber_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1SquenceNumber_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[226].Descriptor()
}

func (PatternFlowGtpv1SquenceNumber_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[226]
}

func (x PatternFlowGtpv1SquenceNumber_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1SquenceNumber_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1SquenceNumber_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{457, 0, 0}
}

type PatternFlowGtpv1NPduNumber_Choice_Enum int32

const (
	PatternFlowGtpv1NPduNumber_Choice_unspecified PatternFlowGtpv1NPduNumber_Choice_Enum = 0
	PatternFlowGtpv1NPduNumber_Choice_value       PatternFlowGtpv1NPduNumber_Choice_Enum = 2
	PatternFlowGtpv1NPduNumber_Choice_values      PatternFlowGtpv1NPduNumber_Choice_Enum = 3
	PatternFlowGtpv1NPduNumber_Choice_increment   PatternFlowGtpv1NPduNumber_Choice_Enum = 4
	PatternFlowGtpv1NPduNumber_Choice_decrement   PatternFlowGtpv1NPduNumber_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1NPduNumber_Choice_Enum.
var (
	PatternFlowGtpv1NPduNumber_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1NPduNumber_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1NPduNumber_Choice_Enum) Enum() *PatternFlowGtpv1NPduNumber_Choice_Enum {
	p := new(PatternFlowGtpv1NPduNumber_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1NPduNumber_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1NPduNumber_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[227].Descriptor()
}

func (PatternFlowGtpv1NPduNumber_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[227]
}

func (x PatternFlowGtpv1NPduNumber_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1NPduNumber_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1NPduNumber_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{459, 0, 0}
}

type PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum int32

const (
	PatternFlowGtpv1NextExtensionHeaderType_Choice_unspecified PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum = 0
	PatternFlowGtpv1NextExtensionHeaderType_Choice_value       PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum = 2
	PatternFlowGtpv1NextExtensionHeaderType_Choice_values      PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum = 3
	PatternFlowGtpv1NextExtensionHeaderType_Choice_increment   PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum = 4
	PatternFlowGtpv1NextExtensionHeaderType_Choice_decrement   PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum.
var (
	PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum) Enum() *PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum {
	p := new(PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[228].Descriptor()
}

func (PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[228]
}

func (x PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{461, 0, 0}
}

type PatternFlowGtpExtensionExtensionLength_Choice_Enum int32

const (
	PatternFlowGtpExtensionExtensionLength_Choice_unspecified PatternFlowGtpExtensionExtensionLength_Choice_Enum = 0
	PatternFlowGtpExtensionExtensionLength_Choice_value       PatternFlowGtpExtensionExtensionLength_Choice_Enum = 2
	PatternFlowGtpExtensionExtensionLength_Choice_values      PatternFlowGtpExtensionExtensionLength_Choice_Enum = 3
	PatternFlowGtpExtensionExtensionLength_Choice_increment   PatternFlowGtpExtensionExtensionLength_Choice_Enum = 4
	PatternFlowGtpExtensionExtensionLength_Choice_decrement   PatternFlowGtpExtensionExtensionLength_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpExtensionExtensionLength_Choice_Enum.
var (
	PatternFlowGtpExtensionExtensionLength_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpExtensionExtensionLength_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpExtensionExtensionLength_Choice_Enum) Enum() *PatternFlowGtpExtensionExtensionLength_Choice_Enum {
	p := new(PatternFlowGtpExtensionExtensionLength_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpExtensionExtensionLength_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpExtensionExtensionLength_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[229].Descriptor()
}

func (PatternFlowGtpExtensionExtensionLength_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[229]
}

func (x PatternFlowGtpExtensionExtensionLength_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpExtensionExtensionLength_Choice_Enum.Descriptor instead.
func (PatternFlowGtpExtensionExtensionLength_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{463, 0, 0}
}

type PatternFlowGtpExtensionContents_Choice_Enum int32

const (
	PatternFlowGtpExtensionContents_Choice_unspecified PatternFlowGtpExtensionContents_Choice_Enum = 0
	PatternFlowGtpExtensionContents_Choice_value       PatternFlowGtpExtensionContents_Choice_Enum = 2
	PatternFlowGtpExtensionContents_Choice_values      PatternFlowGtpExtensionContents_Choice_Enum = 3
	PatternFlowGtpExtensionContents_Choice_increment   PatternFlowGtpExtensionContents_Choice_Enum = 4
	PatternFlowGtpExtensionContents_Choice_decrement   PatternFlowGtpExtensionContents_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpExtensionContents_Choice_Enum.
var (
	PatternFlowGtpExtensionContents_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpExtensionContents_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpExtensionContents_Choice_Enum) Enum() *PatternFlowGtpExtensionContents_Choice_Enum {
	p := new(PatternFlowGtpExtensionContents_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpExtensionContents_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpExtensionContents_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[230].Descriptor()
}

func (PatternFlowGtpExtensionContents_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[230]
}

func (x PatternFlowGtpExtensionContents_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpExtensionContents_Choice_Enum.Descriptor instead.
func (PatternFlowGtpExtensionContents_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{465, 0, 0}
}

type PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum int32

const (
	PatternFlowGtpExtensionNextExtensionHeader_Choice_unspecified PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum = 0
	PatternFlowGtpExtensionNextExtensionHeader_Choice_value       PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum = 2
	PatternFlowGtpExtensionNextExtensionHeader_Choice_values      PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum = 3
	PatternFlowGtpExtensionNextExtensionHeader_Choice_increment   PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum = 4
	PatternFlowGtpExtensionNextExtensionHeader_Choice_decrement   PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum.
var (
	PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum) Enum() *PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum {
	p := new(PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[231].Descriptor()
}

func (PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[231]
}

func (x PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum.Descriptor instead.
func (PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{467, 0, 0}
}

type PatternFlowGtpv2Version_Choice_Enum int32

const (
	PatternFlowGtpv2Version_Choice_unspecified PatternFlowGtpv2Version_Choice_Enum = 0
	PatternFlowGtpv2Version_Choice_value       PatternFlowGtpv2Version_Choice_Enum = 2
	PatternFlowGtpv2Version_Choice_values      PatternFlowGtpv2Version_Choice_Enum = 3
	PatternFlowGtpv2Version_Choice_increment   PatternFlowGtpv2Version_Choice_Enum = 4
	PatternFlowGtpv2Version_Choice_decrement   PatternFlowGtpv2Version_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv2Version_Choice_Enum.
var (
	PatternFlowGtpv2Version_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv2Version_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv2Version_Choice_Enum) Enum() *PatternFlowGtpv2Version_Choice_Enum {
	p := new(PatternFlowGtpv2Version_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv2Version_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv2Version_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[232].Descriptor()
}

func (PatternFlowGtpv2Version_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[232]
}

func (x PatternFlowGtpv2Version_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv2Version_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv2Version_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{469, 0, 0}
}

type PatternFlowGtpv2PiggybackingFlag_Choice_Enum int32

const (
	PatternFlowGtpv2PiggybackingFlag_Choice_unspecified PatternFlowGtpv2PiggybackingFlag_Choice_Enum = 0
	PatternFlowGtpv2PiggybackingFlag_Choice_value       PatternFlowGtpv2PiggybackingFlag_Choice_Enum = 2
	PatternFlowGtpv2PiggybackingFlag_Choice_values      PatternFlowGtpv2PiggybackingFlag_Choice_Enum = 3
	PatternFlowGtpv2PiggybackingFlag_Choice_increment   PatternFlowGtpv2PiggybackingFlag_Choice_Enum = 4
	PatternFlowGtpv2PiggybackingFlag_Choice_decrement   PatternFlowGtpv2PiggybackingFlag_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv2PiggybackingFlag_Choice_Enum.
var (
	PatternFlowGtpv2PiggybackingFlag_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv2PiggybackingFlag_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv2PiggybackingFlag_Choice_Enum) Enum() *PatternFlowGtpv2PiggybackingFlag_Choice_Enum {
	p := new(PatternFlowGtpv2PiggybackingFlag_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv2PiggybackingFlag_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv2PiggybackingFlag_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[233].Descriptor()
}

func (PatternFlowGtpv2PiggybackingFlag_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[233]
}

func (x PatternFlowGtpv2PiggybackingFlag_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv2PiggybackingFlag_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv2PiggybackingFlag_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{471, 0, 0}
}

type PatternFlowGtpv2TeidFlag_Choice_Enum int32

const (
	PatternFlowGtpv2TeidFlag_Choice_unspecified PatternFlowGtpv2TeidFlag_Choice_Enum = 0
	PatternFlowGtpv2TeidFlag_Choice_value       PatternFlowGtpv2TeidFlag_Choice_Enum = 2
	PatternFlowGtpv2TeidFlag_Choice_values      PatternFlowGtpv2TeidFlag_Choice_Enum = 3
	PatternFlowGtpv2TeidFlag_Choice_increment   PatternFlowGtpv2TeidFlag_Choice_Enum = 4
	PatternFlowGtpv2TeidFlag_Choice_decrement   PatternFlowGtpv2TeidFlag_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv2TeidFlag_Choice_Enum.
var (
	PatternFlowGtpv2TeidFlag_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv2TeidFlag_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv2TeidFlag_Choice_Enum) Enum() *PatternFlowGtpv2TeidFlag_Choice_Enum {
	p := new(PatternFlowGtpv2TeidFlag_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv2TeidFlag_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv2TeidFlag_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[234].Descriptor()
}

func (PatternFlowGtpv2TeidFlag_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[234]
}

func (x PatternFlowGtpv2TeidFlag_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv2TeidFlag_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv2TeidFlag_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{473, 0, 0}
}

type PatternFlowGtpv2Spare1_Choice_Enum int32

const (
	PatternFlowGtpv2Spare1_Choice_unspecified PatternFlowGtpv2Spare1_Choice_Enum = 0
	PatternFlowGtpv2Spare1_Choice_value       PatternFlowGtpv2Spare1_Choice_Enum = 2
	PatternFlowGtpv2Spare1_Choice_values      PatternFlowGtpv2Spare1_Choice_Enum = 3
	PatternFlowGtpv2Spare1_Choice_increment   PatternFlowGtpv2Spare1_Choice_Enum = 4
	PatternFlowGtpv2Spare1_Choice_decrement   PatternFlowGtpv2Spare1_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv2Spare1_Choice_Enum.
var (
	PatternFlowGtpv2Spare1_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv2Spare1_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv2Spare1_Choice_Enum) Enum() *PatternFlowGtpv2Spare1_Choice_Enum {
	p := new(PatternFlowGtpv2Spare1_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv2Spare1_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv2Spare1_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[235].Descriptor()
}

func (PatternFlowGtpv2Spare1_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[235]
}

func (x PatternFlowGtpv2Spare1_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv2Spare1_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv2Spare1_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{475, 0, 0}
}

type PatternFlowGtpv2MessageType_Choice_Enum int32

const (
	PatternFlowGtpv2MessageType_Choice_unspecified PatternFlowGtpv2MessageType_Choice_Enum = 0
	PatternFlowGtpv2MessageType_Choice_value       PatternFlowGtpv2MessageType_Choice_Enum = 2
	PatternFlowGtpv2MessageType_Choice_values      PatternFlowGtpv2MessageType_Choice_Enum = 3
	PatternFlowGtpv2MessageType_Choice_increment   PatternFlowGtpv2MessageType_Choice_Enum = 4
	PatternFlowGtpv2MessageType_Choice_decrement   PatternFlowGtpv2MessageType_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv2MessageType_Choice_Enum.
var (
	PatternFlowGtpv2MessageType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv2MessageType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv2MessageType_Choice_Enum) Enum() *PatternFlowGtpv2MessageType_Choice_Enum {
	p := new(PatternFlowGtpv2MessageType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv2MessageType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv2MessageType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[236].Descriptor()
}

func (PatternFlowGtpv2MessageType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[236]
}

func (x PatternFlowGtpv2MessageType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv2MessageType_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv2MessageType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{477, 0, 0}
}

type PatternFlowGtpv2MessageLength_Choice_Enum int32

const (
	PatternFlowGtpv2MessageLength_Choice_unspecified PatternFlowGtpv2MessageLength_Choice_Enum = 0
	PatternFlowGtpv2MessageLength_Choice_value       PatternFlowGtpv2MessageLength_Choice_Enum = 2
	PatternFlowGtpv2MessageLength_Choice_values      PatternFlowGtpv2MessageLength_Choice_Enum = 3
	PatternFlowGtpv2MessageLength_Choice_increment   PatternFlowGtpv2MessageLength_Choice_Enum = 4
	PatternFlowGtpv2MessageLength_Choice_decrement   PatternFlowGtpv2MessageLength_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv2MessageLength_Choice_Enum.
var (
	PatternFlowGtpv2MessageLength_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv2MessageLength_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv2MessageLength_Choice_Enum) Enum() *PatternFlowGtpv2MessageLength_Choice_Enum {
	p := new(PatternFlowGtpv2MessageLength_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv2MessageLength_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv2MessageLength_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[237].Descriptor()
}

func (PatternFlowGtpv2MessageLength_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[237]
}

func (x PatternFlowGtpv2MessageLength_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv2MessageLength_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv2MessageLength_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{479, 0, 0}
}

type PatternFlowGtpv2Teid_Choice_Enum int32

const (
	PatternFlowGtpv2Teid_Choice_unspecified PatternFlowGtpv2Teid_Choice_Enum = 0
	PatternFlowGtpv2Teid_Choice_value       PatternFlowGtpv2Teid_Choice_Enum = 2
	PatternFlowGtpv2Teid_Choice_values      PatternFlowGtpv2Teid_Choice_Enum = 3
	PatternFlowGtpv2Teid_Choice_increment   PatternFlowGtpv2Teid_Choice_Enum = 4
	PatternFlowGtpv2Teid_Choice_decrement   PatternFlowGtpv2Teid_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv2Teid_Choice_Enum.
var (
	PatternFlowGtpv2Teid_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv2Teid_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv2Teid_Choice_Enum) Enum() *PatternFlowGtpv2Teid_Choice_Enum {
	p := new(PatternFlowGtpv2Teid_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv2Teid_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv2Teid_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[238].Descriptor()
}

func (PatternFlowGtpv2Teid_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[238]
}

func (x PatternFlowGtpv2Teid_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv2Teid_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv2Teid_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{481, 0, 0}
}

type PatternFlowGtpv2SequenceNumber_Choice_Enum int32

const (
	PatternFlowGtpv2SequenceNumber_Choice_unspecified PatternFlowGtpv2SequenceNumber_Choice_Enum = 0
	PatternFlowGtpv2SequenceNumber_Choice_value       PatternFlowGtpv2SequenceNumber_Choice_Enum = 2
	PatternFlowGtpv2SequenceNumber_Choice_values      PatternFlowGtpv2SequenceNumber_Choice_Enum = 3
	PatternFlowGtpv2SequenceNumber_Choice_increment   PatternFlowGtpv2SequenceNumber_Choice_Enum = 4
	PatternFlowGtpv2SequenceNumber_Choice_decrement   PatternFlowGtpv2SequenceNumber_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv2SequenceNumber_Choice_Enum.
var (
	PatternFlowGtpv2SequenceNumber_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv2SequenceNumber_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv2SequenceNumber_Choice_Enum) Enum() *PatternFlowGtpv2SequenceNumber_Choice_Enum {
	p := new(PatternFlowGtpv2SequenceNumber_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv2SequenceNumber_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv2SequenceNumber_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[239].Descriptor()
}

func (PatternFlowGtpv2SequenceNumber_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[239]
}

func (x PatternFlowGtpv2SequenceNumber_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv2SequenceNumber_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv2SequenceNumber_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{483, 0, 0}
}

type PatternFlowGtpv2Spare2_Choice_Enum int32

const (
	PatternFlowGtpv2Spare2_Choice_unspecified PatternFlowGtpv2Spare2_Choice_Enum = 0
	PatternFlowGtpv2Spare2_Choice_value       PatternFlowGtpv2Spare2_Choice_Enum = 2
	PatternFlowGtpv2Spare2_Choice_values      PatternFlowGtpv2Spare2_Choice_Enum = 3
	PatternFlowGtpv2Spare2_Choice_increment   PatternFlowGtpv2Spare2_Choice_Enum = 4
	PatternFlowGtpv2Spare2_Choice_decrement   PatternFlowGtpv2Spare2_Choice_Enum = 5
)

// Enum value maps for PatternFlowGtpv2Spare2_Choice_Enum.
var (
	PatternFlowGtpv2Spare2_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowGtpv2Spare2_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowGtpv2Spare2_Choice_Enum) Enum() *PatternFlowGtpv2Spare2_Choice_Enum {
	p := new(PatternFlowGtpv2Spare2_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowGtpv2Spare2_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowGtpv2Spare2_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[240].Descriptor()
}

func (PatternFlowGtpv2Spare2_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[240]
}

func (x PatternFlowGtpv2Spare2_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowGtpv2Spare2_Choice_Enum.Descriptor instead.
func (PatternFlowGtpv2Spare2_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{485, 0, 0}
}

type PatternFlowArpHardwareType_Choice_Enum int32

const (
	PatternFlowArpHardwareType_Choice_unspecified PatternFlowArpHardwareType_Choice_Enum = 0
	PatternFlowArpHardwareType_Choice_value       PatternFlowArpHardwareType_Choice_Enum = 2
	PatternFlowArpHardwareType_Choice_values      PatternFlowArpHardwareType_Choice_Enum = 3
	PatternFlowArpHardwareType_Choice_increment   PatternFlowArpHardwareType_Choice_Enum = 4
	PatternFlowArpHardwareType_Choice_decrement   PatternFlowArpHardwareType_Choice_Enum = 5
)

// Enum value maps for PatternFlowArpHardwareType_Choice_Enum.
var (
	PatternFlowArpHardwareType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowArpHardwareType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowArpHardwareType_Choice_Enum) Enum() *PatternFlowArpHardwareType_Choice_Enum {
	p := new(PatternFlowArpHardwareType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowArpHardwareType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowArpHardwareType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[241].Descriptor()
}

func (PatternFlowArpHardwareType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[241]
}

func (x PatternFlowArpHardwareType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowArpHardwareType_Choice_Enum.Descriptor instead.
func (PatternFlowArpHardwareType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{487, 0, 0}
}

type PatternFlowArpProtocolType_Choice_Enum int32

const (
	PatternFlowArpProtocolType_Choice_unspecified PatternFlowArpProtocolType_Choice_Enum = 0
	PatternFlowArpProtocolType_Choice_value       PatternFlowArpProtocolType_Choice_Enum = 2
	PatternFlowArpProtocolType_Choice_values      PatternFlowArpProtocolType_Choice_Enum = 3
	PatternFlowArpProtocolType_Choice_increment   PatternFlowArpProtocolType_Choice_Enum = 4
	PatternFlowArpProtocolType_Choice_decrement   PatternFlowArpProtocolType_Choice_Enum = 5
)

// Enum value maps for PatternFlowArpProtocolType_Choice_Enum.
var (
	PatternFlowArpProtocolType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowArpProtocolType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowArpProtocolType_Choice_Enum) Enum() *PatternFlowArpProtocolType_Choice_Enum {
	p := new(PatternFlowArpProtocolType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowArpProtocolType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowArpProtocolType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[242].Descriptor()
}

func (PatternFlowArpProtocolType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[242]
}

func (x PatternFlowArpProtocolType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowArpProtocolType_Choice_Enum.Descriptor instead.
func (PatternFlowArpProtocolType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{489, 0, 0}
}

type PatternFlowArpHardwareLength_Choice_Enum int32

const (
	PatternFlowArpHardwareLength_Choice_unspecified PatternFlowArpHardwareLength_Choice_Enum = 0
	PatternFlowArpHardwareLength_Choice_value       PatternFlowArpHardwareLength_Choice_Enum = 2
	PatternFlowArpHardwareLength_Choice_values      PatternFlowArpHardwareLength_Choice_Enum = 3
	PatternFlowArpHardwareLength_Choice_increment   PatternFlowArpHardwareLength_Choice_Enum = 4
	PatternFlowArpHardwareLength_Choice_decrement   PatternFlowArpHardwareLength_Choice_Enum = 5
)

// Enum value maps for PatternFlowArpHardwareLength_Choice_Enum.
var (
	PatternFlowArpHardwareLength_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowArpHardwareLength_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowArpHardwareLength_Choice_Enum) Enum() *PatternFlowArpHardwareLength_Choice_Enum {
	p := new(PatternFlowArpHardwareLength_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowArpHardwareLength_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowArpHardwareLength_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[243].Descriptor()
}

func (PatternFlowArpHardwareLength_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[243]
}

func (x PatternFlowArpHardwareLength_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowArpHardwareLength_Choice_Enum.Descriptor instead.
func (PatternFlowArpHardwareLength_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{491, 0, 0}
}

type PatternFlowArpProtocolLength_Choice_Enum int32

const (
	PatternFlowArpProtocolLength_Choice_unspecified PatternFlowArpProtocolLength_Choice_Enum = 0
	PatternFlowArpProtocolLength_Choice_value       PatternFlowArpProtocolLength_Choice_Enum = 2
	PatternFlowArpProtocolLength_Choice_values      PatternFlowArpProtocolLength_Choice_Enum = 3
	PatternFlowArpProtocolLength_Choice_increment   PatternFlowArpProtocolLength_Choice_Enum = 4
	PatternFlowArpProtocolLength_Choice_decrement   PatternFlowArpProtocolLength_Choice_Enum = 5
)

// Enum value maps for PatternFlowArpProtocolLength_Choice_Enum.
var (
	PatternFlowArpProtocolLength_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowArpProtocolLength_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowArpProtocolLength_Choice_Enum) Enum() *PatternFlowArpProtocolLength_Choice_Enum {
	p := new(PatternFlowArpProtocolLength_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowArpProtocolLength_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowArpProtocolLength_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[244].Descriptor()
}

func (PatternFlowArpProtocolLength_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[244]
}

func (x PatternFlowArpProtocolLength_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowArpProtocolLength_Choice_Enum.Descriptor instead.
func (PatternFlowArpProtocolLength_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{493, 0, 0}
}

type PatternFlowArpOperation_Choice_Enum int32

const (
	PatternFlowArpOperation_Choice_unspecified PatternFlowArpOperation_Choice_Enum = 0
	PatternFlowArpOperation_Choice_value       PatternFlowArpOperation_Choice_Enum = 2
	PatternFlowArpOperation_Choice_values      PatternFlowArpOperation_Choice_Enum = 3
	PatternFlowArpOperation_Choice_increment   PatternFlowArpOperation_Choice_Enum = 4
	PatternFlowArpOperation_Choice_decrement   PatternFlowArpOperation_Choice_Enum = 5
)

// Enum value maps for PatternFlowArpOperation_Choice_Enum.
var (
	PatternFlowArpOperation_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowArpOperation_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowArpOperation_Choice_Enum) Enum() *PatternFlowArpOperation_Choice_Enum {
	p := new(PatternFlowArpOperation_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowArpOperation_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowArpOperation_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[245].Descriptor()
}

func (PatternFlowArpOperation_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[245]
}

func (x PatternFlowArpOperation_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowArpOperation_Choice_Enum.Descriptor instead.
func (PatternFlowArpOperation_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{495, 0, 0}
}

type PatternFlowArpSenderHardwareAddr_Choice_Enum int32

const (
	PatternFlowArpSenderHardwareAddr_Choice_unspecified PatternFlowArpSenderHardwareAddr_Choice_Enum = 0
	PatternFlowArpSenderHardwareAddr_Choice_value       PatternFlowArpSenderHardwareAddr_Choice_Enum = 2
	PatternFlowArpSenderHardwareAddr_Choice_values      PatternFlowArpSenderHardwareAddr_Choice_Enum = 3
	PatternFlowArpSenderHardwareAddr_Choice_increment   PatternFlowArpSenderHardwareAddr_Choice_Enum = 4
	PatternFlowArpSenderHardwareAddr_Choice_decrement   PatternFlowArpSenderHardwareAddr_Choice_Enum = 5
)

// Enum value maps for PatternFlowArpSenderHardwareAddr_Choice_Enum.
var (
	PatternFlowArpSenderHardwareAddr_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowArpSenderHardwareAddr_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowArpSenderHardwareAddr_Choice_Enum) Enum() *PatternFlowArpSenderHardwareAddr_Choice_Enum {
	p := new(PatternFlowArpSenderHardwareAddr_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowArpSenderHardwareAddr_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowArpSenderHardwareAddr_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[246].Descriptor()
}

func (PatternFlowArpSenderHardwareAddr_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[246]
}

func (x PatternFlowArpSenderHardwareAddr_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowArpSenderHardwareAddr_Choice_Enum.Descriptor instead.
func (PatternFlowArpSenderHardwareAddr_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{497, 0, 0}
}

type PatternFlowArpSenderProtocolAddr_Choice_Enum int32

const (
	PatternFlowArpSenderProtocolAddr_Choice_unspecified PatternFlowArpSenderProtocolAddr_Choice_Enum = 0
	PatternFlowArpSenderProtocolAddr_Choice_value       PatternFlowArpSenderProtocolAddr_Choice_Enum = 2
	PatternFlowArpSenderProtocolAddr_Choice_values      PatternFlowArpSenderProtocolAddr_Choice_Enum = 3
	PatternFlowArpSenderProtocolAddr_Choice_increment   PatternFlowArpSenderProtocolAddr_Choice_Enum = 4
	PatternFlowArpSenderProtocolAddr_Choice_decrement   PatternFlowArpSenderProtocolAddr_Choice_Enum = 5
)

// Enum value maps for PatternFlowArpSenderProtocolAddr_Choice_Enum.
var (
	PatternFlowArpSenderProtocolAddr_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowArpSenderProtocolAddr_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowArpSenderProtocolAddr_Choice_Enum) Enum() *PatternFlowArpSenderProtocolAddr_Choice_Enum {
	p := new(PatternFlowArpSenderProtocolAddr_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowArpSenderProtocolAddr_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowArpSenderProtocolAddr_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[247].Descriptor()
}

func (PatternFlowArpSenderProtocolAddr_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[247]
}

func (x PatternFlowArpSenderProtocolAddr_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowArpSenderProtocolAddr_Choice_Enum.Descriptor instead.
func (PatternFlowArpSenderProtocolAddr_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{499, 0, 0}
}

type PatternFlowArpTargetHardwareAddr_Choice_Enum int32

const (
	PatternFlowArpTargetHardwareAddr_Choice_unspecified PatternFlowArpTargetHardwareAddr_Choice_Enum = 0
	PatternFlowArpTargetHardwareAddr_Choice_value       PatternFlowArpTargetHardwareAddr_Choice_Enum = 2
	PatternFlowArpTargetHardwareAddr_Choice_values      PatternFlowArpTargetHardwareAddr_Choice_Enum = 3
	PatternFlowArpTargetHardwareAddr_Choice_increment   PatternFlowArpTargetHardwareAddr_Choice_Enum = 4
	PatternFlowArpTargetHardwareAddr_Choice_decrement   PatternFlowArpTargetHardwareAddr_Choice_Enum = 5
)

// Enum value maps for PatternFlowArpTargetHardwareAddr_Choice_Enum.
var (
	PatternFlowArpTargetHardwareAddr_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowArpTargetHardwareAddr_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowArpTargetHardwareAddr_Choice_Enum) Enum() *PatternFlowArpTargetHardwareAddr_Choice_Enum {
	p := new(PatternFlowArpTargetHardwareAddr_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowArpTargetHardwareAddr_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowArpTargetHardwareAddr_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[248].Descriptor()
}

func (PatternFlowArpTargetHardwareAddr_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[248]
}

func (x PatternFlowArpTargetHardwareAddr_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowArpTargetHardwareAddr_Choice_Enum.Descriptor instead.
func (PatternFlowArpTargetHardwareAddr_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{501, 0, 0}
}

type PatternFlowArpTargetProtocolAddr_Choice_Enum int32

const (
	PatternFlowArpTargetProtocolAddr_Choice_unspecified PatternFlowArpTargetProtocolAddr_Choice_Enum = 0
	PatternFlowArpTargetProtocolAddr_Choice_value       PatternFlowArpTargetProtocolAddr_Choice_Enum = 2
	PatternFlowArpTargetProtocolAddr_Choice_values      PatternFlowArpTargetProtocolAddr_Choice_Enum = 3
	PatternFlowArpTargetProtocolAddr_Choice_increment   PatternFlowArpTargetProtocolAddr_Choice_Enum = 4
	PatternFlowArpTargetProtocolAddr_Choice_decrement   PatternFlowArpTargetProtocolAddr_Choice_Enum = 5
)

// Enum value maps for PatternFlowArpTargetProtocolAddr_Choice_Enum.
var (
	PatternFlowArpTargetProtocolAddr_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowArpTargetProtocolAddr_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowArpTargetProtocolAddr_Choice_Enum) Enum() *PatternFlowArpTargetProtocolAddr_Choice_Enum {
	p := new(PatternFlowArpTargetProtocolAddr_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowArpTargetProtocolAddr_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowArpTargetProtocolAddr_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[249].Descriptor()
}

func (PatternFlowArpTargetProtocolAddr_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[249]
}

func (x PatternFlowArpTargetProtocolAddr_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowArpTargetProtocolAddr_Choice_Enum.Descriptor instead.
func (PatternFlowArpTargetProtocolAddr_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{503, 0, 0}
}

type PatternFlowIcmpEchoType_Choice_Enum int32

const (
	PatternFlowIcmpEchoType_Choice_unspecified PatternFlowIcmpEchoType_Choice_Enum = 0
	PatternFlowIcmpEchoType_Choice_value       PatternFlowIcmpEchoType_Choice_Enum = 2
	PatternFlowIcmpEchoType_Choice_values      PatternFlowIcmpEchoType_Choice_Enum = 3
	PatternFlowIcmpEchoType_Choice_increment   PatternFlowIcmpEchoType_Choice_Enum = 4
	PatternFlowIcmpEchoType_Choice_decrement   PatternFlowIcmpEchoType_Choice_Enum = 5
)

// Enum value maps for PatternFlowIcmpEchoType_Choice_Enum.
var (
	PatternFlowIcmpEchoType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIcmpEchoType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIcmpEchoType_Choice_Enum) Enum() *PatternFlowIcmpEchoType_Choice_Enum {
	p := new(PatternFlowIcmpEchoType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpEchoType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpEchoType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[250].Descriptor()
}

func (PatternFlowIcmpEchoType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[250]
}

func (x PatternFlowIcmpEchoType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpEchoType_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpEchoType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{505, 0, 0}
}

type PatternFlowIcmpEchoCode_Choice_Enum int32

const (
	PatternFlowIcmpEchoCode_Choice_unspecified PatternFlowIcmpEchoCode_Choice_Enum = 0
	PatternFlowIcmpEchoCode_Choice_value       PatternFlowIcmpEchoCode_Choice_Enum = 2
	PatternFlowIcmpEchoCode_Choice_values      PatternFlowIcmpEchoCode_Choice_Enum = 3
	PatternFlowIcmpEchoCode_Choice_increment   PatternFlowIcmpEchoCode_Choice_Enum = 4
	PatternFlowIcmpEchoCode_Choice_decrement   PatternFlowIcmpEchoCode_Choice_Enum = 5
)

// Enum value maps for PatternFlowIcmpEchoCode_Choice_Enum.
var (
	PatternFlowIcmpEchoCode_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIcmpEchoCode_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIcmpEchoCode_Choice_Enum) Enum() *PatternFlowIcmpEchoCode_Choice_Enum {
	p := new(PatternFlowIcmpEchoCode_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpEchoCode_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpEchoCode_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[251].Descriptor()
}

func (PatternFlowIcmpEchoCode_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[251]
}

func (x PatternFlowIcmpEchoCode_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpEchoCode_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpEchoCode_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{507, 0, 0}
}

type PatternFlowIcmpEchoChecksum_Choice_Enum int32

const (
	PatternFlowIcmpEchoChecksum_Choice_unspecified PatternFlowIcmpEchoChecksum_Choice_Enum = 0
	PatternFlowIcmpEchoChecksum_Choice_generated   PatternFlowIcmpEchoChecksum_Choice_Enum = 1
	PatternFlowIcmpEchoChecksum_Choice_custom      PatternFlowIcmpEchoChecksum_Choice_Enum = 2
)

// Enum value maps for PatternFlowIcmpEchoChecksum_Choice_Enum.
var (
	PatternFlowIcmpEchoChecksum_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "generated",
		2: "custom",
	}
	PatternFlowIcmpEchoChecksum_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"generated":   1,
		"custom":      2,
	}
)

func (x PatternFlowIcmpEchoChecksum_Choice_Enum) Enum() *PatternFlowIcmpEchoChecksum_Choice_Enum {
	p := new(PatternFlowIcmpEchoChecksum_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpEchoChecksum_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpEchoChecksum_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[252].Descriptor()
}

func (PatternFlowIcmpEchoChecksum_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[252]
}

func (x PatternFlowIcmpEchoChecksum_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpEchoChecksum_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpEchoChecksum_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{508, 0, 0}
}

type PatternFlowIcmpEchoChecksum_Generated_Enum int32

const (
	PatternFlowIcmpEchoChecksum_Generated_unspecified PatternFlowIcmpEchoChecksum_Generated_Enum = 0
	PatternFlowIcmpEchoChecksum_Generated_good        PatternFlowIcmpEchoChecksum_Generated_Enum = 1
	PatternFlowIcmpEchoChecksum_Generated_bad         PatternFlowIcmpEchoChecksum_Generated_Enum = 2
)

// Enum value maps for PatternFlowIcmpEchoChecksum_Generated_Enum.
var (
	PatternFlowIcmpEchoChecksum_Generated_Enum_name = map[int32]string{
		0: "unspecified",
		1: "good",
		2: "bad",
	}
	PatternFlowIcmpEchoChecksum_Generated_Enum_value = map[string]int32{
		"unspecified": 0,
		"good":        1,
		"bad":         2,
	}
)

func (x PatternFlowIcmpEchoChecksum_Generated_Enum) Enum() *PatternFlowIcmpEchoChecksum_Generated_Enum {
	p := new(PatternFlowIcmpEchoChecksum_Generated_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpEchoChecksum_Generated_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpEchoChecksum_Generated_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[253].Descriptor()
}

func (PatternFlowIcmpEchoChecksum_Generated_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[253]
}

func (x PatternFlowIcmpEchoChecksum_Generated_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpEchoChecksum_Generated_Enum.Descriptor instead.
func (PatternFlowIcmpEchoChecksum_Generated_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{508, 1, 0}
}

type PatternFlowIcmpEchoIdentifier_Choice_Enum int32

const (
	PatternFlowIcmpEchoIdentifier_Choice_unspecified PatternFlowIcmpEchoIdentifier_Choice_Enum = 0
	PatternFlowIcmpEchoIdentifier_Choice_value       PatternFlowIcmpEchoIdentifier_Choice_Enum = 2
	PatternFlowIcmpEchoIdentifier_Choice_values      PatternFlowIcmpEchoIdentifier_Choice_Enum = 3
	PatternFlowIcmpEchoIdentifier_Choice_increment   PatternFlowIcmpEchoIdentifier_Choice_Enum = 4
	PatternFlowIcmpEchoIdentifier_Choice_decrement   PatternFlowIcmpEchoIdentifier_Choice_Enum = 5
)

// Enum value maps for PatternFlowIcmpEchoIdentifier_Choice_Enum.
var (
	PatternFlowIcmpEchoIdentifier_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIcmpEchoIdentifier_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIcmpEchoIdentifier_Choice_Enum) Enum() *PatternFlowIcmpEchoIdentifier_Choice_Enum {
	p := new(PatternFlowIcmpEchoIdentifier_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpEchoIdentifier_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpEchoIdentifier_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[254].Descriptor()
}

func (PatternFlowIcmpEchoIdentifier_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[254]
}

func (x PatternFlowIcmpEchoIdentifier_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpEchoIdentifier_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpEchoIdentifier_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{510, 0, 0}
}

type PatternFlowIcmpEchoSequenceNumber_Choice_Enum int32

const (
	PatternFlowIcmpEchoSequenceNumber_Choice_unspecified PatternFlowIcmpEchoSequenceNumber_Choice_Enum = 0
	PatternFlowIcmpEchoSequenceNumber_Choice_value       PatternFlowIcmpEchoSequenceNumber_Choice_Enum = 2
	PatternFlowIcmpEchoSequenceNumber_Choice_values      PatternFlowIcmpEchoSequenceNumber_Choice_Enum = 3
	PatternFlowIcmpEchoSequenceNumber_Choice_increment   PatternFlowIcmpEchoSequenceNumber_Choice_Enum = 4
	PatternFlowIcmpEchoSequenceNumber_Choice_decrement   PatternFlowIcmpEchoSequenceNumber_Choice_Enum = 5
)

// Enum value maps for PatternFlowIcmpEchoSequenceNumber_Choice_Enum.
var (
	PatternFlowIcmpEchoSequenceNumber_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIcmpEchoSequenceNumber_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIcmpEchoSequenceNumber_Choice_Enum) Enum() *PatternFlowIcmpEchoSequenceNumber_Choice_Enum {
	p := new(PatternFlowIcmpEchoSequenceNumber_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpEchoSequenceNumber_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpEchoSequenceNumber_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[255].Descriptor()
}

func (PatternFlowIcmpEchoSequenceNumber_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[255]
}

func (x PatternFlowIcmpEchoSequenceNumber_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpEchoSequenceNumber_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpEchoSequenceNumber_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{512, 0, 0}
}

type PatternFlowIcmpCommonChecksum_Choice_Enum int32

const (
	PatternFlowIcmpCommonChecksum_Choice_unspecified PatternFlowIcmpCommonChecksum_Choice_Enum = 0
	PatternFlowIcmpCommonChecksum_Choice_generated   PatternFlowIcmpCommonChecksum_Choice_Enum = 1
	PatternFlowIcmpCommonChecksum_Choice_custom      PatternFlowIcmpCommonChecksum_Choice_Enum = 2
)

// Enum value maps for PatternFlowIcmpCommonChecksum_Choice_Enum.
var (
	PatternFlowIcmpCommonChecksum_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "generated",
		2: "custom",
	}
	PatternFlowIcmpCommonChecksum_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"generated":   1,
		"custom":      2,
	}
)

func (x PatternFlowIcmpCommonChecksum_Choice_Enum) Enum() *PatternFlowIcmpCommonChecksum_Choice_Enum {
	p := new(PatternFlowIcmpCommonChecksum_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpCommonChecksum_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpCommonChecksum_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[256].Descriptor()
}

func (PatternFlowIcmpCommonChecksum_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[256]
}

func (x PatternFlowIcmpCommonChecksum_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpCommonChecksum_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpCommonChecksum_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{513, 0, 0}
}

type PatternFlowIcmpCommonChecksum_Generated_Enum int32

const (
	PatternFlowIcmpCommonChecksum_Generated_unspecified PatternFlowIcmpCommonChecksum_Generated_Enum = 0
	PatternFlowIcmpCommonChecksum_Generated_good        PatternFlowIcmpCommonChecksum_Generated_Enum = 1
	PatternFlowIcmpCommonChecksum_Generated_bad         PatternFlowIcmpCommonChecksum_Generated_Enum = 2
)

// Enum value maps for PatternFlowIcmpCommonChecksum_Generated_Enum.
var (
	PatternFlowIcmpCommonChecksum_Generated_Enum_name = map[int32]string{
		0: "unspecified",
		1: "good",
		2: "bad",
	}
	PatternFlowIcmpCommonChecksum_Generated_Enum_value = map[string]int32{
		"unspecified": 0,
		"good":        1,
		"bad":         2,
	}
)

func (x PatternFlowIcmpCommonChecksum_Generated_Enum) Enum() *PatternFlowIcmpCommonChecksum_Generated_Enum {
	p := new(PatternFlowIcmpCommonChecksum_Generated_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpCommonChecksum_Generated_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpCommonChecksum_Generated_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[257].Descriptor()
}

func (PatternFlowIcmpCommonChecksum_Generated_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[257]
}

func (x PatternFlowIcmpCommonChecksum_Generated_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpCommonChecksum_Generated_Enum.Descriptor instead.
func (PatternFlowIcmpCommonChecksum_Generated_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{513, 1, 0}
}

type PatternFlowIcmpNextFieldsIdentifier_Choice_Enum int32

const (
	PatternFlowIcmpNextFieldsIdentifier_Choice_unspecified PatternFlowIcmpNextFieldsIdentifier_Choice_Enum = 0
	PatternFlowIcmpNextFieldsIdentifier_Choice_value       PatternFlowIcmpNextFieldsIdentifier_Choice_Enum = 2
	PatternFlowIcmpNextFieldsIdentifier_Choice_values      PatternFlowIcmpNextFieldsIdentifier_Choice_Enum = 3
	PatternFlowIcmpNextFieldsIdentifier_Choice_increment   PatternFlowIcmpNextFieldsIdentifier_Choice_Enum = 4
	PatternFlowIcmpNextFieldsIdentifier_Choice_decrement   PatternFlowIcmpNextFieldsIdentifier_Choice_Enum = 5
)

// Enum value maps for PatternFlowIcmpNextFieldsIdentifier_Choice_Enum.
var (
	PatternFlowIcmpNextFieldsIdentifier_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIcmpNextFieldsIdentifier_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIcmpNextFieldsIdentifier_Choice_Enum) Enum() *PatternFlowIcmpNextFieldsIdentifier_Choice_Enum {
	p := new(PatternFlowIcmpNextFieldsIdentifier_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpNextFieldsIdentifier_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpNextFieldsIdentifier_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[258].Descriptor()
}

func (PatternFlowIcmpNextFieldsIdentifier_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[258]
}

func (x PatternFlowIcmpNextFieldsIdentifier_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpNextFieldsIdentifier_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpNextFieldsIdentifier_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{515, 0, 0}
}

type PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum int32

const (
	PatternFlowIcmpNextFieldsSequenceNumber_Choice_unspecified PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum = 0
	PatternFlowIcmpNextFieldsSequenceNumber_Choice_value       PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum = 2
	PatternFlowIcmpNextFieldsSequenceNumber_Choice_values      PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum = 3
	PatternFlowIcmpNextFieldsSequenceNumber_Choice_increment   PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum = 4
	PatternFlowIcmpNextFieldsSequenceNumber_Choice_decrement   PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum = 5
)

// Enum value maps for PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum.
var (
	PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum) Enum() *PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum {
	p := new(PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[259].Descriptor()
}

func (PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[259]
}

func (x PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{517, 0, 0}
}

type PatternFlowIcmpv6EchoType_Choice_Enum int32

const (
	PatternFlowIcmpv6EchoType_Choice_unspecified PatternFlowIcmpv6EchoType_Choice_Enum = 0
	PatternFlowIcmpv6EchoType_Choice_value       PatternFlowIcmpv6EchoType_Choice_Enum = 2
	PatternFlowIcmpv6EchoType_Choice_values      PatternFlowIcmpv6EchoType_Choice_Enum = 3
	PatternFlowIcmpv6EchoType_Choice_increment   PatternFlowIcmpv6EchoType_Choice_Enum = 4
	PatternFlowIcmpv6EchoType_Choice_decrement   PatternFlowIcmpv6EchoType_Choice_Enum = 5
)

// Enum value maps for PatternFlowIcmpv6EchoType_Choice_Enum.
var (
	PatternFlowIcmpv6EchoType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIcmpv6EchoType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIcmpv6EchoType_Choice_Enum) Enum() *PatternFlowIcmpv6EchoType_Choice_Enum {
	p := new(PatternFlowIcmpv6EchoType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpv6EchoType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpv6EchoType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[260].Descriptor()
}

func (PatternFlowIcmpv6EchoType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[260]
}

func (x PatternFlowIcmpv6EchoType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoType_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpv6EchoType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{519, 0, 0}
}

type PatternFlowIcmpv6EchoCode_Choice_Enum int32

const (
	PatternFlowIcmpv6EchoCode_Choice_unspecified PatternFlowIcmpv6EchoCode_Choice_Enum = 0
	PatternFlowIcmpv6EchoCode_Choice_value       PatternFlowIcmpv6EchoCode_Choice_Enum = 2
	PatternFlowIcmpv6EchoCode_Choice_values      PatternFlowIcmpv6EchoCode_Choice_Enum = 3
	PatternFlowIcmpv6EchoCode_Choice_increment   PatternFlowIcmpv6EchoCode_Choice_Enum = 4
	PatternFlowIcmpv6EchoCode_Choice_decrement   PatternFlowIcmpv6EchoCode_Choice_Enum = 5
)

// Enum value maps for PatternFlowIcmpv6EchoCode_Choice_Enum.
var (
	PatternFlowIcmpv6EchoCode_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIcmpv6EchoCode_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIcmpv6EchoCode_Choice_Enum) Enum() *PatternFlowIcmpv6EchoCode_Choice_Enum {
	p := new(PatternFlowIcmpv6EchoCode_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpv6EchoCode_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpv6EchoCode_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[261].Descriptor()
}

func (PatternFlowIcmpv6EchoCode_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[261]
}

func (x PatternFlowIcmpv6EchoCode_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoCode_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpv6EchoCode_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{521, 0, 0}
}

type PatternFlowIcmpv6EchoIdentifier_Choice_Enum int32

const (
	PatternFlowIcmpv6EchoIdentifier_Choice_unspecified PatternFlowIcmpv6EchoIdentifier_Choice_Enum = 0
	PatternFlowIcmpv6EchoIdentifier_Choice_value       PatternFlowIcmpv6EchoIdentifier_Choice_Enum = 2
	PatternFlowIcmpv6EchoIdentifier_Choice_values      PatternFlowIcmpv6EchoIdentifier_Choice_Enum = 3
	PatternFlowIcmpv6EchoIdentifier_Choice_increment   PatternFlowIcmpv6EchoIdentifier_Choice_Enum = 4
	PatternFlowIcmpv6EchoIdentifier_Choice_decrement   PatternFlowIcmpv6EchoIdentifier_Choice_Enum = 5
)

// Enum value maps for PatternFlowIcmpv6EchoIdentifier_Choice_Enum.
var (
	PatternFlowIcmpv6EchoIdentifier_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIcmpv6EchoIdentifier_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIcmpv6EchoIdentifier_Choice_Enum) Enum() *PatternFlowIcmpv6EchoIdentifier_Choice_Enum {
	p := new(PatternFlowIcmpv6EchoIdentifier_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpv6EchoIdentifier_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpv6EchoIdentifier_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[262].Descriptor()
}

func (PatternFlowIcmpv6EchoIdentifier_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[262]
}

func (x PatternFlowIcmpv6EchoIdentifier_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoIdentifier_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpv6EchoIdentifier_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{523, 0, 0}
}

type PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum int32

const (
	PatternFlowIcmpv6EchoSequenceNumber_Choice_unspecified PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum = 0
	PatternFlowIcmpv6EchoSequenceNumber_Choice_value       PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum = 2
	PatternFlowIcmpv6EchoSequenceNumber_Choice_values      PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum = 3
	PatternFlowIcmpv6EchoSequenceNumber_Choice_increment   PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum = 4
	PatternFlowIcmpv6EchoSequenceNumber_Choice_decrement   PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum = 5
)

// Enum value maps for PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum.
var (
	PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum) Enum() *PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum {
	p := new(PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[263].Descriptor()
}

func (PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[263]
}

func (x PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{525, 0, 0}
}

type PatternFlowIcmpv6EchoChecksum_Choice_Enum int32

const (
	PatternFlowIcmpv6EchoChecksum_Choice_unspecified PatternFlowIcmpv6EchoChecksum_Choice_Enum = 0
	PatternFlowIcmpv6EchoChecksum_Choice_generated   PatternFlowIcmpv6EchoChecksum_Choice_Enum = 1
	PatternFlowIcmpv6EchoChecksum_Choice_custom      PatternFlowIcmpv6EchoChecksum_Choice_Enum = 2
)

// Enum value maps for PatternFlowIcmpv6EchoChecksum_Choice_Enum.
var (
	PatternFlowIcmpv6EchoChecksum_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "generated",
		2: "custom",
	}
	PatternFlowIcmpv6EchoChecksum_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"generated":   1,
		"custom":      2,
	}
)

func (x PatternFlowIcmpv6EchoChecksum_Choice_Enum) Enum() *PatternFlowIcmpv6EchoChecksum_Choice_Enum {
	p := new(PatternFlowIcmpv6EchoChecksum_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpv6EchoChecksum_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpv6EchoChecksum_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[264].Descriptor()
}

func (PatternFlowIcmpv6EchoChecksum_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[264]
}

func (x PatternFlowIcmpv6EchoChecksum_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoChecksum_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpv6EchoChecksum_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{526, 0, 0}
}

type PatternFlowIcmpv6EchoChecksum_Generated_Enum int32

const (
	PatternFlowIcmpv6EchoChecksum_Generated_unspecified PatternFlowIcmpv6EchoChecksum_Generated_Enum = 0
	PatternFlowIcmpv6EchoChecksum_Generated_good        PatternFlowIcmpv6EchoChecksum_Generated_Enum = 1
	PatternFlowIcmpv6EchoChecksum_Generated_bad         PatternFlowIcmpv6EchoChecksum_Generated_Enum = 2
)

// Enum value maps for PatternFlowIcmpv6EchoChecksum_Generated_Enum.
var (
	PatternFlowIcmpv6EchoChecksum_Generated_Enum_name = map[int32]string{
		0: "unspecified",
		1: "good",
		2: "bad",
	}
	PatternFlowIcmpv6EchoChecksum_Generated_Enum_value = map[string]int32{
		"unspecified": 0,
		"good":        1,
		"bad":         2,
	}
)

func (x PatternFlowIcmpv6EchoChecksum_Generated_Enum) Enum() *PatternFlowIcmpv6EchoChecksum_Generated_Enum {
	p := new(PatternFlowIcmpv6EchoChecksum_Generated_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpv6EchoChecksum_Generated_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpv6EchoChecksum_Generated_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[265].Descriptor()
}

func (PatternFlowIcmpv6EchoChecksum_Generated_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[265]
}

func (x PatternFlowIcmpv6EchoChecksum_Generated_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoChecksum_Generated_Enum.Descriptor instead.
func (PatternFlowIcmpv6EchoChecksum_Generated_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{526, 1, 0}
}

type PatternFlowIcmpv6CommonChecksum_Choice_Enum int32

const (
	PatternFlowIcmpv6CommonChecksum_Choice_unspecified PatternFlowIcmpv6CommonChecksum_Choice_Enum = 0
	PatternFlowIcmpv6CommonChecksum_Choice_generated   PatternFlowIcmpv6CommonChecksum_Choice_Enum = 1
	PatternFlowIcmpv6CommonChecksum_Choice_custom      PatternFlowIcmpv6CommonChecksum_Choice_Enum = 2
)

// Enum value maps for PatternFlowIcmpv6CommonChecksum_Choice_Enum.
var (
	PatternFlowIcmpv6CommonChecksum_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "generated",
		2: "custom",
	}
	PatternFlowIcmpv6CommonChecksum_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"generated":   1,
		"custom":      2,
	}
)

func (x PatternFlowIcmpv6CommonChecksum_Choice_Enum) Enum() *PatternFlowIcmpv6CommonChecksum_Choice_Enum {
	p := new(PatternFlowIcmpv6CommonChecksum_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpv6CommonChecksum_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpv6CommonChecksum_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[266].Descriptor()
}

func (PatternFlowIcmpv6CommonChecksum_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[266]
}

func (x PatternFlowIcmpv6CommonChecksum_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpv6CommonChecksum_Choice_Enum.Descriptor instead.
func (PatternFlowIcmpv6CommonChecksum_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{527, 0, 0}
}

type PatternFlowIcmpv6CommonChecksum_Generated_Enum int32

const (
	PatternFlowIcmpv6CommonChecksum_Generated_unspecified PatternFlowIcmpv6CommonChecksum_Generated_Enum = 0
	PatternFlowIcmpv6CommonChecksum_Generated_good        PatternFlowIcmpv6CommonChecksum_Generated_Enum = 1
	PatternFlowIcmpv6CommonChecksum_Generated_bad         PatternFlowIcmpv6CommonChecksum_Generated_Enum = 2
)

// Enum value maps for PatternFlowIcmpv6CommonChecksum_Generated_Enum.
var (
	PatternFlowIcmpv6CommonChecksum_Generated_Enum_name = map[int32]string{
		0: "unspecified",
		1: "good",
		2: "bad",
	}
	PatternFlowIcmpv6CommonChecksum_Generated_Enum_value = map[string]int32{
		"unspecified": 0,
		"good":        1,
		"bad":         2,
	}
)

func (x PatternFlowIcmpv6CommonChecksum_Generated_Enum) Enum() *PatternFlowIcmpv6CommonChecksum_Generated_Enum {
	p := new(PatternFlowIcmpv6CommonChecksum_Generated_Enum)
	*p = x
	return p
}

func (x PatternFlowIcmpv6CommonChecksum_Generated_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIcmpv6CommonChecksum_Generated_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[267].Descriptor()
}

func (PatternFlowIcmpv6CommonChecksum_Generated_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[267]
}

func (x PatternFlowIcmpv6CommonChecksum_Generated_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIcmpv6CommonChecksum_Generated_Enum.Descriptor instead.
func (PatternFlowIcmpv6CommonChecksum_Generated_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{527, 1, 0}
}

type PatternFlowPppAddress_Choice_Enum int32

const (
	PatternFlowPppAddress_Choice_unspecified PatternFlowPppAddress_Choice_Enum = 0
	PatternFlowPppAddress_Choice_value       PatternFlowPppAddress_Choice_Enum = 2
	PatternFlowPppAddress_Choice_values      PatternFlowPppAddress_Choice_Enum = 3
	PatternFlowPppAddress_Choice_increment   PatternFlowPppAddress_Choice_Enum = 4
	PatternFlowPppAddress_Choice_decrement   PatternFlowPppAddress_Choice_Enum = 5
)

// Enum value maps for PatternFlowPppAddress_Choice_Enum.
var (
	PatternFlowPppAddress_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPppAddress_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPppAddress_Choice_Enum) Enum() *PatternFlowPppAddress_Choice_Enum {
	p := new(PatternFlowPppAddress_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPppAddress_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPppAddress_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[268].Descriptor()
}

func (PatternFlowPppAddress_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[268]
}

func (x PatternFlowPppAddress_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPppAddress_Choice_Enum.Descriptor instead.
func (PatternFlowPppAddress_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{529, 0, 0}
}

type PatternFlowPppControl_Choice_Enum int32

const (
	PatternFlowPppControl_Choice_unspecified PatternFlowPppControl_Choice_Enum = 0
	PatternFlowPppControl_Choice_value       PatternFlowPppControl_Choice_Enum = 2
	PatternFlowPppControl_Choice_values      PatternFlowPppControl_Choice_Enum = 3
	PatternFlowPppControl_Choice_increment   PatternFlowPppControl_Choice_Enum = 4
	PatternFlowPppControl_Choice_decrement   PatternFlowPppControl_Choice_Enum = 5
)

// Enum value maps for PatternFlowPppControl_Choice_Enum.
var (
	PatternFlowPppControl_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPppControl_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPppControl_Choice_Enum) Enum() *PatternFlowPppControl_Choice_Enum {
	p := new(PatternFlowPppControl_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPppControl_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPppControl_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[269].Descriptor()
}

func (PatternFlowPppControl_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[269]
}

func (x PatternFlowPppControl_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPppControl_Choice_Enum.Descriptor instead.
func (PatternFlowPppControl_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{531, 0, 0}
}

type PatternFlowPppProtocolType_Choice_Enum int32

const (
	PatternFlowPppProtocolType_Choice_unspecified PatternFlowPppProtocolType_Choice_Enum = 0
	PatternFlowPppProtocolType_Choice_value       PatternFlowPppProtocolType_Choice_Enum = 2
	PatternFlowPppProtocolType_Choice_values      PatternFlowPppProtocolType_Choice_Enum = 3
	PatternFlowPppProtocolType_Choice_auto        PatternFlowPppProtocolType_Choice_Enum = 1
	PatternFlowPppProtocolType_Choice_increment   PatternFlowPppProtocolType_Choice_Enum = 4
	PatternFlowPppProtocolType_Choice_decrement   PatternFlowPppProtocolType_Choice_Enum = 5
)

// Enum value maps for PatternFlowPppProtocolType_Choice_Enum.
var (
	PatternFlowPppProtocolType_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		1: "auto",
		4: "increment",
		5: "decrement",
	}
	PatternFlowPppProtocolType_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"auto":        1,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowPppProtocolType_Choice_Enum) Enum() *PatternFlowPppProtocolType_Choice_Enum {
	p := new(PatternFlowPppProtocolType_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowPppProtocolType_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowPppProtocolType_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[270].Descriptor()
}

func (PatternFlowPppProtocolType_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[270]
}

func (x PatternFlowPppProtocolType_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowPppProtocolType_Choice_Enum.Descriptor instead.
func (PatternFlowPppProtocolType_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{533, 0, 0}
}

type PatternFlowIgmpv1Version_Choice_Enum int32

const (
	PatternFlowIgmpv1Version_Choice_unspecified PatternFlowIgmpv1Version_Choice_Enum = 0
	PatternFlowIgmpv1Version_Choice_value       PatternFlowIgmpv1Version_Choice_Enum = 2
	PatternFlowIgmpv1Version_Choice_values      PatternFlowIgmpv1Version_Choice_Enum = 3
	PatternFlowIgmpv1Version_Choice_increment   PatternFlowIgmpv1Version_Choice_Enum = 4
	PatternFlowIgmpv1Version_Choice_decrement   PatternFlowIgmpv1Version_Choice_Enum = 5
)

// Enum value maps for PatternFlowIgmpv1Version_Choice_Enum.
var (
	PatternFlowIgmpv1Version_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIgmpv1Version_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIgmpv1Version_Choice_Enum) Enum() *PatternFlowIgmpv1Version_Choice_Enum {
	p := new(PatternFlowIgmpv1Version_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIgmpv1Version_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIgmpv1Version_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[271].Descriptor()
}

func (PatternFlowIgmpv1Version_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[271]
}

func (x PatternFlowIgmpv1Version_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIgmpv1Version_Choice_Enum.Descriptor instead.
func (PatternFlowIgmpv1Version_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{535, 0, 0}
}

type PatternFlowIgmpv1Type_Choice_Enum int32

const (
	PatternFlowIgmpv1Type_Choice_unspecified PatternFlowIgmpv1Type_Choice_Enum = 0
	PatternFlowIgmpv1Type_Choice_value       PatternFlowIgmpv1Type_Choice_Enum = 2
	PatternFlowIgmpv1Type_Choice_values      PatternFlowIgmpv1Type_Choice_Enum = 3
	PatternFlowIgmpv1Type_Choice_increment   PatternFlowIgmpv1Type_Choice_Enum = 4
	PatternFlowIgmpv1Type_Choice_decrement   PatternFlowIgmpv1Type_Choice_Enum = 5
)

// Enum value maps for PatternFlowIgmpv1Type_Choice_Enum.
var (
	PatternFlowIgmpv1Type_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIgmpv1Type_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIgmpv1Type_Choice_Enum) Enum() *PatternFlowIgmpv1Type_Choice_Enum {
	p := new(PatternFlowIgmpv1Type_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIgmpv1Type_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIgmpv1Type_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[272].Descriptor()
}

func (PatternFlowIgmpv1Type_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[272]
}

func (x PatternFlowIgmpv1Type_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIgmpv1Type_Choice_Enum.Descriptor instead.
func (PatternFlowIgmpv1Type_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{537, 0, 0}
}

type PatternFlowIgmpv1Unused_Choice_Enum int32

const (
	PatternFlowIgmpv1Unused_Choice_unspecified PatternFlowIgmpv1Unused_Choice_Enum = 0
	PatternFlowIgmpv1Unused_Choice_value       PatternFlowIgmpv1Unused_Choice_Enum = 2
	PatternFlowIgmpv1Unused_Choice_values      PatternFlowIgmpv1Unused_Choice_Enum = 3
	PatternFlowIgmpv1Unused_Choice_increment   PatternFlowIgmpv1Unused_Choice_Enum = 4
	PatternFlowIgmpv1Unused_Choice_decrement   PatternFlowIgmpv1Unused_Choice_Enum = 5
)

// Enum value maps for PatternFlowIgmpv1Unused_Choice_Enum.
var (
	PatternFlowIgmpv1Unused_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIgmpv1Unused_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIgmpv1Unused_Choice_Enum) Enum() *PatternFlowIgmpv1Unused_Choice_Enum {
	p := new(PatternFlowIgmpv1Unused_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIgmpv1Unused_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIgmpv1Unused_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[273].Descriptor()
}

func (PatternFlowIgmpv1Unused_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[273]
}

func (x PatternFlowIgmpv1Unused_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIgmpv1Unused_Choice_Enum.Descriptor instead.
func (PatternFlowIgmpv1Unused_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{539, 0, 0}
}

type PatternFlowIgmpv1Checksum_Choice_Enum int32

const (
	PatternFlowIgmpv1Checksum_Choice_unspecified PatternFlowIgmpv1Checksum_Choice_Enum = 0
	PatternFlowIgmpv1Checksum_Choice_generated   PatternFlowIgmpv1Checksum_Choice_Enum = 1
	PatternFlowIgmpv1Checksum_Choice_custom      PatternFlowIgmpv1Checksum_Choice_Enum = 2
)

// Enum value maps for PatternFlowIgmpv1Checksum_Choice_Enum.
var (
	PatternFlowIgmpv1Checksum_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		1: "generated",
		2: "custom",
	}
	PatternFlowIgmpv1Checksum_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"generated":   1,
		"custom":      2,
	}
)

func (x PatternFlowIgmpv1Checksum_Choice_Enum) Enum() *PatternFlowIgmpv1Checksum_Choice_Enum {
	p := new(PatternFlowIgmpv1Checksum_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIgmpv1Checksum_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIgmpv1Checksum_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[274].Descriptor()
}

func (PatternFlowIgmpv1Checksum_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[274]
}

func (x PatternFlowIgmpv1Checksum_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIgmpv1Checksum_Choice_Enum.Descriptor instead.
func (PatternFlowIgmpv1Checksum_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{540, 0, 0}
}

type PatternFlowIgmpv1Checksum_Generated_Enum int32

const (
	PatternFlowIgmpv1Checksum_Generated_unspecified PatternFlowIgmpv1Checksum_Generated_Enum = 0
	PatternFlowIgmpv1Checksum_Generated_good        PatternFlowIgmpv1Checksum_Generated_Enum = 1
	PatternFlowIgmpv1Checksum_Generated_bad         PatternFlowIgmpv1Checksum_Generated_Enum = 2
)

// Enum value maps for PatternFlowIgmpv1Checksum_Generated_Enum.
var (
	PatternFlowIgmpv1Checksum_Generated_Enum_name = map[int32]string{
		0: "unspecified",
		1: "good",
		2: "bad",
	}
	PatternFlowIgmpv1Checksum_Generated_Enum_value = map[string]int32{
		"unspecified": 0,
		"good":        1,
		"bad":         2,
	}
)

func (x PatternFlowIgmpv1Checksum_Generated_Enum) Enum() *PatternFlowIgmpv1Checksum_Generated_Enum {
	p := new(PatternFlowIgmpv1Checksum_Generated_Enum)
	*p = x
	return p
}

func (x PatternFlowIgmpv1Checksum_Generated_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIgmpv1Checksum_Generated_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[275].Descriptor()
}

func (PatternFlowIgmpv1Checksum_Generated_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[275]
}

func (x PatternFlowIgmpv1Checksum_Generated_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIgmpv1Checksum_Generated_Enum.Descriptor instead.
func (PatternFlowIgmpv1Checksum_Generated_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{540, 1, 0}
}

type PatternFlowIgmpv1GroupAddress_Choice_Enum int32

const (
	PatternFlowIgmpv1GroupAddress_Choice_unspecified PatternFlowIgmpv1GroupAddress_Choice_Enum = 0
	PatternFlowIgmpv1GroupAddress_Choice_value       PatternFlowIgmpv1GroupAddress_Choice_Enum = 2
	PatternFlowIgmpv1GroupAddress_Choice_values      PatternFlowIgmpv1GroupAddress_Choice_Enum = 3
	PatternFlowIgmpv1GroupAddress_Choice_increment   PatternFlowIgmpv1GroupAddress_Choice_Enum = 4
	PatternFlowIgmpv1GroupAddress_Choice_decrement   PatternFlowIgmpv1GroupAddress_Choice_Enum = 5
)

// Enum value maps for PatternFlowIgmpv1GroupAddress_Choice_Enum.
var (
	PatternFlowIgmpv1GroupAddress_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowIgmpv1GroupAddress_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowIgmpv1GroupAddress_Choice_Enum) Enum() *PatternFlowIgmpv1GroupAddress_Choice_Enum {
	p := new(PatternFlowIgmpv1GroupAddress_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowIgmpv1GroupAddress_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowIgmpv1GroupAddress_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[276].Descriptor()
}

func (PatternFlowIgmpv1GroupAddress_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[276]
}

func (x PatternFlowIgmpv1GroupAddress_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowIgmpv1GroupAddress_Choice_Enum.Descriptor instead.
func (PatternFlowIgmpv1GroupAddress_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{542, 0, 0}
}

type PatternFlowMplsLabel_Choice_Enum int32

const (
	PatternFlowMplsLabel_Choice_unspecified PatternFlowMplsLabel_Choice_Enum = 0
	PatternFlowMplsLabel_Choice_value       PatternFlowMplsLabel_Choice_Enum = 2
	PatternFlowMplsLabel_Choice_values      PatternFlowMplsLabel_Choice_Enum = 3
	PatternFlowMplsLabel_Choice_auto        PatternFlowMplsLabel_Choice_Enum = 1
	PatternFlowMplsLabel_Choice_increment   PatternFlowMplsLabel_Choice_Enum = 4
	PatternFlowMplsLabel_Choice_decrement   PatternFlowMplsLabel_Choice_Enum = 5
)

// Enum value maps for PatternFlowMplsLabel_Choice_Enum.
var (
	PatternFlowMplsLabel_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		1: "auto",
		4: "increment",
		5: "decrement",
	}
	PatternFlowMplsLabel_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"auto":        1,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowMplsLabel_Choice_Enum) Enum() *PatternFlowMplsLabel_Choice_Enum {
	p := new(PatternFlowMplsLabel_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowMplsLabel_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowMplsLabel_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[277].Descriptor()
}

func (PatternFlowMplsLabel_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[277]
}

func (x PatternFlowMplsLabel_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowMplsLabel_Choice_Enum.Descriptor instead.
func (PatternFlowMplsLabel_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{544, 0, 0}
}

type PatternFlowMplsTrafficClass_Choice_Enum int32

const (
	PatternFlowMplsTrafficClass_Choice_unspecified PatternFlowMplsTrafficClass_Choice_Enum = 0
	PatternFlowMplsTrafficClass_Choice_value       PatternFlowMplsTrafficClass_Choice_Enum = 2
	PatternFlowMplsTrafficClass_Choice_values      PatternFlowMplsTrafficClass_Choice_Enum = 3
	PatternFlowMplsTrafficClass_Choice_increment   PatternFlowMplsTrafficClass_Choice_Enum = 4
	PatternFlowMplsTrafficClass_Choice_decrement   PatternFlowMplsTrafficClass_Choice_Enum = 5
)

// Enum value maps for PatternFlowMplsTrafficClass_Choice_Enum.
var (
	PatternFlowMplsTrafficClass_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowMplsTrafficClass_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowMplsTrafficClass_Choice_Enum) Enum() *PatternFlowMplsTrafficClass_Choice_Enum {
	p := new(PatternFlowMplsTrafficClass_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowMplsTrafficClass_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowMplsTrafficClass_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[278].Descriptor()
}

func (PatternFlowMplsTrafficClass_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[278]
}

func (x PatternFlowMplsTrafficClass_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowMplsTrafficClass_Choice_Enum.Descriptor instead.
func (PatternFlowMplsTrafficClass_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{546, 0, 0}
}

type PatternFlowMplsBottomOfStack_Choice_Enum int32

const (
	PatternFlowMplsBottomOfStack_Choice_unspecified PatternFlowMplsBottomOfStack_Choice_Enum = 0
	PatternFlowMplsBottomOfStack_Choice_value       PatternFlowMplsBottomOfStack_Choice_Enum = 2
	PatternFlowMplsBottomOfStack_Choice_values      PatternFlowMplsBottomOfStack_Choice_Enum = 3
	PatternFlowMplsBottomOfStack_Choice_auto        PatternFlowMplsBottomOfStack_Choice_Enum = 1
	PatternFlowMplsBottomOfStack_Choice_increment   PatternFlowMplsBottomOfStack_Choice_Enum = 4
	PatternFlowMplsBottomOfStack_Choice_decrement   PatternFlowMplsBottomOfStack_Choice_Enum = 5
)

// Enum value maps for PatternFlowMplsBottomOfStack_Choice_Enum.
var (
	PatternFlowMplsBottomOfStack_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		1: "auto",
		4: "increment",
		5: "decrement",
	}
	PatternFlowMplsBottomOfStack_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"auto":        1,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowMplsBottomOfStack_Choice_Enum) Enum() *PatternFlowMplsBottomOfStack_Choice_Enum {
	p := new(PatternFlowMplsBottomOfStack_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowMplsBottomOfStack_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowMplsBottomOfStack_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[279].Descriptor()
}

func (PatternFlowMplsBottomOfStack_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[279]
}

func (x PatternFlowMplsBottomOfStack_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowMplsBottomOfStack_Choice_Enum.Descriptor instead.
func (PatternFlowMplsBottomOfStack_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{548, 0, 0}
}

type PatternFlowMplsTimeToLive_Choice_Enum int32

const (
	PatternFlowMplsTimeToLive_Choice_unspecified PatternFlowMplsTimeToLive_Choice_Enum = 0
	PatternFlowMplsTimeToLive_Choice_value       PatternFlowMplsTimeToLive_Choice_Enum = 2
	PatternFlowMplsTimeToLive_Choice_values      PatternFlowMplsTimeToLive_Choice_Enum = 3
	PatternFlowMplsTimeToLive_Choice_increment   PatternFlowMplsTimeToLive_Choice_Enum = 4
	PatternFlowMplsTimeToLive_Choice_decrement   PatternFlowMplsTimeToLive_Choice_Enum = 5
)

// Enum value maps for PatternFlowMplsTimeToLive_Choice_Enum.
var (
	PatternFlowMplsTimeToLive_Choice_Enum_name = map[int32]string{
		0: "unspecified",
		2: "value",
		3: "values",
		4: "increment",
		5: "decrement",
	}
	PatternFlowMplsTimeToLive_Choice_Enum_value = map[string]int32{
		"unspecified": 0,
		"value":       2,
		"values":      3,
		"increment":   4,
		"decrement":   5,
	}
)

func (x PatternFlowMplsTimeToLive_Choice_Enum) Enum() *PatternFlowMplsTimeToLive_Choice_Enum {
	p := new(PatternFlowMplsTimeToLive_Choice_Enum)
	*p = x
	return p
}

func (x PatternFlowMplsTimeToLive_Choice_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatternFlowMplsTimeToLive_Choice_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_otg_proto_enumTypes[280].Descriptor()
}

func (PatternFlowMplsTimeToLive_Choice_Enum) Type() protoreflect.EnumType {
	return &file_otg_proto_enumTypes[280]
}

func (x PatternFlowMplsTimeToLive_Choice_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatternFlowMplsTimeToLive_Choice_Enum.Descriptor instead.
func (PatternFlowMplsTimeToLive_Choice_Enum) EnumDescriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{550, 0, 0}
}

// A container for all models that are part of the configuration.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ports that will be configured on the traffic generator.
	Ports []*Port `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	// The LAGs that will be configured on the traffic generator.
	Lags []*Lag `protobuf:"bytes,2,rep,name=lags,proto3" json:"lags,omitempty"`
	// The layer1 settings that will be configured on the traffic generator.
	Layer1 []*Layer1 `protobuf:"bytes,3,rep,name=layer1,proto3" json:"layer1,omitempty"`
	// The capture settings that will be configured on the traffic generator.
	Captures []*Capture `protobuf:"bytes,4,rep,name=captures,proto3" json:"captures,omitempty"`
	// The emulated devices that will be configured on the traffic generator.
	// Each device contains configurations for network interfaces and
	// protocols running on top of those interfaces.
	Devices []*Device `protobuf:"bytes,5,rep,name=devices,proto3" json:"devices,omitempty"`
	// The flows that will be configured on the traffic generator.
	Flows []*Flow `protobuf:"bytes,6,rep,name=flows,proto3" json:"flows,omitempty"`
	// Description missing in models
	Events *Event `protobuf:"bytes,7,opt,name=events,proto3,oneof" json:"events,omitempty"`
	// Description missing in models
	Options *ConfigOptions `protobuf:"bytes,8,opt,name=options,proto3,oneof" json:"options,omitempty"`
	// LLDP protocol that will be configured on traffic generator.
	Lldp []*Lldp `protobuf:"bytes,9,rep,name=lldp,proto3" json:"lldp,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Config) GetLags() []*Lag {
	if x != nil {
		return x.Lags
	}
	return nil
}

func (x *Config) GetLayer1() []*Layer1 {
	if x != nil {
		return x.Layer1
	}
	return nil
}

func (x *Config) GetCaptures() []*Capture {
	if x != nil {
		return x.Captures
	}
	return nil
}

func (x *Config) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Config) GetFlows() []*Flow {
	if x != nil {
		return x.Flows
	}
	return nil
}

func (x *Config) GetEvents() *Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Config) GetOptions() *ConfigOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Config) GetLldp() []*Lldp {
	if x != nil {
		return x.Lldp
	}
	return nil
}

// Global configuration options.
type ConfigOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	PortOptions *PortOptions `protobuf:"bytes,1,opt,name=port_options,json=portOptions,proto3,oneof" json:"port_options,omitempty"`
	// Description missing in models
	ProtocolOptions *ProtocolOptions `protobuf:"bytes,2,opt,name=protocol_options,json=protocolOptions,proto3,oneof" json:"protocol_options,omitempty"`
}

func (x *ConfigOptions) Reset() {
	*x = ConfigOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigOptions) ProtoMessage() {}

func (x *ConfigOptions) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigOptions.ProtoReflect.Descriptor instead.
func (*ConfigOptions) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigOptions) GetPortOptions() *PortOptions {
	if x != nil {
		return x.PortOptions
	}
	return nil
}

func (x *ConfigOptions) GetProtocolOptions() *ProtocolOptions {
	if x != nil {
		return x.ProtocolOptions
	}
	return nil
}

// An abstract test port.
type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The location of a test port.  It is the endpoint where packets will emit from.
	// Test port locations can be the following:
	// - physical appliance with multiple ports
	// - physical chassis with multiple cards and ports
	// - local interface
	// - virtual machine, docker container, kubernetes cluster
	//
	// The test port location format is implementation specific. Use the /results/capabilities
	// API to determine what formats an  implementation supports for the location property.
	// Get the configured location state by using the /results/port API.
	Location *string `protobuf:"bytes,1,opt,name=location,proto3,oneof" json:"location,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{2}
}

func (x *Port) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *Port) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Common port options that apply to all configured Port objects.
type PortOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Preempt all the test port locations as defined by the  Port.Port.properties.location.
	// If the test ports defined by their location values are in use and  this value is
	// true, the test ports will be preempted.
	// default = False
	LocationPreemption *bool `protobuf:"varint,1,opt,name=location_preemption,json=locationPreemption,proto3,oneof" json:"location_preemption,omitempty"`
}

func (x *PortOptions) Reset() {
	*x = PortOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortOptions) ProtoMessage() {}

func (x *PortOptions) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortOptions.ProtoReflect.Descriptor instead.
func (*PortOptions) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{3}
}

func (x *PortOptions) GetLocationPreemption() bool {
	if x != nil && x.LocationPreemption != nil {
		return *x.LocationPreemption
	}
	return false
}

// The container for LAG (ports group) - aggregation of multiple LAG members (ports)
type Lag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Ports []*LagPort `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	// Description missing in models
	Protocol *LagProtocol `protobuf:"bytes,2,opt,name=protocol,proto3,oneof" json:"protocol,omitempty"`
	// Specifies the mininum number of member interfaces that must be active for the aggregate
	// interface to be available.
	// If the aggregate interface is not available due to min-links criterion not being
	// met, LACPDUs continue to be transmitted and received by the member interfaces if
	// LACP is enabled, but other PDUs are not transmitted or received.
	// default = 1
	MinLinks *int32 `protobuf:"varint,3,opt,name=min_links,json=minLinks,proto3,oneof" json:"min_links,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Lag) Reset() {
	*x = Lag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lag) ProtoMessage() {}

func (x *Lag) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lag.ProtoReflect.Descriptor instead.
func (*Lag) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{4}
}

func (x *Lag) GetPorts() []*LagPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Lag) GetProtocol() *LagProtocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Lag) GetMinLinks() int32 {
	if x != nil && x.MinLinks != nil {
		return *x.MinLinks
	}
	return 0
}

func (x *Lag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The container for a port's ethernet interface and LAG protocol settings
type LagPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a port object that will be part of the LAG.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	// required = true
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// Description missing in models
	Lacp *LagPortLacp `protobuf:"bytes,2,opt,name=lacp,proto3,oneof" json:"lacp,omitempty"`
	// Description missing in models
	// required = true
	Ethernet *DeviceEthernetBase `protobuf:"bytes,3,opt,name=ethernet,proto3" json:"ethernet,omitempty"`
}

func (x *LagPort) Reset() {
	*x = LagPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagPort) ProtoMessage() {}

func (x *LagPort) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagPort.ProtoReflect.Descriptor instead.
func (*LagPort) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{5}
}

func (x *LagPort) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (x *LagPort) GetLacp() *LagPortLacp {
	if x != nil {
		return x.Lacp
	}
	return nil
}

func (x *LagPort) GetEthernet() *DeviceEthernetBase {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

// Description missing in models
type LagProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of controlling protocol for the LAG (ports group).
	// default = Choice.Enum.lacp
	Choice *LagProtocol_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.LagProtocol_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Lacp *LagProtocolLacp `protobuf:"bytes,2,opt,name=lacp,proto3,oneof" json:"lacp,omitempty"`
	// Description missing in models
	Static *LagProtocolStatic `protobuf:"bytes,3,opt,name=static,proto3,oneof" json:"static,omitempty"`
}

func (x *LagProtocol) Reset() {
	*x = LagProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagProtocol) ProtoMessage() {}

func (x *LagProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagProtocol.ProtoReflect.Descriptor instead.
func (*LagProtocol) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{6}
}

func (x *LagProtocol) GetChoice() LagProtocol_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return LagProtocol_Choice_unspecified
}

func (x *LagProtocol) GetLacp() *LagProtocolLacp {
	if x != nil {
		return x.Lacp
	}
	return nil
}

func (x *LagProtocol) GetStatic() *LagProtocolStatic {
	if x != nil {
		return x.Static
	}
	return nil
}

// The container for static link aggregation protocol settings.
type LagProtocolStatic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The static lag id
	// default = 0
	LagId *int32 `protobuf:"varint,1,opt,name=lag_id,json=lagId,proto3,oneof" json:"lag_id,omitempty"`
}

func (x *LagProtocolStatic) Reset() {
	*x = LagProtocolStatic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagProtocolStatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagProtocolStatic) ProtoMessage() {}

func (x *LagProtocolStatic) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagProtocolStatic.ProtoReflect.Descriptor instead.
func (*LagProtocolStatic) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{7}
}

func (x *LagProtocolStatic) GetLagId() int32 {
	if x != nil && x.LagId != nil {
		return *x.LagId
	}
	return 0
}

// The container for link aggregation control protocol settings of a LAG (ports group).
type LagProtocolLacp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actor system id
	// default = 00:00:00:00:00:00
	ActorSystemId *string `protobuf:"bytes,1,opt,name=actor_system_id,json=actorSystemId,proto3,oneof" json:"actor_system_id,omitempty"`
	// The actor system priority
	// default = 0
	ActorSystemPriority *int32 `protobuf:"varint,2,opt,name=actor_system_priority,json=actorSystemPriority,proto3,oneof" json:"actor_system_priority,omitempty"`
	// The actor key
	// default = 0
	ActorKey *int32 `protobuf:"varint,3,opt,name=actor_key,json=actorKey,proto3,oneof" json:"actor_key,omitempty"`
}

func (x *LagProtocolLacp) Reset() {
	*x = LagProtocolLacp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagProtocolLacp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagProtocolLacp) ProtoMessage() {}

func (x *LagProtocolLacp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagProtocolLacp.ProtoReflect.Descriptor instead.
func (*LagProtocolLacp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{8}
}

func (x *LagProtocolLacp) GetActorSystemId() string {
	if x != nil && x.ActorSystemId != nil {
		return *x.ActorSystemId
	}
	return ""
}

func (x *LagProtocolLacp) GetActorSystemPriority() int32 {
	if x != nil && x.ActorSystemPriority != nil {
		return *x.ActorSystemPriority
	}
	return 0
}

func (x *LagProtocolLacp) GetActorKey() int32 {
	if x != nil && x.ActorKey != nil {
		return *x.ActorKey
	}
	return 0
}

// The container for link aggregation control protocol settings of a LAG member (port).
type LagPortLacp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actor port number
	// default = 0
	ActorPortNumber *int32 `protobuf:"varint,1,opt,name=actor_port_number,json=actorPortNumber,proto3,oneof" json:"actor_port_number,omitempty"`
	// The actor port priority
	// default = 1
	ActorPortPriority *int32 `protobuf:"varint,2,opt,name=actor_port_priority,json=actorPortPriority,proto3,oneof" json:"actor_port_priority,omitempty"`
	// Sets the value of LACP actor activity as either passive or active.
	// Passive indicates the port's preference for not transmitting  LACPDUs unless its
	// partner's control is Active.
	// Active indicates the port's preference to participate in the  protocol regardless
	// of the partner's control value.
	// default = ActorActivity.Enum.active
	ActorActivity *LagPortLacp_ActorActivity_Enum `protobuf:"varint,3,opt,name=actor_activity,json=actorActivity,proto3,enum=otg.LagPortLacp_ActorActivity_Enum,oneof" json:"actor_activity,omitempty"`
	// This field defines how frequently LACPDUs are sent to the link partner
	// default = 0
	LacpduPeriodicTimeInterval *int32 `protobuf:"varint,4,opt,name=lacpdu_periodic_time_interval,json=lacpduPeriodicTimeInterval,proto3,oneof" json:"lacpdu_periodic_time_interval,omitempty"`
	// This timer is used to detect whether received protocol information has expired
	// default = 0
	LacpduTimeout *int32 `protobuf:"varint,5,opt,name=lacpdu_timeout,json=lacpduTimeout,proto3,oneof" json:"lacpdu_timeout,omitempty"`
}

func (x *LagPortLacp) Reset() {
	*x = LagPortLacp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagPortLacp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagPortLacp) ProtoMessage() {}

func (x *LagPortLacp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagPortLacp.ProtoReflect.Descriptor instead.
func (*LagPortLacp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{9}
}

func (x *LagPortLacp) GetActorPortNumber() int32 {
	if x != nil && x.ActorPortNumber != nil {
		return *x.ActorPortNumber
	}
	return 0
}

func (x *LagPortLacp) GetActorPortPriority() int32 {
	if x != nil && x.ActorPortPriority != nil {
		return *x.ActorPortPriority
	}
	return 0
}

func (x *LagPortLacp) GetActorActivity() LagPortLacp_ActorActivity_Enum {
	if x != nil && x.ActorActivity != nil {
		return *x.ActorActivity
	}
	return LagPortLacp_ActorActivity_unspecified
}

func (x *LagPortLacp) GetLacpduPeriodicTimeInterval() int32 {
	if x != nil && x.LacpduPeriodicTimeInterval != nil {
		return *x.LacpduPeriodicTimeInterval
	}
	return 0
}

func (x *LagPortLacp) GetLacpduTimeout() int32 {
	if x != nil && x.LacpduTimeout != nil {
		return *x.LacpduTimeout
	}
	return 0
}

// Base Ethernet interface.
type DeviceEthernetBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Media Access Control address.
	// required = true
	Mac string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	// Maximum Transmission Unit.
	// default = 1500
	Mtu *int32 `protobuf:"varint,2,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
	// List of VLANs
	Vlans []*DeviceVlan `protobuf:"bytes,3,rep,name=vlans,proto3" json:"vlans,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeviceEthernetBase) Reset() {
	*x = DeviceEthernetBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEthernetBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEthernetBase) ProtoMessage() {}

func (x *DeviceEthernetBase) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEthernetBase.ProtoReflect.Descriptor instead.
func (*DeviceEthernetBase) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{10}
}

func (x *DeviceEthernetBase) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *DeviceEthernetBase) GetMtu() int32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

func (x *DeviceEthernetBase) GetVlans() []*DeviceVlan {
	if x != nil {
		return x.Vlans
	}
	return nil
}

func (x *DeviceEthernetBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// An Ethernet interface with IPv4 and IPv6 addresses.
type DeviceEthernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status: deprecated
	// Status: deprecated
	// The unique name of a Port or a LAG that will emulate this interface.
	// port_name is deprecated and will be removed in future release.port_name and connection
	// can't be used together, use either port_name or connection.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	// - /components/schemas/Lag/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	// - /components/schemas/Lag/properties/name
	//
	PortName *string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3,oneof" json:"port_name,omitempty"`
	// Device connection to physical, LAG or another device.
	Connection *EthernetConnection `protobuf:"bytes,2,opt,name=connection,proto3,oneof" json:"connection,omitempty"`
	// List of IPv4 addresses and their gateways.
	Ipv4Addresses []*DeviceIpv4 `protobuf:"bytes,3,rep,name=ipv4_addresses,json=ipv4Addresses,proto3" json:"ipv4_addresses,omitempty"`
	// List of global IPv6 addresses and their gateways.
	// The Link Local IPv6 address will be automatically generated.
	Ipv6Addresses []*DeviceIpv6 `protobuf:"bytes,4,rep,name=ipv6_addresses,json=ipv6Addresses,proto3" json:"ipv6_addresses,omitempty"`
	// Media Access Control address.
	// required = true
	Mac string `protobuf:"bytes,5,opt,name=mac,proto3" json:"mac,omitempty"`
	// Maximum Transmission Unit.
	// default = 1500
	Mtu *int32 `protobuf:"varint,6,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
	// List of VLANs
	Vlans []*DeviceVlan `protobuf:"bytes,7,rep,name=vlans,proto3" json:"vlans,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeviceEthernet) Reset() {
	*x = DeviceEthernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEthernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEthernet) ProtoMessage() {}

func (x *DeviceEthernet) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEthernet.ProtoReflect.Descriptor instead.
func (*DeviceEthernet) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{11}
}

func (x *DeviceEthernet) GetPortName() string {
	if x != nil && x.PortName != nil {
		return *x.PortName
	}
	return ""
}

func (x *DeviceEthernet) GetConnection() *EthernetConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *DeviceEthernet) GetIpv4Addresses() []*DeviceIpv4 {
	if x != nil {
		return x.Ipv4Addresses
	}
	return nil
}

func (x *DeviceEthernet) GetIpv6Addresses() []*DeviceIpv6 {
	if x != nil {
		return x.Ipv6Addresses
	}
	return nil
}

func (x *DeviceEthernet) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *DeviceEthernet) GetMtu() int32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

func (x *DeviceEthernet) GetVlans() []*DeviceVlan {
	if x != nil {
		return x.Vlans
	}
	return nil
}

func (x *DeviceEthernet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Ethernet interface connection to a port, LAG or VXLAN tunnel.
type EthernetConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// port_name, lag_name or vxlan_name
	Choice *EthernetConnection_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.EthernetConnection_Choice_Enum,oneof" json:"choice,omitempty"`
	// Name of the port that the Ethernet interface is configured on.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	PortName *string `protobuf:"bytes,2,opt,name=port_name,json=portName,proto3,oneof" json:"port_name,omitempty"`
	// Name of the LAG that the Ethernet interface is configured on.
	//
	// x-constraint:
	// - /components/schemas/Lag/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Lag/properties/name
	//
	LagName *string `protobuf:"bytes,3,opt,name=lag_name,json=lagName,proto3,oneof" json:"lag_name,omitempty"`
	// Name of the VXLAN instance (or VXLAN tunnel) that this Ethernet interface is connected
	// to.
	//
	// x-constraint:
	// - #/components/schemas/Vxlan.V4Tunnel/properties/name
	// - #/components/schemas/Vxlan.V6Tunnel/properties/name
	//
	//
	// x-constraint:
	// - #/components/schemas/Vxlan.V4Tunnel/properties/name
	// - #/components/schemas/Vxlan.V6Tunnel/properties/name
	//
	VxlanName *string `protobuf:"bytes,4,opt,name=vxlan_name,json=vxlanName,proto3,oneof" json:"vxlan_name,omitempty"`
}

func (x *EthernetConnection) Reset() {
	*x = EthernetConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetConnection) ProtoMessage() {}

func (x *EthernetConnection) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetConnection.ProtoReflect.Descriptor instead.
func (*EthernetConnection) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{12}
}

func (x *EthernetConnection) GetChoice() EthernetConnection_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return EthernetConnection_Choice_unspecified
}

func (x *EthernetConnection) GetPortName() string {
	if x != nil && x.PortName != nil {
		return *x.PortName
	}
	return ""
}

func (x *EthernetConnection) GetLagName() string {
	if x != nil && x.LagName != nil {
		return *x.LagName
	}
	return ""
}

func (x *EthernetConnection) GetVxlanName() string {
	if x != nil && x.VxlanName != nil {
		return *x.VxlanName
	}
	return ""
}

// Emulated VLAN protocol.
type DeviceVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tag protocol identifier
	// default = Tpid.Enum.x8100
	Tpid *DeviceVlan_Tpid_Enum `protobuf:"varint,1,opt,name=tpid,proto3,enum=otg.DeviceVlan_Tpid_Enum,oneof" json:"tpid,omitempty"`
	// Priority code point
	// default = 0
	Priority *int32 `protobuf:"varint,2,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	// VLAN identifier
	// default = 1
	Id *int32 `protobuf:"varint,3,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeviceVlan) Reset() {
	*x = DeviceVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceVlan) ProtoMessage() {}

func (x *DeviceVlan) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceVlan.ProtoReflect.Descriptor instead.
func (*DeviceVlan) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{13}
}

func (x *DeviceVlan) GetTpid() DeviceVlan_Tpid_Enum {
	if x != nil && x.Tpid != nil {
		return *x.Tpid
	}
	return DeviceVlan_Tpid_unspecified
}

func (x *DeviceVlan) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *DeviceVlan) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DeviceVlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// An IPv4 interface with gateway
type DeviceIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IPv4 address of the gateway
	// required = true
	Gateway string `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Description missing in models
	GatewayMac *DeviceIpv4GatewayMAC `protobuf:"bytes,2,opt,name=gateway_mac,json=gatewayMac,proto3,oneof" json:"gateway_mac,omitempty"`
	// The IPv4 address
	// required = true
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// The prefix of the IPv4 address.
	// default = 24
	Prefix *int32 `protobuf:"varint,4,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeviceIpv4) Reset() {
	*x = DeviceIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIpv4) ProtoMessage() {}

func (x *DeviceIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIpv4.ProtoReflect.Descriptor instead.
func (*DeviceIpv4) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{14}
}

func (x *DeviceIpv4) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DeviceIpv4) GetGatewayMac() *DeviceIpv4GatewayMAC {
	if x != nil {
		return x.GatewayMac
	}
	return nil
}

func (x *DeviceIpv4) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DeviceIpv4) GetPrefix() int32 {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return 0
}

func (x *DeviceIpv4) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// An IPv4 Loopback interface.
type DeviceIpv4Loopback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique name of the Ethernet interface behind which this Loopback  interface will
	// be created.
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	//
	// required = true
	EthName string `protobuf:"bytes,1,opt,name=eth_name,json=ethName,proto3" json:"eth_name,omitempty"`
	// The IPv4 Loopback address with prefix length of 32.
	// default = 0.0.0.0
	Address *string `protobuf:"bytes,2,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeviceIpv4Loopback) Reset() {
	*x = DeviceIpv4Loopback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIpv4Loopback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIpv4Loopback) ProtoMessage() {}

func (x *DeviceIpv4Loopback) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIpv4Loopback.ProtoReflect.Descriptor instead.
func (*DeviceIpv4Loopback) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{15}
}

func (x *DeviceIpv4Loopback) GetEthName() string {
	if x != nil {
		return x.EthName
	}
	return ""
}

func (x *DeviceIpv4Loopback) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *DeviceIpv4Loopback) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// By default auto(resolved gateway mac) is set.  Setting a value would mean that ARP
// will not be used for learning MAC of connected device. The user-configured MAC address
// will be used for auto-filling the destination
// MAC address in the control and data packets sent from this IPv4 endpoint
// whenever applicable.
type DeviceIpv4GatewayMAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// auto or configured value.
	// default = Choice.Enum.auto
	Choice *DeviceIpv4GatewayMAC_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.DeviceIpv4GatewayMAC_Choice_Enum,oneof" json:"choice,omitempty"`
	// The OTG implementation can provide a system generated value for this property. If
	// the OTG is unable to generate a value the default value must be used.
	// default = 00:00:00:00:00:00
	Auto *string `protobuf:"bytes,2,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:00
	Value *string `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *DeviceIpv4GatewayMAC) Reset() {
	*x = DeviceIpv4GatewayMAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIpv4GatewayMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIpv4GatewayMAC) ProtoMessage() {}

func (x *DeviceIpv4GatewayMAC) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIpv4GatewayMAC.ProtoReflect.Descriptor instead.
func (*DeviceIpv4GatewayMAC) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{16}
}

func (x *DeviceIpv4GatewayMAC) GetChoice() DeviceIpv4GatewayMAC_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return DeviceIpv4GatewayMAC_Choice_unspecified
}

func (x *DeviceIpv4GatewayMAC) GetAuto() string {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return ""
}

func (x *DeviceIpv4GatewayMAC) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// An IPv6 interface with gateway.
type DeviceIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IPv6 gateway address.
	// required = true
	Gateway string `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Description missing in models
	GatewayMac *DeviceIpv6GatewayMAC `protobuf:"bytes,2,opt,name=gateway_mac,json=gatewayMac,proto3,oneof" json:"gateway_mac,omitempty"`
	// The IPv6 address.
	// required = true
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// The network prefix.
	// default = 64
	Prefix *int32 `protobuf:"varint,4,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeviceIpv6) Reset() {
	*x = DeviceIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIpv6) ProtoMessage() {}

func (x *DeviceIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIpv6.ProtoReflect.Descriptor instead.
func (*DeviceIpv6) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{17}
}

func (x *DeviceIpv6) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *DeviceIpv6) GetGatewayMac() *DeviceIpv6GatewayMAC {
	if x != nil {
		return x.GatewayMac
	}
	return nil
}

func (x *DeviceIpv6) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DeviceIpv6) GetPrefix() int32 {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return 0
}

func (x *DeviceIpv6) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// An IPv6 Loopback interface
type DeviceIpv6Loopback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique name of the Ethernet interface behind which this Loopback
	// interface will be created.
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	//
	// required = true
	EthName string `protobuf:"bytes,1,opt,name=eth_name,json=ethName,proto3" json:"eth_name,omitempty"`
	// The IPv6 Loopback address with prefix length of 128.
	// default = ::0
	Address *string `protobuf:"bytes,2,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeviceIpv6Loopback) Reset() {
	*x = DeviceIpv6Loopback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIpv6Loopback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIpv6Loopback) ProtoMessage() {}

func (x *DeviceIpv6Loopback) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIpv6Loopback.ProtoReflect.Descriptor instead.
func (*DeviceIpv6Loopback) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceIpv6Loopback) GetEthName() string {
	if x != nil {
		return x.EthName
	}
	return ""
}

func (x *DeviceIpv6Loopback) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *DeviceIpv6Loopback) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// By default auto(resolved gateway mac) is set. Setting a value would mean that ND
// will not be used for learning MAC of connected device. The user-configured MAC address
// will be used for auto-filling the destination
// MAC address in the control and data packets sent from this IPv6 endpoint
// whenever applicable.
type DeviceIpv6GatewayMAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// auto or configured value.
	// default = Choice.Enum.auto
	Choice *DeviceIpv6GatewayMAC_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.DeviceIpv6GatewayMAC_Choice_Enum,oneof" json:"choice,omitempty"`
	// The OTG implementation can provide a system generated value for this property. If
	// the OTG is unable to generate a value the default value must be used.
	// default = 00:00:00:00:00:00
	Auto *string `protobuf:"bytes,2,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:00
	Value *string `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *DeviceIpv6GatewayMAC) Reset() {
	*x = DeviceIpv6GatewayMAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIpv6GatewayMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIpv6GatewayMAC) ProtoMessage() {}

func (x *DeviceIpv6GatewayMAC) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIpv6GatewayMAC.ProtoReflect.Descriptor instead.
func (*DeviceIpv6GatewayMAC) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{19}
}

func (x *DeviceIpv6GatewayMAC) GetChoice() DeviceIpv6GatewayMAC_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return DeviceIpv6GatewayMAC_Choice_unspecified
}

func (x *DeviceIpv6GatewayMAC) GetAuto() string {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return ""
}

func (x *DeviceIpv6GatewayMAC) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// A container for layer1 settings.
type Layer1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of unique names of port objects that will share the
	// choice settings.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	PortNames []string `protobuf:"bytes,1,rep,name=port_names,json=portNames,proto3" json:"port_names,omitempty"`
	// Set the speed if supported.
	// default = Speed.Enum.speed_10_gbps
	Speed *Layer1_Speed_Enum `protobuf:"varint,2,opt,name=speed,proto3,enum=otg.Layer1_Speed_Enum,oneof" json:"speed,omitempty"`
	// Set the type of media interface if supported.
	Media *Layer1_Media_Enum `protobuf:"varint,3,opt,name=media,proto3,enum=otg.Layer1_Media_Enum,oneof" json:"media,omitempty"`
	// Enable promiscuous mode if supported.
	// default = True
	Promiscuous *bool `protobuf:"varint,4,opt,name=promiscuous,proto3,oneof" json:"promiscuous,omitempty"`
	// Set the maximum transmission unit size if supported.
	// default = 1500
	Mtu *int32 `protobuf:"varint,5,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
	// Set to true to override the auto_negotiate, link_training
	// and rs_fec settings for gigabit ethernet interfaces.
	IeeeMediaDefaults *bool `protobuf:"varint,6,opt,name=ieee_media_defaults,json=ieeeMediaDefaults,proto3,oneof" json:"ieee_media_defaults,omitempty"`
	// Enable/disable auto negotiation.
	AutoNegotiate *bool `protobuf:"varint,7,opt,name=auto_negotiate,json=autoNegotiate,proto3,oneof" json:"auto_negotiate,omitempty"`
	// Description missing in models
	AutoNegotiation *Layer1AutoNegotiation `protobuf:"bytes,8,opt,name=auto_negotiation,json=autoNegotiation,proto3,oneof" json:"auto_negotiation,omitempty"`
	// Description missing in models
	FlowControl *Layer1FlowControl `protobuf:"bytes,9,opt,name=flow_control,json=flowControl,proto3,oneof" json:"flow_control,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Layer1) Reset() {
	*x = Layer1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer1) ProtoMessage() {}

func (x *Layer1) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer1.ProtoReflect.Descriptor instead.
func (*Layer1) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{20}
}

func (x *Layer1) GetPortNames() []string {
	if x != nil {
		return x.PortNames
	}
	return nil
}

func (x *Layer1) GetSpeed() Layer1_Speed_Enum {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return Layer1_Speed_unspecified
}

func (x *Layer1) GetMedia() Layer1_Media_Enum {
	if x != nil && x.Media != nil {
		return *x.Media
	}
	return Layer1_Media_unspecified
}

func (x *Layer1) GetPromiscuous() bool {
	if x != nil && x.Promiscuous != nil {
		return *x.Promiscuous
	}
	return false
}

func (x *Layer1) GetMtu() int32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

func (x *Layer1) GetIeeeMediaDefaults() bool {
	if x != nil && x.IeeeMediaDefaults != nil {
		return *x.IeeeMediaDefaults
	}
	return false
}

func (x *Layer1) GetAutoNegotiate() bool {
	if x != nil && x.AutoNegotiate != nil {
		return *x.AutoNegotiate
	}
	return false
}

func (x *Layer1) GetAutoNegotiation() *Layer1AutoNegotiation {
	if x != nil {
		return x.AutoNegotiation
	}
	return nil
}

func (x *Layer1) GetFlowControl() *Layer1FlowControl {
	if x != nil {
		return x.FlowControl
	}
	return nil
}

func (x *Layer1) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Configuration for auto negotiation settings
type Layer1AutoNegotiation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If auto_negotiate is true and the interface supports this option
	// then this speed will be advertised.
	// default = True
	Advertise_1000Mbps *bool `protobuf:"varint,1,opt,name=advertise_1000_mbps,json=advertise1000Mbps,proto3,oneof" json:"advertise_1000_mbps,omitempty"`
	// If auto_negotiate is true and the interface supports this option
	// then this speed will be advertised.
	// default = True
	Advertise_100FdMbps *bool `protobuf:"varint,2,opt,name=advertise_100_fd_mbps,json=advertise100FdMbps,proto3,oneof" json:"advertise_100_fd_mbps,omitempty"`
	// If auto_negotiate is true and the interface supports this option
	// then this speed will be advertised.
	// default = True
	Advertise_100HdMbps *bool `protobuf:"varint,3,opt,name=advertise_100_hd_mbps,json=advertise100HdMbps,proto3,oneof" json:"advertise_100_hd_mbps,omitempty"`
	// If auto_negotiate is true and the interface supports this option
	// then this speed will be advertised.
	// default = True
	Advertise_10FdMbps *bool `protobuf:"varint,4,opt,name=advertise_10_fd_mbps,json=advertise10FdMbps,proto3,oneof" json:"advertise_10_fd_mbps,omitempty"`
	// If auto_negotiate is true and the interface supports this option
	// then this speed will be advertised.
	// default = True
	Advertise_10HdMbps *bool `protobuf:"varint,5,opt,name=advertise_10_hd_mbps,json=advertise10HdMbps,proto3,oneof" json:"advertise_10_hd_mbps,omitempty"`
	// Enable/disable gigabit ethernet link training.
	// default = False
	LinkTraining *bool `protobuf:"varint,6,opt,name=link_training,json=linkTraining,proto3,oneof" json:"link_training,omitempty"`
	// Enable/disable gigabit ethernet reed solomon forward error correction (RS FEC).
	// default = False
	RsFec *bool `protobuf:"varint,7,opt,name=rs_fec,json=rsFec,proto3,oneof" json:"rs_fec,omitempty"`
}

func (x *Layer1AutoNegotiation) Reset() {
	*x = Layer1AutoNegotiation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer1AutoNegotiation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer1AutoNegotiation) ProtoMessage() {}

func (x *Layer1AutoNegotiation) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer1AutoNegotiation.ProtoReflect.Descriptor instead.
func (*Layer1AutoNegotiation) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{21}
}

func (x *Layer1AutoNegotiation) GetAdvertise_1000Mbps() bool {
	if x != nil && x.Advertise_1000Mbps != nil {
		return *x.Advertise_1000Mbps
	}
	return false
}

func (x *Layer1AutoNegotiation) GetAdvertise_100FdMbps() bool {
	if x != nil && x.Advertise_100FdMbps != nil {
		return *x.Advertise_100FdMbps
	}
	return false
}

func (x *Layer1AutoNegotiation) GetAdvertise_100HdMbps() bool {
	if x != nil && x.Advertise_100HdMbps != nil {
		return *x.Advertise_100HdMbps
	}
	return false
}

func (x *Layer1AutoNegotiation) GetAdvertise_10FdMbps() bool {
	if x != nil && x.Advertise_10FdMbps != nil {
		return *x.Advertise_10FdMbps
	}
	return false
}

func (x *Layer1AutoNegotiation) GetAdvertise_10HdMbps() bool {
	if x != nil && x.Advertise_10HdMbps != nil {
		return *x.Advertise_10HdMbps
	}
	return false
}

func (x *Layer1AutoNegotiation) GetLinkTraining() bool {
	if x != nil && x.LinkTraining != nil {
		return *x.LinkTraining
	}
	return false
}

func (x *Layer1AutoNegotiation) GetRsFec() bool {
	if x != nil && x.RsFec != nil {
		return *x.RsFec
	}
	return false
}

// A container for layer1 receive flow control settings.
// To enable flow control settings on ports this object must be a valid
// object not a null value.
type Layer1FlowControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The 48bit mac address that the layer1 port names will listen on
	// for a directed pause.
	// default = 01:80:C2:00:00:01
	DirectedAddress *string `protobuf:"bytes,1,opt,name=directed_address,json=directedAddress,proto3,oneof" json:"directed_address,omitempty"`
	// The type of priority flow control.
	// default = Choice.Enum.ieee_802_1qbb
	Choice *Layer1FlowControl_Choice_Enum `protobuf:"varint,2,opt,name=choice,proto3,enum=otg.Layer1FlowControl_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Ieee_802_1Qbb *Layer1Ieee8021Qbb `protobuf:"bytes,3,opt,name=ieee_802_1qbb,json=ieee8021qbb,proto3,oneof" json:"ieee_802_1qbb,omitempty"`
	// Description missing in models
	Ieee_802_3X *Layer1Ieee8023X `protobuf:"bytes,4,opt,name=ieee_802_3x,json=ieee8023x,proto3,oneof" json:"ieee_802_3x,omitempty"`
}

func (x *Layer1FlowControl) Reset() {
	*x = Layer1FlowControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer1FlowControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer1FlowControl) ProtoMessage() {}

func (x *Layer1FlowControl) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer1FlowControl.ProtoReflect.Descriptor instead.
func (*Layer1FlowControl) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{22}
}

func (x *Layer1FlowControl) GetDirectedAddress() string {
	if x != nil && x.DirectedAddress != nil {
		return *x.DirectedAddress
	}
	return ""
}

func (x *Layer1FlowControl) GetChoice() Layer1FlowControl_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return Layer1FlowControl_Choice_unspecified
}

func (x *Layer1FlowControl) GetIeee_802_1Qbb() *Layer1Ieee8021Qbb {
	if x != nil {
		return x.Ieee_802_1Qbb
	}
	return nil
}

func (x *Layer1FlowControl) GetIeee_802_3X() *Layer1Ieee8023X {
	if x != nil {
		return x.Ieee_802_3X
	}
	return nil
}

// A container for ieee 802.3x rx pause settings
type Layer1Ieee8023X struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Layer1Ieee8023X) Reset() {
	*x = Layer1Ieee8023X{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer1Ieee8023X) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer1Ieee8023X) ProtoMessage() {}

func (x *Layer1Ieee8023X) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer1Ieee8023X.ProtoReflect.Descriptor instead.
func (*Layer1Ieee8023X) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{23}
}

// These settings enhance the existing 802.3x pause priority capabilities
// to enable flow control based on 802.1p priorities (classes of service).
type Layer1Ieee8021Qbb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The upper limit on the transmit time of a queue after receiving a
	// message to pause a specified priority.
	// A value of 0 or null indicates that pfc delay will not be enabled.
	// default = 0
	PfcDelay *int32 `protobuf:"varint,1,opt,name=pfc_delay,json=pfcDelay,proto3,oneof" json:"pfc_delay,omitempty"`
	// The valid values are null, 0 - 7.
	// A null value indicates there is no setting for this pfc class.
	// default = 0
	PfcClass_0 *int32 `protobuf:"varint,2,opt,name=pfc_class_0,json=pfcClass0,proto3,oneof" json:"pfc_class_0,omitempty"`
	// The valid values are null, 0 - 7.
	// A null value indicates there is no setting for this pfc class.
	// default = 1
	PfcClass_1 *int32 `protobuf:"varint,3,opt,name=pfc_class_1,json=pfcClass1,proto3,oneof" json:"pfc_class_1,omitempty"`
	// The valid values are null, 0 - 7.
	// A null value indicates there is no setting for this pfc class.
	// default = 2
	PfcClass_2 *int32 `protobuf:"varint,4,opt,name=pfc_class_2,json=pfcClass2,proto3,oneof" json:"pfc_class_2,omitempty"`
	// The valid values are null, 0 - 7.
	// A null value indicates there is no setting for this pfc class.
	// default = 3
	PfcClass_3 *int32 `protobuf:"varint,5,opt,name=pfc_class_3,json=pfcClass3,proto3,oneof" json:"pfc_class_3,omitempty"`
	// The valid values are null, 0 - 7.
	// A null value indicates there is no setting for this pfc class.
	// default = 4
	PfcClass_4 *int32 `protobuf:"varint,6,opt,name=pfc_class_4,json=pfcClass4,proto3,oneof" json:"pfc_class_4,omitempty"`
	// The valid values are null, 0 - 7.
	// A null value indicates there is no setting for this pfc class.
	// default = 5
	PfcClass_5 *int32 `protobuf:"varint,7,opt,name=pfc_class_5,json=pfcClass5,proto3,oneof" json:"pfc_class_5,omitempty"`
	// The valid values are null, 0 - 7.
	// A null value indicates there is no setting for this pfc class.
	// default = 6
	PfcClass_6 *int32 `protobuf:"varint,8,opt,name=pfc_class_6,json=pfcClass6,proto3,oneof" json:"pfc_class_6,omitempty"`
	// The valid values are null, 0 - 7.
	// A null value indicates there is no setting for this pfc class.
	// default = 7
	PfcClass_7 *int32 `protobuf:"varint,9,opt,name=pfc_class_7,json=pfcClass7,proto3,oneof" json:"pfc_class_7,omitempty"`
}

func (x *Layer1Ieee8021Qbb) Reset() {
	*x = Layer1Ieee8021Qbb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer1Ieee8021Qbb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer1Ieee8021Qbb) ProtoMessage() {}

func (x *Layer1Ieee8021Qbb) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer1Ieee8021Qbb.ProtoReflect.Descriptor instead.
func (*Layer1Ieee8021Qbb) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{24}
}

func (x *Layer1Ieee8021Qbb) GetPfcDelay() int32 {
	if x != nil && x.PfcDelay != nil {
		return *x.PfcDelay
	}
	return 0
}

func (x *Layer1Ieee8021Qbb) GetPfcClass_0() int32 {
	if x != nil && x.PfcClass_0 != nil {
		return *x.PfcClass_0
	}
	return 0
}

func (x *Layer1Ieee8021Qbb) GetPfcClass_1() int32 {
	if x != nil && x.PfcClass_1 != nil {
		return *x.PfcClass_1
	}
	return 0
}

func (x *Layer1Ieee8021Qbb) GetPfcClass_2() int32 {
	if x != nil && x.PfcClass_2 != nil {
		return *x.PfcClass_2
	}
	return 0
}

func (x *Layer1Ieee8021Qbb) GetPfcClass_3() int32 {
	if x != nil && x.PfcClass_3 != nil {
		return *x.PfcClass_3
	}
	return 0
}

func (x *Layer1Ieee8021Qbb) GetPfcClass_4() int32 {
	if x != nil && x.PfcClass_4 != nil {
		return *x.PfcClass_4
	}
	return 0
}

func (x *Layer1Ieee8021Qbb) GetPfcClass_5() int32 {
	if x != nil && x.PfcClass_5 != nil {
		return *x.PfcClass_5
	}
	return 0
}

func (x *Layer1Ieee8021Qbb) GetPfcClass_6() int32 {
	if x != nil && x.PfcClass_6 != nil {
		return *x.PfcClass_6
	}
	return 0
}

func (x *Layer1Ieee8021Qbb) GetPfcClass_7() int32 {
	if x != nil && x.PfcClass_7 != nil {
		return *x.PfcClass_7
	}
	return 0
}

// Status: under-review
// Status: under-review
// Configuration for capture settings.
type Capture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique names of ports that the capture settings will apply to. Port_names cannot
	// be duplicated between capture objects.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	PortNames []string `protobuf:"bytes,1,rep,name=port_names,json=portNames,proto3" json:"port_names,omitempty"`
	// A list of filters to apply to the capturing ports. If no filters are specified then
	// all packets will be captured. A capture can have multiple filters. The number of
	// filters supported is determined by the implementation which can be retrieved using
	// the capabilities API.
	// When multiple filters are specified the capture implementation  must && (and) all
	// the filters.
	Filters []*CaptureFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// Overwrite the capture buffer.
	// default = True
	Overwrite *bool `protobuf:"varint,3,opt,name=overwrite,proto3,oneof" json:"overwrite,omitempty"`
	// The maximum size of each captured packet. If no value is specified or it is null
	// then the entire packet will be captured.
	PacketSize *int32 `protobuf:"varint,4,opt,name=packet_size,json=packetSize,proto3,oneof" json:"packet_size,omitempty"`
	// The format of the capture file.
	// default = Format.Enum.pcap
	Format *Capture_Format_Enum `protobuf:"varint,5,opt,name=format,proto3,enum=otg.Capture_Format_Enum,oneof" json:"format,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Capture) Reset() {
	*x = Capture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capture) ProtoMessage() {}

func (x *Capture) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capture.ProtoReflect.Descriptor instead.
func (*Capture) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{25}
}

func (x *Capture) GetPortNames() []string {
	if x != nil {
		return x.PortNames
	}
	return nil
}

func (x *Capture) GetFilters() []*CaptureFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Capture) GetOverwrite() bool {
	if x != nil && x.Overwrite != nil {
		return *x.Overwrite
	}
	return false
}

func (x *Capture) GetPacketSize() int32 {
	if x != nil && x.PacketSize != nil {
		return *x.PacketSize
	}
	return 0
}

func (x *Capture) GetFormat() Capture_Format_Enum {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Capture_Format_unspecified
}

func (x *Capture) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Configuration for capture filters
type CaptureFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of capture filter.
	// default = Choice.Enum.custom
	Choice *CaptureFilter_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.CaptureFilter_Choice_Enum,oneof" json:"choice,omitempty"`
	// Offset from last filter in the list. If no filters are present it is offset from
	// position 0. Multiple custom filters can be present, the length of each custom filter
	// is the length of the value being filtered.
	Custom *CaptureCustom `protobuf:"bytes,2,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
	// Description missing in models
	Ethernet *CaptureEthernet `protobuf:"bytes,3,opt,name=ethernet,proto3,oneof" json:"ethernet,omitempty"`
	// Description missing in models
	Vlan *CaptureVlan `protobuf:"bytes,4,opt,name=vlan,proto3,oneof" json:"vlan,omitempty"`
	// Description missing in models
	Ipv4 *CaptureIpv4 `protobuf:"bytes,5,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
	// Description missing in models
	Ipv6 *CaptureIpv6 `protobuf:"bytes,6,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
}

func (x *CaptureFilter) Reset() {
	*x = CaptureFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureFilter) ProtoMessage() {}

func (x *CaptureFilter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureFilter.ProtoReflect.Descriptor instead.
func (*CaptureFilter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{26}
}

func (x *CaptureFilter) GetChoice() CaptureFilter_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return CaptureFilter_Choice_unspecified
}

func (x *CaptureFilter) GetCustom() *CaptureCustom {
	if x != nil {
		return x.Custom
	}
	return nil
}

func (x *CaptureFilter) GetEthernet() *CaptureEthernet {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *CaptureFilter) GetVlan() *CaptureVlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *CaptureFilter) GetIpv4() *CaptureIpv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *CaptureFilter) GetIpv6() *CaptureIpv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

// Description missing in models
type CaptureCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bit offset of field to filter on
	// default = 0
	Offset *int32 `protobuf:"varint,1,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	// The bit length of field to filter on
	// default = 8
	BitLength *int32 `protobuf:"varint,2,opt,name=bit_length,json=bitLength,proto3,oneof" json:"bit_length,omitempty"`
	// Description missing in models
	// default = 00
	Value *string `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = 00
	Mask *string `protobuf:"bytes,4,opt,name=mask,proto3,oneof" json:"mask,omitempty"`
	// Description missing in models
	// default = False
	Negate *bool `protobuf:"varint,5,opt,name=negate,proto3,oneof" json:"negate,omitempty"`
}

func (x *CaptureCustom) Reset() {
	*x = CaptureCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureCustom) ProtoMessage() {}

func (x *CaptureCustom) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureCustom.ProtoReflect.Descriptor instead.
func (*CaptureCustom) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{27}
}

func (x *CaptureCustom) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CaptureCustom) GetBitLength() int32 {
	if x != nil && x.BitLength != nil {
		return *x.BitLength
	}
	return 0
}

func (x *CaptureCustom) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *CaptureCustom) GetMask() string {
	if x != nil && x.Mask != nil {
		return *x.Mask
	}
	return ""
}

func (x *CaptureCustom) GetNegate() bool {
	if x != nil && x.Negate != nil {
		return *x.Negate
	}
	return false
}

// Description missing in models
type CaptureField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 00
	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = 00
	Mask *string `protobuf:"bytes,2,opt,name=mask,proto3,oneof" json:"mask,omitempty"`
	// Description missing in models
	// default = False
	Negate *bool `protobuf:"varint,3,opt,name=negate,proto3,oneof" json:"negate,omitempty"`
}

func (x *CaptureField) Reset() {
	*x = CaptureField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureField) ProtoMessage() {}

func (x *CaptureField) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureField.ProtoReflect.Descriptor instead.
func (*CaptureField) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{28}
}

func (x *CaptureField) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *CaptureField) GetMask() string {
	if x != nil && x.Mask != nil {
		return *x.Mask
	}
	return ""
}

func (x *CaptureField) GetNegate() bool {
	if x != nil && x.Negate != nil {
		return *x.Negate
	}
	return false
}

// Description missing in models
type CaptureEthernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Src *CaptureField `protobuf:"bytes,1,opt,name=src,proto3,oneof" json:"src,omitempty"`
	// Description missing in models
	Dst *CaptureField `protobuf:"bytes,2,opt,name=dst,proto3,oneof" json:"dst,omitempty"`
	// Description missing in models
	EtherType *CaptureField `protobuf:"bytes,3,opt,name=ether_type,json=etherType,proto3,oneof" json:"ether_type,omitempty"`
	// Description missing in models
	PfcQueue *CaptureField `protobuf:"bytes,4,opt,name=pfc_queue,json=pfcQueue,proto3,oneof" json:"pfc_queue,omitempty"`
}

func (x *CaptureEthernet) Reset() {
	*x = CaptureEthernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureEthernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureEthernet) ProtoMessage() {}

func (x *CaptureEthernet) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureEthernet.ProtoReflect.Descriptor instead.
func (*CaptureEthernet) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{29}
}

func (x *CaptureEthernet) GetSrc() *CaptureField {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *CaptureEthernet) GetDst() *CaptureField {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *CaptureEthernet) GetEtherType() *CaptureField {
	if x != nil {
		return x.EtherType
	}
	return nil
}

func (x *CaptureEthernet) GetPfcQueue() *CaptureField {
	if x != nil {
		return x.PfcQueue
	}
	return nil
}

// Description missing in models
type CaptureVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Priority *CaptureField `protobuf:"bytes,1,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	// Description missing in models
	Cfi *CaptureField `protobuf:"bytes,2,opt,name=cfi,proto3,oneof" json:"cfi,omitempty"`
	// Description missing in models
	Id *CaptureField `protobuf:"bytes,3,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Description missing in models
	Protocol *CaptureField `protobuf:"bytes,4,opt,name=protocol,proto3,oneof" json:"protocol,omitempty"`
}

func (x *CaptureVlan) Reset() {
	*x = CaptureVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureVlan) ProtoMessage() {}

func (x *CaptureVlan) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureVlan.ProtoReflect.Descriptor instead.
func (*CaptureVlan) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{30}
}

func (x *CaptureVlan) GetPriority() *CaptureField {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *CaptureVlan) GetCfi() *CaptureField {
	if x != nil {
		return x.Cfi
	}
	return nil
}

func (x *CaptureVlan) GetId() *CaptureField {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CaptureVlan) GetProtocol() *CaptureField {
	if x != nil {
		return x.Protocol
	}
	return nil
}

// Description missing in models
type CaptureIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Version *CaptureField `protobuf:"bytes,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Description missing in models
	HeaderLength *CaptureField `protobuf:"bytes,2,opt,name=header_length,json=headerLength,proto3,oneof" json:"header_length,omitempty"`
	// Description missing in models
	Priority *CaptureField `protobuf:"bytes,3,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	// Description missing in models
	TotalLength *CaptureField `protobuf:"bytes,4,opt,name=total_length,json=totalLength,proto3,oneof" json:"total_length,omitempty"`
	// Description missing in models
	Identification *CaptureField `protobuf:"bytes,5,opt,name=identification,proto3,oneof" json:"identification,omitempty"`
	// Description missing in models
	Reserved *CaptureField `protobuf:"bytes,6,opt,name=reserved,proto3,oneof" json:"reserved,omitempty"`
	// Description missing in models
	DontFragment *CaptureField `protobuf:"bytes,7,opt,name=dont_fragment,json=dontFragment,proto3,oneof" json:"dont_fragment,omitempty"`
	// Description missing in models
	MoreFragments *CaptureField `protobuf:"bytes,8,opt,name=more_fragments,json=moreFragments,proto3,oneof" json:"more_fragments,omitempty"`
	// Description missing in models
	FragmentOffset *CaptureField `protobuf:"bytes,9,opt,name=fragment_offset,json=fragmentOffset,proto3,oneof" json:"fragment_offset,omitempty"`
	// Description missing in models
	TimeToLive *CaptureField `protobuf:"bytes,10,opt,name=time_to_live,json=timeToLive,proto3,oneof" json:"time_to_live,omitempty"`
	// Description missing in models
	Protocol *CaptureField `protobuf:"bytes,11,opt,name=protocol,proto3,oneof" json:"protocol,omitempty"`
	// Description missing in models
	HeaderChecksum *CaptureField `protobuf:"bytes,12,opt,name=header_checksum,json=headerChecksum,proto3,oneof" json:"header_checksum,omitempty"`
	// Description missing in models
	Src *CaptureField `protobuf:"bytes,13,opt,name=src,proto3,oneof" json:"src,omitempty"`
	// Description missing in models
	Dst *CaptureField `protobuf:"bytes,14,opt,name=dst,proto3,oneof" json:"dst,omitempty"`
}

func (x *CaptureIpv4) Reset() {
	*x = CaptureIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureIpv4) ProtoMessage() {}

func (x *CaptureIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureIpv4.ProtoReflect.Descriptor instead.
func (*CaptureIpv4) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{31}
}

func (x *CaptureIpv4) GetVersion() *CaptureField {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CaptureIpv4) GetHeaderLength() *CaptureField {
	if x != nil {
		return x.HeaderLength
	}
	return nil
}

func (x *CaptureIpv4) GetPriority() *CaptureField {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *CaptureIpv4) GetTotalLength() *CaptureField {
	if x != nil {
		return x.TotalLength
	}
	return nil
}

func (x *CaptureIpv4) GetIdentification() *CaptureField {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *CaptureIpv4) GetReserved() *CaptureField {
	if x != nil {
		return x.Reserved
	}
	return nil
}

func (x *CaptureIpv4) GetDontFragment() *CaptureField {
	if x != nil {
		return x.DontFragment
	}
	return nil
}

func (x *CaptureIpv4) GetMoreFragments() *CaptureField {
	if x != nil {
		return x.MoreFragments
	}
	return nil
}

func (x *CaptureIpv4) GetFragmentOffset() *CaptureField {
	if x != nil {
		return x.FragmentOffset
	}
	return nil
}

func (x *CaptureIpv4) GetTimeToLive() *CaptureField {
	if x != nil {
		return x.TimeToLive
	}
	return nil
}

func (x *CaptureIpv4) GetProtocol() *CaptureField {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *CaptureIpv4) GetHeaderChecksum() *CaptureField {
	if x != nil {
		return x.HeaderChecksum
	}
	return nil
}

func (x *CaptureIpv4) GetSrc() *CaptureField {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *CaptureIpv4) GetDst() *CaptureField {
	if x != nil {
		return x.Dst
	}
	return nil
}

// Description missing in models
type CaptureIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Version *CaptureField `protobuf:"bytes,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Description missing in models
	TrafficClass *CaptureField `protobuf:"bytes,2,opt,name=traffic_class,json=trafficClass,proto3,oneof" json:"traffic_class,omitempty"`
	// Description missing in models
	FlowLabel *CaptureField `protobuf:"bytes,3,opt,name=flow_label,json=flowLabel,proto3,oneof" json:"flow_label,omitempty"`
	// Description missing in models
	PayloadLength *CaptureField `protobuf:"bytes,4,opt,name=payload_length,json=payloadLength,proto3,oneof" json:"payload_length,omitempty"`
	// Description missing in models
	NextHeader *CaptureField `protobuf:"bytes,5,opt,name=next_header,json=nextHeader,proto3,oneof" json:"next_header,omitempty"`
	// Description missing in models
	HopLimit *CaptureField `protobuf:"bytes,6,opt,name=hop_limit,json=hopLimit,proto3,oneof" json:"hop_limit,omitempty"`
	// Description missing in models
	Src *CaptureField `protobuf:"bytes,7,opt,name=src,proto3,oneof" json:"src,omitempty"`
	// Description missing in models
	Dst *CaptureField `protobuf:"bytes,8,opt,name=dst,proto3,oneof" json:"dst,omitempty"`
}

func (x *CaptureIpv6) Reset() {
	*x = CaptureIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureIpv6) ProtoMessage() {}

func (x *CaptureIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureIpv6.ProtoReflect.Descriptor instead.
func (*CaptureIpv6) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{32}
}

func (x *CaptureIpv6) GetVersion() *CaptureField {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *CaptureIpv6) GetTrafficClass() *CaptureField {
	if x != nil {
		return x.TrafficClass
	}
	return nil
}

func (x *CaptureIpv6) GetFlowLabel() *CaptureField {
	if x != nil {
		return x.FlowLabel
	}
	return nil
}

func (x *CaptureIpv6) GetPayloadLength() *CaptureField {
	if x != nil {
		return x.PayloadLength
	}
	return nil
}

func (x *CaptureIpv6) GetNextHeader() *CaptureField {
	if x != nil {
		return x.NextHeader
	}
	return nil
}

func (x *CaptureIpv6) GetHopLimit() *CaptureField {
	if x != nil {
		return x.HopLimit
	}
	return nil
}

func (x *CaptureIpv6) GetSrc() *CaptureField {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *CaptureIpv6) GetDst() *CaptureField {
	if x != nil {
		return x.Dst
	}
	return nil
}

// A container for emulated interfaces, loopback interfaces and protocol configurations.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethernet configuration for one or more emulated network interfaces.
	Ethernets []*DeviceEthernet `protobuf:"bytes,1,rep,name=ethernets,proto3" json:"ethernets,omitempty"`
	// IPv4 Loopback interface that can be attached to an Ethernet in the same device  or
	// to an Ethernet in another device.
	Ipv4Loopbacks []*DeviceIpv4Loopback `protobuf:"bytes,2,rep,name=ipv4_loopbacks,json=ipv4Loopbacks,proto3" json:"ipv4_loopbacks,omitempty"`
	// IPv6 Loopback interface that can be attached to an Ethernet in the same device  or
	// to an Ethernet in another device.
	Ipv6Loopbacks []*DeviceIpv6Loopback `protobuf:"bytes,3,rep,name=ipv6_loopbacks,json=ipv6Loopbacks,proto3" json:"ipv6_loopbacks,omitempty"`
	// The properties of an IS-IS router and its children,  such as IS-IS interfaces and
	// route ranges.
	Isis *DeviceIsisRouter `protobuf:"bytes,4,opt,name=isis,proto3,oneof" json:"isis,omitempty"`
	// The properties of BGP router and its children,  such as BGPv4, BGPv6 peers and their
	// route ranges.
	Bgp *DeviceBgpRouter `protobuf:"bytes,5,opt,name=bgp,proto3,oneof" json:"bgp,omitempty"`
	// Configuration of VXLAN tunnel interfaces RFC Ref: https://datatracker.ietf.org/doc/html/rfc7348
	Vxlan *DeviceVxlan `protobuf:"bytes,6,opt,name=vxlan,proto3,oneof" json:"vxlan,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// The properties of an RSVP router and its children.
	Rsvp *DeviceRsvp `protobuf:"bytes,8,opt,name=rsvp,proto3,oneof" json:"rsvp,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{33}
}

func (x *Device) GetEthernets() []*DeviceEthernet {
	if x != nil {
		return x.Ethernets
	}
	return nil
}

func (x *Device) GetIpv4Loopbacks() []*DeviceIpv4Loopback {
	if x != nil {
		return x.Ipv4Loopbacks
	}
	return nil
}

func (x *Device) GetIpv6Loopbacks() []*DeviceIpv6Loopback {
	if x != nil {
		return x.Ipv6Loopbacks
	}
	return nil
}

func (x *Device) GetIsis() *DeviceIsisRouter {
	if x != nil {
		return x.Isis
	}
	return nil
}

func (x *Device) GetBgp() *DeviceBgpRouter {
	if x != nil {
		return x.Bgp
	}
	return nil
}

func (x *Device) GetVxlan() *DeviceVxlan {
	if x != nil {
		return x.Vxlan
	}
	return nil
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetRsvp() *DeviceRsvp {
	if x != nil {
		return x.Rsvp
	}
	return nil
}

// Common options that apply to all configured protocols and interfaces.
type ProtocolOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When set to true, all underlying resources for configured protocols   and interfaces
	// shall be created and corresponding protocol session negotiation shall be initiated.
	// Otherwise, when set to false,  corresponding protocol session negotiation will need
	// to be initiated  using a separate set_protocol_state API call.
	// default = True
	AutoStartAll *bool `protobuf:"varint,1,opt,name=auto_start_all,json=autoStartAll,proto3,oneof" json:"auto_start_all,omitempty"`
}

func (x *ProtocolOptions) Reset() {
	*x = ProtocolOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolOptions) ProtoMessage() {}

func (x *ProtocolOptions) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolOptions.ProtoReflect.Descriptor instead.
func (*ProtocolOptions) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{34}
}

func (x *ProtocolOptions) GetAutoStartAll() bool {
	if x != nil && x.AutoStartAll != nil {
		return *x.AutoStartAll
	}
	return false
}

// Status: under-review
// Status: under-review
// A container of properties for an ISIS router and its interfaces.
type DeviceIsisRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This contains the properties of a Multi-Instance-capable routers or MI-RTR. Each
	// router can emulate one ISIS instance at a time.
	Instance *DeviceIsisMultiInstance `protobuf:"bytes,1,opt,name=instance,proto3,oneof" json:"instance,omitempty"`
	// The System ID for this emulated ISIS router, e.g. 640100010000.
	// required = true
	SystemId string `protobuf:"bytes,2,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	// List of ISIS interfaces for this router.
	Interfaces []*IsisInterface `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// Contains basic properties of an ISIS Router.
	Basic *IsisBasic `protobuf:"bytes,4,opt,name=basic,proto3,oneof" json:"basic,omitempty"`
	// Contains advance properties of an ISIS Router..
	Advanced *IsisAdvanced `protobuf:"bytes,5,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// ISIS Router authentication properties.
	RouterAuth *IsisAuthentication `protobuf:"bytes,6,opt,name=router_auth,json=routerAuth,proto3,oneof" json:"router_auth,omitempty"`
	// Emulated ISIS IPv4 routes.
	V4Routes []*IsisV4RouteRange `protobuf:"bytes,7,rep,name=v4_routes,json=v4Routes,proto3" json:"v4_routes,omitempty"`
	// Emulated ISIS IPv6 routes.
	V6Routes []*IsisV6RouteRange `protobuf:"bytes,8,rep,name=v6_routes,json=v6Routes,proto3" json:"v6_routes,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeviceIsisRouter) Reset() {
	*x = DeviceIsisRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIsisRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIsisRouter) ProtoMessage() {}

func (x *DeviceIsisRouter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIsisRouter.ProtoReflect.Descriptor instead.
func (*DeviceIsisRouter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{35}
}

func (x *DeviceIsisRouter) GetInstance() *DeviceIsisMultiInstance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *DeviceIsisRouter) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *DeviceIsisRouter) GetInterfaces() []*IsisInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *DeviceIsisRouter) GetBasic() *IsisBasic {
	if x != nil {
		return x.Basic
	}
	return nil
}

func (x *DeviceIsisRouter) GetAdvanced() *IsisAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *DeviceIsisRouter) GetRouterAuth() *IsisAuthentication {
	if x != nil {
		return x.RouterAuth
	}
	return nil
}

func (x *DeviceIsisRouter) GetV4Routes() []*IsisV4RouteRange {
	if x != nil {
		return x.V4Routes
	}
	return nil
}

func (x *DeviceIsisRouter) GetV6Routes() []*IsisV6RouteRange {
	if x != nil {
		return x.V6Routes
	}
	return nil
}

func (x *DeviceIsisRouter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Status: under-review
// Status: under-review
// This container properties of an Multi-Instance-capable router (MI-RTR).
type DeviceIsisMultiInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instance Identifier (IID) TLV will associate a PDU with an ISIS instance  by using
	// a unique 16-bit number and including one or more  Instance-Specific Topology Identifiers
	// (ITIDs).
	// default = 1
	Iid *int32 `protobuf:"varint,1,opt,name=iid,proto3,oneof" json:"iid,omitempty"`
	// This contains one or more ITIDs that will be advertised in IID TLV.
	Itids []int32 `protobuf:"varint,2,rep,packed,name=itids,proto3" json:"itids,omitempty"`
}

func (x *DeviceIsisMultiInstance) Reset() {
	*x = DeviceIsisMultiInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIsisMultiInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIsisMultiInstance) ProtoMessage() {}

func (x *DeviceIsisMultiInstance) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIsisMultiInstance.ProtoReflect.Descriptor instead.
func (*DeviceIsisMultiInstance) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{36}
}

func (x *DeviceIsisMultiInstance) GetIid() int32 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *DeviceIsisMultiInstance) GetItids() []int32 {
	if x != nil {
		return x.Itids
	}
	return nil
}

// Status: under-review
// Status: under-review
// Configuration for single ISIS interface.
type IsisInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique name of the Ethernet interface on which ISIS is running. Two ISIS interfaces
	// cannot share the same Ethernet.
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	//
	// required = true
	EthName string `protobuf:"bytes,1,opt,name=eth_name,json=ethName,proto3" json:"eth_name,omitempty"`
	// The default metric cost for the interface.
	// default = 10
	Metric *int32 `protobuf:"varint,2,opt,name=metric,proto3,oneof" json:"metric,omitempty"`
	// The type of network link.
	// default = NetworkType.Enum.broadcast
	NetworkType *IsisInterface_NetworkType_Enum `protobuf:"varint,3,opt,name=network_type,json=networkType,proto3,enum=otg.IsisInterface_NetworkType_Enum,oneof" json:"network_type,omitempty"`
	// This indicates whether this router is participating in Level-1 (L1),
	// Level-2 (L2) or both L1 and L2 domains on this interface.
	// default = LevelType.Enum.level_2
	LevelType *IsisInterface_LevelType_Enum `protobuf:"varint,4,opt,name=level_type,json=levelType,proto3,enum=otg.IsisInterface_LevelType_Enum,oneof" json:"level_type,omitempty"`
	// Settings of Level 1 Hello.
	L1Settings *IsisInterfaceLevel `protobuf:"bytes,5,opt,name=l1_settings,json=l1Settings,proto3,oneof" json:"l1_settings,omitempty"`
	// Settings of Level 2 Hello.
	L2Settings *IsisInterfaceLevel `protobuf:"bytes,6,opt,name=l2_settings,json=l2Settings,proto3,oneof" json:"l2_settings,omitempty"`
	// Contains the properties of multiple topologies.
	MultiTopologyIds []*IsisMT `protobuf:"bytes,7,rep,name=multi_topology_ids,json=multiTopologyIds,proto3" json:"multi_topology_ids,omitempty"`
	// Contains a list of Traffic Engineering attributes.
	TrafficEngineering []*LinkStateTE `protobuf:"bytes,8,rep,name=traffic_engineering,json=trafficEngineering,proto3" json:"traffic_engineering,omitempty"`
	// The Circuit authentication method used for the interfaces on this emulated ISIS v4/v6
	// router.
	Authentication *IsisInterfaceAuthentication `protobuf:"bytes,9,opt,name=authentication,proto3,oneof" json:"authentication,omitempty"`
	// Optional container for advanced interface properties.
	Advanced *IsisInterfaceAdvanced `protobuf:"bytes,10,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Link protection on the ISIS link between two interfaces.
	LinkProtection *IsisInterfaceLinkProtection `protobuf:"bytes,11,opt,name=link_protection,json=linkProtection,proto3,oneof" json:"link_protection,omitempty"`
	// This contains list of SRLG values for the link between two interfaces.
	SrlgValues []int32 `protobuf:"varint,12,rep,packed,name=srlg_values,json=srlgValues,proto3" json:"srlg_values,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *IsisInterface) Reset() {
	*x = IsisInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisInterface) ProtoMessage() {}

func (x *IsisInterface) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisInterface.ProtoReflect.Descriptor instead.
func (*IsisInterface) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{37}
}

func (x *IsisInterface) GetEthName() string {
	if x != nil {
		return x.EthName
	}
	return ""
}

func (x *IsisInterface) GetMetric() int32 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

func (x *IsisInterface) GetNetworkType() IsisInterface_NetworkType_Enum {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return IsisInterface_NetworkType_unspecified
}

func (x *IsisInterface) GetLevelType() IsisInterface_LevelType_Enum {
	if x != nil && x.LevelType != nil {
		return *x.LevelType
	}
	return IsisInterface_LevelType_unspecified
}

func (x *IsisInterface) GetL1Settings() *IsisInterfaceLevel {
	if x != nil {
		return x.L1Settings
	}
	return nil
}

func (x *IsisInterface) GetL2Settings() *IsisInterfaceLevel {
	if x != nil {
		return x.L2Settings
	}
	return nil
}

func (x *IsisInterface) GetMultiTopologyIds() []*IsisMT {
	if x != nil {
		return x.MultiTopologyIds
	}
	return nil
}

func (x *IsisInterface) GetTrafficEngineering() []*LinkStateTE {
	if x != nil {
		return x.TrafficEngineering
	}
	return nil
}

func (x *IsisInterface) GetAuthentication() *IsisInterfaceAuthentication {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *IsisInterface) GetAdvanced() *IsisInterfaceAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *IsisInterface) GetLinkProtection() *IsisInterfaceLinkProtection {
	if x != nil {
		return x.LinkProtection
	}
	return nil
}

func (x *IsisInterface) GetSrlgValues() []int32 {
	if x != nil {
		return x.SrlgValues
	}
	return nil
}

func (x *IsisInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Configuration for the properties of Level 1 Hello.
type IsisInterfaceLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Priority setting in Level 1 LAN Hellos for Designated Router election.
	// default = 0
	Priority *int32 `protobuf:"varint,1,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	// The Hello interval for Level 1 Hello messages, in seconds.
	// default = 10
	HelloInterval *int32 `protobuf:"varint,2,opt,name=hello_interval,json=helloInterval,proto3,oneof" json:"hello_interval,omitempty"`
	// The Dead (Holding Time) interval for Level 1 Hello messages, in seconds.
	// default = 30
	DeadInterval *int32 `protobuf:"varint,3,opt,name=dead_interval,json=deadInterval,proto3,oneof" json:"dead_interval,omitempty"`
}

func (x *IsisInterfaceLevel) Reset() {
	*x = IsisInterfaceLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisInterfaceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisInterfaceLevel) ProtoMessage() {}

func (x *IsisInterfaceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisInterfaceLevel.ProtoReflect.Descriptor instead.
func (*IsisInterfaceLevel) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{38}
}

func (x *IsisInterfaceLevel) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *IsisInterfaceLevel) GetHelloInterval() int32 {
	if x != nil && x.HelloInterval != nil {
		return *x.HelloInterval
	}
	return 0
}

func (x *IsisInterfaceLevel) GetDeadInterval() int32 {
	if x != nil && x.DeadInterval != nil {
		return *x.DeadInterval
	}
	return 0
}

// Status: under-review
// Status: under-review
// Configuration of properties per interface per topology when multiple topologies are
// configured in an ISIS router.
// in a ISIS router.
type IsisMT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Multi Topology ID for one of the topologies supported on the ISIS interface.
	// default = 0
	MtId *int32 `protobuf:"varint,1,opt,name=mt_id,json=mtId,proto3,oneof" json:"mt_id,omitempty"`
	// Specifies the link metric for this topology on the ISIS interface.
	// default = 10
	LinkMetric *int32 `protobuf:"varint,2,opt,name=link_metric,json=linkMetric,proto3,oneof" json:"link_metric,omitempty"`
}

func (x *IsisMT) Reset() {
	*x = IsisMT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisMT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisMT) ProtoMessage() {}

func (x *IsisMT) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisMT.ProtoReflect.Descriptor instead.
func (*IsisMT) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{39}
}

func (x *IsisMT) GetMtId() int32 {
	if x != nil && x.MtId != nil {
		return *x.MtId
	}
	return 0
}

func (x *IsisMT) GetLinkMetric() int32 {
	if x != nil && x.LinkMetric != nil {
		return *x.LinkMetric
	}
	return 0
}

// Status: under-review
// Status: under-review
// A container for Traffic Engineering properties on a interface.
type LinkStateTE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Administrative group sub-TLV (sub-TLV 3). It is a 4-octet
	// user-defined bit mask used to assign administrative group numbers
	// to the interface, for use in assigning colors and resource classes.
	// Each set bit corresponds to a single administrative group for this
	// interface. The settings translate into Group numbers, which range
	// from 0 to 31 (integers).
	// default = 00000000
	AdministrativeGroup *string `protobuf:"bytes,1,opt,name=administrative_group,json=administrativeGroup,proto3,oneof" json:"administrative_group,omitempty"`
	// The user-assigned link metric for Traffic Engineering.
	// default = 0
	MetricLevel *int64 `protobuf:"varint,2,opt,name=metric_level,json=metricLevel,proto3,oneof" json:"metric_level,omitempty"`
	// The maximum link bandwidth (sub-TLV 9) in bytes/sec allowed for this
	// link for a direction.
	// default = 125000000
	MaxBandwith *int64 `protobuf:"varint,3,opt,name=max_bandwith,json=maxBandwith,proto3,oneof" json:"max_bandwith,omitempty"`
	// The maximum link bandwidth (sub-TLV 10) in bytes/sec allowed for this
	// link in a direction.
	// default = 125000000
	MaxReservableBandwidth *int64 `protobuf:"varint,4,opt,name=max_reservable_bandwidth,json=maxReservableBandwidth,proto3,oneof" json:"max_reservable_bandwidth,omitempty"`
	// Configuration of bandwidths of priority 0 through priority 7.
	PriorityBandwidths *LinkStatepriorityBandwidths `protobuf:"bytes,5,opt,name=priority_bandwidths,json=priorityBandwidths,proto3,oneof" json:"priority_bandwidths,omitempty"`
}

func (x *LinkStateTE) Reset() {
	*x = LinkStateTE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkStateTE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkStateTE) ProtoMessage() {}

func (x *LinkStateTE) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkStateTE.ProtoReflect.Descriptor instead.
func (*LinkStateTE) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{40}
}

func (x *LinkStateTE) GetAdministrativeGroup() string {
	if x != nil && x.AdministrativeGroup != nil {
		return *x.AdministrativeGroup
	}
	return ""
}

func (x *LinkStateTE) GetMetricLevel() int64 {
	if x != nil && x.MetricLevel != nil {
		return *x.MetricLevel
	}
	return 0
}

func (x *LinkStateTE) GetMaxBandwith() int64 {
	if x != nil && x.MaxBandwith != nil {
		return *x.MaxBandwith
	}
	return 0
}

func (x *LinkStateTE) GetMaxReservableBandwidth() int64 {
	if x != nil && x.MaxReservableBandwidth != nil {
		return *x.MaxReservableBandwidth
	}
	return 0
}

func (x *LinkStateTE) GetPriorityBandwidths() *LinkStatepriorityBandwidths {
	if x != nil {
		return x.PriorityBandwidths
	}
	return nil
}

// Specifies the amount of bandwidth that can be reserved with a setup priority of 0
//
// through 7, arranged in increasing order with priority 0 having highest priority.
//
// In ISIS, this is sent in sub-TLV (11) of Extended IS Reachability TLV.
type LinkStatepriorityBandwidths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the amount of bandwidth that can be reserved for the Priority 0.
	// default = 125000000
	Pb0 *int64 `protobuf:"varint,1,opt,name=pb0,proto3,oneof" json:"pb0,omitempty"`
	// Specifies the amount of bandwidth that can be reserved for the Priority 1.
	// default = 125000000
	Pb1 *int64 `protobuf:"varint,2,opt,name=pb1,proto3,oneof" json:"pb1,omitempty"`
	// Specify the amount of bandwidth that can be reserved for the Priority 2.
	// default = 125000000
	Pb2 *int64 `protobuf:"varint,3,opt,name=pb2,proto3,oneof" json:"pb2,omitempty"`
	// Specifies the amount of bandwidth that can be reserved for the Priority 3.
	// default = 125000000
	Pb3 *int64 `protobuf:"varint,4,opt,name=pb3,proto3,oneof" json:"pb3,omitempty"`
	// Specifies the amount of bandwidth that can be reserved for the Priority 4.
	// default = 125000000
	Pb4 *int64 `protobuf:"varint,5,opt,name=pb4,proto3,oneof" json:"pb4,omitempty"`
	// Specifies the amount of bandwidth that can be reserved for the Priority 5.
	// default = 125000000
	Pb5 *int64 `protobuf:"varint,6,opt,name=pb5,proto3,oneof" json:"pb5,omitempty"`
	// Specifies the amount of bandwidth that can be reserved for the Priority 6.
	// default = 125000000
	Pb6 *int64 `protobuf:"varint,7,opt,name=pb6,proto3,oneof" json:"pb6,omitempty"`
	// Specifies the amount of bandwidth that can be reserved for the Priority 7.
	// default = 125000000
	Pb7 *int64 `protobuf:"varint,8,opt,name=pb7,proto3,oneof" json:"pb7,omitempty"`
}

func (x *LinkStatepriorityBandwidths) Reset() {
	*x = LinkStatepriorityBandwidths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkStatepriorityBandwidths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkStatepriorityBandwidths) ProtoMessage() {}

func (x *LinkStatepriorityBandwidths) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkStatepriorityBandwidths.ProtoReflect.Descriptor instead.
func (*LinkStatepriorityBandwidths) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{41}
}

func (x *LinkStatepriorityBandwidths) GetPb0() int64 {
	if x != nil && x.Pb0 != nil {
		return *x.Pb0
	}
	return 0
}

func (x *LinkStatepriorityBandwidths) GetPb1() int64 {
	if x != nil && x.Pb1 != nil {
		return *x.Pb1
	}
	return 0
}

func (x *LinkStatepriorityBandwidths) GetPb2() int64 {
	if x != nil && x.Pb2 != nil {
		return *x.Pb2
	}
	return 0
}

func (x *LinkStatepriorityBandwidths) GetPb3() int64 {
	if x != nil && x.Pb3 != nil {
		return *x.Pb3
	}
	return 0
}

func (x *LinkStatepriorityBandwidths) GetPb4() int64 {
	if x != nil && x.Pb4 != nil {
		return *x.Pb4
	}
	return 0
}

func (x *LinkStatepriorityBandwidths) GetPb5() int64 {
	if x != nil && x.Pb5 != nil {
		return *x.Pb5
	}
	return 0
}

func (x *LinkStatepriorityBandwidths) GetPb6() int64 {
	if x != nil && x.Pb6 != nil {
		return *x.Pb6
	}
	return 0
}

func (x *LinkStatepriorityBandwidths) GetPb7() int64 {
	if x != nil && x.Pb7 != nil {
		return *x.Pb7
	}
	return 0
}

// Optional container for circuit authentication properties.
type IsisInterfaceAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The circuit authentication method.
	// required = true
	AuthType IsisInterfaceAuthentication_AuthType_Enum `protobuf:"varint,1,opt,name=auth_type,json=authType,proto3,enum=otg.IsisInterfaceAuthentication_AuthType_Enum" json:"auth_type,omitempty"`
	// MD5 key to be used for authentication.
	Md5 *string `protobuf:"bytes,2,opt,name=md5,proto3,oneof" json:"md5,omitempty"`
	// The password, in clear text, to be used for Authentication.
	Password *string `protobuf:"bytes,3,opt,name=password,proto3,oneof" json:"password,omitempty"`
}

func (x *IsisInterfaceAuthentication) Reset() {
	*x = IsisInterfaceAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisInterfaceAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisInterfaceAuthentication) ProtoMessage() {}

func (x *IsisInterfaceAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisInterfaceAuthentication.ProtoReflect.Descriptor instead.
func (*IsisInterfaceAuthentication) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{42}
}

func (x *IsisInterfaceAuthentication) GetAuthType() IsisInterfaceAuthentication_AuthType_Enum {
	if x != nil {
		return x.AuthType
	}
	return IsisInterfaceAuthentication_AuthType_unspecified
}

func (x *IsisInterfaceAuthentication) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *IsisInterfaceAuthentication) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

// Optional container for advanced interface properties.
type IsisInterfaceAdvanced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If a padded Hello message is received on the interface, the length of
	// the Hello packets sent out on that interface is adjusted to match.
	// default = True
	AutoAdjustMtu *bool `protobuf:"varint,1,opt,name=auto_adjust_mtu,json=autoAdjustMtu,proto3,oneof" json:"auto_adjust_mtu,omitempty"`
	// If a Level 1 Hello is received on this emulated router for an area
	// not currently in its area list, an area from the received Hello is
	// added to that list. This ensures an area match for all future
	// Level 1 Hellos from the source L1 router.
	// default = True
	AutoAdjustArea *bool `protobuf:"varint,2,opt,name=auto_adjust_area,json=autoAdjustArea,proto3,oneof" json:"auto_adjust_area,omitempty"`
	// If a Hello message listing supported protocols is received on this
	// emulated router, the supported protocols advertised by this router
	// are changed to match exactly.
	// default = False
	AutoAdjustSupportedProtocols *bool `protobuf:"varint,3,opt,name=auto_adjust_supported_protocols,json=autoAdjustSupportedProtocols,proto3,oneof" json:"auto_adjust_supported_protocols,omitempty"`
	// If it is true, the Point-to-Point circuit will include 3-way TLV in its Point-to-Point
	// IIH  and attempt to establish the adjacency as specified in RFC 5303. This field
	// is not applicable if network_type is set to 'broadcast' type in ISIS interface.
	// default = True
	Enable_3WayHandshake *bool `protobuf:"varint,4,opt,name=enable_3way_handshake,json=enable3wayHandshake,proto3,oneof" json:"enable_3way_handshake,omitempty"`
	// If it is true, the Point-to-Point Hello messages will be sent to the unicast MAC
	// address.
	// default = False
	P2PHellosToUnicastMac *bool `protobuf:"varint,5,opt,name=p2p_hellos_to_unicast_mac,json=p2pHellosToUnicastMac,proto3,oneof" json:"p2p_hellos_to_unicast_mac,omitempty"`
}

func (x *IsisInterfaceAdvanced) Reset() {
	*x = IsisInterfaceAdvanced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisInterfaceAdvanced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisInterfaceAdvanced) ProtoMessage() {}

func (x *IsisInterfaceAdvanced) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisInterfaceAdvanced.ProtoReflect.Descriptor instead.
func (*IsisInterfaceAdvanced) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{43}
}

func (x *IsisInterfaceAdvanced) GetAutoAdjustMtu() bool {
	if x != nil && x.AutoAdjustMtu != nil {
		return *x.AutoAdjustMtu
	}
	return false
}

func (x *IsisInterfaceAdvanced) GetAutoAdjustArea() bool {
	if x != nil && x.AutoAdjustArea != nil {
		return *x.AutoAdjustArea
	}
	return false
}

func (x *IsisInterfaceAdvanced) GetAutoAdjustSupportedProtocols() bool {
	if x != nil && x.AutoAdjustSupportedProtocols != nil {
		return *x.AutoAdjustSupportedProtocols
	}
	return false
}

func (x *IsisInterfaceAdvanced) GetEnable_3WayHandshake() bool {
	if x != nil && x.Enable_3WayHandshake != nil {
		return *x.Enable_3WayHandshake
	}
	return false
}

func (x *IsisInterfaceAdvanced) GetP2PHellosToUnicastMac() bool {
	if x != nil && x.P2PHellosToUnicastMac != nil {
		return *x.P2PHellosToUnicastMac
	}
	return false
}

// Optional container for the link protection sub TLV (type 20).
type IsisInterfaceLinkProtection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable this to protect other link or links. LSPs on a link of this type are lost
	// if any of the links fail.
	// default = False
	ExtraTraffic *bool `protobuf:"varint,1,opt,name=extra_traffic,json=extraTraffic,proto3,oneof" json:"extra_traffic,omitempty"`
	// Enabling this signifies that there is no other link protecting this
	// link. LSPs on a link of this type are lost if the link fails.
	// default = False
	Unprotected *bool `protobuf:"varint,2,opt,name=unprotected,proto3,oneof" json:"unprotected,omitempty"`
	// Enable this to share the Extra Traffic links between one or more
	// links of type Shared.There are one or more disjoint links of type
	// Extra Traffic that are protecting this link.
	// default = False
	Shared *bool `protobuf:"varint,3,opt,name=shared,proto3,oneof" json:"shared,omitempty"`
	// Enabling this signifies that there is one dedicated disjoint link
	// of type Extra Traffic that is protecting this link.
	// default = False
	Dedicated_1To_1 *bool `protobuf:"varint,4,opt,name=dedicated_1_to_1,json=dedicated1To1,proto3,oneof" json:"dedicated_1_to_1,omitempty"`
	// Enabling this signifies that a dedicated disjoint link is protecting
	// this link. However, the protecting link is not advertised in the
	// link state database and is therefore not available for the routing
	// of LSPs.
	// default = False
	Dedicated_1Plus_1 *bool `protobuf:"varint,5,opt,name=dedicated_1_plus_1,json=dedicated1Plus1,proto3,oneof" json:"dedicated_1_plus_1,omitempty"`
	// Enabling this signifies that a protection scheme that is more
	// reliable than Dedicated 1+1.
	// default = False
	Enhanced *bool `protobuf:"varint,6,opt,name=enhanced,proto3,oneof" json:"enhanced,omitempty"`
	// This is a Protection Scheme with value 0x40.
	// default = False
	Reserved_40 *bool `protobuf:"varint,7,opt,name=reserved_40,json=reserved40,proto3,oneof" json:"reserved_40,omitempty"`
	// This is a Protection Scheme with value 0x80.
	// default = False
	Reserved_80 *bool `protobuf:"varint,8,opt,name=reserved_80,json=reserved80,proto3,oneof" json:"reserved_80,omitempty"`
}

func (x *IsisInterfaceLinkProtection) Reset() {
	*x = IsisInterfaceLinkProtection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisInterfaceLinkProtection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisInterfaceLinkProtection) ProtoMessage() {}

func (x *IsisInterfaceLinkProtection) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisInterfaceLinkProtection.ProtoReflect.Descriptor instead.
func (*IsisInterfaceLinkProtection) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{44}
}

func (x *IsisInterfaceLinkProtection) GetExtraTraffic() bool {
	if x != nil && x.ExtraTraffic != nil {
		return *x.ExtraTraffic
	}
	return false
}

func (x *IsisInterfaceLinkProtection) GetUnprotected() bool {
	if x != nil && x.Unprotected != nil {
		return *x.Unprotected
	}
	return false
}

func (x *IsisInterfaceLinkProtection) GetShared() bool {
	if x != nil && x.Shared != nil {
		return *x.Shared
	}
	return false
}

func (x *IsisInterfaceLinkProtection) GetDedicated_1To_1() bool {
	if x != nil && x.Dedicated_1To_1 != nil {
		return *x.Dedicated_1To_1
	}
	return false
}

func (x *IsisInterfaceLinkProtection) GetDedicated_1Plus_1() bool {
	if x != nil && x.Dedicated_1Plus_1 != nil {
		return *x.Dedicated_1Plus_1
	}
	return false
}

func (x *IsisInterfaceLinkProtection) GetEnhanced() bool {
	if x != nil && x.Enhanced != nil {
		return *x.Enhanced
	}
	return false
}

func (x *IsisInterfaceLinkProtection) GetReserved_40() bool {
	if x != nil && x.Reserved_40 != nil {
		return *x.Reserved_40
	}
	return false
}

func (x *IsisInterfaceLinkProtection) GetReserved_80() bool {
	if x != nil && x.Reserved_80 != nil {
		return *x.Reserved_80
	}
	return false
}

// This contains ISIS router basic properties.
type IsisBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 Traffic Engineering(TE) router id. This address should be configured as an IPv4
	// Loopback address in 'ipv4_loopbacks' in the Device.
	Ipv4TeRouterId *string `protobuf:"bytes,1,opt,name=ipv4_te_router_id,json=ipv4TeRouterId,proto3,oneof" json:"ipv4_te_router_id,omitempty"`
	// Host name for the router. The host name is transmitted in all the packets sent from
	// the router.
	Hostname *string `protobuf:"bytes,2,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
	// When set to true, it allows sending of more detailed metric information  for the
	// routes using 32-bit wide values using TLV 135 IP reachability and  more detailed
	// reachability information for IS reachability by using TLV 22.  The detailed usage
	// is described in RFC3784.
	// default = True
	EnableWideMetric *bool `protobuf:"varint,3,opt,name=enable_wide_metric,json=enableWideMetric,proto3,oneof" json:"enable_wide_metric,omitempty"`
	// Configuration for controlling storage of ISIS learned LSPs are received from the
	// neighbors.
	// default = False
	LearnedLspFilter *bool `protobuf:"varint,4,opt,name=learned_lsp_filter,json=learnedLspFilter,proto3,oneof" json:"learned_lsp_filter,omitempty"`
}

func (x *IsisBasic) Reset() {
	*x = IsisBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisBasic) ProtoMessage() {}

func (x *IsisBasic) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisBasic.ProtoReflect.Descriptor instead.
func (*IsisBasic) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{45}
}

func (x *IsisBasic) GetIpv4TeRouterId() string {
	if x != nil && x.Ipv4TeRouterId != nil {
		return *x.Ipv4TeRouterId
	}
	return ""
}

func (x *IsisBasic) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *IsisBasic) GetEnableWideMetric() bool {
	if x != nil && x.EnableWideMetric != nil {
		return *x.EnableWideMetric
	}
	return false
}

func (x *IsisBasic) GetLearnedLspFilter() bool {
	if x != nil && x.LearnedLspFilter != nil {
		return *x.LearnedLspFilter
	}
	return false
}

// Contains ISIS router advanced properties.
type IsisAdvanced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It enables padding of Hello message to MTU size.
	// default = True
	EnableHelloPadding *bool `protobuf:"varint,1,opt,name=enable_hello_padding,json=enableHelloPadding,proto3,oneof" json:"enable_hello_padding,omitempty"`
	// The Number of Area Addresses permitted, with a valid range from 0 to 254.  A zero
	// indicates a maximum of 3 addresses.
	// default = 3
	MaxAreaAddresses *int32 `protobuf:"varint,2,opt,name=max_area_addresses,json=maxAreaAddresses,proto3,oneof" json:"max_area_addresses,omitempty"`
	// Its combination of the ISP and HO-DSP.Usually all nodes within an area have  the
	// same area address. If no area addresses are configured, a default area of 490001
	// will be advertised.
	AreaAddresses []string `protobuf:"bytes,3,rep,name=area_addresses,json=areaAddresses,proto3" json:"area_addresses,omitempty"`
	// The rate at which LSPs are re-sent in seconds.
	// default = 600
	LspRefreshRate *int32 `protobuf:"varint,4,opt,name=lsp_refresh_rate,json=lspRefreshRate,proto3,oneof" json:"lsp_refresh_rate,omitempty"`
	// The MaxAge for retaining a learned LSP on this router in seconds.
	// default = 1200
	LspLifetime *int32 `protobuf:"varint,5,opt,name=lsp_lifetime,json=lspLifetime,proto3,oneof" json:"lsp_lifetime,omitempty"`
	// The number of milliseconds between transmissions of Partial Sequence Number PDU.
	// default = 2000
	PsnpInterval *int32 `protobuf:"varint,6,opt,name=psnp_interval,json=psnpInterval,proto3,oneof" json:"psnp_interval,omitempty"`
	// The number of milliseconds between transmissions of Partial Sequence Number PDU.
	// default = 10000
	CsnpInterval *int32 `protobuf:"varint,7,opt,name=csnp_interval,json=csnpInterval,proto3,oneof" json:"csnp_interval,omitempty"`
	// The maximum size in bytes of any LSP that can be transmitted over a link of equal
	// or less  than maximum MTU size.
	// default = 1492
	MaxLspSize *int32 `protobuf:"varint,8,opt,name=max_lsp_size,json=maxLspSize,proto3,oneof" json:"max_lsp_size,omitempty"`
	// The number of seconds between transmissions of LSPs/MGROUP-PDUs.
	// default = 5000
	LspMgroupMinTransInterval *int32 `protobuf:"varint,9,opt,name=lsp_mgroup_min_trans_interval,json=lspMgroupMinTransInterval,proto3,oneof" json:"lsp_mgroup_min_trans_interval,omitempty"`
	// If the Attached bit is enabled, it indicates that the ISIS router is attached to
	// another area  or the Level 2 backbone. The purpose of an Attached-Bit is to accomplish
	// Inter-Area Routing.  When an L1/L2 router is connected to more than one area, it
	// sets the Attached-bit on its L1 LSP. This can cause a default route ( 0.0.0.0/0 )
	// to be installed by the receiving router.
	// default = True
	EnableAttachedBit *bool `protobuf:"varint,10,opt,name=enable_attached_bit,json=enableAttachedBit,proto3,oneof" json:"enable_attached_bit,omitempty"`
}

func (x *IsisAdvanced) Reset() {
	*x = IsisAdvanced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisAdvanced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisAdvanced) ProtoMessage() {}

func (x *IsisAdvanced) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisAdvanced.ProtoReflect.Descriptor instead.
func (*IsisAdvanced) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{46}
}

func (x *IsisAdvanced) GetEnableHelloPadding() bool {
	if x != nil && x.EnableHelloPadding != nil {
		return *x.EnableHelloPadding
	}
	return false
}

func (x *IsisAdvanced) GetMaxAreaAddresses() int32 {
	if x != nil && x.MaxAreaAddresses != nil {
		return *x.MaxAreaAddresses
	}
	return 0
}

func (x *IsisAdvanced) GetAreaAddresses() []string {
	if x != nil {
		return x.AreaAddresses
	}
	return nil
}

func (x *IsisAdvanced) GetLspRefreshRate() int32 {
	if x != nil && x.LspRefreshRate != nil {
		return *x.LspRefreshRate
	}
	return 0
}

func (x *IsisAdvanced) GetLspLifetime() int32 {
	if x != nil && x.LspLifetime != nil {
		return *x.LspLifetime
	}
	return 0
}

func (x *IsisAdvanced) GetPsnpInterval() int32 {
	if x != nil && x.PsnpInterval != nil {
		return *x.PsnpInterval
	}
	return 0
}

func (x *IsisAdvanced) GetCsnpInterval() int32 {
	if x != nil && x.CsnpInterval != nil {
		return *x.CsnpInterval
	}
	return 0
}

func (x *IsisAdvanced) GetMaxLspSize() int32 {
	if x != nil && x.MaxLspSize != nil {
		return *x.MaxLspSize
	}
	return 0
}

func (x *IsisAdvanced) GetLspMgroupMinTransInterval() int32 {
	if x != nil && x.LspMgroupMinTransInterval != nil {
		return *x.LspMgroupMinTransInterval
	}
	return 0
}

func (x *IsisAdvanced) GetEnableAttachedBit() bool {
	if x != nil && x.EnableAttachedBit != nil {
		return *x.EnableAttachedBit
	}
	return false
}

// This contains ISIS Area/Domain authentication properties.
type IsisAuthentication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Do not verify MD5 checksum in received LSPs.
	// default = True
	IgnoreReceiveMd5 *bool `protobuf:"varint,1,opt,name=ignore_receive_md5,json=ignoreReceiveMd5,proto3,oneof" json:"ignore_receive_md5,omitempty"`
	// The Area authentication method used for the emulated ISIS router.
	// This is used for L1 LSPs.
	AreaAuth *IsisAuthenticationBase `protobuf:"bytes,2,opt,name=area_auth,json=areaAuth,proto3,oneof" json:"area_auth,omitempty"`
	// The Domain authentication method used for the emulated ISIS router.
	// This is used for L2 LSPs.
	DomainAuth *IsisAuthenticationBase `protobuf:"bytes,3,opt,name=domain_auth,json=domainAuth,proto3,oneof" json:"domain_auth,omitempty"`
}

func (x *IsisAuthentication) Reset() {
	*x = IsisAuthentication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisAuthentication) ProtoMessage() {}

func (x *IsisAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisAuthentication.ProtoReflect.Descriptor instead.
func (*IsisAuthentication) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{47}
}

func (x *IsisAuthentication) GetIgnoreReceiveMd5() bool {
	if x != nil && x.IgnoreReceiveMd5 != nil {
		return *x.IgnoreReceiveMd5
	}
	return false
}

func (x *IsisAuthentication) GetAreaAuth() *IsisAuthenticationBase {
	if x != nil {
		return x.AreaAuth
	}
	return nil
}

func (x *IsisAuthentication) GetDomainAuth() *IsisAuthenticationBase {
	if x != nil {
		return x.DomainAuth
	}
	return nil
}

// Optional container for ISIS authentication properties.
type IsisAuthenticationBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The authentication method.
	// required = true
	AuthType IsisAuthenticationBase_AuthType_Enum `protobuf:"varint,1,opt,name=auth_type,json=authType,proto3,enum=otg.IsisAuthenticationBase_AuthType_Enum" json:"auth_type,omitempty"`
	// Authentication as an MD5 key.
	Md5 *string `protobuf:"bytes,2,opt,name=md5,proto3,oneof" json:"md5,omitempty"`
	// Authentication as a clear text password.
	Password *string `protobuf:"bytes,3,opt,name=password,proto3,oneof" json:"password,omitempty"`
}

func (x *IsisAuthenticationBase) Reset() {
	*x = IsisAuthenticationBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisAuthenticationBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisAuthenticationBase) ProtoMessage() {}

func (x *IsisAuthenticationBase) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisAuthenticationBase.ProtoReflect.Descriptor instead.
func (*IsisAuthenticationBase) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{48}
}

func (x *IsisAuthenticationBase) GetAuthType() IsisAuthenticationBase_AuthType_Enum {
	if x != nil {
		return x.AuthType
	}
	return IsisAuthenticationBase_AuthType_unspecified
}

func (x *IsisAuthenticationBase) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

func (x *IsisAuthenticationBase) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

// Emulated ISIS IPv4 routes.
type IsisV4RouteRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of group of IPv4 route addresses.
	Addresses []*V4RouteAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// The user-defined metric associated with this route range.
	// default = 0
	LinkMetric *int32 `protobuf:"varint,2,opt,name=link_metric,json=linkMetric,proto3,oneof" json:"link_metric,omitempty"`
	// The origin of the advertised route-internal or external to the ISIS area. Options
	// include the following:
	// Internal-for intra-area routes, through Level 1 LSPs.
	// External-for inter-area routes redistributed within L1, through Level
	// 1 LSPs.
	// default = OriginType.Enum.internal
	OriginType *IsisV4RouteRange_OriginType_Enum `protobuf:"varint,3,opt,name=origin_type,json=originType,proto3,enum=otg.IsisV4RouteRange_OriginType_Enum,oneof" json:"origin_type,omitempty"`
	// Defines the Up/Down (Redistribution) bit defined for TLVs 128 and 130 by RFC 2966.
	// It is used for domain-wide advertisement of prefix information.
	//
	// Up (0)-used when a prefix is initially advertised within the ISIS L3
	// hierarchy,
	// and for all other prefixes in L1 and L2 LSPs. (default)
	// Down (1)-used when an L1/L2 router advertises L2 prefixes in L1 LSPs.
	//
	// The prefixes are being advertised from a higher level (L2) down to a lower level
	// (L1).
	// default = RedistributionType.Enum.up
	RedistributionType *IsisV4RouteRange_RedistributionType_Enum `protobuf:"varint,4,opt,name=redistribution_type,json=redistributionType,proto3,enum=otg.IsisV4RouteRange_RedistributionType_Enum,oneof" json:"redistribution_type,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability Attribute Flags
	// will be advertised or not.
	// default = False
	PrefixAttrEnabled *bool `protobuf:"varint,6,opt,name=prefix_attr_enabled,json=prefixAttrEnabled,proto3,oneof" json:"prefix_attr_enabled,omitempty"`
	// External Prefix Flag (Bit 0)
	// default = False
	XFlag *bool `protobuf:"varint,7,opt,name=x_flag,json=xFlag,proto3,oneof" json:"x_flag,omitempty"`
	// Re-advertisement Flag (Bit 1)
	// default = False
	RFlag *bool `protobuf:"varint,8,opt,name=r_flag,json=rFlag,proto3,oneof" json:"r_flag,omitempty"`
	// Node Flag (Bit 2)
	// default = False
	NFlag *bool `protobuf:"varint,9,opt,name=n_flag,json=nFlag,proto3,oneof" json:"n_flag,omitempty"`
}

func (x *IsisV4RouteRange) Reset() {
	*x = IsisV4RouteRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisV4RouteRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisV4RouteRange) ProtoMessage() {}

func (x *IsisV4RouteRange) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisV4RouteRange.ProtoReflect.Descriptor instead.
func (*IsisV4RouteRange) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{49}
}

func (x *IsisV4RouteRange) GetAddresses() []*V4RouteAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *IsisV4RouteRange) GetLinkMetric() int32 {
	if x != nil && x.LinkMetric != nil {
		return *x.LinkMetric
	}
	return 0
}

func (x *IsisV4RouteRange) GetOriginType() IsisV4RouteRange_OriginType_Enum {
	if x != nil && x.OriginType != nil {
		return *x.OriginType
	}
	return IsisV4RouteRange_OriginType_unspecified
}

func (x *IsisV4RouteRange) GetRedistributionType() IsisV4RouteRange_RedistributionType_Enum {
	if x != nil && x.RedistributionType != nil {
		return *x.RedistributionType
	}
	return IsisV4RouteRange_RedistributionType_unspecified
}

func (x *IsisV4RouteRange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IsisV4RouteRange) GetPrefixAttrEnabled() bool {
	if x != nil && x.PrefixAttrEnabled != nil {
		return *x.PrefixAttrEnabled
	}
	return false
}

func (x *IsisV4RouteRange) GetXFlag() bool {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return false
}

func (x *IsisV4RouteRange) GetRFlag() bool {
	if x != nil && x.RFlag != nil {
		return *x.RFlag
	}
	return false
}

func (x *IsisV4RouteRange) GetNFlag() bool {
	if x != nil && x.NFlag != nil {
		return *x.NFlag
	}
	return false
}

// A container for IPv4 route addresses.
type V4RouteAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The starting address of the network.
	// required = true
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The IPv4 network prefix length to be applied to the address.
	// default = 24
	Prefix *int32 `protobuf:"varint,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// The total number of addresses in the range.
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
	// Increments the network address prefixes within a route range  where multiple routes
	// are present.  The value is incremented according to the Prefix Length and Step.
	// default = 1
	Step *int32 `protobuf:"varint,4,opt,name=step,proto3,oneof" json:"step,omitempty"`
}

func (x *V4RouteAddress) Reset() {
	*x = V4RouteAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V4RouteAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V4RouteAddress) ProtoMessage() {}

func (x *V4RouteAddress) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V4RouteAddress.ProtoReflect.Descriptor instead.
func (*V4RouteAddress) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{50}
}

func (x *V4RouteAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *V4RouteAddress) GetPrefix() int32 {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return 0
}

func (x *V4RouteAddress) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *V4RouteAddress) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

// A container for IPv6 route addresses.
type V6RouteAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The starting address of the network.
	// required = true
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The IPv6 network prefix length to be applied to the address.
	// default = 64
	Prefix *int32 `protobuf:"varint,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// The total number of addresses in the range.
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
	// Increments the network address prefixes within a route range  where multiple routes
	// are present.  The value is incremented according to the Prefix Length and Step.
	// default = 1
	Step *int32 `protobuf:"varint,4,opt,name=step,proto3,oneof" json:"step,omitempty"`
}

func (x *V6RouteAddress) Reset() {
	*x = V6RouteAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V6RouteAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V6RouteAddress) ProtoMessage() {}

func (x *V6RouteAddress) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V6RouteAddress.ProtoReflect.Descriptor instead.
func (*V6RouteAddress) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{51}
}

func (x *V6RouteAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *V6RouteAddress) GetPrefix() int32 {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return 0
}

func (x *V6RouteAddress) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *V6RouteAddress) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

// A container for MAC route addresses.
type MACRouteAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The starting address of the MAC Range.
	// required = true
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The MAC prefix length to be applied to the address.
	// default = 48
	Prefix *int32 `protobuf:"varint,2,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// The total number of mac addresses in the range.
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
	// Increments the mac address prefixes within a mac range  where multiple routes are
	// present.  The value is incremented according to the mac prefix Length and Step.
	// default = 1
	Step *int32 `protobuf:"varint,4,opt,name=step,proto3,oneof" json:"step,omitempty"`
}

func (x *MACRouteAddress) Reset() {
	*x = MACRouteAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MACRouteAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MACRouteAddress) ProtoMessage() {}

func (x *MACRouteAddress) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MACRouteAddress.ProtoReflect.Descriptor instead.
func (*MACRouteAddress) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{52}
}

func (x *MACRouteAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MACRouteAddress) GetPrefix() int32 {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return 0
}

func (x *MACRouteAddress) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *MACRouteAddress) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

// Emulated ISIS IPv6 routes.
type IsisV6RouteRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of group of IPv6 route addresses.
	Addresses []*V6RouteAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// The user-defined metric associated with this route range.
	// default = 0
	LinkMetric *int32 `protobuf:"varint,2,opt,name=link_metric,json=linkMetric,proto3,oneof" json:"link_metric,omitempty"`
	// The origin of the advertised route-internal or external to the ISIS area. Options
	// include the following:
	// Internal-for intra-area routes, through Level 1 LSPs.
	// External-for inter-area routes redistributed within L1, through Level
	// 1 LSPs.
	// default = OriginType.Enum.internal
	OriginType *IsisV6RouteRange_OriginType_Enum `protobuf:"varint,3,opt,name=origin_type,json=originType,proto3,enum=otg.IsisV6RouteRange_OriginType_Enum,oneof" json:"origin_type,omitempty"`
	// Defines the Up/Down (Redistribution) bit defined for TLVs 128 and 130 by RFC 2966.
	// It is used for domain-wide advertisement of prefix information.
	//
	// Up (0)-used when a prefix is initially advertised within the ISIS L3
	// hierarchy,
	// and for all other prefixes in L1 and L2 LSPs. (default)
	// Down (1)-used when an L1/L2 router advertises L2 prefixes in L1 LSPs.
	//
	// The prefixes are being advertised from a higher level (L2) down to a lower level
	// (L1).
	// default = RedistributionType.Enum.up
	RedistributionType *IsisV6RouteRange_RedistributionType_Enum `protobuf:"varint,4,opt,name=redistribution_type,json=redistributionType,proto3,enum=otg.IsisV6RouteRange_RedistributionType_Enum,oneof" json:"redistribution_type,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability Attribute Flags
	// will be advertised or not.
	// default = False
	PrefixAttrEnabled *bool `protobuf:"varint,6,opt,name=prefix_attr_enabled,json=prefixAttrEnabled,proto3,oneof" json:"prefix_attr_enabled,omitempty"`
	// External Prefix Flag (Bit 0)
	// default = False
	XFlag *bool `protobuf:"varint,7,opt,name=x_flag,json=xFlag,proto3,oneof" json:"x_flag,omitempty"`
	// Re-advertisement Flag (Bit 1)
	// default = False
	RFlag *bool `protobuf:"varint,8,opt,name=r_flag,json=rFlag,proto3,oneof" json:"r_flag,omitempty"`
	// Node Flag (Bit 2)
	// default = False
	NFlag *bool `protobuf:"varint,9,opt,name=n_flag,json=nFlag,proto3,oneof" json:"n_flag,omitempty"`
}

func (x *IsisV6RouteRange) Reset() {
	*x = IsisV6RouteRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisV6RouteRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisV6RouteRange) ProtoMessage() {}

func (x *IsisV6RouteRange) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisV6RouteRange.ProtoReflect.Descriptor instead.
func (*IsisV6RouteRange) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{53}
}

func (x *IsisV6RouteRange) GetAddresses() []*V6RouteAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *IsisV6RouteRange) GetLinkMetric() int32 {
	if x != nil && x.LinkMetric != nil {
		return *x.LinkMetric
	}
	return 0
}

func (x *IsisV6RouteRange) GetOriginType() IsisV6RouteRange_OriginType_Enum {
	if x != nil && x.OriginType != nil {
		return *x.OriginType
	}
	return IsisV6RouteRange_OriginType_unspecified
}

func (x *IsisV6RouteRange) GetRedistributionType() IsisV6RouteRange_RedistributionType_Enum {
	if x != nil && x.RedistributionType != nil {
		return *x.RedistributionType
	}
	return IsisV6RouteRange_RedistributionType_unspecified
}

func (x *IsisV6RouteRange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IsisV6RouteRange) GetPrefixAttrEnabled() bool {
	if x != nil && x.PrefixAttrEnabled != nil {
		return *x.PrefixAttrEnabled
	}
	return false
}

func (x *IsisV6RouteRange) GetXFlag() bool {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return false
}

func (x *IsisV6RouteRange) GetRFlag() bool {
	if x != nil && x.RFlag != nil {
		return *x.RFlag
	}
	return false
}

func (x *IsisV6RouteRange) GetNFlag() bool {
	if x != nil && x.NFlag != nil {
		return *x.NFlag
	}
	return false
}

// Configuration for one or more IPv4 or IPv6 BGP peers.
type DeviceBgpRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The BGP router ID is a unique identifier used by BGP. It is a 32-bit value that is
	// often represented by an IPv4 address.
	// required = true
	RouterId string `protobuf:"bytes,1,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	// This contains an array of references to IPv4 interfaces,  each of which will have
	// list of peers to different destinations.
	Ipv4Interfaces []*BgpV4Interface `protobuf:"bytes,2,rep,name=ipv4_interfaces,json=ipv4Interfaces,proto3" json:"ipv4_interfaces,omitempty"`
	// This contains an array of references to IPv6 interfaces,  each of which will have
	// list of peers to different destinations.
	Ipv6Interfaces []*BgpV6Interface `protobuf:"bytes,3,rep,name=ipv6_interfaces,json=ipv6Interfaces,proto3" json:"ipv6_interfaces,omitempty"`
}

func (x *DeviceBgpRouter) Reset() {
	*x = DeviceBgpRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceBgpRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceBgpRouter) ProtoMessage() {}

func (x *DeviceBgpRouter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceBgpRouter.ProtoReflect.Descriptor instead.
func (*DeviceBgpRouter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{54}
}

func (x *DeviceBgpRouter) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *DeviceBgpRouter) GetIpv4Interfaces() []*BgpV4Interface {
	if x != nil {
		return x.Ipv4Interfaces
	}
	return nil
}

func (x *DeviceBgpRouter) GetIpv6Interfaces() []*BgpV6Interface {
	if x != nil {
		return x.Ipv6Interfaces
	}
	return nil
}

// Configuration for emulated BGPv4 peers and routes.
type BgpV4Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 address of the BGP peer for the session.
	// required = true
	PeerAddress string `protobuf:"bytes,1,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	// This contains the list of Ethernet Virtual Private Network (EVPN) Ethernet Segments
	// (ES) Per BGP Peer for IPv4 Address Family Identifier (AFI).
	//
	// Each Ethernet Segment contains a list of EVPN Instances (EVIs) .
	// Each EVI contains a list of Broadcast Domains.
	// Each Broadcast Domain contains a list of MAC/IP Ranges.
	//
	// <Ethernet Segment, EVI, Broadcast Domain> is responsible for advertising Ethernet
	// Auto-discovery Route Per EVI (Type 1).
	//
	// <Ethernet Segment, EVI> is responsible for advertising Ethernet Auto-discovery Route
	// Per Ethernet Segment (Type 1).
	//
	// <Ethernet Segment, EVI, Broadcast Domain, MAC/IP> is responsible for advertising
	// MAC/IP Advertisement Route (Type 2).
	//
	// <Ethernet Segment, EVI, Broadcast Domain> is responsible for advertising Inclusive
	// Multicast Ethernet Tag Route (Type 3).
	//
	// Ethernet Segment is responsible for advertising Ethernet Segment Route (Type 4).
	EvpnEthernetSegments []*BgpV4EthernetSegment `protobuf:"bytes,2,rep,name=evpn_ethernet_segments,json=evpnEthernetSegments,proto3" json:"evpn_ethernet_segments,omitempty"`
	// The type of BGP autonomous system. External BGP is used for BGP links between two
	// or more autonomous systems (ebgp). Internal BGP is used within a single autonomous
	// system (ibgp). BGP property defaults are aligned with this object defined as an internal
	// BGP peer. If the as_type is specified as 'ebgp' then other properties will need to
	// be specified as per an external BGP peer. Specifically, for 'ebgp',  'as_set_mode'
	// attribute in 'as_path' field  in any Route Range should be changed from default value
	// 'do_not_include_local_as' to any other value.
	// required = true
	AsType BgpV4Peer_AsType_Enum `protobuf:"varint,3,opt,name=as_type,json=asType,proto3,enum=otg.BgpV4Peer_AsType_Enum" json:"as_type,omitempty"`
	// Autonomous System Number (AS number or ASN)
	// required = true
	AsNumber int32 `protobuf:"varint,4,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	// The width in bytes of the as_number values. Any as_number values that exceeds the
	// width MUST result in an error.
	// default = AsNumberWidth.Enum.four
	AsNumberWidth *BgpV4Peer_AsNumberWidth_Enum `protobuf:"varint,5,opt,name=as_number_width,json=asNumberWidth,proto3,enum=otg.BgpV4Peer_AsNumberWidth_Enum,oneof" json:"as_number_width,omitempty"`
	// Description missing in models
	Advanced *BgpAdvanced `protobuf:"bytes,6,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Description missing in models
	Capability *BgpCapability `protobuf:"bytes,7,opt,name=capability,proto3,oneof" json:"capability,omitempty"`
	// Description missing in models
	LearnedInformationFilter *BgpLearnedInformationFilter `protobuf:"bytes,8,opt,name=learned_information_filter,json=learnedInformationFilter,proto3,oneof" json:"learned_information_filter,omitempty"`
	// Emulated BGPv4 route ranges.
	V4Routes []*BgpV4RouteRange `protobuf:"bytes,9,rep,name=v4_routes,json=v4Routes,proto3" json:"v4_routes,omitempty"`
	// Emulated BGPv6 route ranges.
	V6Routes []*BgpV6RouteRange `protobuf:"bytes,10,rep,name=v6_routes,json=v6Routes,proto3" json:"v6_routes,omitempty"`
	// Segment Routing Traffic Engineering (SR TE) Policies for IPv4 Address Family Identifier
	// (AFI).
	V4SrtePolicies []*BgpSrteV4Policy `protobuf:"bytes,11,rep,name=v4_srte_policies,json=v4SrtePolicies,proto3" json:"v4_srte_policies,omitempty"`
	// Segment Routing Traffic Engineering (SR TE) Policies for IPv6 Address Family Identifier
	// (AFI).
	V6SrtePolicies []*BgpSrteV6Policy `protobuf:"bytes,12,rep,name=v6_srte_policies,json=v6SrtePolicies,proto3" json:"v6_srte_policies,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BgpV4Peer) Reset() {
	*x = BgpV4Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4Peer) ProtoMessage() {}

func (x *BgpV4Peer) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4Peer.ProtoReflect.Descriptor instead.
func (*BgpV4Peer) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{55}
}

func (x *BgpV4Peer) GetPeerAddress() string {
	if x != nil {
		return x.PeerAddress
	}
	return ""
}

func (x *BgpV4Peer) GetEvpnEthernetSegments() []*BgpV4EthernetSegment {
	if x != nil {
		return x.EvpnEthernetSegments
	}
	return nil
}

func (x *BgpV4Peer) GetAsType() BgpV4Peer_AsType_Enum {
	if x != nil {
		return x.AsType
	}
	return BgpV4Peer_AsType_unspecified
}

func (x *BgpV4Peer) GetAsNumber() int32 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *BgpV4Peer) GetAsNumberWidth() BgpV4Peer_AsNumberWidth_Enum {
	if x != nil && x.AsNumberWidth != nil {
		return *x.AsNumberWidth
	}
	return BgpV4Peer_AsNumberWidth_unspecified
}

func (x *BgpV4Peer) GetAdvanced() *BgpAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *BgpV4Peer) GetCapability() *BgpCapability {
	if x != nil {
		return x.Capability
	}
	return nil
}

func (x *BgpV4Peer) GetLearnedInformationFilter() *BgpLearnedInformationFilter {
	if x != nil {
		return x.LearnedInformationFilter
	}
	return nil
}

func (x *BgpV4Peer) GetV4Routes() []*BgpV4RouteRange {
	if x != nil {
		return x.V4Routes
	}
	return nil
}

func (x *BgpV4Peer) GetV6Routes() []*BgpV6RouteRange {
	if x != nil {
		return x.V6Routes
	}
	return nil
}

func (x *BgpV4Peer) GetV4SrtePolicies() []*BgpSrteV4Policy {
	if x != nil {
		return x.V4SrtePolicies
	}
	return nil
}

func (x *BgpV4Peer) GetV6SrtePolicies() []*BgpSrteV6Policy {
	if x != nil {
		return x.V6SrtePolicies
	}
	return nil
}

func (x *BgpV4Peer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Configuration for emulated BGPv4 peers and routes on a single IPv4 interface.
type BgpV4Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique name of the IPv4 or Loopback IPv4 interface used as the source IP for
	// this list of BGP peers.
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv4Loopback/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv4Loopback/properties/name
	//
	// required = true
	Ipv4Name string `protobuf:"bytes,1,opt,name=ipv4_name,json=ipv4Name,proto3" json:"ipv4_name,omitempty"`
	// This contains the list of BGPv4 peers configured on this interface.
	Peers []*BgpV4Peer `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *BgpV4Interface) Reset() {
	*x = BgpV4Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4Interface) ProtoMessage() {}

func (x *BgpV4Interface) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4Interface.ProtoReflect.Descriptor instead.
func (*BgpV4Interface) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{56}
}

func (x *BgpV4Interface) GetIpv4Name() string {
	if x != nil {
		return x.Ipv4Name
	}
	return ""
}

func (x *BgpV4Interface) GetPeers() []*BgpV4Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

// Configuration for BGP Ethernet Segment ranges. Advertises following routes -
//
// Type 4 - Ethernet Segment Route
type BgpV4EthernetSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Designated Forwarder (DF) election configuration.
	DfElection *BgpEthernetSegmentDfElection `protobuf:"bytes,1,opt,name=df_election,json=dfElection,proto3,oneof" json:"df_election,omitempty"`
	// This contains the list of EVIs.
	Evis []*BgpV4EvpnEvis `protobuf:"bytes,2,rep,name=evis,proto3" json:"evis,omitempty"`
	// 10-octet Ethernet Segment Identifier (ESI) Example - For multi-home scenario nonZero
	// ESI is '10000000000000000000' .
	// default = 00000000000000000000
	Esi *string `protobuf:"bytes,3,opt,name=esi,proto3,oneof" json:"esi,omitempty"`
	// Single Active or All Active mode Redundancy mode selection for Multi-home.
	// default = ActiveMode.Enum.all_active
	ActiveMode *BgpV4EthernetSegment_ActiveMode_Enum `protobuf:"varint,4,opt,name=active_mode,json=activeMode,proto3,enum=otg.BgpV4EthernetSegment_ActiveMode_Enum,oneof" json:"active_mode,omitempty"`
	// The label value to be advertised as ESI Label in ESI Label Extended Community. This
	// is included in Ethernet Auto-discovery per ES Routes advertised by a router.
	// default = 0
	EsiLabel *int32 `protobuf:"varint,5,opt,name=esi_label,json=esiLabel,proto3,oneof" json:"esi_label,omitempty"`
	// Description missing in models
	Advanced *BgpRouteAdvanced `protobuf:"bytes,6,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Optional community settings.
	Communities []*BgpCommunity `protobuf:"bytes,7,rep,name=communities,proto3" json:"communities,omitempty"`
	// Optional Extended Community settings. The Extended Communities Attribute is a transitive
	// optional BGP attribute, with the Type Code 16. Community and Extended Communities
	// attributes are utilized to trigger routing decisions, such as acceptance, rejection,
	// preference, or redistribution. An extended community is an 8-Bytes value. It is
	// divided into two main parts. The first 2 Bytes of the community encode a type and
	// sub-type fields and the last 6 Bytes carry a unique set of data in a format defined
	// by the type and sub-type field. Extended communities provide a larger  range for
	// grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet,
	// the valid sub types are route target and origin. The valid value for  administrator_as_2octet
	// and administrator_as_4octet type is either two byte AS followed by four byte local
	// administrator id or four byte AS followed by two  byte local administrator id.  When
	// type is administrator_ipv4_address the valid sub types are route target and origin.
	// The valid value for  administrator_ipv4_address is a four byte IPv4 address followed
	// by a two byte local administrator id.  When type is opaque, valid sub types are color
	// and encapsulation. When sub type is color, first two bytes of the value field contain
	// flags and last four bytes  contains the value of the color. When sub type is encapsulation
	// the first four bytes of value field are reserved and last two bytes carries the tunnel
	// type from  IANA's ETHER TYPES registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol
	// type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth
	// the valid sub type is extended_bandwidth. The first two bytes of the value field
	// contains the AS number and the last four bytes contains the bandwidth in IEEE floating
	// point format.  When type is evpn the valid subtype is mac_address. In the value field
	// the low-order bit of the first byte(Flags) is defined as the Sticky/static flag and
	// may be set to 1, indicating the MAC address is static and cannot move. The second
	// byte is reserved and the  last four bytes contain the sequence number which is used
	// to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates
	// occur for the same MAC address.
	ExtCommunities []*BgpExtCommunity `protobuf:"bytes,8,rep,name=ext_communities,json=extCommunities,proto3" json:"ext_communities,omitempty"`
	// Optional AS PATH settings.
	AsPath *BgpAsPath `protobuf:"bytes,9,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
}

func (x *BgpV4EthernetSegment) Reset() {
	*x = BgpV4EthernetSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4EthernetSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4EthernetSegment) ProtoMessage() {}

func (x *BgpV4EthernetSegment) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4EthernetSegment.ProtoReflect.Descriptor instead.
func (*BgpV4EthernetSegment) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{57}
}

func (x *BgpV4EthernetSegment) GetDfElection() *BgpEthernetSegmentDfElection {
	if x != nil {
		return x.DfElection
	}
	return nil
}

func (x *BgpV4EthernetSegment) GetEvis() []*BgpV4EvpnEvis {
	if x != nil {
		return x.Evis
	}
	return nil
}

func (x *BgpV4EthernetSegment) GetEsi() string {
	if x != nil && x.Esi != nil {
		return *x.Esi
	}
	return ""
}

func (x *BgpV4EthernetSegment) GetActiveMode() BgpV4EthernetSegment_ActiveMode_Enum {
	if x != nil && x.ActiveMode != nil {
		return *x.ActiveMode
	}
	return BgpV4EthernetSegment_ActiveMode_unspecified
}

func (x *BgpV4EthernetSegment) GetEsiLabel() int32 {
	if x != nil && x.EsiLabel != nil {
		return *x.EsiLabel
	}
	return 0
}

func (x *BgpV4EthernetSegment) GetAdvanced() *BgpRouteAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *BgpV4EthernetSegment) GetCommunities() []*BgpCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpV4EthernetSegment) GetExtCommunities() []*BgpExtCommunity {
	if x != nil {
		return x.ExtCommunities
	}
	return nil
}

func (x *BgpV4EthernetSegment) GetAsPath() *BgpAsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

// Configuration for Designated Forwarder (DF) election among the Provider Edge (PE)
// routers on the same Ethernet Segment.
type BgpEthernetSegmentDfElection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DF election timer in seconds.
	// default = 3
	ElectionTimer *int32 `protobuf:"varint,1,opt,name=election_timer,json=electionTimer,proto3,oneof" json:"election_timer,omitempty"`
}

func (x *BgpEthernetSegmentDfElection) Reset() {
	*x = BgpEthernetSegmentDfElection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpEthernetSegmentDfElection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpEthernetSegmentDfElection) ProtoMessage() {}

func (x *BgpEthernetSegmentDfElection) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpEthernetSegmentDfElection.ProtoReflect.Descriptor instead.
func (*BgpEthernetSegmentDfElection) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{58}
}

func (x *BgpEthernetSegmentDfElection) GetElectionTimer() int32 {
	if x != nil && x.ElectionTimer != nil {
		return *x.ElectionTimer
	}
	return 0
}

// Configuration for advanced BGP route range settings.
type BgpRouteAdvanced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BGP Multi Exit Discriminator attribute sent to the peer to help in the route selection
	// process.  If set to true, the Multi Exit Discriminator attribute will be included
	// in the route advertisement.
	// default = True
	IncludeMultiExitDiscriminator *bool `protobuf:"varint,3,opt,name=include_multi_exit_discriminator,json=includeMultiExitDiscriminator,proto3,oneof" json:"include_multi_exit_discriminator,omitempty"`
	// The multi exit discriminator (MED) value used for route selection sent to the peer.
	MultiExitDiscriminator *int32 `protobuf:"varint,1,opt,name=multi_exit_discriminator,json=multiExitDiscriminator,proto3,oneof" json:"multi_exit_discriminator,omitempty"`
	// If set to true, the Origin attribute will be included in the route advertisement.
	// default = True
	IncludeOrigin *bool `protobuf:"varint,4,opt,name=include_origin,json=includeOrigin,proto3,oneof" json:"include_origin,omitempty"`
	// The origin attribute of a prefix can take three values: the prefix originates from
	// an interior routing protocol 'igp',  it originates from 'egp' or the origin is 'incomplete',
	// if the prefix is learned through other means.
	// default = Origin.Enum.igp
	Origin *BgpRouteAdvanced_Origin_Enum `protobuf:"varint,2,opt,name=origin,proto3,enum=otg.BgpRouteAdvanced_Origin_Enum,oneof" json:"origin,omitempty"`
	// BGP Local Preference attribute sent to the peer to indicate the degree of preference
	// for externally learned routes. If set to true, the Local Preference attribute will
	// be included  in the route advertisement. This should be included only for internal
	// peers.
	// default = True
	IncludeLocalPreference *bool `protobuf:"varint,5,opt,name=include_local_preference,json=includeLocalPreference,proto3,oneof" json:"include_local_preference,omitempty"`
	// Value to be set in Local Preference attribute if include_local_preference is set
	// to true. It is  used for the selection of the path for the traffic leaving the AS.
	// The route with the  highest local preference value is preferred.
	// default = 100
	LocalPreference *int32 `protobuf:"varint,6,opt,name=local_preference,json=localPreference,proto3,oneof" json:"local_preference,omitempty"`
}

func (x *BgpRouteAdvanced) Reset() {
	*x = BgpRouteAdvanced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteAdvanced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteAdvanced) ProtoMessage() {}

func (x *BgpRouteAdvanced) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteAdvanced.ProtoReflect.Descriptor instead.
func (*BgpRouteAdvanced) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{59}
}

func (x *BgpRouteAdvanced) GetIncludeMultiExitDiscriminator() bool {
	if x != nil && x.IncludeMultiExitDiscriminator != nil {
		return *x.IncludeMultiExitDiscriminator
	}
	return false
}

func (x *BgpRouteAdvanced) GetMultiExitDiscriminator() int32 {
	if x != nil && x.MultiExitDiscriminator != nil {
		return *x.MultiExitDiscriminator
	}
	return 0
}

func (x *BgpRouteAdvanced) GetIncludeOrigin() bool {
	if x != nil && x.IncludeOrigin != nil {
		return *x.IncludeOrigin
	}
	return false
}

func (x *BgpRouteAdvanced) GetOrigin() BgpRouteAdvanced_Origin_Enum {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return BgpRouteAdvanced_Origin_unspecified
}

func (x *BgpRouteAdvanced) GetIncludeLocalPreference() bool {
	if x != nil && x.IncludeLocalPreference != nil {
		return *x.IncludeLocalPreference
	}
	return false
}

func (x *BgpRouteAdvanced) GetLocalPreference() int32 {
	if x != nil && x.LocalPreference != nil {
		return *x.LocalPreference
	}
	return 0
}

// BGP communities provide additional capability for tagging routes and  for modifying
// BGP routing policy on upstream and downstream routers. BGP community is a 32-bit
// number which is broken into 16-bit AS number and  a 16-bit custom value.
type BgpCommunity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of community AS number.
	Type *BgpCommunity_Type_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=otg.BgpCommunity_Type_Enum,oneof" json:"type,omitempty"`
	// First two octets of 32 bit community AS number.
	// default = 0
	AsNumber *int32 `protobuf:"varint,2,opt,name=as_number,json=asNumber,proto3,oneof" json:"as_number,omitempty"`
	// Last two octets of the community value.
	// default = 0
	AsCustom *int32 `protobuf:"varint,3,opt,name=as_custom,json=asCustom,proto3,oneof" json:"as_custom,omitempty"`
}

func (x *BgpCommunity) Reset() {
	*x = BgpCommunity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpCommunity) ProtoMessage() {}

func (x *BgpCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpCommunity.ProtoReflect.Descriptor instead.
func (*BgpCommunity) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{60}
}

func (x *BgpCommunity) GetType() BgpCommunity_Type_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return BgpCommunity_Type_unspecified
}

func (x *BgpCommunity) GetAsNumber() int32 {
	if x != nil && x.AsNumber != nil {
		return *x.AsNumber
	}
	return 0
}

func (x *BgpCommunity) GetAsCustom() int32 {
	if x != nil && x.AsCustom != nil {
		return *x.AsCustom
	}
	return 0
}

// The Extended Communities Attribute is a transitive optional BGP attribute, with the
// Type Code 16. Community and Extended Communities  attributes are utilized to trigger
// routing decisions, such as acceptance, rejection,  preference, or redistribution.
// An extended community is an 8-Bytes value. It is divided into two main parts. The
// first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes
// carry a unique set of data in a  format defined by the type and sub-type field. Extended
// communities provide a larger  range for grouping or categorizing communities.
type BgpExtCommunity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Extended Community Type field of 1 Byte.
	// - administrator_as_2octet: Two-Octet AS Specific Extended Community (RFC 4360).
	// - administrator_ipv4_address: IPv4 Address Specific Extended Community (RFC 4360).
	// - administrator_as_4octet:  4-Octet AS Specific Extended Community (RFC 5668).
	// - opaque: Opaque Extended Community (RFC 7432).
	// - evpn: EVPN Extended Community (RFC 7153).
	// - administrator_as_2octet_link_bandwidth : Link Bandwidth Extended Community (RFC
	// 7153).
	Type *BgpExtCommunity_Type_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=otg.BgpExtCommunity_Type_Enum,oneof" json:"type,omitempty"`
	// Extended Community Sub Type field of 1 Byte.
	// - route_target: Route Target.
	// - origin: Origin.
	// - extended_bandwidth: Specifies the link bandwidth.
	// - color: Specifies the color value.
	// - encapsulation: Specifies the Encapsulation Extended Community.
	// - mac_address: Specifies the Extended community MAC address.
	Subtype *BgpExtCommunity_Subtype_Enum `protobuf:"varint,2,opt,name=subtype,proto3,enum=otg.BgpExtCommunity_Subtype_Enum,oneof" json:"subtype,omitempty"`
	// Extended Community value of 6 Bytes. Example - for the Opaque type and Color subtype
	// value can be '0000000000c8'  for the color value 200.
	Value *string `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *BgpExtCommunity) Reset() {
	*x = BgpExtCommunity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpExtCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpExtCommunity) ProtoMessage() {}

func (x *BgpExtCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpExtCommunity.ProtoReflect.Descriptor instead.
func (*BgpExtCommunity) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{61}
}

func (x *BgpExtCommunity) GetType() BgpExtCommunity_Type_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return BgpExtCommunity_Type_unspecified
}

func (x *BgpExtCommunity) GetSubtype() BgpExtCommunity_Subtype_Enum {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return BgpExtCommunity_Subtype_unspecified
}

func (x *BgpExtCommunity) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// This attribute identifies the autonomous systems through  which routing information
// carried in this UPDATE message has passed. This contains the configuration of how
// to include the Local AS in the AS path attribute of the MP REACH NLRI. It also contains
// optional configuration of additional AS Path Segments that can be included in the
// AS Path attribute. The AS Path consists of a Set or Sequence of Autonomous Systems
// (AS) numbers  that a routing information passes through to reach the destination.
type BgpAsPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines how the Local AS should be included in the MP REACH NLRI. For iBGP sessions,
	// Do Not Include Local AS must be chosen. For eBGP sessions, any choice other than
	// Do Not Include Local AS can be chosen.
	// default = AsSetMode.Enum.do_not_include_local_as
	AsSetMode *BgpAsPath_AsSetMode_Enum `protobuf:"varint,1,opt,name=as_set_mode,json=asSetMode,proto3,enum=otg.BgpAsPath_AsSetMode_Enum,oneof" json:"as_set_mode,omitempty"`
	// The additional AS path segments to be added in the NLRI.  By default, an empty AS
	// path is always included and  the local AS is added to it as per the value of 'as_set_mode'
	// attribute.
	Segments []*BgpAsPathSegment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *BgpAsPath) Reset() {
	*x = BgpAsPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpAsPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAsPath) ProtoMessage() {}

func (x *BgpAsPath) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAsPath.ProtoReflect.Descriptor instead.
func (*BgpAsPath) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{62}
}

func (x *BgpAsPath) GetAsSetMode() BgpAsPath_AsSetMode_Enum {
	if x != nil && x.AsSetMode != nil {
		return *x.AsSetMode
	}
	return BgpAsPath_AsSetMode_unspecified
}

func (x *BgpAsPath) GetSegments() []*BgpAsPathSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// Configuration for a single BGP AS path segment
type BgpAsPathSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AS sequence is the most common type of AS_PATH, it contains the  list of ASNs starting
	// with the most recent ASN being added read  from left to right.
	// The other three AS_PATH types are used for Confederations - AS_SET is the type of
	// AS_PATH attribute that summarizes routes using using the aggregate-address command,
	// allowing AS_PATHs to be  summarized in the update as well. - AS_CONFED_SEQ gives
	// the list of ASNs in the path starting with the  most recent ASN to be added reading
	// left to right - AS_CONFED_SET will allow summarization of multiple AS PATHs to be
	// sent in BGP Updates.
	// default = Type.Enum.as_seq
	Type *BgpAsPathSegment_Type_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=otg.BgpAsPathSegment_Type_Enum,oneof" json:"type,omitempty"`
	// The AS numbers in this AS path segment.
	AsNumbers []int64 `protobuf:"varint,2,rep,packed,name=as_numbers,json=asNumbers,proto3" json:"as_numbers,omitempty"`
}

func (x *BgpAsPathSegment) Reset() {
	*x = BgpAsPathSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpAsPathSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAsPathSegment) ProtoMessage() {}

func (x *BgpAsPathSegment) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAsPathSegment.ProtoReflect.Descriptor instead.
func (*BgpAsPathSegment) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{63}
}

func (x *BgpAsPathSegment) GetType() BgpAsPathSegment_Type_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return BgpAsPathSegment_Type_unspecified
}

func (x *BgpAsPathSegment) GetAsNumbers() []int64 {
	if x != nil {
		return x.AsNumbers
	}
	return nil
}

// This contains a list of different flavors of EVPN.
// For example EVPN over VXLAN or EVPN over MPLS etc to be configured per Ethernet segment.
//
// Need to instantiate correct type of EVPN instance as per requirement.
type BgpV4EvpnEvis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.evi_vxlan
	Choice *BgpV4EvpnEvis_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.BgpV4EvpnEvis_Choice_Enum,oneof" json:"choice,omitempty"`
	// EVPN VXLAN instance to be configured per Ethernet Segment.
	EviVxlan *BgpV4EviVxlan `protobuf:"bytes,2,opt,name=evi_vxlan,json=eviVxlan,proto3,oneof" json:"evi_vxlan,omitempty"`
}

func (x *BgpV4EvpnEvis) Reset() {
	*x = BgpV4EvpnEvis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4EvpnEvis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4EvpnEvis) ProtoMessage() {}

func (x *BgpV4EvpnEvis) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4EvpnEvis.ProtoReflect.Descriptor instead.
func (*BgpV4EvpnEvis) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{64}
}

func (x *BgpV4EvpnEvis) GetChoice() BgpV4EvpnEvis_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return BgpV4EvpnEvis_Choice_unspecified
}

func (x *BgpV4EvpnEvis) GetEviVxlan() *BgpV4EviVxlan {
	if x != nil {
		return x.EviVxlan
	}
	return nil
}

// Configuration for BGP EVPN EVI. Advertises following routes -
//
// Type 3 - Inclusive Multicast Ethernet Tag Route
//
// Type 1 -  Ethernet Auto-discovery Route (Per EVI)
//
// Type 1 -  Ethernet Auto-discovery Route (Per ES)
type BgpV4EviVxlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This contains the list of Broadcast Domains to be configured per EVI.
	BroadcastDomains []*BgpV4EviVxlanBroadcastDomain `protobuf:"bytes,1,rep,name=broadcast_domains,json=broadcastDomains,proto3" json:"broadcast_domains,omitempty"`
	// This model only supports Ingress Replication
	// default = ReplicationType.Enum.ingress_replication
	ReplicationType *BgpV4EviVxlan_ReplicationType_Enum `protobuf:"varint,2,opt,name=replication_type,json=replicationType,proto3,enum=otg.BgpV4EviVxlan_ReplicationType_Enum,oneof" json:"replication_type,omitempty"`
	// Downstream assigned VNI to be carried as Part of P-Multicast Service Interface Tunnel
	// attribute (PMSI Tunnel Attribute) in Type 3 Inclusive Multicast Ethernet Tag Route.
	// default = 16
	PmsiLabel *int32 `protobuf:"varint,3,opt,name=pmsi_label,json=pmsiLabel,proto3,oneof" json:"pmsi_label,omitempty"`
	// The Auto-discovery Route label (AD label) value, which gets advertised in the Ethernet
	// Auto-discovery Route per <EVI, ESI>
	// default = 0
	AdLabel *int32 `protobuf:"varint,4,opt,name=ad_label,json=adLabel,proto3,oneof" json:"ad_label,omitempty"`
	// Colon separated Extended Community value of 6 Bytes - AS number: Value identifying
	// an EVI.            Example - for the as_2octet 60005:100.
	RouteDistinguisher *BgpRouteDistinguisher `protobuf:"bytes,5,opt,name=route_distinguisher,json=routeDistinguisher,proto3,oneof" json:"route_distinguisher,omitempty"`
	// List of Layer 2 Virtual Network Identifier (L2VNI) export targets associated with
	// this EVI.
	RouteTargetExport []*BgpRouteTarget `protobuf:"bytes,6,rep,name=route_target_export,json=routeTargetExport,proto3" json:"route_target_export,omitempty"`
	// List of L2VNI import targets associated with this EVI.
	RouteTargetImport []*BgpRouteTarget `protobuf:"bytes,7,rep,name=route_target_import,json=routeTargetImport,proto3" json:"route_target_import,omitempty"`
	// List of Layer 3 Virtual Network Identifier (L3VNI) Export Route Targets.
	L3RouteTargetExport []*BgpRouteTarget `protobuf:"bytes,8,rep,name=l3_route_target_export,json=l3RouteTargetExport,proto3" json:"l3_route_target_export,omitempty"`
	// List of L3VNI Import Route Targets.
	L3RouteTargetImport []*BgpRouteTarget `protobuf:"bytes,9,rep,name=l3_route_target_import,json=l3RouteTargetImport,proto3" json:"l3_route_target_import,omitempty"`
	// Description missing in models
	Advanced *BgpRouteAdvanced `protobuf:"bytes,10,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Optional community settings.
	Communities []*BgpCommunity `protobuf:"bytes,11,rep,name=communities,proto3" json:"communities,omitempty"`
	// Optional Extended Community settings. The Extended Communities Attribute is a transitive
	// optional BGP attribute, with the Type Code 16. Community and Extended Communities
	// attributes are utilized to trigger routing decisions, such as acceptance, rejection,
	// preference, or redistribution. An extended community is an 8-Bytes value. It is
	// divided into two main parts. The first 2 Bytes of the community encode a type and
	// sub-type fields and the last 6 Bytes carry a unique set of data in a format defined
	// by the type and sub-type field. Extended communities provide a larger  range for
	// grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet,
	// the valid sub types are route target and origin. The valid value for  administrator_as_2octet
	// and administrator_as_4octet type is either two byte AS followed by four byte local
	// administrator id or four byte AS followed by two  byte local administrator id.  When
	// type is administrator_ipv4_address the valid sub types are route target and origin.
	// The valid value for  administrator_ipv4_address is a four byte IPv4 address followed
	// by a two byte local administrator id.  When type is opaque, valid sub types are color
	// and encapsulation. When sub type is color, first two bytes of the value field contain
	// flags and last four bytes  contains the value of the color. When sub type is encapsulation
	// the first four bytes of value field are reserved and last two bytes carries the tunnel
	// type from  IANA's ETHER TYPES registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol
	// type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth
	// the valid sub type is extended_bandwidth. The first two bytes of the value field
	// contains the AS number and the last four bytes contains the bandwidth in IEEE floating
	// point format.  When type is evpn the valid subtype is mac_address. In the value field
	// the low-order bit of the first byte(Flags) is defined as the Sticky/static flag and
	// may be set to 1, indicating the MAC address is static and cannot move. The second
	// byte is reserved and the  last four bytes contain the sequence number which is used
	// to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates
	// occur for the same MAC address.
	ExtCommunities []*BgpExtCommunity `protobuf:"bytes,12,rep,name=ext_communities,json=extCommunities,proto3" json:"ext_communities,omitempty"`
	// Optional AS PATH settings.
	AsPath *BgpAsPath `protobuf:"bytes,13,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
}

func (x *BgpV4EviVxlan) Reset() {
	*x = BgpV4EviVxlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4EviVxlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4EviVxlan) ProtoMessage() {}

func (x *BgpV4EviVxlan) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4EviVxlan.ProtoReflect.Descriptor instead.
func (*BgpV4EviVxlan) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{65}
}

func (x *BgpV4EviVxlan) GetBroadcastDomains() []*BgpV4EviVxlanBroadcastDomain {
	if x != nil {
		return x.BroadcastDomains
	}
	return nil
}

func (x *BgpV4EviVxlan) GetReplicationType() BgpV4EviVxlan_ReplicationType_Enum {
	if x != nil && x.ReplicationType != nil {
		return *x.ReplicationType
	}
	return BgpV4EviVxlan_ReplicationType_unspecified
}

func (x *BgpV4EviVxlan) GetPmsiLabel() int32 {
	if x != nil && x.PmsiLabel != nil {
		return *x.PmsiLabel
	}
	return 0
}

func (x *BgpV4EviVxlan) GetAdLabel() int32 {
	if x != nil && x.AdLabel != nil {
		return *x.AdLabel
	}
	return 0
}

func (x *BgpV4EviVxlan) GetRouteDistinguisher() *BgpRouteDistinguisher {
	if x != nil {
		return x.RouteDistinguisher
	}
	return nil
}

func (x *BgpV4EviVxlan) GetRouteTargetExport() []*BgpRouteTarget {
	if x != nil {
		return x.RouteTargetExport
	}
	return nil
}

func (x *BgpV4EviVxlan) GetRouteTargetImport() []*BgpRouteTarget {
	if x != nil {
		return x.RouteTargetImport
	}
	return nil
}

func (x *BgpV4EviVxlan) GetL3RouteTargetExport() []*BgpRouteTarget {
	if x != nil {
		return x.L3RouteTargetExport
	}
	return nil
}

func (x *BgpV4EviVxlan) GetL3RouteTargetImport() []*BgpRouteTarget {
	if x != nil {
		return x.L3RouteTargetImport
	}
	return nil
}

func (x *BgpV4EviVxlan) GetAdvanced() *BgpRouteAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *BgpV4EviVxlan) GetCommunities() []*BgpCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpV4EviVxlan) GetExtCommunities() []*BgpExtCommunity {
	if x != nil {
		return x.ExtCommunities
	}
	return nil
}

func (x *BgpV4EviVxlan) GetAsPath() *BgpAsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

// Configuration for Broadcast Domains per EVI.
type BgpV4EviVxlanBroadcastDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This contains the list of Customer MAC/IP Ranges to be configured per Broadcast Domain.
	//
	//
	// Advertises following route -
	// Type 2 - MAC/IP Advertisement Route.
	CmacIpRange []*BgpCMacIpRange `protobuf:"bytes,1,rep,name=cmac_ip_range,json=cmacIpRange,proto3" json:"cmac_ip_range,omitempty"`
	// The Ethernet Tag ID of the Broadcast Domain.
	// default = 0
	EthernetTagId *int64 `protobuf:"varint,2,opt,name=ethernet_tag_id,json=ethernetTagId,proto3,oneof" json:"ethernet_tag_id,omitempty"`
	// VLAN-Aware service to be enabled or disabled.
	// default = False
	VlanAwareService *bool `protobuf:"varint,3,opt,name=vlan_aware_service,json=vlanAwareService,proto3,oneof" json:"vlan_aware_service,omitempty"`
}

func (x *BgpV4EviVxlanBroadcastDomain) Reset() {
	*x = BgpV4EviVxlanBroadcastDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4EviVxlanBroadcastDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4EviVxlanBroadcastDomain) ProtoMessage() {}

func (x *BgpV4EviVxlanBroadcastDomain) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4EviVxlanBroadcastDomain.ProtoReflect.Descriptor instead.
func (*BgpV4EviVxlanBroadcastDomain) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{66}
}

func (x *BgpV4EviVxlanBroadcastDomain) GetCmacIpRange() []*BgpCMacIpRange {
	if x != nil {
		return x.CmacIpRange
	}
	return nil
}

func (x *BgpV4EviVxlanBroadcastDomain) GetEthernetTagId() int64 {
	if x != nil && x.EthernetTagId != nil {
		return *x.EthernetTagId
	}
	return 0
}

func (x *BgpV4EviVxlanBroadcastDomain) GetVlanAwareService() bool {
	if x != nil && x.VlanAwareService != nil {
		return *x.VlanAwareService
	}
	return false
}

// Configuration for MAC/IP Ranges per Broadcast Domain.
//
// Advertises following route -
//
// Type 2 - MAC/IP Advertisement Route.
type BgpCMacIpRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host MAC address range per Broadcast Domain.
	MacAddresses *MACRouteAddress `protobuf:"bytes,1,opt,name=mac_addresses,json=macAddresses,proto3,oneof" json:"mac_addresses,omitempty"`
	// Layer 2 Virtual Network Identifier (L2VNI) to be advertised with MAC/IP Advertisement
	// Route (Type 2)
	// default = 0
	L2Vni *int32 `protobuf:"varint,2,opt,name=l2vni,proto3,oneof" json:"l2vni,omitempty"`
	// Host IPv4 address range per Broadcast Domain.
	Ipv4Addresses *V4RouteAddress `protobuf:"bytes,3,opt,name=ipv4_addresses,json=ipv4Addresses,proto3,oneof" json:"ipv4_addresses,omitempty"`
	// Host IPv6 address range per Broadcast Domain.
	Ipv6Addresses *V6RouteAddress `protobuf:"bytes,4,opt,name=ipv6_addresses,json=ipv6Addresses,proto3,oneof" json:"ipv6_addresses,omitempty"`
	// Layer 3 Virtual Network Identifier (L3VNI) to be advertised with MAC/IP Advertisement
	// Route (Type 2).
	// default = 0
	L3Vni *int32 `protobuf:"varint,5,opt,name=l3vni,proto3,oneof" json:"l3vni,omitempty"`
	// Include default Gateway Extended Community in MAC/IP Advertisement Route (Type 2).
	// default = False
	IncludeDefaultGateway *bool `protobuf:"varint,6,opt,name=include_default_gateway,json=includeDefaultGateway,proto3,oneof" json:"include_default_gateway,omitempty"`
	// Description missing in models
	Advanced *BgpRouteAdvanced `protobuf:"bytes,7,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Optional community settings.
	Communities []*BgpCommunity `protobuf:"bytes,8,rep,name=communities,proto3" json:"communities,omitempty"`
	// Optional Extended Community settings. The Extended Communities Attribute is a transitive
	// optional BGP attribute, with the Type Code 16. Community and Extended Communities
	// attributes are utilized to trigger routing decisions, such as acceptance, rejection,
	// preference, or redistribution. An extended community is an 8-Bytes value. It is
	// divided into two main parts. The first 2 Bytes of the community encode a type and
	// sub-type fields and the last 6 Bytes carry a unique set of data in a format defined
	// by the type and sub-type field. Extended communities provide a larger  range for
	// grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet,
	// the valid sub types are route target and origin. The valid value for  administrator_as_2octet
	// and administrator_as_4octet type is either two byte AS followed by four byte local
	// administrator id or four byte AS followed by two  byte local administrator id.  When
	// type is administrator_ipv4_address the valid sub types are route target and origin.
	// The valid value for  administrator_ipv4_address is a four byte IPv4 address followed
	// by a two byte local administrator id.  When type is opaque, valid sub types are color
	// and encapsulation. When sub type is color, first two bytes of the value field contain
	// flags and last four bytes  contains the value of the color. When sub type is encapsulation
	// the first four bytes of value field are reserved and last two bytes carries the tunnel
	// type from  IANA's ETHER TYPES registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol
	// type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth
	// the valid sub type is extended_bandwidth. The first two bytes of the value field
	// contains the AS number and the last four bytes contains the bandwidth in IEEE floating
	// point format.  When type is evpn the valid subtype is mac_address. In the value field
	// the low-order bit of the first byte(Flags) is defined as the Sticky/static flag and
	// may be set to 1, indicating the MAC address is static and cannot move. The second
	// byte is reserved and the  last four bytes contain the sequence number which is used
	// to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates
	// occur for the same MAC address.
	ExtCommunities []*BgpExtCommunity `protobuf:"bytes,9,rep,name=ext_communities,json=extCommunities,proto3" json:"ext_communities,omitempty"`
	// Optional AS PATH settings.
	AsPath *BgpAsPath `protobuf:"bytes,10,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BgpCMacIpRange) Reset() {
	*x = BgpCMacIpRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpCMacIpRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpCMacIpRange) ProtoMessage() {}

func (x *BgpCMacIpRange) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpCMacIpRange.ProtoReflect.Descriptor instead.
func (*BgpCMacIpRange) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{67}
}

func (x *BgpCMacIpRange) GetMacAddresses() *MACRouteAddress {
	if x != nil {
		return x.MacAddresses
	}
	return nil
}

func (x *BgpCMacIpRange) GetL2Vni() int32 {
	if x != nil && x.L2Vni != nil {
		return *x.L2Vni
	}
	return 0
}

func (x *BgpCMacIpRange) GetIpv4Addresses() *V4RouteAddress {
	if x != nil {
		return x.Ipv4Addresses
	}
	return nil
}

func (x *BgpCMacIpRange) GetIpv6Addresses() *V6RouteAddress {
	if x != nil {
		return x.Ipv6Addresses
	}
	return nil
}

func (x *BgpCMacIpRange) GetL3Vni() int32 {
	if x != nil && x.L3Vni != nil {
		return *x.L3Vni
	}
	return 0
}

func (x *BgpCMacIpRange) GetIncludeDefaultGateway() bool {
	if x != nil && x.IncludeDefaultGateway != nil {
		return *x.IncludeDefaultGateway
	}
	return false
}

func (x *BgpCMacIpRange) GetAdvanced() *BgpRouteAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *BgpCMacIpRange) GetCommunities() []*BgpCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpCMacIpRange) GetExtCommunities() []*BgpExtCommunity {
	if x != nil {
		return x.ExtCommunities
	}
	return nil
}

func (x *BgpCMacIpRange) GetAsPath() *BgpAsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *BgpCMacIpRange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// BGP Route Distinguisher.
type BgpRouteDistinguisher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Route Distinguisher Type field of 2 Byte.
	// - as_2octet: Two-Octet AS Specific Extended Community (RFC 4360).
	// - ipv4_address: IPv4 Address Specific Extended Community (RFC 4360).
	// - as_4octet:  4-Octet AS Specific Extended Community (RFC 5668).
	// default = RdType.Enum.as_2octet
	RdType *BgpRouteDistinguisher_RdType_Enum `protobuf:"varint,1,opt,name=rd_type,json=rdType,proto3,enum=otg.BgpRouteDistinguisher_RdType_Enum,oneof" json:"rd_type,omitempty"`
	// Allow to automatically configure RD IP address  from local ip.
	// default = False
	AutoConfigRdIpAddr *bool `protobuf:"varint,2,opt,name=auto_config_rd_ip_addr,json=autoConfigRdIpAddr,proto3,oneof" json:"auto_config_rd_ip_addr,omitempty"`
	// Colon separated Extended Community value of 6 Bytes - AS number: Value.  Example
	// - for the as_2octet or as_4octet 60005:100,  for ipv4_address 1.1.1.1:100
	RdValue *string `protobuf:"bytes,3,opt,name=rd_value,json=rdValue,proto3,oneof" json:"rd_value,omitempty"`
}

func (x *BgpRouteDistinguisher) Reset() {
	*x = BgpRouteDistinguisher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteDistinguisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteDistinguisher) ProtoMessage() {}

func (x *BgpRouteDistinguisher) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteDistinguisher.ProtoReflect.Descriptor instead.
func (*BgpRouteDistinguisher) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{68}
}

func (x *BgpRouteDistinguisher) GetRdType() BgpRouteDistinguisher_RdType_Enum {
	if x != nil && x.RdType != nil {
		return *x.RdType
	}
	return BgpRouteDistinguisher_RdType_unspecified
}

func (x *BgpRouteDistinguisher) GetAutoConfigRdIpAddr() bool {
	if x != nil && x.AutoConfigRdIpAddr != nil {
		return *x.AutoConfigRdIpAddr
	}
	return false
}

func (x *BgpRouteDistinguisher) GetRdValue() string {
	if x != nil && x.RdValue != nil {
		return *x.RdValue
	}
	return ""
}

// BGP Route Target.
type BgpRouteTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Extended Community Type field of 2 Byte.
	// - as_2octet: Two-Octet AS Specific Extended Community (RFC 4360).
	// - ipv4_address: IPv4 Address Specific Extended Community (RFC 4360).
	// - as_4octet:  4-Octet AS Specific Extended Community (RFC 5668).
	RtType *BgpRouteTarget_RtType_Enum `protobuf:"varint,1,opt,name=rt_type,json=rtType,proto3,enum=otg.BgpRouteTarget_RtType_Enum,oneof" json:"rt_type,omitempty"`
	// Colon separated Extended Community value of 6 Bytes - AS number: Assigned Number.
	// Example - for the as_2octet or as_4octet 60005:100,  for ipv4_address 1.1.1.1:100
	RtValue *string `protobuf:"bytes,2,opt,name=rt_value,json=rtValue,proto3,oneof" json:"rt_value,omitempty"`
}

func (x *BgpRouteTarget) Reset() {
	*x = BgpRouteTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteTarget) ProtoMessage() {}

func (x *BgpRouteTarget) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteTarget.ProtoReflect.Descriptor instead.
func (*BgpRouteTarget) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{69}
}

func (x *BgpRouteTarget) GetRtType() BgpRouteTarget_RtType_Enum {
	if x != nil && x.RtType != nil {
		return *x.RtType
	}
	return BgpRouteTarget_RtType_unspecified
}

func (x *BgpRouteTarget) GetRtValue() string {
	if x != nil && x.RtValue != nil {
		return *x.RtValue
	}
	return ""
}

// Status: under-review
// Status: under-review
// Configuration for BGP advanced settings.
type BgpAdvanced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of seconds the sender proposes for the value of the Hold Timer.
	// default = 90
	HoldTimeInterval *int32 `protobuf:"varint,1,opt,name=hold_time_interval,json=holdTimeInterval,proto3,oneof" json:"hold_time_interval,omitempty"`
	// Number of seconds between transmissions of Keepalive messages by this peer.
	// default = 30
	KeepAliveInterval *int32 `protobuf:"varint,2,opt,name=keep_alive_interval,json=keepAliveInterval,proto3,oneof" json:"keep_alive_interval,omitempty"`
	// The time interval at which Update messages are sent to the DUT, expressed as the
	// number of milliseconds between Update messages. The update interval 0 implies to
	// send all the updates as fast as possible.
	// default = 0
	UpdateInterval *int32 `protobuf:"varint,3,opt,name=update_interval,json=updateInterval,proto3,oneof" json:"update_interval,omitempty"`
	// The limited number of iterations that a unit of data can experience before the data
	// is discarded. This is placed in the TTL field in the IP header of the  transmitted
	// packets.
	// default = 64
	TimeToLive *int32 `protobuf:"varint,4,opt,name=time_to_live,json=timeToLive,proto3,oneof" json:"time_to_live,omitempty"`
	// The value to be used as a secret MD5 key for authentication. If not configured, MD5
	// authentication will not be enabled.
	Md5Key *string `protobuf:"bytes,5,opt,name=md5_key,json=md5Key,proto3,oneof" json:"md5_key,omitempty"`
}

func (x *BgpAdvanced) Reset() {
	*x = BgpAdvanced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpAdvanced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAdvanced) ProtoMessage() {}

func (x *BgpAdvanced) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAdvanced.ProtoReflect.Descriptor instead.
func (*BgpAdvanced) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{70}
}

func (x *BgpAdvanced) GetHoldTimeInterval() int32 {
	if x != nil && x.HoldTimeInterval != nil {
		return *x.HoldTimeInterval
	}
	return 0
}

func (x *BgpAdvanced) GetKeepAliveInterval() int32 {
	if x != nil && x.KeepAliveInterval != nil {
		return *x.KeepAliveInterval
	}
	return 0
}

func (x *BgpAdvanced) GetUpdateInterval() int32 {
	if x != nil && x.UpdateInterval != nil {
		return *x.UpdateInterval
	}
	return 0
}

func (x *BgpAdvanced) GetTimeToLive() int32 {
	if x != nil && x.TimeToLive != nil {
		return *x.TimeToLive
	}
	return 0
}

func (x *BgpAdvanced) GetMd5Key() string {
	if x != nil && x.Md5Key != nil {
		return *x.Md5Key
	}
	return ""
}

// Status: under-review
// Status: under-review
// Configuration for BGP capability settings.
type BgpCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Support for the IPv4 Unicast address family.
	// default = True
	Ipv4Unicast *bool `protobuf:"varint,1,opt,name=ipv4_unicast,json=ipv4Unicast,proto3,oneof" json:"ipv4_unicast,omitempty"`
	// Support for the IPv4 Multicast address family.
	// default = False
	Ipv4Multicast *bool `protobuf:"varint,2,opt,name=ipv4_multicast,json=ipv4Multicast,proto3,oneof" json:"ipv4_multicast,omitempty"`
	// Support for the IPv4 Unicast address family.
	// default = True
	Ipv6Unicast *bool `protobuf:"varint,3,opt,name=ipv6_unicast,json=ipv6Unicast,proto3,oneof" json:"ipv6_unicast,omitempty"`
	// Support for the IPv6 Multicast address family.
	// default = False
	Ipv6Multicast *bool `protobuf:"varint,4,opt,name=ipv6_multicast,json=ipv6Multicast,proto3,oneof" json:"ipv6_multicast,omitempty"`
	// Support for VPLS as below.
	// RFC4761 - Virtual Private LAN Service (VPLS) using BGP for Auto-Discovery
	// and Signaling.
	// RFC6624 - Layer 2 Virtual Private Networks using BGP for Auto-Discovery
	// and Signaling.
	// default = False
	Vpls *bool `protobuf:"varint,5,opt,name=vpls,proto3,oneof" json:"vpls,omitempty"`
	// Support for the route refresh capabilities. Route Refresh allows the dynamic exchange
	// of route refresh requests  and routing information between BGP peers and the subsequent
	// re-advertisement  of the outbound or inbound routing table.
	// default = True
	RouteRefresh *bool `protobuf:"varint,6,opt,name=route_refresh,json=routeRefresh,proto3,oneof" json:"route_refresh,omitempty"`
	// Supports for the route constraint capabilities. Route Constraint allows the advertisement
	// of Route Target Membership  information. The BGP peers exchange Route Target Reachability
	// Information,  which is used to build a route distribution graph.  This limits the
	// propagation of VPN Network Layer Reachability Information (NLRI) between different
	// autonomous systems  or distinct clusters of the same autonomous system. This is supported
	// for Layer 3 Virtual Private Network scenario.
	// default = False
	RouteConstraint *bool `protobuf:"varint,7,opt,name=route_constraint,json=routeConstraint,proto3,oneof" json:"route_constraint,omitempty"`
	// Support for BGP Link State for ISIS and OSPF.
	// default = False
	LinkStateNonVpn *bool `protobuf:"varint,8,opt,name=link_state_non_vpn,json=linkStateNonVpn,proto3,oneof" json:"link_state_non_vpn,omitempty"`
	// Capability advertisement of BGP Link State for VPNs.
	// default = False
	LinkStateVpn *bool `protobuf:"varint,9,opt,name=link_state_vpn,json=linkStateVpn,proto3,oneof" json:"link_state_vpn,omitempty"`
	// Support for the EVPN address family.
	// default = False
	Evpn *bool `protobuf:"varint,10,opt,name=evpn,proto3,oneof" json:"evpn,omitempty"`
	// Support for extended Next Hop Encoding for Nexthop field in  IPv4 routes advertisement.
	// This allows IPv4 routes being advertised by IPv6 peers to  include an IPv6 Nexthop.
	// default = False
	ExtendedNextHopEncoding *bool `protobuf:"varint,11,opt,name=extended_next_hop_encoding,json=extendedNextHopEncoding,proto3,oneof" json:"extended_next_hop_encoding,omitempty"`
	// Support for the IPv4 Multicast VPN address family.
	// default = False
	Ipv4MulticastVpn *bool `protobuf:"varint,12,opt,name=ipv4_multicast_vpn,json=ipv4MulticastVpn,proto3,oneof" json:"ipv4_multicast_vpn,omitempty"`
	// Support for the IPv4 MPLS L3VPN address family.
	// default = False
	Ipv4MplsVpn *bool `protobuf:"varint,13,opt,name=ipv4_mpls_vpn,json=ipv4MplsVpn,proto3,oneof" json:"ipv4_mpls_vpn,omitempty"`
	// Supports for IPv4 MDT address family messages.
	// default = False
	Ipv4Mdt *bool `protobuf:"varint,14,opt,name=ipv4_mdt,json=ipv4Mdt,proto3,oneof" json:"ipv4_mdt,omitempty"`
	// Support for the IPv4 Multicast VPN address family.
	// default = False
	Ipv4MulticastMplsVpn *bool `protobuf:"varint,15,opt,name=ipv4_multicast_mpls_vpn,json=ipv4MulticastMplsVpn,proto3,oneof" json:"ipv4_multicast_mpls_vpn,omitempty"`
	// Support for propagation of IPv4 unicast flow specification rules.
	// default = False
	Ipv4UnicastFlowSpec *bool `protobuf:"varint,16,opt,name=ipv4_unicast_flow_spec,json=ipv4UnicastFlowSpec,proto3,oneof" json:"ipv4_unicast_flow_spec,omitempty"`
	// Support for IPv4 SRTE policy.
	// default = False
	Ipv4SrTePolicy *bool `protobuf:"varint,17,opt,name=ipv4_sr_te_policy,json=ipv4SrTePolicy,proto3,oneof" json:"ipv4_sr_te_policy,omitempty"`
	// Support for IPv4 Unicast Add Path Capability.
	// default = False
	Ipv4UnicastAddPath *bool `protobuf:"varint,18,opt,name=ipv4_unicast_add_path,json=ipv4UnicastAddPath,proto3,oneof" json:"ipv4_unicast_add_path,omitempty"`
	// Support for the IPv6 Multicast VPN address family.
	// default = False
	Ipv6MulticastVpn *bool `protobuf:"varint,19,opt,name=ipv6_multicast_vpn,json=ipv6MulticastVpn,proto3,oneof" json:"ipv6_multicast_vpn,omitempty"`
	// Support for the IPv6 MPLS L3VPN address family.
	// default = False
	Ipv6MplsVpn *bool `protobuf:"varint,20,opt,name=ipv6_mpls_vpn,json=ipv6MplsVpn,proto3,oneof" json:"ipv6_mpls_vpn,omitempty"`
	// Support for IPv6 MDT address family messages.
	// default = False
	Ipv6Mdt *bool `protobuf:"varint,21,opt,name=ipv6_mdt,json=ipv6Mdt,proto3,oneof" json:"ipv6_mdt,omitempty"`
	// Support for the IPv6 Multicast VPN address family.
	// default = False
	Ipv6MulticastMplsVpn *bool `protobuf:"varint,22,opt,name=ipv6_multicast_mpls_vpn,json=ipv6MulticastMplsVpn,proto3,oneof" json:"ipv6_multicast_mpls_vpn,omitempty"`
	// Support for propagation of IPv6 unicast flow specification rules.
	// default = False
	Ipv6UnicastFlowSpec *bool `protobuf:"varint,23,opt,name=ipv6_unicast_flow_spec,json=ipv6UnicastFlowSpec,proto3,oneof" json:"ipv6_unicast_flow_spec,omitempty"`
	// Support for IPv6 SRTE policy.
	// default = False
	Ipv6SrTePolicy *bool `protobuf:"varint,24,opt,name=ipv6_sr_te_policy,json=ipv6SrTePolicy,proto3,oneof" json:"ipv6_sr_te_policy,omitempty"`
	// Support for IPv6 Unicast Add Path Capability.
	// default = False
	Ipv6UnicastAddPath *bool `protobuf:"varint,25,opt,name=ipv6_unicast_add_path,json=ipv6UnicastAddPath,proto3,oneof" json:"ipv6_unicast_add_path,omitempty"`
}

func (x *BgpCapability) Reset() {
	*x = BgpCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpCapability) ProtoMessage() {}

func (x *BgpCapability) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpCapability.ProtoReflect.Descriptor instead.
func (*BgpCapability) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{71}
}

func (x *BgpCapability) GetIpv4Unicast() bool {
	if x != nil && x.Ipv4Unicast != nil {
		return *x.Ipv4Unicast
	}
	return false
}

func (x *BgpCapability) GetIpv4Multicast() bool {
	if x != nil && x.Ipv4Multicast != nil {
		return *x.Ipv4Multicast
	}
	return false
}

func (x *BgpCapability) GetIpv6Unicast() bool {
	if x != nil && x.Ipv6Unicast != nil {
		return *x.Ipv6Unicast
	}
	return false
}

func (x *BgpCapability) GetIpv6Multicast() bool {
	if x != nil && x.Ipv6Multicast != nil {
		return *x.Ipv6Multicast
	}
	return false
}

func (x *BgpCapability) GetVpls() bool {
	if x != nil && x.Vpls != nil {
		return *x.Vpls
	}
	return false
}

func (x *BgpCapability) GetRouteRefresh() bool {
	if x != nil && x.RouteRefresh != nil {
		return *x.RouteRefresh
	}
	return false
}

func (x *BgpCapability) GetRouteConstraint() bool {
	if x != nil && x.RouteConstraint != nil {
		return *x.RouteConstraint
	}
	return false
}

func (x *BgpCapability) GetLinkStateNonVpn() bool {
	if x != nil && x.LinkStateNonVpn != nil {
		return *x.LinkStateNonVpn
	}
	return false
}

func (x *BgpCapability) GetLinkStateVpn() bool {
	if x != nil && x.LinkStateVpn != nil {
		return *x.LinkStateVpn
	}
	return false
}

func (x *BgpCapability) GetEvpn() bool {
	if x != nil && x.Evpn != nil {
		return *x.Evpn
	}
	return false
}

func (x *BgpCapability) GetExtendedNextHopEncoding() bool {
	if x != nil && x.ExtendedNextHopEncoding != nil {
		return *x.ExtendedNextHopEncoding
	}
	return false
}

func (x *BgpCapability) GetIpv4MulticastVpn() bool {
	if x != nil && x.Ipv4MulticastVpn != nil {
		return *x.Ipv4MulticastVpn
	}
	return false
}

func (x *BgpCapability) GetIpv4MplsVpn() bool {
	if x != nil && x.Ipv4MplsVpn != nil {
		return *x.Ipv4MplsVpn
	}
	return false
}

func (x *BgpCapability) GetIpv4Mdt() bool {
	if x != nil && x.Ipv4Mdt != nil {
		return *x.Ipv4Mdt
	}
	return false
}

func (x *BgpCapability) GetIpv4MulticastMplsVpn() bool {
	if x != nil && x.Ipv4MulticastMplsVpn != nil {
		return *x.Ipv4MulticastMplsVpn
	}
	return false
}

func (x *BgpCapability) GetIpv4UnicastFlowSpec() bool {
	if x != nil && x.Ipv4UnicastFlowSpec != nil {
		return *x.Ipv4UnicastFlowSpec
	}
	return false
}

func (x *BgpCapability) GetIpv4SrTePolicy() bool {
	if x != nil && x.Ipv4SrTePolicy != nil {
		return *x.Ipv4SrTePolicy
	}
	return false
}

func (x *BgpCapability) GetIpv4UnicastAddPath() bool {
	if x != nil && x.Ipv4UnicastAddPath != nil {
		return *x.Ipv4UnicastAddPath
	}
	return false
}

func (x *BgpCapability) GetIpv6MulticastVpn() bool {
	if x != nil && x.Ipv6MulticastVpn != nil {
		return *x.Ipv6MulticastVpn
	}
	return false
}

func (x *BgpCapability) GetIpv6MplsVpn() bool {
	if x != nil && x.Ipv6MplsVpn != nil {
		return *x.Ipv6MplsVpn
	}
	return false
}

func (x *BgpCapability) GetIpv6Mdt() bool {
	if x != nil && x.Ipv6Mdt != nil {
		return *x.Ipv6Mdt
	}
	return false
}

func (x *BgpCapability) GetIpv6MulticastMplsVpn() bool {
	if x != nil && x.Ipv6MulticastMplsVpn != nil {
		return *x.Ipv6MulticastMplsVpn
	}
	return false
}

func (x *BgpCapability) GetIpv6UnicastFlowSpec() bool {
	if x != nil && x.Ipv6UnicastFlowSpec != nil {
		return *x.Ipv6UnicastFlowSpec
	}
	return false
}

func (x *BgpCapability) GetIpv6SrTePolicy() bool {
	if x != nil && x.Ipv6SrTePolicy != nil {
		return *x.Ipv6SrTePolicy
	}
	return false
}

func (x *BgpCapability) GetIpv6UnicastAddPath() bool {
	if x != nil && x.Ipv6UnicastAddPath != nil {
		return *x.Ipv6UnicastAddPath
	}
	return false
}

// Status: under-review
// Status: under-review
// Configuration for controlling storage of BGP learned information recieved from the
// peer.
type BgpLearnedInformationFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If enabled, will store the information related to Unicast IPv4 Prefixes recieved
	// from the peer.
	// default = False
	UnicastIpv4Prefix *bool `protobuf:"varint,1,opt,name=unicast_ipv4_prefix,json=unicastIpv4Prefix,proto3,oneof" json:"unicast_ipv4_prefix,omitempty"`
	// If enabled, will store the information related to Unicast IPv6 Prefixes recieved
	// from the peer.
	// default = False
	UnicastIpv6Prefix *bool `protobuf:"varint,2,opt,name=unicast_ipv6_prefix,json=unicastIpv6Prefix,proto3,oneof" json:"unicast_ipv6_prefix,omitempty"`
}

func (x *BgpLearnedInformationFilter) Reset() {
	*x = BgpLearnedInformationFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpLearnedInformationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpLearnedInformationFilter) ProtoMessage() {}

func (x *BgpLearnedInformationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpLearnedInformationFilter.ProtoReflect.Descriptor instead.
func (*BgpLearnedInformationFilter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{72}
}

func (x *BgpLearnedInformationFilter) GetUnicastIpv4Prefix() bool {
	if x != nil && x.UnicastIpv4Prefix != nil {
		return *x.UnicastIpv4Prefix
	}
	return false
}

func (x *BgpLearnedInformationFilter) GetUnicastIpv6Prefix() bool {
	if x != nil && x.UnicastIpv6Prefix != nil {
		return *x.UnicastIpv6Prefix
	}
	return false
}

// Emulated BGPv4 route range.
type BgpV4RouteRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of group of IPv4 route addresses.
	Addresses []*V4RouteAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Specify the NextHop in MP REACH NLRI. The mode for setting the IP address  of the
	// NextHop in the MP REACH NLRI can be one of the following:
	// Local IP: Automatically fills the Nexthop with the Local IP of the BGP
	// peer.
	// If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
	// Manual: Override the Nexthop with any arbitrary IPv4/IPv6 address.
	// default = NextHopMode.Enum.local_ip
	NextHopMode *BgpV4RouteRange_NextHopMode_Enum `protobuf:"varint,2,opt,name=next_hop_mode,json=nextHopMode,proto3,enum=otg.BgpV4RouteRange_NextHopMode_Enum,oneof" json:"next_hop_mode,omitempty"`
	// If the Nexthop Mode is Manual, it sets the type of the NextHop IP address.
	// default = NextHopAddressType.Enum.ipv4
	NextHopAddressType *BgpV4RouteRange_NextHopAddressType_Enum `protobuf:"varint,3,opt,name=next_hop_address_type,json=nextHopAddressType,proto3,enum=otg.BgpV4RouteRange_NextHopAddressType_Enum,oneof" json:"next_hop_address_type,omitempty"`
	// The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type
	// is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
	// default = 0.0.0.0
	NextHopIpv4Address *string `protobuf:"bytes,4,opt,name=next_hop_ipv4_address,json=nextHopIpv4Address,proto3,oneof" json:"next_hop_ipv4_address,omitempty"`
	// The IPv6 address of the next hop if the Nexthop Mode is manual and the Nexthop type
	// is IPv6.
	// default = ::0
	NextHopIpv6Address *string `protobuf:"bytes,5,opt,name=next_hop_ipv6_address,json=nextHopIpv6Address,proto3,oneof" json:"next_hop_ipv6_address,omitempty"`
	// Description missing in models
	Advanced *BgpRouteAdvanced `protobuf:"bytes,6,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Optional community settings.
	Communities []*BgpCommunity `protobuf:"bytes,7,rep,name=communities,proto3" json:"communities,omitempty"`
	// Description missing in models
	AsPath *BgpAsPath `protobuf:"bytes,8,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
	// Description missing in models
	AddPath *BgpAddPath `protobuf:"bytes,9,opt,name=add_path,json=addPath,proto3,oneof" json:"add_path,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Optional Extended Community settings. The Extended Communities Attribute is a transitive
	// optional BGP attribute, with the Type Code 16. Community and Extended Communities
	// attributes are utilized to trigger routing decisions, such as acceptance, rejection,
	// preference, or redistribution. An extended community is an 8-Bytes value. It is
	// divided into two main parts. The first 2 Bytes of the community encode a type and
	// sub-type fields and the last 6 Bytes carry a unique set of data in a format defined
	// by the type and sub-type field. Extended communities provide a larger  range for
	// grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet,
	// the valid sub types are route target and origin. The valid value for  administrator_as_2octet
	// and administrator_as_4octet type is either two byte AS followed by four byte local
	// administrator id or four byte AS followed by two  byte local administrator id.  When
	// type is administrator_ipv4_address the valid sub types are route target and origin.
	// The valid value for  administrator_ipv4_address is a four byte IPv4 address followed
	// by a two byte local administrator id.  When type is opaque, valid sub types are color
	// and encapsulation. When sub type is color, first two bytes of the value field contain
	// flags and last four bytes  contains the value of the color. When sub type is encapsulation
	// the first four bytes of value field are reserved and last two bytes carries the tunnel
	// type from  IANA's ETHER TYPES registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol
	// type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth
	// the valid sub type is extended_bandwidth. The first two bytes of the value field
	// contains the AS number and the last four bytes contains the bandwidth in IEEE floating
	// point format.  When type is evpn the valid subtype is mac_address. In the value field
	// the low-order bit of the first byte(Flags) is defined as the Sticky/static flag and
	// may be set to 1, indicating the MAC address is static and cannot move. The second
	// byte is reserved and the  last four bytes contain the sequence number which is used
	// to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates
	// occur for the same MAC address.  Note evpn type is defined mainly for use with evpn
	// route updates and not for IPv4 and IPv6 route updates.
	ExtCommunities []*BgpExtCommunity `protobuf:"bytes,11,rep,name=ext_communities,json=extCommunities,proto3" json:"ext_communities,omitempty"`
}

func (x *BgpV4RouteRange) Reset() {
	*x = BgpV4RouteRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4RouteRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4RouteRange) ProtoMessage() {}

func (x *BgpV4RouteRange) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4RouteRange.ProtoReflect.Descriptor instead.
func (*BgpV4RouteRange) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{73}
}

func (x *BgpV4RouteRange) GetAddresses() []*V4RouteAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *BgpV4RouteRange) GetNextHopMode() BgpV4RouteRange_NextHopMode_Enum {
	if x != nil && x.NextHopMode != nil {
		return *x.NextHopMode
	}
	return BgpV4RouteRange_NextHopMode_unspecified
}

func (x *BgpV4RouteRange) GetNextHopAddressType() BgpV4RouteRange_NextHopAddressType_Enum {
	if x != nil && x.NextHopAddressType != nil {
		return *x.NextHopAddressType
	}
	return BgpV4RouteRange_NextHopAddressType_unspecified
}

func (x *BgpV4RouteRange) GetNextHopIpv4Address() string {
	if x != nil && x.NextHopIpv4Address != nil {
		return *x.NextHopIpv4Address
	}
	return ""
}

func (x *BgpV4RouteRange) GetNextHopIpv6Address() string {
	if x != nil && x.NextHopIpv6Address != nil {
		return *x.NextHopIpv6Address
	}
	return ""
}

func (x *BgpV4RouteRange) GetAdvanced() *BgpRouteAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *BgpV4RouteRange) GetCommunities() []*BgpCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpV4RouteRange) GetAsPath() *BgpAsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *BgpV4RouteRange) GetAddPath() *BgpAddPath {
	if x != nil {
		return x.AddPath
	}
	return nil
}

func (x *BgpV4RouteRange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpV4RouteRange) GetExtCommunities() []*BgpExtCommunity {
	if x != nil {
		return x.ExtCommunities
	}
	return nil
}

// The BGP Additional Paths feature is a BGP extension that allows the  advertisement
// of multiple paths for the same prefix without the new  paths implicitly replacing
// any previous paths.
type BgpAddPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the additional path.
	// default = 1
	PathId *int32 `protobuf:"varint,1,opt,name=path_id,json=pathId,proto3,oneof" json:"path_id,omitempty"`
}

func (x *BgpAddPath) Reset() {
	*x = BgpAddPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpAddPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddPath) ProtoMessage() {}

func (x *BgpAddPath) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddPath.ProtoReflect.Descriptor instead.
func (*BgpAddPath) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{74}
}

func (x *BgpAddPath) GetPathId() int32 {
	if x != nil && x.PathId != nil {
		return *x.PathId
	}
	return 0
}

// Emulated BGPv6 route range.
type BgpV6RouteRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of group of IPv6 route addresses.
	Addresses []*V6RouteAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Specify the NextHop in MP REACH NLRI. The mode for setting the IP address  of the
	// NextHop in the MP REACH NLRI can be one of the following:
	// Local IP: Automatically fills the Nexthop with the Local IP of the BGP
	// peer.
	// If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
	// Manual: Override the Nexthop with any arbitrary IPv4/IPv6 address.
	// default = NextHopMode.Enum.local_ip
	NextHopMode *BgpV6RouteRange_NextHopMode_Enum `protobuf:"varint,2,opt,name=next_hop_mode,json=nextHopMode,proto3,enum=otg.BgpV6RouteRange_NextHopMode_Enum,oneof" json:"next_hop_mode,omitempty"`
	// If the Nexthop Mode is Manual, it sets the type of the NextHop IP address.
	// default = NextHopAddressType.Enum.ipv6
	NextHopAddressType *BgpV6RouteRange_NextHopAddressType_Enum `protobuf:"varint,3,opt,name=next_hop_address_type,json=nextHopAddressType,proto3,enum=otg.BgpV6RouteRange_NextHopAddressType_Enum,oneof" json:"next_hop_address_type,omitempty"`
	// The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type
	// is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
	// default = 0.0.0.0
	NextHopIpv4Address *string `protobuf:"bytes,4,opt,name=next_hop_ipv4_address,json=nextHopIpv4Address,proto3,oneof" json:"next_hop_ipv4_address,omitempty"`
	// The IPv6 address of the next hop if the Nexthop Mode is manual and the Nexthop type
	// is IPv6.
	// default = ::0
	NextHopIpv6Address *string `protobuf:"bytes,5,opt,name=next_hop_ipv6_address,json=nextHopIpv6Address,proto3,oneof" json:"next_hop_ipv6_address,omitempty"`
	// Description missing in models
	Advanced *BgpRouteAdvanced `protobuf:"bytes,6,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Optional community settings.
	Communities []*BgpCommunity `protobuf:"bytes,7,rep,name=communities,proto3" json:"communities,omitempty"`
	// Description missing in models
	AsPath *BgpAsPath `protobuf:"bytes,8,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
	// Description missing in models
	AddPath *BgpAddPath `protobuf:"bytes,9,opt,name=add_path,json=addPath,proto3,oneof" json:"add_path,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Optional Extended Community settings. The Extended Communities Attribute is a transitive
	// optional BGP attribute, with the Type Code 16. Community and Extended Communities
	// attributes are utilized to trigger routing decisions, such as acceptance, rejection,
	// preference, or redistribution. An extended community is an 8-Bytes value. It is
	// divided into two main parts. The first 2 Bytes of the community encode a type and
	// sub-type fields and the last 6 Bytes carry a unique set of data in a format defined
	// by the type and sub-type field. Extended communities provide a larger  range for
	// grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet,
	// the valid sub types are route target and origin. The valid value for  administrator_as_2octet
	// and administrator_as_4octet type is either two byte AS followed by four byte local
	// administrator id or four byte AS followed by two  byte local administrator id.  When
	// type is administrator_ipv4_address the valid sub types are route target and origin.
	// The valid value for  administrator_ipv4_address is a four byte IPv4 address followed
	// by a two byte local administrator id.  When type is opaque, valid sub types are color
	// and encapsulation. When sub type is color, first two bytes of the value field contain
	// flags and last four bytes  contains the value of the color. When sub type is encapsulation
	// the first four bytes of value field are reserved and last two bytes carries the tunnel
	// type from  IANA's ETHER TYPES registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol
	// type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth
	// the valid sub type is extended_bandwidth. The first two bytes of the value field
	// contains the AS number and the last four bytes contains the bandwidth in IEEE floating
	// point format.  When type is evpn the valid subtype is mac_address. In the value field
	// the low-order bit of the first byte(Flags) is defined as the Sticky/static flag and
	// may be set to 1, indicating the MAC address is static and cannot move. The second
	// byte is reserved and the  last four bytes contain the sequence number which is used
	// to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates
	// occur for the same MAC address.  Note evpn type is defined mainly for use with evpn
	// route updates and not for IPv4 and IPv6 route updates.
	ExtCommunities []*BgpExtCommunity `protobuf:"bytes,11,rep,name=ext_communities,json=extCommunities,proto3" json:"ext_communities,omitempty"`
}

func (x *BgpV6RouteRange) Reset() {
	*x = BgpV6RouteRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6RouteRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6RouteRange) ProtoMessage() {}

func (x *BgpV6RouteRange) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6RouteRange.ProtoReflect.Descriptor instead.
func (*BgpV6RouteRange) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{75}
}

func (x *BgpV6RouteRange) GetAddresses() []*V6RouteAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *BgpV6RouteRange) GetNextHopMode() BgpV6RouteRange_NextHopMode_Enum {
	if x != nil && x.NextHopMode != nil {
		return *x.NextHopMode
	}
	return BgpV6RouteRange_NextHopMode_unspecified
}

func (x *BgpV6RouteRange) GetNextHopAddressType() BgpV6RouteRange_NextHopAddressType_Enum {
	if x != nil && x.NextHopAddressType != nil {
		return *x.NextHopAddressType
	}
	return BgpV6RouteRange_NextHopAddressType_unspecified
}

func (x *BgpV6RouteRange) GetNextHopIpv4Address() string {
	if x != nil && x.NextHopIpv4Address != nil {
		return *x.NextHopIpv4Address
	}
	return ""
}

func (x *BgpV6RouteRange) GetNextHopIpv6Address() string {
	if x != nil && x.NextHopIpv6Address != nil {
		return *x.NextHopIpv6Address
	}
	return ""
}

func (x *BgpV6RouteRange) GetAdvanced() *BgpRouteAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *BgpV6RouteRange) GetCommunities() []*BgpCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpV6RouteRange) GetAsPath() *BgpAsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *BgpV6RouteRange) GetAddPath() *BgpAddPath {
	if x != nil {
		return x.AddPath
	}
	return nil
}

func (x *BgpV6RouteRange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpV6RouteRange) GetExtCommunities() []*BgpExtCommunity {
	if x != nil {
		return x.ExtCommunities
	}
	return nil
}

// Configuration for BGP Segment Routing Traffic Engineering(SRTE)
// policy.
//
type BgpSrteV4Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 4-octet value uniquely identifying the policy in the context of (color, endpoint)
	// tuple. It is used by the SR Policy originator to make unique (from an NLRI perspective)
	// both for multiple candidate  paths of the same SR Policy as well as candidate paths
	// of different SR Policies (i.e. with different segment list) with the same Color
	// and Endpoint but meant for different head-ends.
	// default = 1
	Distinguisher *int64 `protobuf:"varint,1,opt,name=distinguisher,proto3,oneof" json:"distinguisher,omitempty"`
	// Policy color is used to match the color of the destination prefixes to steer traffic
	// into the SR Policy.
	// default = 100
	Color *int64 `protobuf:"varint,2,opt,name=color,proto3,oneof" json:"color,omitempty"`
	// Specifies a single node or a set of nodes (e.g. an anycast address). It is selected
	// on the basis of the SR Policy type (AFI).
	// required = true
	Ipv4Endpoint string `protobuf:"bytes,3,opt,name=ipv4_endpoint,json=ipv4Endpoint,proto3" json:"ipv4_endpoint,omitempty"`
	// Mode for choosing the NextHop in MP REACH NLRI. Available modes are : Local IP: Automatically
	// fills the Nexthop with the Local IP of the BGP peer. For IPv6 BGP peer the Nexthop
	// Encoding capability should be enabled. Manual: Override the Nexthop with any arbitrary
	// IPv4/IPv6 address.
	// default = NextHopMode.Enum.local_ip
	NextHopMode *BgpSrteV4Policy_NextHopMode_Enum `protobuf:"varint,4,opt,name=next_hop_mode,json=nextHopMode,proto3,enum=otg.BgpSrteV4Policy_NextHopMode_Enum,oneof" json:"next_hop_mode,omitempty"`
	// Type of next hop IP address to be used when 'next_hop_mode' is set to 'manual'.
	// default = NextHopAddressType.Enum.ipv4
	NextHopAddressType *BgpSrteV4Policy_NextHopAddressType_Enum `protobuf:"varint,5,opt,name=next_hop_address_type,json=nextHopAddressType,proto3,enum=otg.BgpSrteV4Policy_NextHopAddressType_Enum,oneof" json:"next_hop_address_type,omitempty"`
	// The IPv4 address of the next hop if the Nexthop type 'next_hop_mode' is 'manual'
	// and the Nexthop type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6,
	// Nexthop Encoding capability extended_next_hop_encoding should be enabled.
	NextHopIpv4Address *string `protobuf:"bytes,6,opt,name=next_hop_ipv4_address,json=nextHopIpv4Address,proto3,oneof" json:"next_hop_ipv4_address,omitempty"`
	// The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type' is 'manual'
	// and the Nexthop type 'next_hop_address_type' is IPv6.
	NextHopIpv6Address *string `protobuf:"bytes,7,opt,name=next_hop_ipv6_address,json=nextHopIpv6Address,proto3,oneof" json:"next_hop_ipv6_address,omitempty"`
	// Description missing in models
	Advanced *BgpRouteAdvanced `protobuf:"bytes,8,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Description missing in models
	AddPath *BgpAddPath `protobuf:"bytes,9,opt,name=add_path,json=addPath,proto3,oneof" json:"add_path,omitempty"`
	// Description missing in models
	AsPath *BgpAsPath `protobuf:"bytes,10,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
	// Optional Community settings.
	Communities []*BgpCommunity `protobuf:"bytes,11,rep,name=communities,proto3" json:"communities,omitempty"`
	// Optional Extended Community settings. The Extended Communities Attribute is a transitive
	// optional BGP attribute, with the Type Code 16. Community and Extended Communities
	// attributes are utilized to trigger routing decisions, such as acceptance, rejection,
	// preference, or redistribution. An extended community is an 8-Bytes value. It is
	// divided into two main parts. The first 2 Bytes of the community encode a type and
	// sub-type fields and the last 6 Bytes carry a unique set of data in a format defined
	// by the type and sub-type field. Extended communities provide a larger  range for
	// grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet,
	// the valid sub types are route target and origin. The valid value for  administrator_as_2octet
	// and administrator_as_4octet type is either two byte AS followed by four byte local
	// administrator id or four byte AS followed by two  byte local administrator id.  When
	// type is administrator_ipv4_address the valid sub types are route target and origin.
	// The valid value for  administrator_ipv4_address is a four byte IPv4 address followed
	// by a two byte local administrator id.  When type is opaque, valid sub types are color
	// and encapsulation. When sub type is color, first two bytes of the value field contain
	// flags and last four bytes  contains the value of the color. When sub type is encapsulation
	// the first four bytes of value field are reserved and last two bytes carries the tunnel
	// type from  IANA's ETHER TYPES registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol
	// type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth
	// the valid sub type is extended_bandwidth. The first two bytes of the value field
	// contains the AS number and the last four bytes contains the bandwidth in IEEE floating
	// point format.  When type is evpn the valid subtype is mac_address. In the value field
	// the low-order bit of the first byte(Flags) is defined as the Sticky/static flag and
	// may be set to 1, indicating the MAC address is static and cannot move. The second
	// byte is reserved and the  last four bytes contain the sequence number which is used
	// to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates
	// occur for the same MAC address.
	ExtCommunities []*BgpExtCommunity `protobuf:"bytes,12,rep,name=ext_communities,json=extCommunities,proto3" json:"ext_communities,omitempty"`
	// List Tunnel Encapsulation Attributes.
	TunnelTlvs []*BgpSrteV4TunnelTlv `protobuf:"bytes,13,rep,name=tunnel_tlvs,json=tunnelTlvs,proto3" json:"tunnel_tlvs,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	// If enabled means that this part of the configuration including any active 'children'
	// nodes will be advertised to peer.  If disabled, this means that though config is
	// present, it is not taking any part of the test but can be activated at run-time to
	// advertise just this part of the configuration to the peer.
	// default = True
	Active *bool `protobuf:"varint,15,opt,name=active,proto3,oneof" json:"active,omitempty"`
}

func (x *BgpSrteV4Policy) Reset() {
	*x = BgpSrteV4Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteV4Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteV4Policy) ProtoMessage() {}

func (x *BgpSrteV4Policy) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteV4Policy.ProtoReflect.Descriptor instead.
func (*BgpSrteV4Policy) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{76}
}

func (x *BgpSrteV4Policy) GetDistinguisher() int64 {
	if x != nil && x.Distinguisher != nil {
		return *x.Distinguisher
	}
	return 0
}

func (x *BgpSrteV4Policy) GetColor() int64 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *BgpSrteV4Policy) GetIpv4Endpoint() string {
	if x != nil {
		return x.Ipv4Endpoint
	}
	return ""
}

func (x *BgpSrteV4Policy) GetNextHopMode() BgpSrteV4Policy_NextHopMode_Enum {
	if x != nil && x.NextHopMode != nil {
		return *x.NextHopMode
	}
	return BgpSrteV4Policy_NextHopMode_unspecified
}

func (x *BgpSrteV4Policy) GetNextHopAddressType() BgpSrteV4Policy_NextHopAddressType_Enum {
	if x != nil && x.NextHopAddressType != nil {
		return *x.NextHopAddressType
	}
	return BgpSrteV4Policy_NextHopAddressType_unspecified
}

func (x *BgpSrteV4Policy) GetNextHopIpv4Address() string {
	if x != nil && x.NextHopIpv4Address != nil {
		return *x.NextHopIpv4Address
	}
	return ""
}

func (x *BgpSrteV4Policy) GetNextHopIpv6Address() string {
	if x != nil && x.NextHopIpv6Address != nil {
		return *x.NextHopIpv6Address
	}
	return ""
}

func (x *BgpSrteV4Policy) GetAdvanced() *BgpRouteAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *BgpSrteV4Policy) GetAddPath() *BgpAddPath {
	if x != nil {
		return x.AddPath
	}
	return nil
}

func (x *BgpSrteV4Policy) GetAsPath() *BgpAsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *BgpSrteV4Policy) GetCommunities() []*BgpCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpSrteV4Policy) GetExtCommunities() []*BgpExtCommunity {
	if x != nil {
		return x.ExtCommunities
	}
	return nil
}

func (x *BgpSrteV4Policy) GetTunnelTlvs() []*BgpSrteV4TunnelTlv {
	if x != nil {
		return x.TunnelTlvs
	}
	return nil
}

func (x *BgpSrteV4Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpSrteV4Policy) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

// Configuration for BGP SRTE Tunnel TLV.
type BgpSrteV4TunnelTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	RemoteEndpointSubTlv *BgpSrteRemoteEndpointSubTlv `protobuf:"bytes,1,opt,name=remote_endpoint_sub_tlv,json=remoteEndpointSubTlv,proto3,oneof" json:"remote_endpoint_sub_tlv,omitempty"`
	// Description missing in models
	ColorSubTlv *BgpSrteColorSubTlv `protobuf:"bytes,2,opt,name=color_sub_tlv,json=colorSubTlv,proto3,oneof" json:"color_sub_tlv,omitempty"`
	// Description missing in models
	BindingSubTlv *BgpSrteBindingSubTlv `protobuf:"bytes,3,opt,name=binding_sub_tlv,json=bindingSubTlv,proto3,oneof" json:"binding_sub_tlv,omitempty"`
	// Description missing in models
	PreferenceSubTlv *BgpSrtePreferenceSubTlv `protobuf:"bytes,4,opt,name=preference_sub_tlv,json=preferenceSubTlv,proto3,oneof" json:"preference_sub_tlv,omitempty"`
	// Description missing in models
	PolicyPrioritySubTlv *BgpSrtePolicyPrioritySubTlv `protobuf:"bytes,5,opt,name=policy_priority_sub_tlv,json=policyPrioritySubTlv,proto3,oneof" json:"policy_priority_sub_tlv,omitempty"`
	// Description missing in models
	PolicyNameSubTlv *BgpSrtePolicyNameSubTlv `protobuf:"bytes,6,opt,name=policy_name_sub_tlv,json=policyNameSubTlv,proto3,oneof" json:"policy_name_sub_tlv,omitempty"`
	// Description missing in models
	ExplicitNullLabelPolicySubTlv *BgpSrteExplicitNullLabelPolicySubTlv `protobuf:"bytes,7,opt,name=explicit_null_label_policy_sub_tlv,json=explicitNullLabelPolicySubTlv,proto3,oneof" json:"explicit_null_label_policy_sub_tlv,omitempty"`
	// Description missing in models
	SegmentLists []*BgpSrteSegmentList `protobuf:"bytes,8,rep,name=segment_lists,json=segmentLists,proto3" json:"segment_lists,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// If enabled means that this part of the configuration including any active 'children'
	// nodes will be advertised to peer.  If disabled, this means that though config is
	// present, it is not taking any part of the test but can be activated at run-time to
	// advertise just this part of the configuration to the peer.
	// default = True
	Active *bool `protobuf:"varint,10,opt,name=active,proto3,oneof" json:"active,omitempty"`
}

func (x *BgpSrteV4TunnelTlv) Reset() {
	*x = BgpSrteV4TunnelTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteV4TunnelTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteV4TunnelTlv) ProtoMessage() {}

func (x *BgpSrteV4TunnelTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteV4TunnelTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteV4TunnelTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{77}
}

func (x *BgpSrteV4TunnelTlv) GetRemoteEndpointSubTlv() *BgpSrteRemoteEndpointSubTlv {
	if x != nil {
		return x.RemoteEndpointSubTlv
	}
	return nil
}

func (x *BgpSrteV4TunnelTlv) GetColorSubTlv() *BgpSrteColorSubTlv {
	if x != nil {
		return x.ColorSubTlv
	}
	return nil
}

func (x *BgpSrteV4TunnelTlv) GetBindingSubTlv() *BgpSrteBindingSubTlv {
	if x != nil {
		return x.BindingSubTlv
	}
	return nil
}

func (x *BgpSrteV4TunnelTlv) GetPreferenceSubTlv() *BgpSrtePreferenceSubTlv {
	if x != nil {
		return x.PreferenceSubTlv
	}
	return nil
}

func (x *BgpSrteV4TunnelTlv) GetPolicyPrioritySubTlv() *BgpSrtePolicyPrioritySubTlv {
	if x != nil {
		return x.PolicyPrioritySubTlv
	}
	return nil
}

func (x *BgpSrteV4TunnelTlv) GetPolicyNameSubTlv() *BgpSrtePolicyNameSubTlv {
	if x != nil {
		return x.PolicyNameSubTlv
	}
	return nil
}

func (x *BgpSrteV4TunnelTlv) GetExplicitNullLabelPolicySubTlv() *BgpSrteExplicitNullLabelPolicySubTlv {
	if x != nil {
		return x.ExplicitNullLabelPolicySubTlv
	}
	return nil
}

func (x *BgpSrteV4TunnelTlv) GetSegmentLists() []*BgpSrteSegmentList {
	if x != nil {
		return x.SegmentLists
	}
	return nil
}

func (x *BgpSrteV4TunnelTlv) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpSrteV4TunnelTlv) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

// Configuration for the BGP remote endpoint sub TLV.
type BgpSrteRemoteEndpointSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Autonomous system (AS) number
	// default = 0
	AsNumber *int64 `protobuf:"varint,1,opt,name=as_number,json=asNumber,proto3,oneof" json:"as_number,omitempty"`
	// Determines the address type
	// default = AddressFamily.Enum.ipv4
	AddressFamily *BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum `protobuf:"varint,2,opt,name=address_family,json=addressFamily,proto3,enum=otg.BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum,oneof" json:"address_family,omitempty"`
	// The IPv4 address of the Remote Endpoint.
	// default = 0.0.0.0
	Ipv4Address *string `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address,proto3,oneof" json:"ipv4_address,omitempty"`
	// The IPv6 address of the Remote Endpoint.
	// default = ::0
	Ipv6Address *string `protobuf:"bytes,4,opt,name=ipv6_address,json=ipv6Address,proto3,oneof" json:"ipv6_address,omitempty"`
}

func (x *BgpSrteRemoteEndpointSubTlv) Reset() {
	*x = BgpSrteRemoteEndpointSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteRemoteEndpointSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteRemoteEndpointSubTlv) ProtoMessage() {}

func (x *BgpSrteRemoteEndpointSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteRemoteEndpointSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteRemoteEndpointSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{78}
}

func (x *BgpSrteRemoteEndpointSubTlv) GetAsNumber() int64 {
	if x != nil && x.AsNumber != nil {
		return *x.AsNumber
	}
	return 0
}

func (x *BgpSrteRemoteEndpointSubTlv) GetAddressFamily() BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum {
	if x != nil && x.AddressFamily != nil {
		return *x.AddressFamily
	}
	return BgpSrteRemoteEndpointSubTlv_AddressFamily_unspecified
}

func (x *BgpSrteRemoteEndpointSubTlv) GetIpv4Address() string {
	if x != nil && x.Ipv4Address != nil {
		return *x.Ipv4Address
	}
	return ""
}

func (x *BgpSrteRemoteEndpointSubTlv) GetIpv6Address() string {
	if x != nil && x.Ipv6Address != nil {
		return *x.Ipv6Address
	}
	return ""
}

// Configuration for the Policy Color attribute sub-TLV. The Color sub-TLV MAY be used
// as a way to color the corresponding Tunnel TLV. The Value field of the sub-TLV is
// eight octets long and consists of a Color Extended Community. First two octets of
// its Value field are 0x030b as type and subtype of extended  community. Remaining
// six octets are are exposed to configure.
type BgpSrteColorSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Six octet values. Example: 000000000064 for color value 100.
	Color *string `protobuf:"bytes,1,opt,name=color,proto3,oneof" json:"color,omitempty"`
}

func (x *BgpSrteColorSubTlv) Reset() {
	*x = BgpSrteColorSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteColorSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteColorSubTlv) ProtoMessage() {}

func (x *BgpSrteColorSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteColorSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteColorSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{79}
}

func (x *BgpSrteColorSubTlv) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

// Configuration for the binding SID sub-TLV.  This is used to signal the binding SID
// related information  of the SR Policy candidate path.
type BgpSrteBindingSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the binding SID.  Supported types are No Binding SID or Four Octets Sid or
	// IPv6 SID.
	// default = BindingSidType.Enum.no_binding
	BindingSidType *BgpSrteBindingSubTlv_BindingSidType_Enum `protobuf:"varint,1,opt,name=binding_sid_type,json=bindingSidType,proto3,enum=otg.BgpSrteBindingSubTlv_BindingSidType_Enum,oneof" json:"binding_sid_type,omitempty"`
	// Binding SID is encoded in 4 octets.
	FourOctetSid *int32 `protobuf:"varint,2,opt,name=four_octet_sid,json=fourOctetSid,proto3,oneof" json:"four_octet_sid,omitempty"`
	// IPv6 SID value.
	Ipv6Sid *string `protobuf:"bytes,3,opt,name=ipv6_sid,json=ipv6Sid,proto3,oneof" json:"ipv6_sid,omitempty"`
	// S-Flag encodes the Specified-BSID-only behavior.
	// default = False
	SFlag *bool `protobuf:"varint,4,opt,name=s_flag,json=sFlag,proto3,oneof" json:"s_flag,omitempty"`
	// I-Flag encodes the Drop Upon Invalid behavior.
	// default = False
	IFlag *bool `protobuf:"varint,5,opt,name=i_flag,json=iFlag,proto3,oneof" json:"i_flag,omitempty"`
}

func (x *BgpSrteBindingSubTlv) Reset() {
	*x = BgpSrteBindingSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteBindingSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteBindingSubTlv) ProtoMessage() {}

func (x *BgpSrteBindingSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteBindingSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteBindingSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{80}
}

func (x *BgpSrteBindingSubTlv) GetBindingSidType() BgpSrteBindingSubTlv_BindingSidType_Enum {
	if x != nil && x.BindingSidType != nil {
		return *x.BindingSidType
	}
	return BgpSrteBindingSubTlv_BindingSidType_unspecified
}

func (x *BgpSrteBindingSubTlv) GetFourOctetSid() int32 {
	if x != nil && x.FourOctetSid != nil {
		return *x.FourOctetSid
	}
	return 0
}

func (x *BgpSrteBindingSubTlv) GetIpv6Sid() string {
	if x != nil && x.Ipv6Sid != nil {
		return *x.Ipv6Sid
	}
	return ""
}

func (x *BgpSrteBindingSubTlv) GetSFlag() bool {
	if x != nil && x.SFlag != nil {
		return *x.SFlag
	}
	return false
}

func (x *BgpSrteBindingSubTlv) GetIFlag() bool {
	if x != nil && x.IFlag != nil {
		return *x.IFlag
	}
	return false
}

// Configuration for BGP preference sub TLV of the SR Policy candidate path.
type BgpSrtePreferenceSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The preference value of the SR Policy candidate path.
	// default = 0
	Preference *int64 `protobuf:"varint,1,opt,name=preference,proto3,oneof" json:"preference,omitempty"`
}

func (x *BgpSrtePreferenceSubTlv) Reset() {
	*x = BgpSrtePreferenceSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrtePreferenceSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrtePreferenceSubTlv) ProtoMessage() {}

func (x *BgpSrtePreferenceSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrtePreferenceSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrtePreferenceSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{81}
}

func (x *BgpSrtePreferenceSubTlv) GetPreference() int64 {
	if x != nil && x.Preference != nil {
		return *x.Preference
	}
	return 0
}

// Configuration for the Policy Priority sub-TLV. The Policy Priority to indicate the
// order in which the SR policies  are re-computed upon topological change.
type BgpSrtePolicyPrioritySubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One-octet Priority value.
	PolicyPriority *int32 `protobuf:"varint,1,opt,name=policy_priority,json=policyPriority,proto3,oneof" json:"policy_priority,omitempty"`
}

func (x *BgpSrtePolicyPrioritySubTlv) Reset() {
	*x = BgpSrtePolicyPrioritySubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrtePolicyPrioritySubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrtePolicyPrioritySubTlv) ProtoMessage() {}

func (x *BgpSrtePolicyPrioritySubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrtePolicyPrioritySubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrtePolicyPrioritySubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{82}
}

func (x *BgpSrtePolicyPrioritySubTlv) GetPolicyPriority() int32 {
	if x != nil && x.PolicyPriority != nil {
		return *x.PolicyPriority
	}
	return 0
}

// Configuration for the Policy Name sub-TLV. The Policy Name sub-TLV is used to attach
// a symbolic name to the SR Policy candidate path.
type BgpSrtePolicyNameSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Symbolic name for the policy that should be a string of printable ASCII characters,
	// without a NULL terminator.
	PolicyName *string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3,oneof" json:"policy_name,omitempty"`
}

func (x *BgpSrtePolicyNameSubTlv) Reset() {
	*x = BgpSrtePolicyNameSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrtePolicyNameSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrtePolicyNameSubTlv) ProtoMessage() {}

func (x *BgpSrtePolicyNameSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrtePolicyNameSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrtePolicyNameSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{83}
}

func (x *BgpSrtePolicyNameSubTlv) GetPolicyName() string {
	if x != nil && x.PolicyName != nil {
		return *x.PolicyName
	}
	return ""
}

// Configuration for BGP explicit null label policy sub TLV settings.
type BgpSrteExplicitNullLabelPolicySubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the explicit null label policy
	// default = ExplicitNullLabelPolicy.Enum.do_not_push_enlp
	ExplicitNullLabelPolicy *BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum `protobuf:"varint,1,opt,name=explicit_null_label_policy,json=explicitNullLabelPolicy,proto3,enum=otg.BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum,oneof" json:"explicit_null_label_policy,omitempty"`
}

func (x *BgpSrteExplicitNullLabelPolicySubTlv) Reset() {
	*x = BgpSrteExplicitNullLabelPolicySubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteExplicitNullLabelPolicySubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteExplicitNullLabelPolicySubTlv) ProtoMessage() {}

func (x *BgpSrteExplicitNullLabelPolicySubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteExplicitNullLabelPolicySubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteExplicitNullLabelPolicySubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{84}
}

func (x *BgpSrteExplicitNullLabelPolicySubTlv) GetExplicitNullLabelPolicy() BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum {
	if x != nil && x.ExplicitNullLabelPolicy != nil {
		return *x.ExplicitNullLabelPolicy
	}
	return BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_unspecified
}

// Status: under-review
// Status: under-review
// Optional configuration for BGP SR TE Policy segment list. The Segment List sub-TLV
// encodes a single explicit path towards the Endpoint.
type BgpSrteSegmentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Weight associated with a given path and the sub-TLV is optional.
	// default = 0
	Weight *int64 `protobuf:"varint,1,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	// Description missing in models
	Segments []*BgpSrteSegment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// If enabled means that this part of the configuration including any active 'children'
	// nodes will be advertised to peer.  If disabled, this means that though config is
	// present, it is not taking any part of the test but can be activated at run-time to
	// advertise just this part of the configuration to the peer.
	// default = True
	Active *bool `protobuf:"varint,4,opt,name=active,proto3,oneof" json:"active,omitempty"`
}

func (x *BgpSrteSegmentList) Reset() {
	*x = BgpSrteSegmentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentList) ProtoMessage() {}

func (x *BgpSrteSegmentList) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentList.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentList) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{85}
}

func (x *BgpSrteSegmentList) GetWeight() int64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *BgpSrteSegmentList) GetSegments() []*BgpSrteSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *BgpSrteSegmentList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpSrteSegmentList) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

// Status: under-review
// Status: under-review
// A Segment sub-TLV describes a single segment in a segment list  i.e., a single element
// of the explicit path. The Segment sub-TLVs are optional.
type BgpSrteSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify one of the segment type.
	// https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13
	// Type  A: SID only, in the form of MPLS Label.
	// Type  B: SID only, in the form of IPv6 Address.
	// Type  C: IPv4 Node Address with optional SID.
	// Type  D: IPv6 Node Address with optional SID for SR MPLS.
	// Type  E: IPv4 Address and index with optional SID.
	// Type  F: IPv4 Local and Remote addresses with optional SID.
	// Type  G: IPv6 Address and index for local and remote pair with optional
	// SID for SR MPLS.
	// Type  H: IPv6 Local and Remote addresses with optional SID for SR MPLS.
	// Type  I: IPv6 Node Address with optional SID for SRv6.
	// Type  J: IPv6 Address and index for local and remote pair with optional
	// SID for SRv6.
	// Type  K: IPv6 Local and Remote addresses for SRv6.
	// required = true
	SegmentType BgpSrteSegment_SegmentType_Enum `protobuf:"varint,1,opt,name=segment_type,json=segmentType,proto3,enum=otg.BgpSrteSegment_SegmentType_Enum" json:"segment_type,omitempty"`
	// Description missing in models
	TypeA *BgpSrteSegmentATypeSubTlv `protobuf:"bytes,2,opt,name=type_a,json=typeA,proto3,oneof" json:"type_a,omitempty"`
	// Description missing in models
	TypeB *BgpSrteSegmentBTypeSubTlv `protobuf:"bytes,3,opt,name=type_b,json=typeB,proto3,oneof" json:"type_b,omitempty"`
	// Description missing in models
	TypeC *BgpSrteSegmentCTypeSubTlv `protobuf:"bytes,4,opt,name=type_c,json=typeC,proto3,oneof" json:"type_c,omitempty"`
	// Description missing in models
	TypeD *BgpSrteSegmentDTypeSubTlv `protobuf:"bytes,5,opt,name=type_d,json=typeD,proto3,oneof" json:"type_d,omitempty"`
	// Description missing in models
	TypeE *BgpSrteSegmentETypeSubTlv `protobuf:"bytes,6,opt,name=type_e,json=typeE,proto3,oneof" json:"type_e,omitempty"`
	// Description missing in models
	TypeF *BgpSrteSegmentFTypeSubTlv `protobuf:"bytes,7,opt,name=type_f,json=typeF,proto3,oneof" json:"type_f,omitempty"`
	// Description missing in models
	TypeG *BgpSrteSegmentGTypeSubTlv `protobuf:"bytes,8,opt,name=type_g,json=typeG,proto3,oneof" json:"type_g,omitempty"`
	// Description missing in models
	TypeH *BgpSrteSegmentHTypeSubTlv `protobuf:"bytes,9,opt,name=type_h,json=typeH,proto3,oneof" json:"type_h,omitempty"`
	// Description missing in models
	TypeI *BgpSrteSegmentITypeSubTlv `protobuf:"bytes,10,opt,name=type_i,json=typeI,proto3,oneof" json:"type_i,omitempty"`
	// Description missing in models
	TypeJ *BgpSrteSegmentJTypeSubTlv `protobuf:"bytes,11,opt,name=type_j,json=typeJ,proto3,oneof" json:"type_j,omitempty"`
	// Description missing in models
	TypeK *BgpSrteSegmentKTypeSubTlv `protobuf:"bytes,12,opt,name=type_k,json=typeK,proto3,oneof" json:"type_k,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	// If enabled means that this part of the configuration including any active 'children'
	// nodes will be advertised to peer.  If disabled, this means that though config is
	// present, it is not taking any part of the test but can be activated at run-time to
	// advertise just this part of the configuration to the peer.
	// default = True
	Active *bool `protobuf:"varint,14,opt,name=active,proto3,oneof" json:"active,omitempty"`
}

func (x *BgpSrteSegment) Reset() {
	*x = BgpSrteSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegment) ProtoMessage() {}

func (x *BgpSrteSegment) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegment.ProtoReflect.Descriptor instead.
func (*BgpSrteSegment) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{86}
}

func (x *BgpSrteSegment) GetSegmentType() BgpSrteSegment_SegmentType_Enum {
	if x != nil {
		return x.SegmentType
	}
	return BgpSrteSegment_SegmentType_unspecified
}

func (x *BgpSrteSegment) GetTypeA() *BgpSrteSegmentATypeSubTlv {
	if x != nil {
		return x.TypeA
	}
	return nil
}

func (x *BgpSrteSegment) GetTypeB() *BgpSrteSegmentBTypeSubTlv {
	if x != nil {
		return x.TypeB
	}
	return nil
}

func (x *BgpSrteSegment) GetTypeC() *BgpSrteSegmentCTypeSubTlv {
	if x != nil {
		return x.TypeC
	}
	return nil
}

func (x *BgpSrteSegment) GetTypeD() *BgpSrteSegmentDTypeSubTlv {
	if x != nil {
		return x.TypeD
	}
	return nil
}

func (x *BgpSrteSegment) GetTypeE() *BgpSrteSegmentETypeSubTlv {
	if x != nil {
		return x.TypeE
	}
	return nil
}

func (x *BgpSrteSegment) GetTypeF() *BgpSrteSegmentFTypeSubTlv {
	if x != nil {
		return x.TypeF
	}
	return nil
}

func (x *BgpSrteSegment) GetTypeG() *BgpSrteSegmentGTypeSubTlv {
	if x != nil {
		return x.TypeG
	}
	return nil
}

func (x *BgpSrteSegment) GetTypeH() *BgpSrteSegmentHTypeSubTlv {
	if x != nil {
		return x.TypeH
	}
	return nil
}

func (x *BgpSrteSegment) GetTypeI() *BgpSrteSegmentITypeSubTlv {
	if x != nil {
		return x.TypeI
	}
	return nil
}

func (x *BgpSrteSegment) GetTypeJ() *BgpSrteSegmentJTypeSubTlv {
	if x != nil {
		return x.TypeJ
	}
	return nil
}

func (x *BgpSrteSegment) GetTypeK() *BgpSrteSegmentKTypeSubTlv {
	if x != nil {
		return x.TypeK
	}
	return nil
}

func (x *BgpSrteSegment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpSrteSegment) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

// Configuration for SR-MPLS with Label, TC, Bottom-of-Stack and TTL.
type BgpSrteSrMplsSid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label value in [0, 2^20 -1].
	Label *int32 `protobuf:"varint,1,opt,name=label,proto3,oneof" json:"label,omitempty"`
	// Traffic class in bits.
	Tc *int32 `protobuf:"varint,2,opt,name=tc,proto3,oneof" json:"tc,omitempty"`
	// Bottom-of-Stack bit.
	SBit *bool `protobuf:"varint,3,opt,name=s_bit,json=sBit,proto3,oneof" json:"s_bit,omitempty"`
	// Time To Live.
	Ttl *int32 `protobuf:"varint,4,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
}

func (x *BgpSrteSrMplsSid) Reset() {
	*x = BgpSrteSrMplsSid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSrMplsSid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSrMplsSid) ProtoMessage() {}

func (x *BgpSrteSrMplsSid) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSrMplsSid.ProtoReflect.Descriptor instead.
func (*BgpSrteSrMplsSid) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{87}
}

func (x *BgpSrteSrMplsSid) GetLabel() int32 {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return 0
}

func (x *BgpSrteSrMplsSid) GetTc() int32 {
	if x != nil && x.Tc != nil {
		return *x.Tc
	}
	return 0
}

func (x *BgpSrteSrMplsSid) GetSBit() bool {
	if x != nil && x.SBit != nil {
		return *x.SBit
	}
	return false
}

func (x *BgpSrteSrMplsSid) GetTtl() int32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

// Configuration for SRv6 Endpoint Behavior and SID Structure.  Its optional. Summation
// of lengths for Locator Block, Locator Node,  Function, and Argument MUST be less
// than or equal to 128.
type BgpSrteSRv6SIDEndpointBehaviorAndStructure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SRv6 SID Locator Block length in bits.
	// default = 0
	LbLength *int32 `protobuf:"varint,1,opt,name=lb_length,json=lbLength,proto3,oneof" json:"lb_length,omitempty"`
	// SRv6 SID Locator Node length in bits.
	// default = 0
	LnLength *int32 `protobuf:"varint,2,opt,name=ln_length,json=lnLength,proto3,oneof" json:"ln_length,omitempty"`
	// SRv6 SID Function length in bits.
	// default = 0
	FuncLength *int32 `protobuf:"varint,3,opt,name=func_length,json=funcLength,proto3,oneof" json:"func_length,omitempty"`
	// SRv6 SID Arguments length in bits.
	// default = 0
	ArgLength *int32 `protobuf:"varint,4,opt,name=arg_length,json=argLength,proto3,oneof" json:"arg_length,omitempty"`
}

func (x *BgpSrteSRv6SIDEndpointBehaviorAndStructure) Reset() {
	*x = BgpSrteSRv6SIDEndpointBehaviorAndStructure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSRv6SIDEndpointBehaviorAndStructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSRv6SIDEndpointBehaviorAndStructure) ProtoMessage() {}

func (x *BgpSrteSRv6SIDEndpointBehaviorAndStructure) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSRv6SIDEndpointBehaviorAndStructure.ProtoReflect.Descriptor instead.
func (*BgpSrteSRv6SIDEndpointBehaviorAndStructure) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{88}
}

func (x *BgpSrteSRv6SIDEndpointBehaviorAndStructure) GetLbLength() int32 {
	if x != nil && x.LbLength != nil {
		return *x.LbLength
	}
	return 0
}

func (x *BgpSrteSRv6SIDEndpointBehaviorAndStructure) GetLnLength() int32 {
	if x != nil && x.LnLength != nil {
		return *x.LnLength
	}
	return 0
}

func (x *BgpSrteSRv6SIDEndpointBehaviorAndStructure) GetFuncLength() int32 {
	if x != nil && x.FuncLength != nil {
		return *x.FuncLength
	}
	return 0
}

func (x *BgpSrteSRv6SIDEndpointBehaviorAndStructure) GetArgLength() int32 {
	if x != nil && x.ArgLength != nil {
		return *x.ArgLength
	}
	return 0
}

// Type  A: SID only, in the form of MPLS Label.
type BgpSrteSegmentATypeSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined
	// in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
	Flags *string `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// Label value in [0, 2^20 -1].
	Label *int32 `protobuf:"varint,2,opt,name=label,proto3,oneof" json:"label,omitempty"`
	// Traffic class in bits.
	Tc *int32 `protobuf:"varint,3,opt,name=tc,proto3,oneof" json:"tc,omitempty"`
	// Bottom-of-Stack bit.
	SBit *bool `protobuf:"varint,4,opt,name=s_bit,json=sBit,proto3,oneof" json:"s_bit,omitempty"`
	// Time To Live.
	Ttl *int32 `protobuf:"varint,5,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
}

func (x *BgpSrteSegmentATypeSubTlv) Reset() {
	*x = BgpSrteSegmentATypeSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentATypeSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentATypeSubTlv) ProtoMessage() {}

func (x *BgpSrteSegmentATypeSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentATypeSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentATypeSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{89}
}

func (x *BgpSrteSegmentATypeSubTlv) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *BgpSrteSegmentATypeSubTlv) GetLabel() int32 {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return 0
}

func (x *BgpSrteSegmentATypeSubTlv) GetTc() int32 {
	if x != nil && x.Tc != nil {
		return *x.Tc
	}
	return 0
}

func (x *BgpSrteSegmentATypeSubTlv) GetSBit() bool {
	if x != nil && x.SBit != nil {
		return *x.SBit
	}
	return false
}

func (x *BgpSrteSegmentATypeSubTlv) GetTtl() int32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

// Type  B: SID only, in the form of IPv6 address.
type BgpSrteSegmentBTypeSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined
	// in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
	Flags *string `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// SRv6 SID.
	// required = true
	Srv6Sid string `protobuf:"bytes,2,opt,name=srv6_sid,json=srv6Sid,proto3" json:"srv6_sid,omitempty"`
	// Optional SRv6 Endpoint Behavior and SID Structure.
	Srv6SidEndpointBehavior *BgpSrteSRv6SIDEndpointBehaviorAndStructure `protobuf:"bytes,3,opt,name=srv6_sid_endpoint_behavior,json=srv6SidEndpointBehavior,proto3,oneof" json:"srv6_sid_endpoint_behavior,omitempty"`
}

func (x *BgpSrteSegmentBTypeSubTlv) Reset() {
	*x = BgpSrteSegmentBTypeSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentBTypeSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentBTypeSubTlv) ProtoMessage() {}

func (x *BgpSrteSegmentBTypeSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentBTypeSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentBTypeSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{90}
}

func (x *BgpSrteSegmentBTypeSubTlv) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *BgpSrteSegmentBTypeSubTlv) GetSrv6Sid() string {
	if x != nil {
		return x.Srv6Sid
	}
	return ""
}

func (x *BgpSrteSegmentBTypeSubTlv) GetSrv6SidEndpointBehavior() *BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	if x != nil {
		return x.Srv6SidEndpointBehavior
	}
	return nil
}

// Status: under-review
// Status: under-review
// Type C: IPv4 Node Address with optional SID.
type BgpSrteSegmentCTypeSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined
	// in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
	Flags *string `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// SR Algorithm identifier when A-Flag in on.
	// default = 0
	SrAlgorithm *int32 `protobuf:"varint,2,opt,name=sr_algorithm,json=srAlgorithm,proto3,oneof" json:"sr_algorithm,omitempty"`
	// IPv4 address representing a node.
	// required = true
	Ipv4NodeAddress string `protobuf:"bytes,3,opt,name=ipv4_node_address,json=ipv4NodeAddress,proto3" json:"ipv4_node_address,omitempty"`
	// Optional SR-MPLS SID.
	SrMplsSid *BgpSrteSrMplsSid `protobuf:"bytes,4,opt,name=sr_mpls_sid,json=srMplsSid,proto3,oneof" json:"sr_mpls_sid,omitempty"`
}

func (x *BgpSrteSegmentCTypeSubTlv) Reset() {
	*x = BgpSrteSegmentCTypeSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentCTypeSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentCTypeSubTlv) ProtoMessage() {}

func (x *BgpSrteSegmentCTypeSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentCTypeSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentCTypeSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{91}
}

func (x *BgpSrteSegmentCTypeSubTlv) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *BgpSrteSegmentCTypeSubTlv) GetSrAlgorithm() int32 {
	if x != nil && x.SrAlgorithm != nil {
		return *x.SrAlgorithm
	}
	return 0
}

func (x *BgpSrteSegmentCTypeSubTlv) GetIpv4NodeAddress() string {
	if x != nil {
		return x.Ipv4NodeAddress
	}
	return ""
}

func (x *BgpSrteSegmentCTypeSubTlv) GetSrMplsSid() *BgpSrteSrMplsSid {
	if x != nil {
		return x.SrMplsSid
	}
	return nil
}

// Type D: IPv6 Node Address with optional SID for SR MPLS.
type BgpSrteSegmentDTypeSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined
	// in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
	Flags *string `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// specifying SR Algorithm when when A-Flag as defined in above flags.
	// default = 0
	SrAlgorithm *int32 `protobuf:"varint,2,opt,name=sr_algorithm,json=srAlgorithm,proto3,oneof" json:"sr_algorithm,omitempty"`
	// IPv6 address representing a node.
	// required = true
	Ipv6NodeAddress string `protobuf:"bytes,3,opt,name=ipv6_node_address,json=ipv6NodeAddress,proto3" json:"ipv6_node_address,omitempty"`
	// Optional SR-MPLS SID.
	SrMplsSid *BgpSrteSrMplsSid `protobuf:"bytes,4,opt,name=sr_mpls_sid,json=srMplsSid,proto3,oneof" json:"sr_mpls_sid,omitempty"`
}

func (x *BgpSrteSegmentDTypeSubTlv) Reset() {
	*x = BgpSrteSegmentDTypeSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentDTypeSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentDTypeSubTlv) ProtoMessage() {}

func (x *BgpSrteSegmentDTypeSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentDTypeSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentDTypeSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{92}
}

func (x *BgpSrteSegmentDTypeSubTlv) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *BgpSrteSegmentDTypeSubTlv) GetSrAlgorithm() int32 {
	if x != nil && x.SrAlgorithm != nil {
		return *x.SrAlgorithm
	}
	return 0
}

func (x *BgpSrteSegmentDTypeSubTlv) GetIpv6NodeAddress() string {
	if x != nil {
		return x.Ipv6NodeAddress
	}
	return ""
}

func (x *BgpSrteSegmentDTypeSubTlv) GetSrMplsSid() *BgpSrteSrMplsSid {
	if x != nil {
		return x.SrMplsSid
	}
	return nil
}

// Type E: IPv4 Address and Local Interface ID with optional SID
type BgpSrteSegmentETypeSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined
	// in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
	Flags *string `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// Local Interface ID: The Interface Index as defined in [RFC8664].
	// default = 0
	LocalInterfaceId *int32 `protobuf:"varint,2,opt,name=local_interface_id,json=localInterfaceId,proto3,oneof" json:"local_interface_id,omitempty"`
	// IPv4 address representing a node.
	// required = true
	Ipv4NodeAddress string `protobuf:"bytes,3,opt,name=ipv4_node_address,json=ipv4NodeAddress,proto3" json:"ipv4_node_address,omitempty"`
	// Optional SR-MPLS SID.
	SrMplsSid *BgpSrteSrMplsSid `protobuf:"bytes,4,opt,name=sr_mpls_sid,json=srMplsSid,proto3,oneof" json:"sr_mpls_sid,omitempty"`
}

func (x *BgpSrteSegmentETypeSubTlv) Reset() {
	*x = BgpSrteSegmentETypeSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentETypeSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentETypeSubTlv) ProtoMessage() {}

func (x *BgpSrteSegmentETypeSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentETypeSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentETypeSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{93}
}

func (x *BgpSrteSegmentETypeSubTlv) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *BgpSrteSegmentETypeSubTlv) GetLocalInterfaceId() int32 {
	if x != nil && x.LocalInterfaceId != nil {
		return *x.LocalInterfaceId
	}
	return 0
}

func (x *BgpSrteSegmentETypeSubTlv) GetIpv4NodeAddress() string {
	if x != nil {
		return x.Ipv4NodeAddress
	}
	return ""
}

func (x *BgpSrteSegmentETypeSubTlv) GetSrMplsSid() *BgpSrteSrMplsSid {
	if x != nil {
		return x.SrMplsSid
	}
	return nil
}

// Type F: IPv4 Local and Remote addresses with optional SID.
type BgpSrteSegmentFTypeSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined
	// in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
	Flags *string `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// Local IPv4 Address.
	// required = true
	LocalIpv4Address string `protobuf:"bytes,2,opt,name=local_ipv4_address,json=localIpv4Address,proto3" json:"local_ipv4_address,omitempty"`
	// Remote IPv4 Address.
	// required = true
	RemoteIpv4Address string `protobuf:"bytes,3,opt,name=remote_ipv4_address,json=remoteIpv4Address,proto3" json:"remote_ipv4_address,omitempty"`
	// Optional SR-MPLS SID.
	SrMplsSid *BgpSrteSrMplsSid `protobuf:"bytes,4,opt,name=sr_mpls_sid,json=srMplsSid,proto3,oneof" json:"sr_mpls_sid,omitempty"`
}

func (x *BgpSrteSegmentFTypeSubTlv) Reset() {
	*x = BgpSrteSegmentFTypeSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentFTypeSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentFTypeSubTlv) ProtoMessage() {}

func (x *BgpSrteSegmentFTypeSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentFTypeSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentFTypeSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{94}
}

func (x *BgpSrteSegmentFTypeSubTlv) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *BgpSrteSegmentFTypeSubTlv) GetLocalIpv4Address() string {
	if x != nil {
		return x.LocalIpv4Address
	}
	return ""
}

func (x *BgpSrteSegmentFTypeSubTlv) GetRemoteIpv4Address() string {
	if x != nil {
		return x.RemoteIpv4Address
	}
	return ""
}

func (x *BgpSrteSegmentFTypeSubTlv) GetSrMplsSid() *BgpSrteSrMplsSid {
	if x != nil {
		return x.SrMplsSid
	}
	return nil
}

// Type G: IPv6 Address, Interface ID for local and remote pair with optional SID for
// SR MPLS.
type BgpSrteSegmentGTypeSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined
	// in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
	Flags *string `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// Local Interface ID: The Interface Index as defined in [RFC8664].
	// default = 0
	LocalInterfaceId *int32 `protobuf:"varint,2,opt,name=local_interface_id,json=localInterfaceId,proto3,oneof" json:"local_interface_id,omitempty"`
	// IPv6 address representing a node.
	// required = true
	LocalIpv6NodeAddress string `protobuf:"bytes,3,opt,name=local_ipv6_node_address,json=localIpv6NodeAddress,proto3" json:"local_ipv6_node_address,omitempty"`
	// Local Interface ID: The Interface Index as defined in [RFC8664].
	// default = 0
	RemoteInterfaceId *int32 `protobuf:"varint,4,opt,name=remote_interface_id,json=remoteInterfaceId,proto3,oneof" json:"remote_interface_id,omitempty"`
	// IPv6 address representing a node.
	// required = true
	RemoteIpv6NodeAddress string `protobuf:"bytes,5,opt,name=remote_ipv6_node_address,json=remoteIpv6NodeAddress,proto3" json:"remote_ipv6_node_address,omitempty"`
	// Optional SR-MPLS SID.
	SrMplsSid *BgpSrteSrMplsSid `protobuf:"bytes,6,opt,name=sr_mpls_sid,json=srMplsSid,proto3,oneof" json:"sr_mpls_sid,omitempty"`
}

func (x *BgpSrteSegmentGTypeSubTlv) Reset() {
	*x = BgpSrteSegmentGTypeSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentGTypeSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentGTypeSubTlv) ProtoMessage() {}

func (x *BgpSrteSegmentGTypeSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentGTypeSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentGTypeSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{95}
}

func (x *BgpSrteSegmentGTypeSubTlv) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *BgpSrteSegmentGTypeSubTlv) GetLocalInterfaceId() int32 {
	if x != nil && x.LocalInterfaceId != nil {
		return *x.LocalInterfaceId
	}
	return 0
}

func (x *BgpSrteSegmentGTypeSubTlv) GetLocalIpv6NodeAddress() string {
	if x != nil {
		return x.LocalIpv6NodeAddress
	}
	return ""
}

func (x *BgpSrteSegmentGTypeSubTlv) GetRemoteInterfaceId() int32 {
	if x != nil && x.RemoteInterfaceId != nil {
		return *x.RemoteInterfaceId
	}
	return 0
}

func (x *BgpSrteSegmentGTypeSubTlv) GetRemoteIpv6NodeAddress() string {
	if x != nil {
		return x.RemoteIpv6NodeAddress
	}
	return ""
}

func (x *BgpSrteSegmentGTypeSubTlv) GetSrMplsSid() *BgpSrteSrMplsSid {
	if x != nil {
		return x.SrMplsSid
	}
	return nil
}

// Type H: IPv6 Local and Remote addresses with optional SID for SR MPLS.
type BgpSrteSegmentHTypeSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined
	// in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
	Flags *string `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// Local IPv6 Address.
	// required = true
	LocalIpv6Address string `protobuf:"bytes,2,opt,name=local_ipv6_address,json=localIpv6Address,proto3" json:"local_ipv6_address,omitempty"`
	// Remote IPv6 Address.
	// required = true
	RemoteIpv6Address string `protobuf:"bytes,3,opt,name=remote_ipv6_address,json=remoteIpv6Address,proto3" json:"remote_ipv6_address,omitempty"`
	// Optional SR-MPLS SID.
	SrMplsSid *BgpSrteSrMplsSid `protobuf:"bytes,4,opt,name=sr_mpls_sid,json=srMplsSid,proto3,oneof" json:"sr_mpls_sid,omitempty"`
}

func (x *BgpSrteSegmentHTypeSubTlv) Reset() {
	*x = BgpSrteSegmentHTypeSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentHTypeSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentHTypeSubTlv) ProtoMessage() {}

func (x *BgpSrteSegmentHTypeSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentHTypeSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentHTypeSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{96}
}

func (x *BgpSrteSegmentHTypeSubTlv) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *BgpSrteSegmentHTypeSubTlv) GetLocalIpv6Address() string {
	if x != nil {
		return x.LocalIpv6Address
	}
	return ""
}

func (x *BgpSrteSegmentHTypeSubTlv) GetRemoteIpv6Address() string {
	if x != nil {
		return x.RemoteIpv6Address
	}
	return ""
}

func (x *BgpSrteSegmentHTypeSubTlv) GetSrMplsSid() *BgpSrteSrMplsSid {
	if x != nil {
		return x.SrMplsSid
	}
	return nil
}

// Type I: IPv6 Node Address with optional SRv6 SID.
type BgpSrteSegmentITypeSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined
	// in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
	Flags *string `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// IPv6 address representing a node.
	// required = true
	Ipv6NodeAddress string `protobuf:"bytes,2,opt,name=ipv6_node_address,json=ipv6NodeAddress,proto3" json:"ipv6_node_address,omitempty"`
	// Optional SRv6 SID.
	Srv6Sid *string `protobuf:"bytes,3,opt,name=srv6_sid,json=srv6Sid,proto3,oneof" json:"srv6_sid,omitempty"`
	// Optional SRv6 Endpoint Behavior and SID Structure.
	Srv6SidEndpointBehavior *BgpSrteSRv6SIDEndpointBehaviorAndStructure `protobuf:"bytes,4,opt,name=srv6_sid_endpoint_behavior,json=srv6SidEndpointBehavior,proto3,oneof" json:"srv6_sid_endpoint_behavior,omitempty"`
}

func (x *BgpSrteSegmentITypeSubTlv) Reset() {
	*x = BgpSrteSegmentITypeSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentITypeSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentITypeSubTlv) ProtoMessage() {}

func (x *BgpSrteSegmentITypeSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentITypeSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentITypeSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{97}
}

func (x *BgpSrteSegmentITypeSubTlv) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *BgpSrteSegmentITypeSubTlv) GetIpv6NodeAddress() string {
	if x != nil {
		return x.Ipv6NodeAddress
	}
	return ""
}

func (x *BgpSrteSegmentITypeSubTlv) GetSrv6Sid() string {
	if x != nil && x.Srv6Sid != nil {
		return *x.Srv6Sid
	}
	return ""
}

func (x *BgpSrteSegmentITypeSubTlv) GetSrv6SidEndpointBehavior() *BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	if x != nil {
		return x.Srv6SidEndpointBehavior
	}
	return nil
}

// Type J: IPv6 Address, Interface ID for local and remote pair for SRv6 with optional
// SID.
type BgpSrteSegmentJTypeSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined
	// in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
	Flags *string `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// SR Algorithm identifier when A-Flag in on.
	// default = 0
	SrAlgorithm *int32 `protobuf:"varint,2,opt,name=sr_algorithm,json=srAlgorithm,proto3,oneof" json:"sr_algorithm,omitempty"`
	// Local Interface ID: The Interface Index as defined in [RFC8664].
	// default = 0
	LocalInterfaceId *int32 `protobuf:"varint,3,opt,name=local_interface_id,json=localInterfaceId,proto3,oneof" json:"local_interface_id,omitempty"`
	// IPv6 address representing a node.
	// required = true
	LocalIpv6NodeAddress string `protobuf:"bytes,4,opt,name=local_ipv6_node_address,json=localIpv6NodeAddress,proto3" json:"local_ipv6_node_address,omitempty"`
	// Local Interface ID: The Interface Index as defined in [RFC8664].
	// default = 0
	RemoteInterfaceId *int32 `protobuf:"varint,5,opt,name=remote_interface_id,json=remoteInterfaceId,proto3,oneof" json:"remote_interface_id,omitempty"`
	// IPv6 address representing a node.
	// required = true
	RemoteIpv6NodeAddress string `protobuf:"bytes,6,opt,name=remote_ipv6_node_address,json=remoteIpv6NodeAddress,proto3" json:"remote_ipv6_node_address,omitempty"`
	// Optional SRv6 SID.
	Srv6Sid *string `protobuf:"bytes,7,opt,name=srv6_sid,json=srv6Sid,proto3,oneof" json:"srv6_sid,omitempty"`
	// Optional SRv6 Endpoint Behavior and SID Structure.
	Srv6SidEndpointBehavior *BgpSrteSRv6SIDEndpointBehaviorAndStructure `protobuf:"bytes,8,opt,name=srv6_sid_endpoint_behavior,json=srv6SidEndpointBehavior,proto3,oneof" json:"srv6_sid_endpoint_behavior,omitempty"`
}

func (x *BgpSrteSegmentJTypeSubTlv) Reset() {
	*x = BgpSrteSegmentJTypeSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentJTypeSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentJTypeSubTlv) ProtoMessage() {}

func (x *BgpSrteSegmentJTypeSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentJTypeSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentJTypeSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{98}
}

func (x *BgpSrteSegmentJTypeSubTlv) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *BgpSrteSegmentJTypeSubTlv) GetSrAlgorithm() int32 {
	if x != nil && x.SrAlgorithm != nil {
		return *x.SrAlgorithm
	}
	return 0
}

func (x *BgpSrteSegmentJTypeSubTlv) GetLocalInterfaceId() int32 {
	if x != nil && x.LocalInterfaceId != nil {
		return *x.LocalInterfaceId
	}
	return 0
}

func (x *BgpSrteSegmentJTypeSubTlv) GetLocalIpv6NodeAddress() string {
	if x != nil {
		return x.LocalIpv6NodeAddress
	}
	return ""
}

func (x *BgpSrteSegmentJTypeSubTlv) GetRemoteInterfaceId() int32 {
	if x != nil && x.RemoteInterfaceId != nil {
		return *x.RemoteInterfaceId
	}
	return 0
}

func (x *BgpSrteSegmentJTypeSubTlv) GetRemoteIpv6NodeAddress() string {
	if x != nil {
		return x.RemoteIpv6NodeAddress
	}
	return ""
}

func (x *BgpSrteSegmentJTypeSubTlv) GetSrv6Sid() string {
	if x != nil && x.Srv6Sid != nil {
		return *x.Srv6Sid
	}
	return ""
}

func (x *BgpSrteSegmentJTypeSubTlv) GetSrv6SidEndpointBehavior() *BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	if x != nil {
		return x.Srv6SidEndpointBehavior
	}
	return nil
}

// Type K: IPv6 Local and Remote addresses for SRv6 with optional SID.
type BgpSrteSegmentKTypeSubTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined
	// in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
	Flags *string `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// SR Algorithm identifier when A-Flag in on.
	// default = 0
	SrAlgorithm *int32 `protobuf:"varint,2,opt,name=sr_algorithm,json=srAlgorithm,proto3,oneof" json:"sr_algorithm,omitempty"`
	// IPv6 address representing a node.
	// required = true
	LocalIpv6Address string `protobuf:"bytes,3,opt,name=local_ipv6_address,json=localIpv6Address,proto3" json:"local_ipv6_address,omitempty"`
	// IPv6 address representing a node.
	// required = true
	RemoteIpv6Address string `protobuf:"bytes,4,opt,name=remote_ipv6_address,json=remoteIpv6Address,proto3" json:"remote_ipv6_address,omitempty"`
	// Optional SRv6 SID.
	Srv6Sid *string `protobuf:"bytes,5,opt,name=srv6_sid,json=srv6Sid,proto3,oneof" json:"srv6_sid,omitempty"`
	// Optional SRv6 Endpoint Behavior and SID Structure.
	Srv6SidEndpointBehavior *BgpSrteSRv6SIDEndpointBehaviorAndStructure `protobuf:"bytes,6,opt,name=srv6_sid_endpoint_behavior,json=srv6SidEndpointBehavior,proto3,oneof" json:"srv6_sid_endpoint_behavior,omitempty"`
}

func (x *BgpSrteSegmentKTypeSubTlv) Reset() {
	*x = BgpSrteSegmentKTypeSubTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegmentKTypeSubTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegmentKTypeSubTlv) ProtoMessage() {}

func (x *BgpSrteSegmentKTypeSubTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegmentKTypeSubTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteSegmentKTypeSubTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{99}
}

func (x *BgpSrteSegmentKTypeSubTlv) GetFlags() string {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return ""
}

func (x *BgpSrteSegmentKTypeSubTlv) GetSrAlgorithm() int32 {
	if x != nil && x.SrAlgorithm != nil {
		return *x.SrAlgorithm
	}
	return 0
}

func (x *BgpSrteSegmentKTypeSubTlv) GetLocalIpv6Address() string {
	if x != nil {
		return x.LocalIpv6Address
	}
	return ""
}

func (x *BgpSrteSegmentKTypeSubTlv) GetRemoteIpv6Address() string {
	if x != nil {
		return x.RemoteIpv6Address
	}
	return ""
}

func (x *BgpSrteSegmentKTypeSubTlv) GetSrv6Sid() string {
	if x != nil && x.Srv6Sid != nil {
		return *x.Srv6Sid
	}
	return ""
}

func (x *BgpSrteSegmentKTypeSubTlv) GetSrv6SidEndpointBehavior() *BgpSrteSRv6SIDEndpointBehaviorAndStructure {
	if x != nil {
		return x.Srv6SidEndpointBehavior
	}
	return nil
}

// Configuration for BGP Segment Routing Traffic Engineering policy.
//
type BgpSrteV6Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the policy in the context of (color and endpoint) tuple.  It is used by
	// the SR Policy originator to make unique multiple  occurrences of the same SR Policy.
	// default = 1
	Distinguisher *int64 `protobuf:"varint,1,opt,name=distinguisher,proto3,oneof" json:"distinguisher,omitempty"`
	// Identifies the policy. It is used to match the color of the  destination prefixes
	// to steer traffic into the SR Policy.
	// default = 100
	Color *int64 `protobuf:"varint,2,opt,name=color,proto3,oneof" json:"color,omitempty"`
	// Specifies a single node or a set of nodes (e.g., an anycast address). It is selected
	// on the basis of the SR Policy type (AFI).
	// required = true
	Ipv6Endpoint string `protobuf:"bytes,3,opt,name=ipv6_endpoint,json=ipv6Endpoint,proto3" json:"ipv6_endpoint,omitempty"`
	// Mode for choosing the NextHop in MP REACH NLRI. Available modes are : Local IP: Automatically
	// fills the Nexthop with the Local IP of the BGP peer. For IPv6 BGP peer the Nexthop
	// Encoding capability should be enabled. Manual: Override the Nexthop with any arbitrary
	// IPv4/IPv6 address.
	// default = NextHopMode.Enum.local_ip
	NextHopMode *BgpSrteV6Policy_NextHopMode_Enum `protobuf:"varint,4,opt,name=next_hop_mode,json=nextHopMode,proto3,enum=otg.BgpSrteV6Policy_NextHopMode_Enum,oneof" json:"next_hop_mode,omitempty"`
	// Type of next hop IP address to be used when 'next_hop_mode' is set to 'manual'.
	// default = NextHopAddressType.Enum.ipv6
	NextHopAddressType *BgpSrteV6Policy_NextHopAddressType_Enum `protobuf:"varint,5,opt,name=next_hop_address_type,json=nextHopAddressType,proto3,enum=otg.BgpSrteV6Policy_NextHopAddressType_Enum,oneof" json:"next_hop_address_type,omitempty"`
	// The IPv4 address of the Nexthop if the 'next_hop_mode' is 'manual' and the Nexthop
	// type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6, Nexthop Encoding
	// capability extended_next_hop_encoding should be enabled.
	// default = 0.0.0.0
	NextHopIpv4Address *string `protobuf:"bytes,6,opt,name=next_hop_ipv4_address,json=nextHopIpv4Address,proto3,oneof" json:"next_hop_ipv4_address,omitempty"`
	// The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type' is 'manual'
	// and the Nexthop type 'next_hop_address_type' is IPv6.
	// default = ::0
	NextHopIpv6Address *string `protobuf:"bytes,7,opt,name=next_hop_ipv6_address,json=nextHopIpv6Address,proto3,oneof" json:"next_hop_ipv6_address,omitempty"`
	// Description missing in models
	Advanced *BgpRouteAdvanced `protobuf:"bytes,8,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Description missing in models
	AddPath *BgpAddPath `protobuf:"bytes,9,opt,name=add_path,json=addPath,proto3,oneof" json:"add_path,omitempty"`
	// Description missing in models
	AsPath *BgpAsPath `protobuf:"bytes,10,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
	// Optional community settings.
	Communities []*BgpCommunity `protobuf:"bytes,11,rep,name=communities,proto3" json:"communities,omitempty"`
	// Optional Extended Community settings. The Extended Communities Attribute is a transitive
	// optional BGP attribute, with the Type Code 16. Community and Extended Communities
	// attributes are utilized to trigger routing decisions, such as acceptance, rejection,
	// preference, or redistribution. An extended community is an 8-Bytes value. It is
	// divided into two main parts. The first 2 Bytes of the community encode a type and
	// sub-type fields and the last 6 Bytes carry a unique set of data in a format defined
	// by the type and sub-type field. Extended communities provide a larger  range for
	// grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet,
	// the valid sub types are route target and origin. The valid value for  administrator_as_2octet
	// and administrator_as_4octet type is either two byte AS followed by four byte local
	// administrator id or four byte AS followed by two  byte local administrator id.  When
	// type is administrator_ipv4_address the valid sub types are route target and origin.
	// The valid value for  administrator_ipv4_address is a four byte IPv4 address followed
	// by a two byte local administrator id.  When type is opaque, valid sub types are color
	// and encapsulation. When sub type is color, first two bytes of the value field contain
	// flags and last four bytes  contains the value of the color. When sub type is encapsulation
	// the first four bytes of value field are reserved and last two bytes carries the tunnel
	// type from  IANA's ETHER TYPES registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol
	// type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth
	// the valid sub type is extended_bandwidth. The first two bytes of the value field
	// contains the AS number and the last four bytes contains the bandwidth in IEEE floating
	// point format.  When type is evpn the valid subtype is mac_address. In the value field
	// the low-order bit of the first byte(Flags) is defined as the Sticky/static flag and
	// may be set to 1, indicating the MAC address is static and cannot move. The second
	// byte is reserved and the  last four bytes contain the sequence number which is used
	// to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates
	// occur for the same MAC address.
	Extcommunities []*BgpExtCommunity `protobuf:"bytes,12,rep,name=extcommunities,proto3" json:"extcommunities,omitempty"`
	// List of optional tunnel TLV settings.
	TunnelTlvs []*BgpSrteV6TunnelTlv `protobuf:"bytes,13,rep,name=tunnel_tlvs,json=tunnelTlvs,proto3" json:"tunnel_tlvs,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	// If enabled means that this part of the configuration including any active 'children'
	// nodes will be advertised to peer.  If disabled, this means that though config is
	// present, it is not taking any part of the test but can be activated at run-time to
	// advertise just this part of the configuration to the peer.
	// default = True
	Active *bool `protobuf:"varint,15,opt,name=active,proto3,oneof" json:"active,omitempty"`
}

func (x *BgpSrteV6Policy) Reset() {
	*x = BgpSrteV6Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteV6Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteV6Policy) ProtoMessage() {}

func (x *BgpSrteV6Policy) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteV6Policy.ProtoReflect.Descriptor instead.
func (*BgpSrteV6Policy) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{100}
}

func (x *BgpSrteV6Policy) GetDistinguisher() int64 {
	if x != nil && x.Distinguisher != nil {
		return *x.Distinguisher
	}
	return 0
}

func (x *BgpSrteV6Policy) GetColor() int64 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

func (x *BgpSrteV6Policy) GetIpv6Endpoint() string {
	if x != nil {
		return x.Ipv6Endpoint
	}
	return ""
}

func (x *BgpSrteV6Policy) GetNextHopMode() BgpSrteV6Policy_NextHopMode_Enum {
	if x != nil && x.NextHopMode != nil {
		return *x.NextHopMode
	}
	return BgpSrteV6Policy_NextHopMode_unspecified
}

func (x *BgpSrteV6Policy) GetNextHopAddressType() BgpSrteV6Policy_NextHopAddressType_Enum {
	if x != nil && x.NextHopAddressType != nil {
		return *x.NextHopAddressType
	}
	return BgpSrteV6Policy_NextHopAddressType_unspecified
}

func (x *BgpSrteV6Policy) GetNextHopIpv4Address() string {
	if x != nil && x.NextHopIpv4Address != nil {
		return *x.NextHopIpv4Address
	}
	return ""
}

func (x *BgpSrteV6Policy) GetNextHopIpv6Address() string {
	if x != nil && x.NextHopIpv6Address != nil {
		return *x.NextHopIpv6Address
	}
	return ""
}

func (x *BgpSrteV6Policy) GetAdvanced() *BgpRouteAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *BgpSrteV6Policy) GetAddPath() *BgpAddPath {
	if x != nil {
		return x.AddPath
	}
	return nil
}

func (x *BgpSrteV6Policy) GetAsPath() *BgpAsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

func (x *BgpSrteV6Policy) GetCommunities() []*BgpCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpSrteV6Policy) GetExtcommunities() []*BgpExtCommunity {
	if x != nil {
		return x.Extcommunities
	}
	return nil
}

func (x *BgpSrteV6Policy) GetTunnelTlvs() []*BgpSrteV6TunnelTlv {
	if x != nil {
		return x.TunnelTlvs
	}
	return nil
}

func (x *BgpSrteV6Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpSrteV6Policy) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

// Configuration for BGP SRTE Tunnel TLV.
type BgpSrteV6TunnelTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	RemoteEndpointSubTlv *BgpSrteRemoteEndpointSubTlv `protobuf:"bytes,1,opt,name=remote_endpoint_sub_tlv,json=remoteEndpointSubTlv,proto3,oneof" json:"remote_endpoint_sub_tlv,omitempty"`
	// Description missing in models
	ColorSubTlv *BgpSrteColorSubTlv `protobuf:"bytes,2,opt,name=color_sub_tlv,json=colorSubTlv,proto3,oneof" json:"color_sub_tlv,omitempty"`
	// Description missing in models
	BindingSubTlv *BgpSrteBindingSubTlv `protobuf:"bytes,3,opt,name=binding_sub_tlv,json=bindingSubTlv,proto3,oneof" json:"binding_sub_tlv,omitempty"`
	// Description missing in models
	PreferenceSubTlv *BgpSrtePreferenceSubTlv `protobuf:"bytes,4,opt,name=preference_sub_tlv,json=preferenceSubTlv,proto3,oneof" json:"preference_sub_tlv,omitempty"`
	// Description missing in models
	PolicyPrioritySubTlv *BgpSrtePolicyPrioritySubTlv `protobuf:"bytes,5,opt,name=policy_priority_sub_tlv,json=policyPrioritySubTlv,proto3,oneof" json:"policy_priority_sub_tlv,omitempty"`
	// Description missing in models
	PolicyNameSubTlv *BgpSrtePolicyNameSubTlv `protobuf:"bytes,6,opt,name=policy_name_sub_tlv,json=policyNameSubTlv,proto3,oneof" json:"policy_name_sub_tlv,omitempty"`
	// Description missing in models
	ExplicitNullLabelPolicySubTlv *BgpSrteExplicitNullLabelPolicySubTlv `protobuf:"bytes,7,opt,name=explicit_null_label_policy_sub_tlv,json=explicitNullLabelPolicySubTlv,proto3,oneof" json:"explicit_null_label_policy_sub_tlv,omitempty"`
	// Description missing in models
	SegmentLists []*BgpSrteSegmentList `protobuf:"bytes,8,rep,name=segment_lists,json=segmentLists,proto3" json:"segment_lists,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// If enabled means that this part of the configuration including any active 'children'
	// nodes will be advertised to peer.  If disabled, this means that though config is
	// present, it is not taking any part of the test but can be activated at run-time to
	// advertise just this part of the configuration to the peer.
	// default = True
	Active *bool `protobuf:"varint,10,opt,name=active,proto3,oneof" json:"active,omitempty"`
}

func (x *BgpSrteV6TunnelTlv) Reset() {
	*x = BgpSrteV6TunnelTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteV6TunnelTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteV6TunnelTlv) ProtoMessage() {}

func (x *BgpSrteV6TunnelTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteV6TunnelTlv.ProtoReflect.Descriptor instead.
func (*BgpSrteV6TunnelTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{101}
}

func (x *BgpSrteV6TunnelTlv) GetRemoteEndpointSubTlv() *BgpSrteRemoteEndpointSubTlv {
	if x != nil {
		return x.RemoteEndpointSubTlv
	}
	return nil
}

func (x *BgpSrteV6TunnelTlv) GetColorSubTlv() *BgpSrteColorSubTlv {
	if x != nil {
		return x.ColorSubTlv
	}
	return nil
}

func (x *BgpSrteV6TunnelTlv) GetBindingSubTlv() *BgpSrteBindingSubTlv {
	if x != nil {
		return x.BindingSubTlv
	}
	return nil
}

func (x *BgpSrteV6TunnelTlv) GetPreferenceSubTlv() *BgpSrtePreferenceSubTlv {
	if x != nil {
		return x.PreferenceSubTlv
	}
	return nil
}

func (x *BgpSrteV6TunnelTlv) GetPolicyPrioritySubTlv() *BgpSrtePolicyPrioritySubTlv {
	if x != nil {
		return x.PolicyPrioritySubTlv
	}
	return nil
}

func (x *BgpSrteV6TunnelTlv) GetPolicyNameSubTlv() *BgpSrtePolicyNameSubTlv {
	if x != nil {
		return x.PolicyNameSubTlv
	}
	return nil
}

func (x *BgpSrteV6TunnelTlv) GetExplicitNullLabelPolicySubTlv() *BgpSrteExplicitNullLabelPolicySubTlv {
	if x != nil {
		return x.ExplicitNullLabelPolicySubTlv
	}
	return nil
}

func (x *BgpSrteV6TunnelTlv) GetSegmentLists() []*BgpSrteSegmentList {
	if x != nil {
		return x.SegmentLists
	}
	return nil
}

func (x *BgpSrteV6TunnelTlv) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpSrteV6TunnelTlv) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

// Configuration for BGPv6 peer settings and routes.
type BgpV6Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv6 address of the BGP peer for the session
	// required = true
	PeerAddress string `protobuf:"bytes,1,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	// Description missing in models
	SegmentRouting *BgpV6SegmentRouting `protobuf:"bytes,2,opt,name=segment_routing,json=segmentRouting,proto3,oneof" json:"segment_routing,omitempty"`
	// This contains the list of Ethernet Virtual Private Network (EVPN) Ethernet Segments
	// (ES) Per BGP Peer for IPv6 Address Family Identifier (AFI).
	//
	// Each Ethernet Segment contains a list of EVPN Instances (EVIs) .
	// Each EVI contains a list of Broadcast Domains.
	// Each Broadcast Domain contains a list of MAC/IP Ranges.
	//
	// <Ethernet Segment, EVI, Broadcast Domain> is responsible for advertising Ethernet
	// Auto-discovery Route Per EVI (Type 1).
	//
	// <Ethernet Segment, EVI> is responsible for advertising Ethernet Auto-discovery Route
	// Per Ethernet Segment (Type 1).
	//
	// <Ethernet Segment, EVI, Broadcast Domain, MAC/IP> is responsible for advertising
	// MAC/IP Advertisement Route (Type 2).
	//
	// <Ethernet Segment, EVI, Broadcast Domain> is responsible for advertising Inclusive
	// Multicast Ethernet Tag Route (Type 3).
	//
	// Ethernet Segment is responsible for advertising Ethernet Segment Route (Type 4).
	EvpnEthernetSegments []*BgpV6EthernetSegment `protobuf:"bytes,3,rep,name=evpn_ethernet_segments,json=evpnEthernetSegments,proto3" json:"evpn_ethernet_segments,omitempty"`
	// The type of BGP autonomous system. External BGP is used for BGP links between two
	// or more autonomous systems (ebgp). Internal BGP is used within a single autonomous
	// system (ibgp). BGP property defaults are aligned with this object defined as an internal
	// BGP peer. If the as_type is specified as 'ebgp' then other properties will need to
	// be specified as per an external BGP peer. Specifically, for 'ebgp',  'as_set_mode'
	// attribute in 'as_path' field  in any Route Range should be changed from default value
	// 'do_not_include_local_as' to any other value.
	// required = true
	AsType BgpV6Peer_AsType_Enum `protobuf:"varint,4,opt,name=as_type,json=asType,proto3,enum=otg.BgpV6Peer_AsType_Enum" json:"as_type,omitempty"`
	// Autonomous System Number (AS number or ASN)
	// required = true
	AsNumber int32 `protobuf:"varint,5,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	// The width in bytes of the as_number values. Any as_number values that exceeds the
	// width MUST result in an error.
	// default = AsNumberWidth.Enum.four
	AsNumberWidth *BgpV6Peer_AsNumberWidth_Enum `protobuf:"varint,6,opt,name=as_number_width,json=asNumberWidth,proto3,enum=otg.BgpV6Peer_AsNumberWidth_Enum,oneof" json:"as_number_width,omitempty"`
	// Description missing in models
	Advanced *BgpAdvanced `protobuf:"bytes,7,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Description missing in models
	Capability *BgpCapability `protobuf:"bytes,8,opt,name=capability,proto3,oneof" json:"capability,omitempty"`
	// Description missing in models
	LearnedInformationFilter *BgpLearnedInformationFilter `protobuf:"bytes,9,opt,name=learned_information_filter,json=learnedInformationFilter,proto3,oneof" json:"learned_information_filter,omitempty"`
	// Emulated BGPv4 route ranges.
	V4Routes []*BgpV4RouteRange `protobuf:"bytes,10,rep,name=v4_routes,json=v4Routes,proto3" json:"v4_routes,omitempty"`
	// Emulated BGPv6 route ranges.
	V6Routes []*BgpV6RouteRange `protobuf:"bytes,11,rep,name=v6_routes,json=v6Routes,proto3" json:"v6_routes,omitempty"`
	// Segment Routing Traffic Engineering (SR TE) Policies for IPv4 Address Family Identifier
	// (AFI).
	V4SrtePolicies []*BgpSrteV4Policy `protobuf:"bytes,12,rep,name=v4_srte_policies,json=v4SrtePolicies,proto3" json:"v4_srte_policies,omitempty"`
	// Segment Routing Traffic Engineering (SR TE) Policies for IPv6 Address Family Identifier
	// (AFI).
	V6SrtePolicies []*BgpSrteV6Policy `protobuf:"bytes,13,rep,name=v6_srte_policies,json=v6SrtePolicies,proto3" json:"v6_srte_policies,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BgpV6Peer) Reset() {
	*x = BgpV6Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6Peer) ProtoMessage() {}

func (x *BgpV6Peer) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6Peer.ProtoReflect.Descriptor instead.
func (*BgpV6Peer) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{102}
}

func (x *BgpV6Peer) GetPeerAddress() string {
	if x != nil {
		return x.PeerAddress
	}
	return ""
}

func (x *BgpV6Peer) GetSegmentRouting() *BgpV6SegmentRouting {
	if x != nil {
		return x.SegmentRouting
	}
	return nil
}

func (x *BgpV6Peer) GetEvpnEthernetSegments() []*BgpV6EthernetSegment {
	if x != nil {
		return x.EvpnEthernetSegments
	}
	return nil
}

func (x *BgpV6Peer) GetAsType() BgpV6Peer_AsType_Enum {
	if x != nil {
		return x.AsType
	}
	return BgpV6Peer_AsType_unspecified
}

func (x *BgpV6Peer) GetAsNumber() int32 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *BgpV6Peer) GetAsNumberWidth() BgpV6Peer_AsNumberWidth_Enum {
	if x != nil && x.AsNumberWidth != nil {
		return *x.AsNumberWidth
	}
	return BgpV6Peer_AsNumberWidth_unspecified
}

func (x *BgpV6Peer) GetAdvanced() *BgpAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *BgpV6Peer) GetCapability() *BgpCapability {
	if x != nil {
		return x.Capability
	}
	return nil
}

func (x *BgpV6Peer) GetLearnedInformationFilter() *BgpLearnedInformationFilter {
	if x != nil {
		return x.LearnedInformationFilter
	}
	return nil
}

func (x *BgpV6Peer) GetV4Routes() []*BgpV4RouteRange {
	if x != nil {
		return x.V4Routes
	}
	return nil
}

func (x *BgpV6Peer) GetV6Routes() []*BgpV6RouteRange {
	if x != nil {
		return x.V6Routes
	}
	return nil
}

func (x *BgpV6Peer) GetV4SrtePolicies() []*BgpSrteV4Policy {
	if x != nil {
		return x.V4SrtePolicies
	}
	return nil
}

func (x *BgpV6Peer) GetV6SrtePolicies() []*BgpSrteV6Policy {
	if x != nil {
		return x.V6SrtePolicies
	}
	return nil
}

func (x *BgpV6Peer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Configuration for emulated BGPv6 peers and routes on a single IPv6 interface.
type BgpV6Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique name of IPv6 or Loopback IPv6 interface used as the source IP for this
	// list of BGP peers.
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv6/properties/name
	// - /components/schemas/Device.Ipv6Loopback/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv6/properties/name
	// - /components/schemas/Device.Ipv6Loopback/properties/name
	//
	// required = true
	Ipv6Name string `protobuf:"bytes,1,opt,name=ipv6_name,json=ipv6Name,proto3" json:"ipv6_name,omitempty"`
	// This contains the list of BGPv6 peers configured on this interface.
	Peers []*BgpV6Peer `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *BgpV6Interface) Reset() {
	*x = BgpV6Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6Interface) ProtoMessage() {}

func (x *BgpV6Interface) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6Interface.ProtoReflect.Descriptor instead.
func (*BgpV6Interface) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{103}
}

func (x *BgpV6Interface) GetIpv6Name() string {
	if x != nil {
		return x.Ipv6Name
	}
	return ""
}

func (x *BgpV6Interface) GetPeers() []*BgpV6Peer {
	if x != nil {
		return x.Peers
	}
	return nil
}

// Status: under-review
// Status: under-review
// Configuration for BGPv6 segment routing settings.
type BgpV6SegmentRouting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TBD
	// default = False
	IngressSupportsVpn *bool `protobuf:"varint,1,opt,name=ingress_supports_vpn,json=ingressSupportsVpn,proto3,oneof" json:"ingress_supports_vpn,omitempty"`
	// TBD
	// default = False
	ReducedEncapsulation *bool `protobuf:"varint,2,opt,name=reduced_encapsulation,json=reducedEncapsulation,proto3,oneof" json:"reduced_encapsulation,omitempty"`
	// TBD
	// default = False
	CopyTimeToLive *bool `protobuf:"varint,3,opt,name=copy_time_to_live,json=copyTimeToLive,proto3,oneof" json:"copy_time_to_live,omitempty"`
	// TBD
	// default = 0
	TimeToLive *int32 `protobuf:"varint,4,opt,name=time_to_live,json=timeToLive,proto3,oneof" json:"time_to_live,omitempty"`
	// TBD
	// default = 0
	MaxSidsPerSrh *int32 `protobuf:"varint,5,opt,name=max_sids_per_srh,json=maxSidsPerSrh,proto3,oneof" json:"max_sids_per_srh,omitempty"`
	// TBD
	// default = False
	AutoGenerateSegmentLeftValue *bool `protobuf:"varint,6,opt,name=auto_generate_segment_left_value,json=autoGenerateSegmentLeftValue,proto3,oneof" json:"auto_generate_segment_left_value,omitempty"`
	// TBD
	// default = 0
	SegmentLeftValue *int32 `protobuf:"varint,7,opt,name=segment_left_value,json=segmentLeftValue,proto3,oneof" json:"segment_left_value,omitempty"`
	// TBD
	// default = False
	AdvertiseSrTePolicy *bool `protobuf:"varint,8,opt,name=advertise_sr_te_policy,json=advertiseSrTePolicy,proto3,oneof" json:"advertise_sr_te_policy,omitempty"`
}

func (x *BgpV6SegmentRouting) Reset() {
	*x = BgpV6SegmentRouting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6SegmentRouting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6SegmentRouting) ProtoMessage() {}

func (x *BgpV6SegmentRouting) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6SegmentRouting.ProtoReflect.Descriptor instead.
func (*BgpV6SegmentRouting) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{104}
}

func (x *BgpV6SegmentRouting) GetIngressSupportsVpn() bool {
	if x != nil && x.IngressSupportsVpn != nil {
		return *x.IngressSupportsVpn
	}
	return false
}

func (x *BgpV6SegmentRouting) GetReducedEncapsulation() bool {
	if x != nil && x.ReducedEncapsulation != nil {
		return *x.ReducedEncapsulation
	}
	return false
}

func (x *BgpV6SegmentRouting) GetCopyTimeToLive() bool {
	if x != nil && x.CopyTimeToLive != nil {
		return *x.CopyTimeToLive
	}
	return false
}

func (x *BgpV6SegmentRouting) GetTimeToLive() int32 {
	if x != nil && x.TimeToLive != nil {
		return *x.TimeToLive
	}
	return 0
}

func (x *BgpV6SegmentRouting) GetMaxSidsPerSrh() int32 {
	if x != nil && x.MaxSidsPerSrh != nil {
		return *x.MaxSidsPerSrh
	}
	return 0
}

func (x *BgpV6SegmentRouting) GetAutoGenerateSegmentLeftValue() bool {
	if x != nil && x.AutoGenerateSegmentLeftValue != nil {
		return *x.AutoGenerateSegmentLeftValue
	}
	return false
}

func (x *BgpV6SegmentRouting) GetSegmentLeftValue() int32 {
	if x != nil && x.SegmentLeftValue != nil {
		return *x.SegmentLeftValue
	}
	return 0
}

func (x *BgpV6SegmentRouting) GetAdvertiseSrTePolicy() bool {
	if x != nil && x.AdvertiseSrTePolicy != nil {
		return *x.AdvertiseSrTePolicy
	}
	return false
}

// Configuration for BGP Ethernet Segment ranges. Advertises following routes -
//
// Type 4 - Ethernet Segment Route
type BgpV6EthernetSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Designated Forwarder (DF) election configuration.
	DfElection *BgpEthernetSegmentDfElection `protobuf:"bytes,1,opt,name=df_election,json=dfElection,proto3,oneof" json:"df_election,omitempty"`
	// This contains the list of EVIs.
	Evis []*BgpV6EvpnEvis `protobuf:"bytes,2,rep,name=evis,proto3" json:"evis,omitempty"`
	// 10-octet Ethernet Segment Identifier (ESI) Example - For multi-home scenario nonZero
	// ESI is '10000000000000000000' .
	// default = 00000000000000000000
	Esi *string `protobuf:"bytes,3,opt,name=esi,proto3,oneof" json:"esi,omitempty"`
	// Single Active or All Active mode Redundancy mode selection for Multi-home.
	// default = ActiveMode.Enum.all_active
	ActiveMode *BgpV6EthernetSegment_ActiveMode_Enum `protobuf:"varint,4,opt,name=active_mode,json=activeMode,proto3,enum=otg.BgpV6EthernetSegment_ActiveMode_Enum,oneof" json:"active_mode,omitempty"`
	// The label value to be advertised as ESI Label in ESI Label Extended Community. This
	// is included in Ethernet Auto-discovery per ES Routes advertised by a router.
	// default = 0
	EsiLabel *int32 `protobuf:"varint,5,opt,name=esi_label,json=esiLabel,proto3,oneof" json:"esi_label,omitempty"`
	// Description missing in models
	Advanced *BgpRouteAdvanced `protobuf:"bytes,6,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Optional community settings.
	Communities []*BgpCommunity `protobuf:"bytes,7,rep,name=communities,proto3" json:"communities,omitempty"`
	// Optional Extended Community settings. The Extended Communities Attribute is a transitive
	// optional BGP attribute, with the Type Code 16. Community and Extended Communities
	// attributes are utilized to trigger routing decisions, such as acceptance, rejection,
	// preference, or redistribution. An extended community is an 8-Bytes value. It is
	// divided into two main parts. The first 2 Bytes of the community encode a type and
	// sub-type fields and the last 6 Bytes carry a unique set of data in a format defined
	// by the type and sub-type field. Extended communities provide a larger  range for
	// grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet,
	// the valid sub types are route target and origin. The valid value for  administrator_as_2octet
	// and administrator_as_4octet type is either two byte AS followed by four byte local
	// administrator id or four byte AS followed by two  byte local administrator id.  When
	// type is administrator_ipv4_address the valid sub types are route target and origin.
	// The valid value for  administrator_ipv4_address is a four byte IPv4 address followed
	// by a two byte local administrator id.  When type is opaque, valid sub types are color
	// and encapsulation. When sub type is color, first two bytes of the value field contain
	// flags and last four bytes  contains the value of the color. When sub type is encapsulation
	// the first four bytes of value field are reserved and last two bytes carries the tunnel
	// type from  IANA's ETHER TYPES registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol
	// type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth
	// the valid sub type is extended_bandwidth. The first two bytes of the value field
	// contains the AS number and the last four bytes contains the bandwidth in IEEE floating
	// point format.  When type is evpn the valid subtype is mac_address. In the value field
	// the low-order bit of the first byte(Flags) is defined as the Sticky/static flag and
	// may be set to 1, indicating the MAC address is static and cannot move. The second
	// byte is reserved and the  last four bytes contain the sequence number which is used
	// to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates
	// occur for the same MAC address.
	ExtCommunities []*BgpExtCommunity `protobuf:"bytes,8,rep,name=ext_communities,json=extCommunities,proto3" json:"ext_communities,omitempty"`
	// Optional AS PATH settings.
	AsPath *BgpAsPath `protobuf:"bytes,9,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
}

func (x *BgpV6EthernetSegment) Reset() {
	*x = BgpV6EthernetSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6EthernetSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6EthernetSegment) ProtoMessage() {}

func (x *BgpV6EthernetSegment) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6EthernetSegment.ProtoReflect.Descriptor instead.
func (*BgpV6EthernetSegment) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{105}
}

func (x *BgpV6EthernetSegment) GetDfElection() *BgpEthernetSegmentDfElection {
	if x != nil {
		return x.DfElection
	}
	return nil
}

func (x *BgpV6EthernetSegment) GetEvis() []*BgpV6EvpnEvis {
	if x != nil {
		return x.Evis
	}
	return nil
}

func (x *BgpV6EthernetSegment) GetEsi() string {
	if x != nil && x.Esi != nil {
		return *x.Esi
	}
	return ""
}

func (x *BgpV6EthernetSegment) GetActiveMode() BgpV6EthernetSegment_ActiveMode_Enum {
	if x != nil && x.ActiveMode != nil {
		return *x.ActiveMode
	}
	return BgpV6EthernetSegment_ActiveMode_unspecified
}

func (x *BgpV6EthernetSegment) GetEsiLabel() int32 {
	if x != nil && x.EsiLabel != nil {
		return *x.EsiLabel
	}
	return 0
}

func (x *BgpV6EthernetSegment) GetAdvanced() *BgpRouteAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *BgpV6EthernetSegment) GetCommunities() []*BgpCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpV6EthernetSegment) GetExtCommunities() []*BgpExtCommunity {
	if x != nil {
		return x.ExtCommunities
	}
	return nil
}

func (x *BgpV6EthernetSegment) GetAsPath() *BgpAsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

// This contains a list of different flavors of EVPN.
// For example EVPN over VXLAN or EVPN over MPLS etc to be configured per Ethernet segment.
//
// Need to instantiate correct type of EVPN instance as per requirement.
type BgpV6EvpnEvis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.evi_vxlan
	Choice *BgpV6EvpnEvis_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.BgpV6EvpnEvis_Choice_Enum,oneof" json:"choice,omitempty"`
	// EVPN VXLAN instance to be configured per Ethernet Segment.
	EviVxlan *BgpV6EviVxlan `protobuf:"bytes,2,opt,name=evi_vxlan,json=eviVxlan,proto3,oneof" json:"evi_vxlan,omitempty"`
}

func (x *BgpV6EvpnEvis) Reset() {
	*x = BgpV6EvpnEvis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6EvpnEvis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6EvpnEvis) ProtoMessage() {}

func (x *BgpV6EvpnEvis) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6EvpnEvis.ProtoReflect.Descriptor instead.
func (*BgpV6EvpnEvis) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{106}
}

func (x *BgpV6EvpnEvis) GetChoice() BgpV6EvpnEvis_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return BgpV6EvpnEvis_Choice_unspecified
}

func (x *BgpV6EvpnEvis) GetEviVxlan() *BgpV6EviVxlan {
	if x != nil {
		return x.EviVxlan
	}
	return nil
}

// Configuration for BGP EVPN EVI. Advertises following routes -
//
// Type 3 - Inclusive Multicast Ethernet Tag Route
//
// Type 1 -  Ethernet Auto-discovery Route (Per EVI)
//
// Type 1 -  Ethernet Auto-discovery Route (Per ES)
type BgpV6EviVxlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This contains the list of Broadcast Domains to be configured per EVI.
	BroadcastDomains []*BgpV6EviVxlanBroadcastDomain `protobuf:"bytes,1,rep,name=broadcast_domains,json=broadcastDomains,proto3" json:"broadcast_domains,omitempty"`
	// This model only supports Ingress Replication
	// default = ReplicationType.Enum.ingress_replication
	ReplicationType *BgpV6EviVxlan_ReplicationType_Enum `protobuf:"varint,2,opt,name=replication_type,json=replicationType,proto3,enum=otg.BgpV6EviVxlan_ReplicationType_Enum,oneof" json:"replication_type,omitempty"`
	// Downstream assigned VNI to be carried as Part of P-Multicast Service Interface Tunnel
	// attribute (PMSI Tunnel Attribute) in Type 3 Inclusive Multicast Ethernet Tag Route.
	// default = 16
	PmsiLabel *int32 `protobuf:"varint,3,opt,name=pmsi_label,json=pmsiLabel,proto3,oneof" json:"pmsi_label,omitempty"`
	// The Auto-discovery Route label (AD label) value, which gets advertised in the Ethernet
	// Auto-discovery Route per <EVI, ESI>
	// default = 0
	AdLabel *int32 `protobuf:"varint,4,opt,name=ad_label,json=adLabel,proto3,oneof" json:"ad_label,omitempty"`
	// Colon separated Extended Community value of 6 Bytes - AS number: Value identifying
	// an EVI.            Example - for the as_2octet 60005:100.
	RouteDistinguisher *BgpRouteDistinguisher `protobuf:"bytes,5,opt,name=route_distinguisher,json=routeDistinguisher,proto3,oneof" json:"route_distinguisher,omitempty"`
	// List of Layer 2 Virtual Network Identifier (L2VNI) export targets associated with
	// this EVI.
	RouteTargetExport []*BgpRouteTarget `protobuf:"bytes,6,rep,name=route_target_export,json=routeTargetExport,proto3" json:"route_target_export,omitempty"`
	// List of L2VNI import targets associated with this EVI.
	RouteTargetImport []*BgpRouteTarget `protobuf:"bytes,7,rep,name=route_target_import,json=routeTargetImport,proto3" json:"route_target_import,omitempty"`
	// List of Layer 3 Virtual Network Identifier (L3VNI) Export Route Targets.
	L3RouteTargetExport []*BgpRouteTarget `protobuf:"bytes,8,rep,name=l3_route_target_export,json=l3RouteTargetExport,proto3" json:"l3_route_target_export,omitempty"`
	// List of L3VNI Import Route Targets.
	L3RouteTargetImport []*BgpRouteTarget `protobuf:"bytes,9,rep,name=l3_route_target_import,json=l3RouteTargetImport,proto3" json:"l3_route_target_import,omitempty"`
	// Description missing in models
	Advanced *BgpRouteAdvanced `protobuf:"bytes,10,opt,name=advanced,proto3,oneof" json:"advanced,omitempty"`
	// Optional community settings.
	Communities []*BgpCommunity `protobuf:"bytes,11,rep,name=communities,proto3" json:"communities,omitempty"`
	// Optional Extended Community settings. The Extended Communities Attribute is a transitive
	// optional BGP attribute, with the Type Code 16. Community and Extended Communities
	// attributes are utilized to trigger routing decisions, such as acceptance, rejection,
	// preference, or redistribution. An extended community is an 8-Bytes value. It is
	// divided into two main parts. The first 2 Bytes of the community encode a type and
	// sub-type fields and the last 6 Bytes carry a unique set of data in a format defined
	// by the type and sub-type field. Extended communities provide a larger  range for
	// grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet,
	// the valid sub types are route target and origin. The valid value for  administrator_as_2octet
	// and administrator_as_4octet type is either two byte AS followed by four byte local
	// administrator id or four byte AS followed by two  byte local administrator id.  When
	// type is administrator_ipv4_address the valid sub types are route target and origin.
	// The valid value for  administrator_ipv4_address is a four byte IPv4 address followed
	// by a two byte local administrator id.  When type is opaque, valid sub types are color
	// and encapsulation. When sub type is color, first two bytes of the value field contain
	// flags and last four bytes  contains the value of the color. When sub type is encapsulation
	// the first four bytes of value field are reserved and last two bytes carries the tunnel
	// type from  IANA's ETHER TYPES registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol
	// type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth
	// the valid sub type is extended_bandwidth. The first two bytes of the value field
	// contains the AS number and the last four bytes contains the bandwidth in IEEE floating
	// point format.  When type is evpn the valid subtype is mac_address. In the value field
	// the low-order bit of the first byte(Flags) is defined as the Sticky/static flag and
	// may be set to 1, indicating the MAC address is static and cannot move. The second
	// byte is reserved and the  last four bytes contain the sequence number which is used
	// to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates
	// occur for the same MAC address.
	ExtCommunities []*BgpExtCommunity `protobuf:"bytes,12,rep,name=ext_communities,json=extCommunities,proto3" json:"ext_communities,omitempty"`
	// Optional AS PATH settings.
	AsPath *BgpAsPath `protobuf:"bytes,13,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
}

func (x *BgpV6EviVxlan) Reset() {
	*x = BgpV6EviVxlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6EviVxlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6EviVxlan) ProtoMessage() {}

func (x *BgpV6EviVxlan) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6EviVxlan.ProtoReflect.Descriptor instead.
func (*BgpV6EviVxlan) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{107}
}

func (x *BgpV6EviVxlan) GetBroadcastDomains() []*BgpV6EviVxlanBroadcastDomain {
	if x != nil {
		return x.BroadcastDomains
	}
	return nil
}

func (x *BgpV6EviVxlan) GetReplicationType() BgpV6EviVxlan_ReplicationType_Enum {
	if x != nil && x.ReplicationType != nil {
		return *x.ReplicationType
	}
	return BgpV6EviVxlan_ReplicationType_unspecified
}

func (x *BgpV6EviVxlan) GetPmsiLabel() int32 {
	if x != nil && x.PmsiLabel != nil {
		return *x.PmsiLabel
	}
	return 0
}

func (x *BgpV6EviVxlan) GetAdLabel() int32 {
	if x != nil && x.AdLabel != nil {
		return *x.AdLabel
	}
	return 0
}

func (x *BgpV6EviVxlan) GetRouteDistinguisher() *BgpRouteDistinguisher {
	if x != nil {
		return x.RouteDistinguisher
	}
	return nil
}

func (x *BgpV6EviVxlan) GetRouteTargetExport() []*BgpRouteTarget {
	if x != nil {
		return x.RouteTargetExport
	}
	return nil
}

func (x *BgpV6EviVxlan) GetRouteTargetImport() []*BgpRouteTarget {
	if x != nil {
		return x.RouteTargetImport
	}
	return nil
}

func (x *BgpV6EviVxlan) GetL3RouteTargetExport() []*BgpRouteTarget {
	if x != nil {
		return x.L3RouteTargetExport
	}
	return nil
}

func (x *BgpV6EviVxlan) GetL3RouteTargetImport() []*BgpRouteTarget {
	if x != nil {
		return x.L3RouteTargetImport
	}
	return nil
}

func (x *BgpV6EviVxlan) GetAdvanced() *BgpRouteAdvanced {
	if x != nil {
		return x.Advanced
	}
	return nil
}

func (x *BgpV6EviVxlan) GetCommunities() []*BgpCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpV6EviVxlan) GetExtCommunities() []*BgpExtCommunity {
	if x != nil {
		return x.ExtCommunities
	}
	return nil
}

func (x *BgpV6EviVxlan) GetAsPath() *BgpAsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

// Configuration for Broadcast Domains per EVI.
type BgpV6EviVxlanBroadcastDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This contains the list of Customer MAC/IP Ranges to be configured per Broadcast Domain.
	//
	//
	// Advertises following route -
	// Type 2 - MAC/IP Advertisement Route.
	CmacIpRange []*BgpCMacIpRange `protobuf:"bytes,1,rep,name=cmac_ip_range,json=cmacIpRange,proto3" json:"cmac_ip_range,omitempty"`
	// The Ethernet Tag ID of the Broadcast Domain.
	// default = 0
	EthernetTagId *int64 `protobuf:"varint,2,opt,name=ethernet_tag_id,json=ethernetTagId,proto3,oneof" json:"ethernet_tag_id,omitempty"`
	// VLAN-Aware service to be enabled or disabled.
	// default = False
	VlanAwareService *bool `protobuf:"varint,3,opt,name=vlan_aware_service,json=vlanAwareService,proto3,oneof" json:"vlan_aware_service,omitempty"`
}

func (x *BgpV6EviVxlanBroadcastDomain) Reset() {
	*x = BgpV6EviVxlanBroadcastDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6EviVxlanBroadcastDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6EviVxlanBroadcastDomain) ProtoMessage() {}

func (x *BgpV6EviVxlanBroadcastDomain) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6EviVxlanBroadcastDomain.ProtoReflect.Descriptor instead.
func (*BgpV6EviVxlanBroadcastDomain) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{108}
}

func (x *BgpV6EviVxlanBroadcastDomain) GetCmacIpRange() []*BgpCMacIpRange {
	if x != nil {
		return x.CmacIpRange
	}
	return nil
}

func (x *BgpV6EviVxlanBroadcastDomain) GetEthernetTagId() int64 {
	if x != nil && x.EthernetTagId != nil {
		return *x.EthernetTagId
	}
	return 0
}

func (x *BgpV6EviVxlanBroadcastDomain) GetVlanAwareService() bool {
	if x != nil && x.VlanAwareService != nil {
		return *x.VlanAwareService
	}
	return false
}

// Description missing in models
type DeviceVxlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 VXLAN Tunnels
	V4Tunnels []*VxlanV4Tunnel `protobuf:"bytes,1,rep,name=v4_tunnels,json=v4Tunnels,proto3" json:"v4_tunnels,omitempty"`
	// IPv6 VXLAN Tunnels
	V6Tunnels []*VxlanV6Tunnel `protobuf:"bytes,2,rep,name=v6_tunnels,json=v6Tunnels,proto3" json:"v6_tunnels,omitempty"`
}

func (x *DeviceVxlan) Reset() {
	*x = DeviceVxlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceVxlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceVxlan) ProtoMessage() {}

func (x *DeviceVxlan) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceVxlan.ProtoReflect.Descriptor instead.
func (*DeviceVxlan) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{109}
}

func (x *DeviceVxlan) GetV4Tunnels() []*VxlanV4Tunnel {
	if x != nil {
		return x.V4Tunnels
	}
	return nil
}

func (x *DeviceVxlan) GetV6Tunnels() []*VxlanV6Tunnel {
	if x != nil {
		return x.V6Tunnels
	}
	return nil
}

// Configuration and operational state parameters relating to IPv4 VXLAN tunnel end-point
// interface.
type VxlanV4Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Determines the source interface.
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv4Loopback/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv4Loopback/properties/name
	//
	// required = true
	SourceInterface string `protobuf:"bytes,1,opt,name=source_interface,json=sourceInterface,proto3" json:"source_interface,omitempty"`
	// Description missing in models
	DestinationIpMode *VxlanV4TunnelDestinationIPMode `protobuf:"bytes,2,opt,name=destination_ip_mode,json=destinationIpMode,proto3,oneof" json:"destination_ip_mode,omitempty"`
	// VXLAN Network Identifier (VNI) to distinguish network instances on the wire
	// required = true
	Vni int32 `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VxlanV4Tunnel) Reset() {
	*x = VxlanV4Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV4Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV4Tunnel) ProtoMessage() {}

func (x *VxlanV4Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV4Tunnel.ProtoReflect.Descriptor instead.
func (*VxlanV4Tunnel) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{110}
}

func (x *VxlanV4Tunnel) GetSourceInterface() string {
	if x != nil {
		return x.SourceInterface
	}
	return ""
}

func (x *VxlanV4Tunnel) GetDestinationIpMode() *VxlanV4TunnelDestinationIPMode {
	if x != nil {
		return x.DestinationIpMode
	}
	return nil
}

func (x *VxlanV4Tunnel) GetVni() int32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *VxlanV4Tunnel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Configuration and operational state parameters relating to IPv6 VXLAN tunnel end-point
// interface.
type VxlanV6Tunnel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Determines the source interface.
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv6/properties/name
	// - /components/schemas/Device.Ipv6Loopback/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv6/properties/name
	// - /components/schemas/Device.Ipv6Loopback/properties/name
	//
	// required = true
	SourceInterface string `protobuf:"bytes,1,opt,name=source_interface,json=sourceInterface,proto3" json:"source_interface,omitempty"`
	// Description missing in models
	DestinationIpMode *VxlanV6TunnelDestinationIPMode `protobuf:"bytes,2,opt,name=destination_ip_mode,json=destinationIpMode,proto3,oneof" json:"destination_ip_mode,omitempty"`
	// VXLAN Network Identifier (VNI) to distinguish network instances on the wire
	// required = true
	Vni int32 `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VxlanV6Tunnel) Reset() {
	*x = VxlanV6Tunnel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV6Tunnel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV6Tunnel) ProtoMessage() {}

func (x *VxlanV6Tunnel) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV6Tunnel.ProtoReflect.Descriptor instead.
func (*VxlanV6Tunnel) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{111}
}

func (x *VxlanV6Tunnel) GetSourceInterface() string {
	if x != nil {
		return x.SourceInterface
	}
	return ""
}

func (x *VxlanV6Tunnel) GetDestinationIpMode() *VxlanV6TunnelDestinationIPMode {
	if x != nil {
		return x.DestinationIpMode
	}
	return nil
}

func (x *VxlanV6Tunnel) GetVni() int32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *VxlanV6Tunnel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Communication mode between the VTEPs, either unicast or multicast.
type VxlanV4TunnelDestinationIPMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unicast or multicast
	// default = Choice.Enum.multicast
	Choice *VxlanV4TunnelDestinationIPMode_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.VxlanV4TunnelDestinationIPMode_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Unicast *VxlanV4TunnelDestinationIPModeUnicast `protobuf:"bytes,2,opt,name=unicast,proto3,oneof" json:"unicast,omitempty"`
	// Description missing in models
	Multicast *VxlanV4TunnelDestinationIPModeMulticast `protobuf:"bytes,3,opt,name=multicast,proto3,oneof" json:"multicast,omitempty"`
}

func (x *VxlanV4TunnelDestinationIPMode) Reset() {
	*x = VxlanV4TunnelDestinationIPMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV4TunnelDestinationIPMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV4TunnelDestinationIPMode) ProtoMessage() {}

func (x *VxlanV4TunnelDestinationIPMode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV4TunnelDestinationIPMode.ProtoReflect.Descriptor instead.
func (*VxlanV4TunnelDestinationIPMode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{112}
}

func (x *VxlanV4TunnelDestinationIPMode) GetChoice() VxlanV4TunnelDestinationIPMode_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return VxlanV4TunnelDestinationIPMode_Choice_unspecified
}

func (x *VxlanV4TunnelDestinationIPMode) GetUnicast() *VxlanV4TunnelDestinationIPModeUnicast {
	if x != nil {
		return x.Unicast
	}
	return nil
}

func (x *VxlanV4TunnelDestinationIPMode) GetMulticast() *VxlanV4TunnelDestinationIPModeMulticast {
	if x != nil {
		return x.Multicast
	}
	return nil
}

// Communication mode between the VTEPs, either unicast or multicast.
type VxlanV6TunnelDestinationIPMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unicast or multicast
	// default = Choice.Enum.multicast
	Choice *VxlanV6TunnelDestinationIPMode_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.VxlanV6TunnelDestinationIPMode_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Unicast *VxlanV6TunnelDestinationIPModeUnicast `protobuf:"bytes,2,opt,name=unicast,proto3,oneof" json:"unicast,omitempty"`
	// Description missing in models
	Multicast *VxlanV6TunnelDestinationIPModeMulticast `protobuf:"bytes,3,opt,name=multicast,proto3,oneof" json:"multicast,omitempty"`
}

func (x *VxlanV6TunnelDestinationIPMode) Reset() {
	*x = VxlanV6TunnelDestinationIPMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV6TunnelDestinationIPMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV6TunnelDestinationIPMode) ProtoMessage() {}

func (x *VxlanV6TunnelDestinationIPMode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV6TunnelDestinationIPMode.ProtoReflect.Descriptor instead.
func (*VxlanV6TunnelDestinationIPMode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{113}
}

func (x *VxlanV6TunnelDestinationIPMode) GetChoice() VxlanV6TunnelDestinationIPMode_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return VxlanV6TunnelDestinationIPMode_Choice_unspecified
}

func (x *VxlanV6TunnelDestinationIPMode) GetUnicast() *VxlanV6TunnelDestinationIPModeUnicast {
	if x != nil {
		return x.Unicast
	}
	return nil
}

func (x *VxlanV6TunnelDestinationIPMode) GetMulticast() *VxlanV6TunnelDestinationIPModeMulticast {
	if x != nil {
		return x.Multicast
	}
	return nil
}

// Description missing in models
type VxlanV4TunnelDestinationIPModeUnicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of VTEPs for member VNI(VXLAN Network Identifier)
	Vteps []*VxlanV4TunnelDestinationIPModeUnicastVtep `protobuf:"bytes,1,rep,name=vteps,proto3" json:"vteps,omitempty"`
}

func (x *VxlanV4TunnelDestinationIPModeUnicast) Reset() {
	*x = VxlanV4TunnelDestinationIPModeUnicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV4TunnelDestinationIPModeUnicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV4TunnelDestinationIPModeUnicast) ProtoMessage() {}

func (x *VxlanV4TunnelDestinationIPModeUnicast) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV4TunnelDestinationIPModeUnicast.ProtoReflect.Descriptor instead.
func (*VxlanV4TunnelDestinationIPModeUnicast) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{114}
}

func (x *VxlanV4TunnelDestinationIPModeUnicast) GetVteps() []*VxlanV4TunnelDestinationIPModeUnicastVtep {
	if x != nil {
		return x.Vteps
	}
	return nil
}

// Description missing in models
type VxlanV6TunnelDestinationIPModeUnicast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of VTEPs for member VNI(VXLAN Network Identifier)
	Vteps []*VxlanV6TunnelDestinationIPModeUnicastVtep `protobuf:"bytes,1,rep,name=vteps,proto3" json:"vteps,omitempty"`
}

func (x *VxlanV6TunnelDestinationIPModeUnicast) Reset() {
	*x = VxlanV6TunnelDestinationIPModeUnicast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV6TunnelDestinationIPModeUnicast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV6TunnelDestinationIPModeUnicast) ProtoMessage() {}

func (x *VxlanV6TunnelDestinationIPModeUnicast) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV6TunnelDestinationIPModeUnicast.ProtoReflect.Descriptor instead.
func (*VxlanV6TunnelDestinationIPModeUnicast) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{115}
}

func (x *VxlanV6TunnelDestinationIPModeUnicast) GetVteps() []*VxlanV6TunnelDestinationIPModeUnicastVtep {
	if x != nil {
		return x.Vteps
	}
	return nil
}

// Each VTEP maintains an ARP suppression cache table for known IP hosts and their associated
// MAC addresses in the VNI segment.  When an end host in the VNI sends an ARP request
// for another end-host IP address,  its local VTEP intercepts the ARP request and checks
// for the ARP-resolved IP address in its ARP suppression cache table.  If it finds
// a match, the local VTEP sends an ARP response on behalf of the remote end host.
type VxlanTunnelDestinationIPModeUnicastArpSuppressionCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remote VM MAC address bound to Remote VM IPv4 address
	RemoteVmMac *string `protobuf:"bytes,1,opt,name=remote_vm_mac,json=remoteVmMac,proto3,oneof" json:"remote_vm_mac,omitempty"`
	// Remote VM IPv4 address
	RemoteVmIpv4 *string `protobuf:"bytes,2,opt,name=remote_vm_ipv4,json=remoteVmIpv4,proto3,oneof" json:"remote_vm_ipv4,omitempty"`
}

func (x *VxlanTunnelDestinationIPModeUnicastArpSuppressionCache) Reset() {
	*x = VxlanTunnelDestinationIPModeUnicastArpSuppressionCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanTunnelDestinationIPModeUnicastArpSuppressionCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanTunnelDestinationIPModeUnicastArpSuppressionCache) ProtoMessage() {}

func (x *VxlanTunnelDestinationIPModeUnicastArpSuppressionCache) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanTunnelDestinationIPModeUnicastArpSuppressionCache.ProtoReflect.Descriptor instead.
func (*VxlanTunnelDestinationIPModeUnicastArpSuppressionCache) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{116}
}

func (x *VxlanTunnelDestinationIPModeUnicastArpSuppressionCache) GetRemoteVmMac() string {
	if x != nil && x.RemoteVmMac != nil {
		return *x.RemoteVmMac
	}
	return ""
}

func (x *VxlanTunnelDestinationIPModeUnicastArpSuppressionCache) GetRemoteVmIpv4() string {
	if x != nil && x.RemoteVmIpv4 != nil {
		return *x.RemoteVmIpv4
	}
	return ""
}

// VTEP (VXLAN Tunnel End Point (VTEP)) parameters
type VxlanV4TunnelDestinationIPModeUnicastVtep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remote VXLAN Tunnel End Point address
	RemoteVtepAddress *string `protobuf:"bytes,1,opt,name=remote_vtep_address,json=remoteVtepAddress,proto3,oneof" json:"remote_vtep_address,omitempty"`
	// Each VTEP maintains an ARP suppression cache table for known IP hosts and their associated
	// MAC addresses in the VNI segment.  When an end host in the VNI sends an ARP request
	// for another end-host IP address,  its local VTEP intercepts the ARP request and checks
	// for the ARP-resolved IP address in its ARP suppression cache table.  If it finds
	// a match, the local VTEP sends an ARP response on behalf of the remote end host.
	ArpSuppressionCache []*VxlanTunnelDestinationIPModeUnicastArpSuppressionCache `protobuf:"bytes,2,rep,name=arp_suppression_cache,json=arpSuppressionCache,proto3" json:"arp_suppression_cache,omitempty"`
}

func (x *VxlanV4TunnelDestinationIPModeUnicastVtep) Reset() {
	*x = VxlanV4TunnelDestinationIPModeUnicastVtep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV4TunnelDestinationIPModeUnicastVtep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV4TunnelDestinationIPModeUnicastVtep) ProtoMessage() {}

func (x *VxlanV4TunnelDestinationIPModeUnicastVtep) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV4TunnelDestinationIPModeUnicastVtep.ProtoReflect.Descriptor instead.
func (*VxlanV4TunnelDestinationIPModeUnicastVtep) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{117}
}

func (x *VxlanV4TunnelDestinationIPModeUnicastVtep) GetRemoteVtepAddress() string {
	if x != nil && x.RemoteVtepAddress != nil {
		return *x.RemoteVtepAddress
	}
	return ""
}

func (x *VxlanV4TunnelDestinationIPModeUnicastVtep) GetArpSuppressionCache() []*VxlanTunnelDestinationIPModeUnicastArpSuppressionCache {
	if x != nil {
		return x.ArpSuppressionCache
	}
	return nil
}

// VTEP (VXLAN Tunnel End Point (VTEP)) parameters
type VxlanV6TunnelDestinationIPModeUnicastVtep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remote VXLAN Tunnel End Point address
	RemoteVtepAddress *string `protobuf:"bytes,1,opt,name=remote_vtep_address,json=remoteVtepAddress,proto3,oneof" json:"remote_vtep_address,omitempty"`
	// Each VTEP maintains an ARP suppression cache table for known IP hosts and their associated
	// MAC addresses in the VNI segment.  When an end host in the VNI sends an ARP request
	// for another end-host IP address,  its local VTEP intercepts the ARP request and checks
	// for the ARP-resolved IP address in its ARP suppression cache table.  If it finds
	// a match, the local VTEP sends an ARP response on behalf of the remote end host.
	ArpSuppressionCache []*VxlanTunnelDestinationIPModeUnicastArpSuppressionCache `protobuf:"bytes,2,rep,name=arp_suppression_cache,json=arpSuppressionCache,proto3" json:"arp_suppression_cache,omitempty"`
}

func (x *VxlanV6TunnelDestinationIPModeUnicastVtep) Reset() {
	*x = VxlanV6TunnelDestinationIPModeUnicastVtep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV6TunnelDestinationIPModeUnicastVtep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV6TunnelDestinationIPModeUnicastVtep) ProtoMessage() {}

func (x *VxlanV6TunnelDestinationIPModeUnicastVtep) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV6TunnelDestinationIPModeUnicastVtep.ProtoReflect.Descriptor instead.
func (*VxlanV6TunnelDestinationIPModeUnicastVtep) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{118}
}

func (x *VxlanV6TunnelDestinationIPModeUnicastVtep) GetRemoteVtepAddress() string {
	if x != nil && x.RemoteVtepAddress != nil {
		return *x.RemoteVtepAddress
	}
	return ""
}

func (x *VxlanV6TunnelDestinationIPModeUnicastVtep) GetArpSuppressionCache() []*VxlanTunnelDestinationIPModeUnicastArpSuppressionCache {
	if x != nil {
		return x.ArpSuppressionCache
	}
	return nil
}

// Multicast Group address for member VNI(VXLAN Network Identifier)
type VxlanV4TunnelDestinationIPModeMulticast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 Multicast address
	Address *string `protobuf:"bytes,1,opt,name=address,proto3,oneof" json:"address,omitempty"`
}

func (x *VxlanV4TunnelDestinationIPModeMulticast) Reset() {
	*x = VxlanV4TunnelDestinationIPModeMulticast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV4TunnelDestinationIPModeMulticast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV4TunnelDestinationIPModeMulticast) ProtoMessage() {}

func (x *VxlanV4TunnelDestinationIPModeMulticast) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV4TunnelDestinationIPModeMulticast.ProtoReflect.Descriptor instead.
func (*VxlanV4TunnelDestinationIPModeMulticast) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{119}
}

func (x *VxlanV4TunnelDestinationIPModeMulticast) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

// Multicast Group address for member VNI(VXLAN Network Identifier)
type VxlanV6TunnelDestinationIPModeMulticast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv6 Multicast address
	Address *string `protobuf:"bytes,1,opt,name=address,proto3,oneof" json:"address,omitempty"`
}

func (x *VxlanV6TunnelDestinationIPModeMulticast) Reset() {
	*x = VxlanV6TunnelDestinationIPModeMulticast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV6TunnelDestinationIPModeMulticast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV6TunnelDestinationIPModeMulticast) ProtoMessage() {}

func (x *VxlanV6TunnelDestinationIPModeMulticast) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV6TunnelDestinationIPModeMulticast.ProtoReflect.Descriptor instead.
func (*VxlanV6TunnelDestinationIPModeMulticast) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{120}
}

func (x *VxlanV6TunnelDestinationIPModeMulticast) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

// Status: under-review
// Status: under-review
// Configuration for one or more RSVP interfaces, ingress and egress LSPs. In this model,
// currently IPv4 RSVP and point-to-point LSPs are supported as per RFC3209 and related
// specifications.
type DeviceRsvp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of IPv4 RSVP connected interfaces. At least one interface should be present
	// for device connected to the DUT. For unconnected devices, this array must be empty.
	Ipv4Interfaces []*RsvpIpv4Interface `protobuf:"bytes,1,rep,name=ipv4_interfaces,json=ipv4Interfaces,proto3" json:"ipv4_interfaces,omitempty"`
	// List of IPv4 Loopback or IPv4 connected interfaces acting as RSVP ingress and egress
	// endpoints.
	LspIpv4Interfaces []*RsvpLspIpv4Interface `protobuf:"bytes,2,rep,name=lsp_ipv4_interfaces,json=lspIpv4Interfaces,proto3" json:"lsp_ipv4_interfaces,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *DeviceRsvp) Reset() {
	*x = DeviceRsvp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRsvp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRsvp) ProtoMessage() {}

func (x *DeviceRsvp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRsvp.ProtoReflect.Descriptor instead.
func (*DeviceRsvp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{121}
}

func (x *DeviceRsvp) GetIpv4Interfaces() []*RsvpIpv4Interface {
	if x != nil {
		return x.Ipv4Interfaces
	}
	return nil
}

func (x *DeviceRsvp) GetLspIpv4Interfaces() []*RsvpLspIpv4Interface {
	if x != nil {
		return x.LspIpv4Interfaces
	}
	return nil
}

func (x *DeviceRsvp) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Status: under-review
// Status: under-review
// Configuration for RSVP Interface.
type RsvpIpv4Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The globally unique name of the IPv4 interface connected to the DUT. This name must
	// match the name field of the ipv4_addresses on top which this RSVP interface is configured.
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	//
	// required = true
	Ipv4Name string `protobuf:"bytes,1,opt,name=ipv4_name,json=ipv4Name,proto3" json:"ipv4_name,omitempty"`
	// IPv4 address of the RSVP neighbor on this interface.
	// required = true
	NeighborIp string `protobuf:"bytes,2,opt,name=neighbor_ip,json=neighborIp,proto3" json:"neighbor_ip,omitempty"`
	// The user-defined label space start value. The LSPs for which this router acts as
	// a egress are assigned labels from this label pool.Thelabel_space_start and label_space_end
	// together defines this label-pool.
	// default = 1000
	LabelSpaceStart *int32 `protobuf:"varint,3,opt,name=label_space_start,json=labelSpaceStart,proto3,oneof" json:"label_space_start,omitempty"`
	// The user-defined label space end value.The last label value that can be assigned
	// to the LSPs for which this router acts as egress.
	// default = 100000
	LabelSpaceEnd *int32 `protobuf:"varint,4,opt,name=label_space_end,json=labelSpaceEnd,proto3,oneof" json:"label_space_end,omitempty"`
	// Enables sending of Refresh Reduction as described in RFC2961.
	// default = False
	EnableRefreshReduction *bool `protobuf:"varint,5,opt,name=enable_refresh_reduction,json=enableRefreshReduction,proto3,oneof" json:"enable_refresh_reduction,omitempty"`
	// The number of seconds between transmissions of successive Summary Refreshes. There
	// is no specification specified maximum value. For clarity, setting the maximum to
	// 1 hour.
	// default = 30
	SummaryRefreshInterval *int32 `protobuf:"varint,6,opt,name=summary_refresh_interval,json=summaryRefreshInterval,proto3,oneof" json:"summary_refresh_interval,omitempty"`
	// Enables aggregration of different RSVP messages within a single PDU.
	// default = False
	SendBundle *bool `protobuf:"varint,7,opt,name=send_bundle,json=sendBundle,proto3,oneof" json:"send_bundle,omitempty"`
	// The number of milliseconds to wait after which RSVP will bundle different RSVP messages
	// and transmit Bundle messages.
	// default = 50
	BundleThreshold *int32 `protobuf:"varint,8,opt,name=bundle_threshold,json=bundleThreshold,proto3,oneof" json:"bundle_threshold,omitempty"`
	// Enables sending of Hello Messages as per RFC3209.
	// default = False
	EnableHello *bool `protobuf:"varint,9,opt,name=enable_hello,json=enableHello,proto3,oneof" json:"enable_hello,omitempty"`
	// If enable_hello is set to 'true', this specifies the minimum hello interval in seconds
	// at which successive Hello Messages  are sent as per RFC3209. There is no specification
	// specified maximum value. For clarity, setting the maximum to 1 hour.
	// default = 9
	HelloInterval *int32 `protobuf:"varint,10,opt,name=hello_interval,json=helloInterval,proto3,oneof" json:"hello_interval,omitempty"`
	// The number of missed hellos after which the node should consider RSVP Neighbor to
	// have timed out. There is no specification specified maximum value. Setting the maximum
	// allowed value to 10.
	// default = 3
	TimeoutMultiplier *int32 `protobuf:"varint,11,opt,name=timeout_multiplier,json=timeoutMultiplier,proto3,oneof" json:"timeout_multiplier,omitempty"`
}

func (x *RsvpIpv4Interface) Reset() {
	*x = RsvpIpv4Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpIpv4Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpIpv4Interface) ProtoMessage() {}

func (x *RsvpIpv4Interface) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpIpv4Interface.ProtoReflect.Descriptor instead.
func (*RsvpIpv4Interface) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{122}
}

func (x *RsvpIpv4Interface) GetIpv4Name() string {
	if x != nil {
		return x.Ipv4Name
	}
	return ""
}

func (x *RsvpIpv4Interface) GetNeighborIp() string {
	if x != nil {
		return x.NeighborIp
	}
	return ""
}

func (x *RsvpIpv4Interface) GetLabelSpaceStart() int32 {
	if x != nil && x.LabelSpaceStart != nil {
		return *x.LabelSpaceStart
	}
	return 0
}

func (x *RsvpIpv4Interface) GetLabelSpaceEnd() int32 {
	if x != nil && x.LabelSpaceEnd != nil {
		return *x.LabelSpaceEnd
	}
	return 0
}

func (x *RsvpIpv4Interface) GetEnableRefreshReduction() bool {
	if x != nil && x.EnableRefreshReduction != nil {
		return *x.EnableRefreshReduction
	}
	return false
}

func (x *RsvpIpv4Interface) GetSummaryRefreshInterval() int32 {
	if x != nil && x.SummaryRefreshInterval != nil {
		return *x.SummaryRefreshInterval
	}
	return 0
}

func (x *RsvpIpv4Interface) GetSendBundle() bool {
	if x != nil && x.SendBundle != nil {
		return *x.SendBundle
	}
	return false
}

func (x *RsvpIpv4Interface) GetBundleThreshold() int32 {
	if x != nil && x.BundleThreshold != nil {
		return *x.BundleThreshold
	}
	return 0
}

func (x *RsvpIpv4Interface) GetEnableHello() bool {
	if x != nil && x.EnableHello != nil {
		return *x.EnableHello
	}
	return false
}

func (x *RsvpIpv4Interface) GetHelloInterval() int32 {
	if x != nil && x.HelloInterval != nil {
		return *x.HelloInterval
	}
	return 0
}

func (x *RsvpIpv4Interface) GetTimeoutMultiplier() int32 {
	if x != nil && x.TimeoutMultiplier != nil {
		return *x.TimeoutMultiplier
	}
	return 0
}

// Status: under-review
// Status: under-review
// Configuration for RSVP LSP IPv4 Interface.
type RsvpLspIpv4Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The globally unique name of the IPv4 or Loopback IPv4 interface acting as the RSVP
	// ingress and egress endpoint for  the LSPs configured on this interface. This must
	// match the name field of either ipv4_addresses or ipv4_loopbacks  on which this LSP
	// interface is configured.
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv4Loopback/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv4Loopback/properties/name
	//
	// required = true
	Ipv4Name string `protobuf:"bytes,1,opt,name=ipv4_name,json=ipv4Name,proto3" json:"ipv4_name,omitempty"`
	// Contains properties of Tail(Egress) LSPs.
	P2PEgressIpv4Lsps *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp `protobuf:"bytes,2,opt,name=p2p_egress_ipv4_lsps,json=p2pEgressIpv4Lsps,proto3,oneof" json:"p2p_egress_ipv4_lsps,omitempty"`
	// Array of point-to-point RSVP-TE P2P LSPs originating from this interface.
	P2PIngressIpv4Lsps []*RsvpLspIpv4InterfaceP2PIngressIpv4Lsp `protobuf:"bytes,3,rep,name=p2p_ingress_ipv4_lsps,json=p2pIngressIpv4Lsps,proto3" json:"p2p_ingress_ipv4_lsps,omitempty"`
}

func (x *RsvpLspIpv4Interface) Reset() {
	*x = RsvpLspIpv4Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspIpv4Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspIpv4Interface) ProtoMessage() {}

func (x *RsvpLspIpv4Interface) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspIpv4Interface.ProtoReflect.Descriptor instead.
func (*RsvpLspIpv4Interface) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{123}
}

func (x *RsvpLspIpv4Interface) GetIpv4Name() string {
	if x != nil {
		return x.Ipv4Name
	}
	return ""
}

func (x *RsvpLspIpv4Interface) GetP2PEgressIpv4Lsps() *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp {
	if x != nil {
		return x.P2PEgressIpv4Lsps
	}
	return nil
}

func (x *RsvpLspIpv4Interface) GetP2PIngressIpv4Lsps() []*RsvpLspIpv4InterfaceP2PIngressIpv4Lsp {
	if x != nil {
		return x.P2PIngressIpv4Lsps
	}
	return nil
}

// Configuration for RSVP Egress Point-to-Point(P2P) IPv4 LSPs.
type RsvpLspIpv4InterfaceP2PEgressIpv4Lsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The time in seconds between successive transmissions of RESV Refreshes. The actual
	// refresh interval is jittered by upto 50%. There is no specification specified maximum
	// value. For clarity, setting the maximum to 1 hour.
	// default = 30
	RefreshInterval *int32 `protobuf:"varint,2,opt,name=refresh_interval,json=refreshInterval,proto3,oneof" json:"refresh_interval,omitempty"`
	// The number of missed PATH refreshes after which a recieving node should consider
	// the LSP state to have timed out. There is no specification specified maximum value.
	// Setting the maximum allowed value to 10.
	// default = 3
	TimeoutMultiplier *int32 `protobuf:"varint,3,opt,name=timeout_multiplier,json=timeoutMultiplier,proto3,oneof" json:"timeout_multiplier,omitempty"`
	// It determines how RSVP-TE enabled network devices set up reservations along the path
	// between an end-to-end  QOS-enabled connection. If 'auto' is enabled, the style is
	// chosen based on whether the incoming Path has 'SE Desired' flag set. Otherwise, the
	// style is chosen based on the value selected for this attribute.
	// default = ReservationStyle.Enum.shared_explicit
	ReservationStyle *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum `protobuf:"varint,4,opt,name=reservation_style,json=reservationStyle,proto3,enum=otg.RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum,oneof" json:"reservation_style,omitempty"`
	// If enabled, a specific fixed label will be advertised by the egress or tail end for
	// all Path messages received by this egress.  This can be leveraged to advertise Explicit
	// or Implicit null labels.
	// default = False
	EnableFixedLabel *bool `protobuf:"varint,5,opt,name=enable_fixed_label,json=enableFixedLabel,proto3,oneof" json:"enable_fixed_label,omitempty"`
	// The fixed label value as advertised by egress in RESV message. Applicable only if
	// 'fixed_label' is set to 'true'. Special values are '0 - IPv4 Explicit NULL', '2 -
	// IPv6 Explicit NULL' and '3 - Implicit NULL'.   Outside of this, labels are expected
	// to have a minimum value of 16.
	// default = 0
	FixedLabelValue *int32 `protobuf:"varint,6,opt,name=fixed_label_value,json=fixedLabelValue,proto3,oneof" json:"fixed_label_value,omitempty"`
}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp) Reset() {
	*x = RsvpLspIpv4InterfaceP2PEgressIpv4Lsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspIpv4InterfaceP2PEgressIpv4Lsp) ProtoMessage() {}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspIpv4InterfaceP2PEgressIpv4Lsp.ProtoReflect.Descriptor instead.
func (*RsvpLspIpv4InterfaceP2PEgressIpv4Lsp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{124}
}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp) GetRefreshInterval() int32 {
	if x != nil && x.RefreshInterval != nil {
		return *x.RefreshInterval
	}
	return 0
}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp) GetTimeoutMultiplier() int32 {
	if x != nil && x.TimeoutMultiplier != nil {
		return *x.TimeoutMultiplier
	}
	return 0
}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp) GetReservationStyle() RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum {
	if x != nil && x.ReservationStyle != nil {
		return *x.ReservationStyle
	}
	return RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_unspecified
}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp) GetEnableFixedLabel() bool {
	if x != nil && x.EnableFixedLabel != nil {
		return *x.EnableFixedLabel
	}
	return false
}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp) GetFixedLabelValue() int32 {
	if x != nil && x.FixedLabelValue != nil {
		return *x.FixedLabelValue
	}
	return 0
}

// Configuration for an RSVP Ingress point-to-point LSP.
type RsvpLspIpv4InterfaceP2PIngressIpv4Lsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// IPv4 address of the remote endpoint of the LSP.
	// required = true
	RemoteAddress string `protobuf:"bytes,2,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	// The Tunnel ID of the RSVP LSP. Carried in the SESSION object in Path Messages.
	// default = 1
	TunnelId *int32 `protobuf:"varint,3,opt,name=tunnel_id,json=tunnelId,proto3,oneof" json:"tunnel_id,omitempty"`
	// The LSP ID of the RSVP LSP. Carried in the SENDER_TEMPLATE object in Path Messages.
	// default = 1
	LspId *int32 `protobuf:"varint,4,opt,name=lsp_id,json=lspId,proto3,oneof" json:"lsp_id,omitempty"`
	// The time in seconds between successive transmissions of PATH Refreshes.  The actual
	// refresh interval is jittered by upto 50%. There is no specification specified maximum
	// value. For clarity, setting the maximum to 1 hour.
	// default = 30
	RefreshInterval *int32 `protobuf:"varint,5,opt,name=refresh_interval,json=refreshInterval,proto3,oneof" json:"refresh_interval,omitempty"`
	// The number of missed RESV refreshes after which a recieving node should consider
	// the LSP state to have timed out. There is no specification specified maximum value.
	// Setting the maximum allowed value to 10.
	// default = 3
	TimeoutMultiplier *int32 `protobuf:"varint,6,opt,name=timeout_multiplier,json=timeoutMultiplier,proto3,oneof" json:"timeout_multiplier,omitempty"`
	// The LSP id that will be used when creating a Make-Before-Break LSP when the active
	// LSP is using lsp_id. If the active LSP on which Make-Before-Break is being done is
	// using the backup_lsp_id, the new LSP created will toggle to  use the lsp_id instead.
	// default = 2
	BackupLspId *int32 `protobuf:"varint,7,opt,name=backup_lsp_id,json=backupLspId,proto3,oneof" json:"backup_lsp_id,omitempty"`
	// The amount of delay in milliseconds that an implementation should wait for before
	// switching traffic to the new LSP created after  a Make-Before-Break is done on an
	// LSP. The default value is 0 which means to switch immediately. An implementation
	// should support a minimum delay value of at least 50ms . There is no specification
	// specified maximum value. Setting maximum allowed value to 1 minute.  If a delay value
	// is supplied which is lesser than the minimum delay value supported, a warning should
	// be provided indicating that the minimum value of LSP switchover delay is automatically
	// increased to the supported minimum value. This warning should be included in the
	// list of warnings in the 'Response.Warning' attribute sent in the SetConfig 'Success'
	// Response.
	// default = 0
	LspSwitchoverDelay *int32 `protobuf:"varint,8,opt,name=lsp_switchover_delay,json=lspSwitchoverDelay,proto3,oneof" json:"lsp_switchover_delay,omitempty"`
	// This contains the values of the fields to be included in the SESSION_ATTRIBUTE object
	// in the Path Message sent for the LSP.
	SessionAttribute *RsvpSessionAttribute `protobuf:"bytes,9,opt,name=session_attribute,json=sessionAttribute,proto3,oneof" json:"session_attribute,omitempty"`
	// This contains the values of the fields to be included in the TSPEC object in the
	// Path Message sent for the LSP.
	Tspec *RsvpTspec `protobuf:"bytes,10,opt,name=tspec,proto3,oneof" json:"tspec,omitempty"`
	// This contains the values of the fields to be included in the FAST_REROUTE object
	// in the Path Message sent for the LSP.
	// This is an optional object . If this attribute is not included , the FAST_REROUTE
	// object will not be included.
	FastReroute *RsvpFastReroute `protobuf:"bytes,11,opt,name=fast_reroute,json=fastReroute,proto3,oneof" json:"fast_reroute,omitempty"`
	// This contains the values of the fields to be included in the ERO object in the Path
	// Message sent for the LSP.
	// This is an optional object . If this attribute is not included , the ERO object will
	// not be included.
	Ero *RsvpEro `protobuf:"bytes,12,opt,name=ero,proto3,oneof" json:"ero,omitempty"`
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) Reset() {
	*x = RsvpLspIpv4InterfaceP2PIngressIpv4Lsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) ProtoMessage() {}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspIpv4InterfaceP2PIngressIpv4Lsp.ProtoReflect.Descriptor instead.
func (*RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{125}
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetTunnelId() int32 {
	if x != nil && x.TunnelId != nil {
		return *x.TunnelId
	}
	return 0
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetLspId() int32 {
	if x != nil && x.LspId != nil {
		return *x.LspId
	}
	return 0
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetRefreshInterval() int32 {
	if x != nil && x.RefreshInterval != nil {
		return *x.RefreshInterval
	}
	return 0
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetTimeoutMultiplier() int32 {
	if x != nil && x.TimeoutMultiplier != nil {
		return *x.TimeoutMultiplier
	}
	return 0
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetBackupLspId() int32 {
	if x != nil && x.BackupLspId != nil {
		return *x.BackupLspId
	}
	return 0
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetLspSwitchoverDelay() int32 {
	if x != nil && x.LspSwitchoverDelay != nil {
		return *x.LspSwitchoverDelay
	}
	return 0
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetSessionAttribute() *RsvpSessionAttribute {
	if x != nil {
		return x.SessionAttribute
	}
	return nil
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetTspec() *RsvpTspec {
	if x != nil {
		return x.Tspec
	}
	return nil
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetFastReroute() *RsvpFastReroute {
	if x != nil {
		return x.FastReroute
	}
	return nil
}

func (x *RsvpLspIpv4InterfaceP2PIngressIpv4Lsp) GetEro() *RsvpEro {
	if x != nil {
		return x.Ero
	}
	return nil
}

// Configuration for RSVP-TE SESSION_ATTRIBUTE object included in Path Messages as defined
// in RFC3209. The bandwidth_protection_desired and node_protection_desired flags are
// defined in RFC4090 (Fast Reroute).
type RsvpSessionAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If this is enabled, an auto-generated Session Name is included in the SESSION_ATTRIBUTE
	// object in the Path Message for this LSP.
	// default = True
	AutoGenerateSessionName *bool `protobuf:"varint,1,opt,name=auto_generate_session_name,json=autoGenerateSessionName,proto3,oneof" json:"auto_generate_session_name,omitempty"`
	// If auto_generate_session_name is set to 'false', then the value of this field is
	// used to fill the Session Name field of the SESSION_ATTRIBUTE object in the Path Message
	// for this LSP. It is suggested to include the Local IP, Remote IP, Tunnel ID and LSP
	// ID in the auto-generated Session Name to ensure uniqueness of the name in the test.
	// The maximum length of session name is 254 bytes.
	SessionName *string `protobuf:"bytes,2,opt,name=session_name,json=sessionName,proto3,oneof" json:"session_name,omitempty"`
	// Specifies the value of the Setup Priority field. This controls whether the LSP should
	// pre-empt existing  LSP setup with certain Holding Priority if resource limitation
	// is encountered when setting up the LSP. (e.g. bandwidth availability). The value
	// 0 is the highest priority while 7 is the lowest.
	// default = 7
	SetupPriority *int32 `protobuf:"varint,3,opt,name=setup_priority,json=setupPriority,proto3,oneof" json:"setup_priority,omitempty"`
	// Specifies the value of the Holding Priority field. This controls whether a new LSP
	// being created with certain Setup Priority should pre-empt this LSP if resource limitation
	// is encountered when setting up the LSP. (e.g. bandwidth availability). The value
	// 0 is the highest priority while 7 is the lowest.
	// default = 7
	HoldingPriority *int32 `protobuf:"varint,4,opt,name=holding_priority,json=holdingPriority,proto3,oneof" json:"holding_priority,omitempty"`
	// This flag permits transit routers to use a local repair mechanism which may result
	// in violation of the explicit route object.  When a fault is detected on an adjacent
	// downstream link or node, a transit router can reroute traffic for fast service restoration.
	// default = False
	LocalProtectionDesired *bool `protobuf:"varint,5,opt,name=local_protection_desired,json=localProtectionDesired,proto3,oneof" json:"local_protection_desired,omitempty"`
	// This flag indicates that label information should be included when doing a route
	// record.
	// default = False
	LabelRecordingDesired *bool `protobuf:"varint,6,opt,name=label_recording_desired,json=labelRecordingDesired,proto3,oneof" json:"label_recording_desired,omitempty"`
	// This flag indicates that the tunnel ingress node may choose to reroute this tunnel
	// without tearing it down. A tunnel egress node SHOULD use the Shared Explicit(SE)
	// Style when responding with a Resv message.
	// default = False
	SeStyleDesired *bool `protobuf:"varint,7,opt,name=se_style_desired,json=seStyleDesired,proto3,oneof" json:"se_style_desired,omitempty"`
	// This flag in the SESSION_ATTRIBUTE object in the Path Message indicates to the PLRs
	// along the protected LSP path that a  backup path with a bandwidth guarantee is desired.
	// This bandwidth has to be guaranteed for the protected LSP, if no FAST_REROUTE object
	// is included in the PATH message. If a FAST_REROUTE object is present in the Path
	// message, then the bandwidth specified therein is to be guaranteed.
	// default = False
	BandwidthProtectionDesired *bool `protobuf:"varint,8,opt,name=bandwidth_protection_desired,json=bandwidthProtectionDesired,proto3,oneof" json:"bandwidth_protection_desired,omitempty"`
	// This flag in the SESSION_ATTRIBUTE object in the Path Message indicates to the PLRs
	// along a protected LSP path that it is desired to have a backup path that bypasses
	// at least the next node of the protected LSP.
	// default = False
	NodeProtectionDesired *bool `protobuf:"varint,9,opt,name=node_protection_desired,json=nodeProtectionDesired,proto3,oneof" json:"node_protection_desired,omitempty"`
	// This is an optional object. If included the extended SESSION_ATTRIBUTE object is
	// sent in the Path message containing
	// the additional fields included in this object. This contains a set of three bitmaps
	// using which further constraints can be
	// set on the path calculated for the LSP based on the Admin Group settings in the IGP
	// (e.g ISIS or OSPF interface).
	ResourceAffinities *RsvpResourceAffinities `protobuf:"bytes,10,opt,name=resource_affinities,json=resourceAffinities,proto3,oneof" json:"resource_affinities,omitempty"`
}

func (x *RsvpSessionAttribute) Reset() {
	*x = RsvpSessionAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpSessionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpSessionAttribute) ProtoMessage() {}

func (x *RsvpSessionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpSessionAttribute.ProtoReflect.Descriptor instead.
func (*RsvpSessionAttribute) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{126}
}

func (x *RsvpSessionAttribute) GetAutoGenerateSessionName() bool {
	if x != nil && x.AutoGenerateSessionName != nil {
		return *x.AutoGenerateSessionName
	}
	return false
}

func (x *RsvpSessionAttribute) GetSessionName() string {
	if x != nil && x.SessionName != nil {
		return *x.SessionName
	}
	return ""
}

func (x *RsvpSessionAttribute) GetSetupPriority() int32 {
	if x != nil && x.SetupPriority != nil {
		return *x.SetupPriority
	}
	return 0
}

func (x *RsvpSessionAttribute) GetHoldingPriority() int32 {
	if x != nil && x.HoldingPriority != nil {
		return *x.HoldingPriority
	}
	return 0
}

func (x *RsvpSessionAttribute) GetLocalProtectionDesired() bool {
	if x != nil && x.LocalProtectionDesired != nil {
		return *x.LocalProtectionDesired
	}
	return false
}

func (x *RsvpSessionAttribute) GetLabelRecordingDesired() bool {
	if x != nil && x.LabelRecordingDesired != nil {
		return *x.LabelRecordingDesired
	}
	return false
}

func (x *RsvpSessionAttribute) GetSeStyleDesired() bool {
	if x != nil && x.SeStyleDesired != nil {
		return *x.SeStyleDesired
	}
	return false
}

func (x *RsvpSessionAttribute) GetBandwidthProtectionDesired() bool {
	if x != nil && x.BandwidthProtectionDesired != nil {
		return *x.BandwidthProtectionDesired
	}
	return false
}

func (x *RsvpSessionAttribute) GetNodeProtectionDesired() bool {
	if x != nil && x.NodeProtectionDesired != nil {
		return *x.NodeProtectionDesired
	}
	return false
}

func (x *RsvpSessionAttribute) GetResourceAffinities() *RsvpResourceAffinities {
	if x != nil {
		return x.ResourceAffinities
	}
	return nil
}

// This is an optional object. If included, the extended SESSION_ATTRIBUTE object is
// sent in the Path message containing
// the additional fields included in this object. This contains a set of three bitmaps
// using which further constraints can be
// set on the path calculated for the LSP based on the Admin Group settings in the IGP
// (e.g ISIS or OSPF interface).
type RsvpResourceAffinities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A 32-bit vector representing a set of attribute filters associated with a tunnel
	// any of which renders a link unacceptable.  A null set (all bits set to zero) doesn't
	// render the link unacceptable.  The most significant byte in the hex-string is the
	// farthest  to the left in the byte sequence.  Leading zero bytes in the configured
	// value may be omitted for brevity.
	// default = 0
	ExcludeAny *string `protobuf:"bytes,1,opt,name=exclude_any,json=excludeAny,proto3,oneof" json:"exclude_any,omitempty"`
	// A 32-bit vector representing a set of attribute filters associated with a tunnel
	// any of which renders a link acceptable. A null set (all bits set to zero) automatically
	// passes. The most significant byte in the hex-string is the farthest  to the left
	// in the byte sequence.  Leading zero bytes in the configured value may be omitted
	// for brevity.
	// default = 0
	IncludeAny *string `protobuf:"bytes,2,opt,name=include_any,json=includeAny,proto3,oneof" json:"include_any,omitempty"`
	// A 32-bit vector representing a set of attribute filters associated with a tunnel
	// all of which must be present for a link to be acceptable. A null set (all bits set
	// to zero) automatically passes. The most significant byte in the hex-string is the
	// farthest  to the left in the byte sequence.  Leading zero bytes in the configured
	// value may be omitted for brevity.
	// default = 0
	IncludeAll *string `protobuf:"bytes,3,opt,name=include_all,json=includeAll,proto3,oneof" json:"include_all,omitempty"`
}

func (x *RsvpResourceAffinities) Reset() {
	*x = RsvpResourceAffinities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpResourceAffinities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpResourceAffinities) ProtoMessage() {}

func (x *RsvpResourceAffinities) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpResourceAffinities.ProtoReflect.Descriptor instead.
func (*RsvpResourceAffinities) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{127}
}

func (x *RsvpResourceAffinities) GetExcludeAny() string {
	if x != nil && x.ExcludeAny != nil {
		return *x.ExcludeAny
	}
	return ""
}

func (x *RsvpResourceAffinities) GetIncludeAny() string {
	if x != nil && x.IncludeAny != nil {
		return *x.IncludeAny
	}
	return ""
}

func (x *RsvpResourceAffinities) GetIncludeAll() string {
	if x != nil && x.IncludeAll != nil {
		return *x.IncludeAll
	}
	return ""
}

// Configuration for RSVP-TE TSPEC object included in Path Messages. The usage of these
// parameters is defined in RFC2215.
type RsvpTspec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rate of the traffic to be carried in this LSP in bytes per second. This is part
	// of the Token Bucket specification defined for a traffic flow defined in RFC2215.
	// default = 0
	TokenBucketRate *float32 `protobuf:"fixed32,1,opt,name=token_bucket_rate,json=tokenBucketRate,proto3,oneof" json:"token_bucket_rate,omitempty"`
	// The depth of the token bucket in bytes used to specify the Token Bucket characteristics
	// of the traffic to be carried in the LSP. This is part of the Token Bucket specification
	// defined for a traffic flow defined in RFC2215.
	// default = 0
	TokenBucketSize *float32 `protobuf:"fixed32,2,opt,name=token_bucket_size,json=tokenBucketSize,proto3,oneof" json:"token_bucket_size,omitempty"`
	// The peak data rate of the traffic in bytes per second used to specify the Token Bucket
	// characteristics of the traffic  to be carried in the LSP. This is part of the Token
	// Bucket specification defined for a traffic flow defined in RFC2215.
	// default = 0
	PeakDataRate *float32 `protobuf:"fixed32,3,opt,name=peak_data_rate,json=peakDataRate,proto3,oneof" json:"peak_data_rate,omitempty"`
	// Specifies the minium length of packet frames that will be policed.
	// default = 0
	MinimumPolicedUnit *int32 `protobuf:"varint,4,opt,name=minimum_policed_unit,json=minimumPolicedUnit,proto3,oneof" json:"minimum_policed_unit,omitempty"`
	// Specifies the maximum length of packet frames that will be policed.
	// default = 0
	MaximumPolicedUnit *int32 `protobuf:"varint,5,opt,name=maximum_policed_unit,json=maximumPolicedUnit,proto3,oneof" json:"maximum_policed_unit,omitempty"`
}

func (x *RsvpTspec) Reset() {
	*x = RsvpTspec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpTspec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpTspec) ProtoMessage() {}

func (x *RsvpTspec) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpTspec.ProtoReflect.Descriptor instead.
func (*RsvpTspec) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{128}
}

func (x *RsvpTspec) GetTokenBucketRate() float32 {
	if x != nil && x.TokenBucketRate != nil {
		return *x.TokenBucketRate
	}
	return 0
}

func (x *RsvpTspec) GetTokenBucketSize() float32 {
	if x != nil && x.TokenBucketSize != nil {
		return *x.TokenBucketSize
	}
	return 0
}

func (x *RsvpTspec) GetPeakDataRate() float32 {
	if x != nil && x.PeakDataRate != nil {
		return *x.PeakDataRate
	}
	return 0
}

func (x *RsvpTspec) GetMinimumPolicedUnit() int32 {
	if x != nil && x.MinimumPolicedUnit != nil {
		return *x.MinimumPolicedUnit
	}
	return 0
}

func (x *RsvpTspec) GetMaximumPolicedUnit() int32 {
	if x != nil && x.MaximumPolicedUnit != nil {
		return *x.MaximumPolicedUnit
	}
	return 0
}

// Configuration for the optional RSVP-TE FAST_REROUTE object included in Path Messages
// as defined in RFC4090.
type RsvpFastReroute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the value of the Setup Priority field. This controls whether the backup
	// LSP should pre-empt existing LSP that is setup with certain Holding Priority. While
	// setting up a backup LSP, preemption of existing LSP can happen  if resource limitation
	// is encountered (e.g bandwidth availability).
	// default = 7
	SetupPriority *int32 `protobuf:"varint,1,opt,name=setup_priority,json=setupPriority,proto3,oneof" json:"setup_priority,omitempty"`
	// Specifies the value of the Holding Priority field. This controls whether a new LSP
	// being created with certain Setup Priority should pre-empt this LSP set up with this
	// Holding Priority. While setting up a new LSP, preemption of existing LSP can happen
	// if resource limitation is encountered (e.g bandwidth availability).
	// default = 7
	HoldingPriority *int32 `protobuf:"varint,2,opt,name=holding_priority,json=holdingPriority,proto3,oneof" json:"holding_priority,omitempty"`
	// Specifies the value of the Hop Limit field. This controls the maximum number of hops
	// the LSP should traverse to reach the  LSP end-point.
	// default = 3
	HopLimit *int32 `protobuf:"varint,3,opt,name=hop_limit,json=hopLimit,proto3,oneof" json:"hop_limit,omitempty"`
	// Specifies the value of the Bandwidth field as a 32-bit IEEE floating point integer,
	// in bytes per second, as desired for the LSP.
	// default = 0
	Bandwidth *float32 `protobuf:"fixed32,4,opt,name=bandwidth,proto3,oneof" json:"bandwidth,omitempty"`
	// A 32-bit vector representing a set of attribute filters associated with a tunnel
	// any of which renders a link unacceptable. A null set (all bits set to zero) doesn't
	// render the link unacceptable. The most significant byte in the hex-string is the
	// farthest  to the left in the byte sequence.  Leading zero bytes in the configured
	// value may be omitted for brevity.
	// default = 0
	ExcludeAny *string `protobuf:"bytes,5,opt,name=exclude_any,json=excludeAny,proto3,oneof" json:"exclude_any,omitempty"`
	// A 32-bit vector representing a set of attribute filters associated with a tunnel
	// any of which renders a link acceptable. A null set (all bits set to zero) automatically
	// passes. The most significant byte in the hex-string is the farthest  to the left
	// in the byte sequence.  Leading zero bytes in the configured value may be omitted
	// for brevity.
	// default = 0
	IncludeAny *string `protobuf:"bytes,6,opt,name=include_any,json=includeAny,proto3,oneof" json:"include_any,omitempty"`
	// A 32-bit vector representing a set of attribute filters associated with a tunnel
	// all of which must be present for a link to be acceptable. A null set (all bits set
	// to zero) automatically passes. The most significant byte in the hex-string is the
	// farthest  to the left in the byte sequence.  Leading zero bytes in the configured
	// value may be omitted for brevity.
	// default = 0
	IncludeAll *string `protobuf:"bytes,7,opt,name=include_all,json=includeAll,proto3,oneof" json:"include_all,omitempty"`
	// Requests protection via the one-to-one backup method.
	// default = False
	OneToOneBackupDesired *bool `protobuf:"varint,8,opt,name=one_to_one_backup_desired,json=oneToOneBackupDesired,proto3,oneof" json:"one_to_one_backup_desired,omitempty"`
	// Requests protection via the facility backup method.
	// default = False
	FacilityBackupDesired *bool `protobuf:"varint,9,opt,name=facility_backup_desired,json=facilityBackupDesired,proto3,oneof" json:"facility_backup_desired,omitempty"`
}

func (x *RsvpFastReroute) Reset() {
	*x = RsvpFastReroute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpFastReroute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpFastReroute) ProtoMessage() {}

func (x *RsvpFastReroute) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpFastReroute.ProtoReflect.Descriptor instead.
func (*RsvpFastReroute) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{129}
}

func (x *RsvpFastReroute) GetSetupPriority() int32 {
	if x != nil && x.SetupPriority != nil {
		return *x.SetupPriority
	}
	return 0
}

func (x *RsvpFastReroute) GetHoldingPriority() int32 {
	if x != nil && x.HoldingPriority != nil {
		return *x.HoldingPriority
	}
	return 0
}

func (x *RsvpFastReroute) GetHopLimit() int32 {
	if x != nil && x.HopLimit != nil {
		return *x.HopLimit
	}
	return 0
}

func (x *RsvpFastReroute) GetBandwidth() float32 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

func (x *RsvpFastReroute) GetExcludeAny() string {
	if x != nil && x.ExcludeAny != nil {
		return *x.ExcludeAny
	}
	return ""
}

func (x *RsvpFastReroute) GetIncludeAny() string {
	if x != nil && x.IncludeAny != nil {
		return *x.IncludeAny
	}
	return ""
}

func (x *RsvpFastReroute) GetIncludeAll() string {
	if x != nil && x.IncludeAll != nil {
		return *x.IncludeAll
	}
	return ""
}

func (x *RsvpFastReroute) GetOneToOneBackupDesired() bool {
	if x != nil && x.OneToOneBackupDesired != nil {
		return *x.OneToOneBackupDesired
	}
	return false
}

func (x *RsvpFastReroute) GetFacilityBackupDesired() bool {
	if x != nil && x.FacilityBackupDesired != nil {
		return *x.FacilityBackupDesired
	}
	return false
}

// Configuration for the optional RSVP-TE explicit route object(ERO) object included
// in Path Messages.
type RsvpEro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Determines whether the IP address of the RSVP neighbor should be added as an ERO
	// sub-object. If it is to be included, it can be included as a Loose hop or as a Strict
	// hop.
	// default = PrependNeighborIp.Enum.prepend_loose
	PrependNeighborIp *RsvpEro_PrependNeighborIp_Enum `protobuf:"varint,1,opt,name=prepend_neighbor_ip,json=prependNeighborIp,proto3,enum=otg.RsvpEro_PrependNeighborIp_Enum,oneof" json:"prepend_neighbor_ip,omitempty"`
	// If prepend_egress_ip is set to one of 'prepend_loose' or 'prepend_strict', then set
	// this value as the prefix length of the ERO sub-object containing egress IP address.
	//
	// default = 32
	PrefixLength *int32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
	// Array of sub-objects to be included in the ERO. These sub-objects contain the intermediate
	// hops to be traversed by the LSP while being forwarded towards the egress endpoint.
	// These sub-objects are included after the optional sub-object containing IP address
	// of egress endpoint of the LSP (when present).
	Subobjects []*RsvpEroSubobject `protobuf:"bytes,3,rep,name=subobjects,proto3" json:"subobjects,omitempty"`
}

func (x *RsvpEro) Reset() {
	*x = RsvpEro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpEro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpEro) ProtoMessage() {}

func (x *RsvpEro) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpEro.ProtoReflect.Descriptor instead.
func (*RsvpEro) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{130}
}

func (x *RsvpEro) GetPrependNeighborIp() RsvpEro_PrependNeighborIp_Enum {
	if x != nil && x.PrependNeighborIp != nil {
		return *x.PrependNeighborIp
	}
	return RsvpEro_PrependNeighborIp_unspecified
}

func (x *RsvpEro) GetPrefixLength() int32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *RsvpEro) GetSubobjects() []*RsvpEroSubobject {
	if x != nil {
		return x.Subobjects
	}
	return nil
}

// Configuration for the ERO sub-object.
type RsvpEroSubobject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the ERO sub-object, one of IPv4 Address or AS Number.
	// default = Type.Enum.ipv4
	Type *RsvpEroSubobject_Type_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=otg.RsvpEroSubobject_Type_Enum,oneof" json:"type,omitempty"`
	// IPv4 address that this LSP should traverse through. This field is applicable only
	// if the value of 'type' is set to 'ipv4'.
	// default = 0.0.0.0
	Ipv4Address *string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3,oneof" json:"ipv4_address,omitempty"`
	// Prefix length for the IPv4 address in the ERO sub-object. This field is applicable
	// only if the value of 'type' is set to 'ipv4'.
	// default = 32
	PrefixLength *int32 `protobuf:"varint,3,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
	// Autonomous System number to be set in the ERO sub-object that this LSP should traverse
	// through. This field is applicable only if the value of 'type' is set to 'as_number'.
	// Note that as per RFC3209, 4-byte AS encoding is not supported.
	// default = 0
	AsNumber *int32 `protobuf:"varint,4,opt,name=as_number,json=asNumber,proto3,oneof" json:"as_number,omitempty"`
	// The hop type of the ERO sub-object, one of Strict or Loose.
	// default = HopType.Enum.loose
	HopType *RsvpEroSubobject_HopType_Enum `protobuf:"varint,5,opt,name=hop_type,json=hopType,proto3,enum=otg.RsvpEroSubobject_HopType_Enum,oneof" json:"hop_type,omitempty"`
}

func (x *RsvpEroSubobject) Reset() {
	*x = RsvpEroSubobject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpEroSubobject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpEroSubobject) ProtoMessage() {}

func (x *RsvpEroSubobject) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpEroSubobject.ProtoReflect.Descriptor instead.
func (*RsvpEroSubobject) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{131}
}

func (x *RsvpEroSubobject) GetType() RsvpEroSubobject_Type_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RsvpEroSubobject_Type_unspecified
}

func (x *RsvpEroSubobject) GetIpv4Address() string {
	if x != nil && x.Ipv4Address != nil {
		return *x.Ipv4Address
	}
	return ""
}

func (x *RsvpEroSubobject) GetPrefixLength() int32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *RsvpEroSubobject) GetAsNumber() int32 {
	if x != nil && x.AsNumber != nil {
		return *x.AsNumber
	}
	return 0
}

func (x *RsvpEroSubobject) GetHopType() RsvpEroSubobject_HopType_Enum {
	if x != nil && x.HopType != nil {
		return *x.HopType
	}
	return RsvpEroSubobject_HopType_unspecified
}

// A high level data plane traffic flow.
type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The transmit and receive endpoints.
	// required = true
	TxRx *FlowTxRx `protobuf:"bytes,1,opt,name=tx_rx,json=txRx,proto3" json:"tx_rx,omitempty"`
	// The header is a list of traffic protocol headers.
	//
	// The order of traffic protocol headers assigned to the list is the
	// order they will appear on the wire.
	//
	// In the case of an empty list the keyword/value of minItems: 1
	// indicates that an implementation MUST provide at least one
	// Flow.Header object.
	//
	// The default value for the Flow.Header choice property is ethernet
	// which will result in an implementation by default providing at least
	// one ethernet packet header.
	Packet []*FlowHeader `protobuf:"bytes,2,rep,name=packet,proto3" json:"packet,omitempty"`
	// The size of the packets.
	Size *FlowSize `protobuf:"bytes,3,opt,name=size,proto3,oneof" json:"size,omitempty"`
	// The transmit rate of the packets.
	Rate *FlowRate `protobuf:"bytes,4,opt,name=rate,proto3,oneof" json:"rate,omitempty"`
	// The transmit duration of the packets.
	Duration *FlowDuration `protobuf:"bytes,5,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	// Flow metrics.
	Metrics *FlowMetrics `protobuf:"bytes,6,opt,name=metrics,proto3,oneof" json:"metrics,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{132}
}

func (x *Flow) GetTxRx() *FlowTxRx {
	if x != nil {
		return x.TxRx
	}
	return nil
}

func (x *Flow) GetPacket() []*FlowHeader {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *Flow) GetSize() *FlowSize {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Flow) GetRate() *FlowRate {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *Flow) GetDuration() *FlowDuration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Flow) GetMetrics() *FlowMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Flow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A container for different types of transmit and receive
// endpoint containers.
type FlowTxRx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of transmit and receive container used by the flow.
	// default = Choice.Enum.port
	Choice *FlowTxRx_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.FlowTxRx_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Port *FlowPort `protobuf:"bytes,2,opt,name=port,proto3,oneof" json:"port,omitempty"`
	// Description missing in models
	Device *FlowRouter `protobuf:"bytes,3,opt,name=device,proto3,oneof" json:"device,omitempty"`
}

func (x *FlowTxRx) Reset() {
	*x = FlowTxRx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowTxRx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTxRx) ProtoMessage() {}

func (x *FlowTxRx) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTxRx.ProtoReflect.Descriptor instead.
func (*FlowTxRx) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{133}
}

func (x *FlowTxRx) GetChoice() FlowTxRx_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FlowTxRx_Choice_unspecified
}

func (x *FlowTxRx) GetPort() *FlowPort {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *FlowTxRx) GetDevice() *FlowRouter {
	if x != nil {
		return x.Device
	}
	return nil
}

// A container for a transmit port and 0..n intended receive ports.
// When assigning this container to a flow the flows's
// packet headers will not be populated with any address resolution
// information such as source and/or destination addresses.
// For example Flow.Ethernet dst mac address values will be defaulted to 0.
// For full control over the Flow.properties.packet header contents use this
// container.
type FlowPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique name of a port that is the transmit port.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	// - /components/schemas/Lag/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	// - /components/schemas/Lag/properties/name
	//
	// required = true
	TxName string `protobuf:"bytes,1,opt,name=tx_name,json=txName,proto3" json:"tx_name,omitempty"`
	// The unique name of a port that is the intended receive port.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	// - /components/schemas/Lag/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	// - /components/schemas/Lag/properties/name
	//
	RxName *string `protobuf:"bytes,2,opt,name=rx_name,json=rxName,proto3,oneof" json:"rx_name,omitempty"`
}

func (x *FlowPort) Reset() {
	*x = FlowPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPort) ProtoMessage() {}

func (x *FlowPort) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPort.ProtoReflect.Descriptor instead.
func (*FlowPort) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{134}
}

func (x *FlowPort) GetTxName() string {
	if x != nil {
		return x.TxName
	}
	return ""
}

func (x *FlowPort) GetRxName() string {
	if x != nil && x.RxName != nil {
		return *x.RxName
	}
	return ""
}

// A container for declaring a map of 1..n transmit devices to 1..n receive devices.
// This allows for a single flow to have  different tx to rx device flows such as a
// single one to one map or a  many to many map.
type FlowRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Determines the mapping of tx_names to rx_names.
	//
	// The mesh mode creates traffic between each value in tx_names to
	// every value in rx_names except in the case where the individual
	// tx_names value is equal to rx_names value which will be ignored.
	// Identical values in tx_names or rx_names MUST raise an error.
	//
	// The one_to_one mode creates traffic between each value pair in
	// of tx_names and rx_names by index.
	// The length of tx_names and rx_name MUST be the same.
	// Identical values in tx_names or rx_names MUST raise an error.
	// default = Mode.Enum.mesh
	Mode *FlowRouter_Mode_Enum `protobuf:"varint,1,opt,name=mode,proto3,enum=otg.FlowRouter_Mode_Enum,oneof" json:"mode,omitempty"`
	// TBD
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv6/properties/name
	// - /components/schemas/Bgp.V4RouteRange/properties/name
	// - /components/schemas/Bgp.V6RouteRange/properties/name
	// - /components/schemas/Bgp.CMacIpRange/properties/name
	// - /components/schemas/Rsvp.LspIpv4Interface.P2PIngressIpv4Lsp/properties/name
	// - /components/schemas/Isis.V4RouteRange/properties/name
	// - /components/schemas/Isis.V6RouteRange/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv6/properties/name
	// - /components/schemas/Bgp.V4RouteRange/properties/name
	// - /components/schemas/Bgp.V6RouteRange/properties/name
	// - /components/schemas/Bgp.CMacIpRange/properties/name
	// - /components/schemas/Rsvp.LspIpv4Interface.P2PIngressIpv4Lsp/properties/name
	// - /components/schemas/Isis.V4RouteRange/properties/name
	// - /components/schemas/Isis.V6RouteRange/properties/name
	//
	TxNames []string `protobuf:"bytes,2,rep,name=tx_names,json=txNames,proto3" json:"tx_names,omitempty"`
	// TBD
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv6/properties/name
	// - /components/schemas/Bgp.V4RouteRange/properties/name
	// - /components/schemas/Bgp.V6RouteRange/properties/name
	// - /components/schemas/Bgp.CMacIpRange/properties/name
	// - /components/schemas/Rsvp.LspIpv4Interface.P2PEgressIpv4Lsp/properties/name
	// - /components/schemas/Isis.V4RouteRange/properties/name
	// - /components/schemas/Isis.V6RouteRange/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv6/properties/name
	// - /components/schemas/Bgp.V4RouteRange/properties/name
	// - /components/schemas/Bgp.V6RouteRange/properties/name
	// - /components/schemas/Bgp.CMacIpRange/properties/name
	// - /components/schemas/Rsvp.LspIpv4Interface.P2PEgressIpv4Lsp/properties/name
	// - /components/schemas/Isis.V4RouteRange/properties/name
	// - /components/schemas/Isis.V6RouteRange/properties/name
	//
	RxNames []string `protobuf:"bytes,3,rep,name=rx_names,json=rxNames,proto3" json:"rx_names,omitempty"`
}

func (x *FlowRouter) Reset() {
	*x = FlowRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRouter) ProtoMessage() {}

func (x *FlowRouter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRouter.ProtoReflect.Descriptor instead.
func (*FlowRouter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{135}
}

func (x *FlowRouter) GetMode() FlowRouter_Mode_Enum {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return FlowRouter_Mode_unspecified
}

func (x *FlowRouter) GetTxNames() []string {
	if x != nil {
		return x.TxNames
	}
	return nil
}

func (x *FlowRouter) GetRxNames() []string {
	if x != nil {
		return x.RxNames
	}
	return nil
}

// Configuration for all traffic packet headers
type FlowHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The available types of flow headers. If one is not provided the
	// default ethernet packet header MUST be provided.
	// default = Choice.Enum.ethernet
	Choice *FlowHeader_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.FlowHeader_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Custom *FlowCustom `protobuf:"bytes,2,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
	// Description missing in models
	Ethernet *FlowEthernet `protobuf:"bytes,3,opt,name=ethernet,proto3,oneof" json:"ethernet,omitempty"`
	// Description missing in models
	Vlan *FlowVlan `protobuf:"bytes,4,opt,name=vlan,proto3,oneof" json:"vlan,omitempty"`
	// Description missing in models
	Vxlan *FlowVxlan `protobuf:"bytes,5,opt,name=vxlan,proto3,oneof" json:"vxlan,omitempty"`
	// Description missing in models
	Ipv4 *FlowIpv4 `protobuf:"bytes,6,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
	// Description missing in models
	Ipv6 *FlowIpv6 `protobuf:"bytes,7,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
	// Description missing in models
	Pfcpause *FlowPfcPause `protobuf:"bytes,8,opt,name=pfcpause,proto3,oneof" json:"pfcpause,omitempty"`
	// Description missing in models
	Ethernetpause *FlowEthernetPause `protobuf:"bytes,9,opt,name=ethernetpause,proto3,oneof" json:"ethernetpause,omitempty"`
	// Description missing in models
	Tcp *FlowTcp `protobuf:"bytes,10,opt,name=tcp,proto3,oneof" json:"tcp,omitempty"`
	// Description missing in models
	Udp *FlowUdp `protobuf:"bytes,11,opt,name=udp,proto3,oneof" json:"udp,omitempty"`
	// Description missing in models
	Gre *FlowGre `protobuf:"bytes,12,opt,name=gre,proto3,oneof" json:"gre,omitempty"`
	// Description missing in models
	Gtpv1 *FlowGtpv1 `protobuf:"bytes,13,opt,name=gtpv1,proto3,oneof" json:"gtpv1,omitempty"`
	// Description missing in models
	Gtpv2 *FlowGtpv2 `protobuf:"bytes,14,opt,name=gtpv2,proto3,oneof" json:"gtpv2,omitempty"`
	// Description missing in models
	Arp *FlowArp `protobuf:"bytes,15,opt,name=arp,proto3,oneof" json:"arp,omitempty"`
	// Description missing in models
	Icmp *FlowIcmp `protobuf:"bytes,16,opt,name=icmp,proto3,oneof" json:"icmp,omitempty"`
	// Description missing in models
	Icmpv6 *FlowIcmpv6 `protobuf:"bytes,17,opt,name=icmpv6,proto3,oneof" json:"icmpv6,omitempty"`
	// Description missing in models
	Ppp *FlowPpp `protobuf:"bytes,18,opt,name=ppp,proto3,oneof" json:"ppp,omitempty"`
	// Description missing in models
	Igmpv1 *FlowIgmpv1 `protobuf:"bytes,19,opt,name=igmpv1,proto3,oneof" json:"igmpv1,omitempty"`
	// Description missing in models
	Mpls *FlowMpls `protobuf:"bytes,20,opt,name=mpls,proto3,oneof" json:"mpls,omitempty"`
}

func (x *FlowHeader) Reset() {
	*x = FlowHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowHeader) ProtoMessage() {}

func (x *FlowHeader) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowHeader.ProtoReflect.Descriptor instead.
func (*FlowHeader) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{136}
}

func (x *FlowHeader) GetChoice() FlowHeader_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FlowHeader_Choice_unspecified
}

func (x *FlowHeader) GetCustom() *FlowCustom {
	if x != nil {
		return x.Custom
	}
	return nil
}

func (x *FlowHeader) GetEthernet() *FlowEthernet {
	if x != nil {
		return x.Ethernet
	}
	return nil
}

func (x *FlowHeader) GetVlan() *FlowVlan {
	if x != nil {
		return x.Vlan
	}
	return nil
}

func (x *FlowHeader) GetVxlan() *FlowVxlan {
	if x != nil {
		return x.Vxlan
	}
	return nil
}

func (x *FlowHeader) GetIpv4() *FlowIpv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *FlowHeader) GetIpv6() *FlowIpv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

func (x *FlowHeader) GetPfcpause() *FlowPfcPause {
	if x != nil {
		return x.Pfcpause
	}
	return nil
}

func (x *FlowHeader) GetEthernetpause() *FlowEthernetPause {
	if x != nil {
		return x.Ethernetpause
	}
	return nil
}

func (x *FlowHeader) GetTcp() *FlowTcp {
	if x != nil {
		return x.Tcp
	}
	return nil
}

func (x *FlowHeader) GetUdp() *FlowUdp {
	if x != nil {
		return x.Udp
	}
	return nil
}

func (x *FlowHeader) GetGre() *FlowGre {
	if x != nil {
		return x.Gre
	}
	return nil
}

func (x *FlowHeader) GetGtpv1() *FlowGtpv1 {
	if x != nil {
		return x.Gtpv1
	}
	return nil
}

func (x *FlowHeader) GetGtpv2() *FlowGtpv2 {
	if x != nil {
		return x.Gtpv2
	}
	return nil
}

func (x *FlowHeader) GetArp() *FlowArp {
	if x != nil {
		return x.Arp
	}
	return nil
}

func (x *FlowHeader) GetIcmp() *FlowIcmp {
	if x != nil {
		return x.Icmp
	}
	return nil
}

func (x *FlowHeader) GetIcmpv6() *FlowIcmpv6 {
	if x != nil {
		return x.Icmpv6
	}
	return nil
}

func (x *FlowHeader) GetPpp() *FlowPpp {
	if x != nil {
		return x.Ppp
	}
	return nil
}

func (x *FlowHeader) GetIgmpv1() *FlowIgmpv1 {
	if x != nil {
		return x.Igmpv1
	}
	return nil
}

func (x *FlowHeader) GetMpls() *FlowMpls {
	if x != nil {
		return x.Mpls
	}
	return nil
}

// Custom packet header
type FlowCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A custom packet header defined as a string of hex bytes. The string MUST contain
	// sequence of valid hex bytes. Spaces or colons can be part of the bytes but will be
	// discarded. This packet header can be used in multiple places in the packet.
	// required = true
	Bytes string `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *FlowCustom) Reset() {
	*x = FlowCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCustom) ProtoMessage() {}

func (x *FlowCustom) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCustom.ProtoReflect.Descriptor instead.
func (*FlowCustom) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{137}
}

func (x *FlowCustom) GetBytes() string {
	if x != nil {
		return x.Bytes
	}
	return ""
}

// Ethernet packet header
type FlowEthernet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Dst *PatternFlowEthernetDst `protobuf:"bytes,1,opt,name=dst,proto3,oneof" json:"dst,omitempty"`
	// Description missing in models
	Src *PatternFlowEthernetSrc `protobuf:"bytes,2,opt,name=src,proto3,oneof" json:"src,omitempty"`
	// Description missing in models
	EtherType *PatternFlowEthernetEtherType `protobuf:"bytes,3,opt,name=ether_type,json=etherType,proto3,oneof" json:"ether_type,omitempty"`
	// Description missing in models
	PfcQueue *PatternFlowEthernetPfcQueue `protobuf:"bytes,4,opt,name=pfc_queue,json=pfcQueue,proto3,oneof" json:"pfc_queue,omitempty"`
}

func (x *FlowEthernet) Reset() {
	*x = FlowEthernet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowEthernet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowEthernet) ProtoMessage() {}

func (x *FlowEthernet) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowEthernet.ProtoReflect.Descriptor instead.
func (*FlowEthernet) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{138}
}

func (x *FlowEthernet) GetDst() *PatternFlowEthernetDst {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *FlowEthernet) GetSrc() *PatternFlowEthernetSrc {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *FlowEthernet) GetEtherType() *PatternFlowEthernetEtherType {
	if x != nil {
		return x.EtherType
	}
	return nil
}

func (x *FlowEthernet) GetPfcQueue() *PatternFlowEthernetPfcQueue {
	if x != nil {
		return x.PfcQueue
	}
	return nil
}

// VLAN packet header
type FlowVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Priority *PatternFlowVlanPriority `protobuf:"bytes,1,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	// Description missing in models
	Cfi *PatternFlowVlanCfi `protobuf:"bytes,2,opt,name=cfi,proto3,oneof" json:"cfi,omitempty"`
	// Description missing in models
	Id *PatternFlowVlanId `protobuf:"bytes,3,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Description missing in models
	Tpid *PatternFlowVlanTpid `protobuf:"bytes,4,opt,name=tpid,proto3,oneof" json:"tpid,omitempty"`
}

func (x *FlowVlan) Reset() {
	*x = FlowVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowVlan) ProtoMessage() {}

func (x *FlowVlan) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowVlan.ProtoReflect.Descriptor instead.
func (*FlowVlan) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{139}
}

func (x *FlowVlan) GetPriority() *PatternFlowVlanPriority {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *FlowVlan) GetCfi() *PatternFlowVlanCfi {
	if x != nil {
		return x.Cfi
	}
	return nil
}

func (x *FlowVlan) GetId() *PatternFlowVlanId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FlowVlan) GetTpid() *PatternFlowVlanTpid {
	if x != nil {
		return x.Tpid
	}
	return nil
}

// VXLAN packet header
type FlowVxlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Flags *PatternFlowVxlanFlags `protobuf:"bytes,1,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// Description missing in models
	Reserved0 *PatternFlowVxlanReserved0 `protobuf:"bytes,2,opt,name=reserved0,proto3,oneof" json:"reserved0,omitempty"`
	// Description missing in models
	Vni *PatternFlowVxlanVni `protobuf:"bytes,3,opt,name=vni,proto3,oneof" json:"vni,omitempty"`
	// Description missing in models
	Reserved1 *PatternFlowVxlanReserved1 `protobuf:"bytes,4,opt,name=reserved1,proto3,oneof" json:"reserved1,omitempty"`
}

func (x *FlowVxlan) Reset() {
	*x = FlowVxlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowVxlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowVxlan) ProtoMessage() {}

func (x *FlowVxlan) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowVxlan.ProtoReflect.Descriptor instead.
func (*FlowVxlan) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{140}
}

func (x *FlowVxlan) GetFlags() *PatternFlowVxlanFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *FlowVxlan) GetReserved0() *PatternFlowVxlanReserved0 {
	if x != nil {
		return x.Reserved0
	}
	return nil
}

func (x *FlowVxlan) GetVni() *PatternFlowVxlanVni {
	if x != nil {
		return x.Vni
	}
	return nil
}

func (x *FlowVxlan) GetReserved1() *PatternFlowVxlanReserved1 {
	if x != nil {
		return x.Reserved1
	}
	return nil
}

// IPv4 packet header
type FlowIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Version *PatternFlowIpv4Version `protobuf:"bytes,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Description missing in models
	HeaderLength *PatternFlowIpv4HeaderLength `protobuf:"bytes,2,opt,name=header_length,json=headerLength,proto3,oneof" json:"header_length,omitempty"`
	// Description missing in models
	Priority *FlowIpv4Priority `protobuf:"bytes,3,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	// Description missing in models
	TotalLength *PatternFlowIpv4TotalLength `protobuf:"bytes,4,opt,name=total_length,json=totalLength,proto3,oneof" json:"total_length,omitempty"`
	// Description missing in models
	Identification *PatternFlowIpv4Identification `protobuf:"bytes,5,opt,name=identification,proto3,oneof" json:"identification,omitempty"`
	// Description missing in models
	Reserved *PatternFlowIpv4Reserved `protobuf:"bytes,6,opt,name=reserved,proto3,oneof" json:"reserved,omitempty"`
	// Description missing in models
	DontFragment *PatternFlowIpv4DontFragment `protobuf:"bytes,7,opt,name=dont_fragment,json=dontFragment,proto3,oneof" json:"dont_fragment,omitempty"`
	// Description missing in models
	MoreFragments *PatternFlowIpv4MoreFragments `protobuf:"bytes,8,opt,name=more_fragments,json=moreFragments,proto3,oneof" json:"more_fragments,omitempty"`
	// Description missing in models
	FragmentOffset *PatternFlowIpv4FragmentOffset `protobuf:"bytes,9,opt,name=fragment_offset,json=fragmentOffset,proto3,oneof" json:"fragment_offset,omitempty"`
	// Description missing in models
	TimeToLive *PatternFlowIpv4TimeToLive `protobuf:"bytes,10,opt,name=time_to_live,json=timeToLive,proto3,oneof" json:"time_to_live,omitempty"`
	// Description missing in models
	Protocol *PatternFlowIpv4Protocol `protobuf:"bytes,11,opt,name=protocol,proto3,oneof" json:"protocol,omitempty"`
	// Description missing in models
	HeaderChecksum *PatternFlowIpv4HeaderChecksum `protobuf:"bytes,12,opt,name=header_checksum,json=headerChecksum,proto3,oneof" json:"header_checksum,omitempty"`
	// Description missing in models
	Src *PatternFlowIpv4Src `protobuf:"bytes,13,opt,name=src,proto3,oneof" json:"src,omitempty"`
	// Description missing in models
	Dst *PatternFlowIpv4Dst `protobuf:"bytes,14,opt,name=dst,proto3,oneof" json:"dst,omitempty"`
}

func (x *FlowIpv4) Reset() {
	*x = FlowIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIpv4) ProtoMessage() {}

func (x *FlowIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIpv4.ProtoReflect.Descriptor instead.
func (*FlowIpv4) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{141}
}

func (x *FlowIpv4) GetVersion() *PatternFlowIpv4Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *FlowIpv4) GetHeaderLength() *PatternFlowIpv4HeaderLength {
	if x != nil {
		return x.HeaderLength
	}
	return nil
}

func (x *FlowIpv4) GetPriority() *FlowIpv4Priority {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *FlowIpv4) GetTotalLength() *PatternFlowIpv4TotalLength {
	if x != nil {
		return x.TotalLength
	}
	return nil
}

func (x *FlowIpv4) GetIdentification() *PatternFlowIpv4Identification {
	if x != nil {
		return x.Identification
	}
	return nil
}

func (x *FlowIpv4) GetReserved() *PatternFlowIpv4Reserved {
	if x != nil {
		return x.Reserved
	}
	return nil
}

func (x *FlowIpv4) GetDontFragment() *PatternFlowIpv4DontFragment {
	if x != nil {
		return x.DontFragment
	}
	return nil
}

func (x *FlowIpv4) GetMoreFragments() *PatternFlowIpv4MoreFragments {
	if x != nil {
		return x.MoreFragments
	}
	return nil
}

func (x *FlowIpv4) GetFragmentOffset() *PatternFlowIpv4FragmentOffset {
	if x != nil {
		return x.FragmentOffset
	}
	return nil
}

func (x *FlowIpv4) GetTimeToLive() *PatternFlowIpv4TimeToLive {
	if x != nil {
		return x.TimeToLive
	}
	return nil
}

func (x *FlowIpv4) GetProtocol() *PatternFlowIpv4Protocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *FlowIpv4) GetHeaderChecksum() *PatternFlowIpv4HeaderChecksum {
	if x != nil {
		return x.HeaderChecksum
	}
	return nil
}

func (x *FlowIpv4) GetSrc() *PatternFlowIpv4Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *FlowIpv4) GetDst() *PatternFlowIpv4Dst {
	if x != nil {
		return x.Dst
	}
	return nil
}

// A container for ipv4 raw, tos, dscp ip priorities.
type FlowIpv4Priority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.dscp
	Choice *FlowIpv4Priority_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.FlowIpv4Priority_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Raw *PatternFlowIpv4PriorityRaw `protobuf:"bytes,2,opt,name=raw,proto3,oneof" json:"raw,omitempty"`
	// Description missing in models
	Tos *FlowIpv4Tos `protobuf:"bytes,3,opt,name=tos,proto3,oneof" json:"tos,omitempty"`
	// Description missing in models
	Dscp *FlowIpv4Dscp `protobuf:"bytes,4,opt,name=dscp,proto3,oneof" json:"dscp,omitempty"`
}

func (x *FlowIpv4Priority) Reset() {
	*x = FlowIpv4Priority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIpv4Priority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIpv4Priority) ProtoMessage() {}

func (x *FlowIpv4Priority) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIpv4Priority.ProtoReflect.Descriptor instead.
func (*FlowIpv4Priority) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{142}
}

func (x *FlowIpv4Priority) GetChoice() FlowIpv4Priority_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FlowIpv4Priority_Choice_unspecified
}

func (x *FlowIpv4Priority) GetRaw() *PatternFlowIpv4PriorityRaw {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *FlowIpv4Priority) GetTos() *FlowIpv4Tos {
	if x != nil {
		return x.Tos
	}
	return nil
}

func (x *FlowIpv4Priority) GetDscp() *FlowIpv4Dscp {
	if x != nil {
		return x.Dscp
	}
	return nil
}

// Differentiated services code point (DSCP) packet field.
type FlowIpv4Dscp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Phb *PatternFlowIpv4DscpPhb `protobuf:"bytes,1,opt,name=phb,proto3,oneof" json:"phb,omitempty"`
	// Description missing in models
	Ecn *PatternFlowIpv4DscpEcn `protobuf:"bytes,2,opt,name=ecn,proto3,oneof" json:"ecn,omitempty"`
}

func (x *FlowIpv4Dscp) Reset() {
	*x = FlowIpv4Dscp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIpv4Dscp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIpv4Dscp) ProtoMessage() {}

func (x *FlowIpv4Dscp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIpv4Dscp.ProtoReflect.Descriptor instead.
func (*FlowIpv4Dscp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{143}
}

func (x *FlowIpv4Dscp) GetPhb() *PatternFlowIpv4DscpPhb {
	if x != nil {
		return x.Phb
	}
	return nil
}

func (x *FlowIpv4Dscp) GetEcn() *PatternFlowIpv4DscpEcn {
	if x != nil {
		return x.Ecn
	}
	return nil
}

// Type of service (TOS) packet field.
type FlowIpv4Tos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Precedence *PatternFlowIpv4TosPrecedence `protobuf:"bytes,1,opt,name=precedence,proto3,oneof" json:"precedence,omitempty"`
	// Description missing in models
	Delay *PatternFlowIpv4TosDelay `protobuf:"bytes,2,opt,name=delay,proto3,oneof" json:"delay,omitempty"`
	// Description missing in models
	Throughput *PatternFlowIpv4TosThroughput `protobuf:"bytes,3,opt,name=throughput,proto3,oneof" json:"throughput,omitempty"`
	// Description missing in models
	Reliability *PatternFlowIpv4TosReliability `protobuf:"bytes,4,opt,name=reliability,proto3,oneof" json:"reliability,omitempty"`
	// Description missing in models
	Monetary *PatternFlowIpv4TosMonetary `protobuf:"bytes,5,opt,name=monetary,proto3,oneof" json:"monetary,omitempty"`
	// Description missing in models
	Unused *PatternFlowIpv4TosUnused `protobuf:"bytes,6,opt,name=unused,proto3,oneof" json:"unused,omitempty"`
}

func (x *FlowIpv4Tos) Reset() {
	*x = FlowIpv4Tos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIpv4Tos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIpv4Tos) ProtoMessage() {}

func (x *FlowIpv4Tos) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIpv4Tos.ProtoReflect.Descriptor instead.
func (*FlowIpv4Tos) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{144}
}

func (x *FlowIpv4Tos) GetPrecedence() *PatternFlowIpv4TosPrecedence {
	if x != nil {
		return x.Precedence
	}
	return nil
}

func (x *FlowIpv4Tos) GetDelay() *PatternFlowIpv4TosDelay {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *FlowIpv4Tos) GetThroughput() *PatternFlowIpv4TosThroughput {
	if x != nil {
		return x.Throughput
	}
	return nil
}

func (x *FlowIpv4Tos) GetReliability() *PatternFlowIpv4TosReliability {
	if x != nil {
		return x.Reliability
	}
	return nil
}

func (x *FlowIpv4Tos) GetMonetary() *PatternFlowIpv4TosMonetary {
	if x != nil {
		return x.Monetary
	}
	return nil
}

func (x *FlowIpv4Tos) GetUnused() *PatternFlowIpv4TosUnused {
	if x != nil {
		return x.Unused
	}
	return nil
}

// IPv6 packet header
type FlowIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Version *PatternFlowIpv6Version `protobuf:"bytes,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Description missing in models
	TrafficClass *PatternFlowIpv6TrafficClass `protobuf:"bytes,2,opt,name=traffic_class,json=trafficClass,proto3,oneof" json:"traffic_class,omitempty"`
	// Description missing in models
	FlowLabel *PatternFlowIpv6FlowLabel `protobuf:"bytes,3,opt,name=flow_label,json=flowLabel,proto3,oneof" json:"flow_label,omitempty"`
	// Description missing in models
	PayloadLength *PatternFlowIpv6PayloadLength `protobuf:"bytes,4,opt,name=payload_length,json=payloadLength,proto3,oneof" json:"payload_length,omitempty"`
	// Description missing in models
	NextHeader *PatternFlowIpv6NextHeader `protobuf:"bytes,5,opt,name=next_header,json=nextHeader,proto3,oneof" json:"next_header,omitempty"`
	// Description missing in models
	HopLimit *PatternFlowIpv6HopLimit `protobuf:"bytes,6,opt,name=hop_limit,json=hopLimit,proto3,oneof" json:"hop_limit,omitempty"`
	// Description missing in models
	Src *PatternFlowIpv6Src `protobuf:"bytes,7,opt,name=src,proto3,oneof" json:"src,omitempty"`
	// Description missing in models
	Dst *PatternFlowIpv6Dst `protobuf:"bytes,8,opt,name=dst,proto3,oneof" json:"dst,omitempty"`
}

func (x *FlowIpv6) Reset() {
	*x = FlowIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIpv6) ProtoMessage() {}

func (x *FlowIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIpv6.ProtoReflect.Descriptor instead.
func (*FlowIpv6) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{145}
}

func (x *FlowIpv6) GetVersion() *PatternFlowIpv6Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *FlowIpv6) GetTrafficClass() *PatternFlowIpv6TrafficClass {
	if x != nil {
		return x.TrafficClass
	}
	return nil
}

func (x *FlowIpv6) GetFlowLabel() *PatternFlowIpv6FlowLabel {
	if x != nil {
		return x.FlowLabel
	}
	return nil
}

func (x *FlowIpv6) GetPayloadLength() *PatternFlowIpv6PayloadLength {
	if x != nil {
		return x.PayloadLength
	}
	return nil
}

func (x *FlowIpv6) GetNextHeader() *PatternFlowIpv6NextHeader {
	if x != nil {
		return x.NextHeader
	}
	return nil
}

func (x *FlowIpv6) GetHopLimit() *PatternFlowIpv6HopLimit {
	if x != nil {
		return x.HopLimit
	}
	return nil
}

func (x *FlowIpv6) GetSrc() *PatternFlowIpv6Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *FlowIpv6) GetDst() *PatternFlowIpv6Dst {
	if x != nil {
		return x.Dst
	}
	return nil
}

// IEEE 802.1Qbb PFC Pause packet header.
type FlowPfcPause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Dst *PatternFlowPfcPauseDst `protobuf:"bytes,1,opt,name=dst,proto3,oneof" json:"dst,omitempty"`
	// Description missing in models
	Src *PatternFlowPfcPauseSrc `protobuf:"bytes,2,opt,name=src,proto3,oneof" json:"src,omitempty"`
	// Description missing in models
	EtherType *PatternFlowPfcPauseEtherType `protobuf:"bytes,3,opt,name=ether_type,json=etherType,proto3,oneof" json:"ether_type,omitempty"`
	// Description missing in models
	ControlOpCode *PatternFlowPfcPauseControlOpCode `protobuf:"bytes,4,opt,name=control_op_code,json=controlOpCode,proto3,oneof" json:"control_op_code,omitempty"`
	// Description missing in models
	ClassEnableVector *PatternFlowPfcPauseClassEnableVector `protobuf:"bytes,5,opt,name=class_enable_vector,json=classEnableVector,proto3,oneof" json:"class_enable_vector,omitempty"`
	// Description missing in models
	PauseClass_0 *PatternFlowPfcPausePauseClass0 `protobuf:"bytes,6,opt,name=pause_class_0,json=pauseClass0,proto3,oneof" json:"pause_class_0,omitempty"`
	// Description missing in models
	PauseClass_1 *PatternFlowPfcPausePauseClass1 `protobuf:"bytes,7,opt,name=pause_class_1,json=pauseClass1,proto3,oneof" json:"pause_class_1,omitempty"`
	// Description missing in models
	PauseClass_2 *PatternFlowPfcPausePauseClass2 `protobuf:"bytes,8,opt,name=pause_class_2,json=pauseClass2,proto3,oneof" json:"pause_class_2,omitempty"`
	// Description missing in models
	PauseClass_3 *PatternFlowPfcPausePauseClass3 `protobuf:"bytes,9,opt,name=pause_class_3,json=pauseClass3,proto3,oneof" json:"pause_class_3,omitempty"`
	// Description missing in models
	PauseClass_4 *PatternFlowPfcPausePauseClass4 `protobuf:"bytes,10,opt,name=pause_class_4,json=pauseClass4,proto3,oneof" json:"pause_class_4,omitempty"`
	// Description missing in models
	PauseClass_5 *PatternFlowPfcPausePauseClass5 `protobuf:"bytes,11,opt,name=pause_class_5,json=pauseClass5,proto3,oneof" json:"pause_class_5,omitempty"`
	// Description missing in models
	PauseClass_6 *PatternFlowPfcPausePauseClass6 `protobuf:"bytes,12,opt,name=pause_class_6,json=pauseClass6,proto3,oneof" json:"pause_class_6,omitempty"`
	// Description missing in models
	PauseClass_7 *PatternFlowPfcPausePauseClass7 `protobuf:"bytes,13,opt,name=pause_class_7,json=pauseClass7,proto3,oneof" json:"pause_class_7,omitempty"`
}

func (x *FlowPfcPause) Reset() {
	*x = FlowPfcPause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowPfcPause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPfcPause) ProtoMessage() {}

func (x *FlowPfcPause) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPfcPause.ProtoReflect.Descriptor instead.
func (*FlowPfcPause) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{146}
}

func (x *FlowPfcPause) GetDst() *PatternFlowPfcPauseDst {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *FlowPfcPause) GetSrc() *PatternFlowPfcPauseSrc {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *FlowPfcPause) GetEtherType() *PatternFlowPfcPauseEtherType {
	if x != nil {
		return x.EtherType
	}
	return nil
}

func (x *FlowPfcPause) GetControlOpCode() *PatternFlowPfcPauseControlOpCode {
	if x != nil {
		return x.ControlOpCode
	}
	return nil
}

func (x *FlowPfcPause) GetClassEnableVector() *PatternFlowPfcPauseClassEnableVector {
	if x != nil {
		return x.ClassEnableVector
	}
	return nil
}

func (x *FlowPfcPause) GetPauseClass_0() *PatternFlowPfcPausePauseClass0 {
	if x != nil {
		return x.PauseClass_0
	}
	return nil
}

func (x *FlowPfcPause) GetPauseClass_1() *PatternFlowPfcPausePauseClass1 {
	if x != nil {
		return x.PauseClass_1
	}
	return nil
}

func (x *FlowPfcPause) GetPauseClass_2() *PatternFlowPfcPausePauseClass2 {
	if x != nil {
		return x.PauseClass_2
	}
	return nil
}

func (x *FlowPfcPause) GetPauseClass_3() *PatternFlowPfcPausePauseClass3 {
	if x != nil {
		return x.PauseClass_3
	}
	return nil
}

func (x *FlowPfcPause) GetPauseClass_4() *PatternFlowPfcPausePauseClass4 {
	if x != nil {
		return x.PauseClass_4
	}
	return nil
}

func (x *FlowPfcPause) GetPauseClass_5() *PatternFlowPfcPausePauseClass5 {
	if x != nil {
		return x.PauseClass_5
	}
	return nil
}

func (x *FlowPfcPause) GetPauseClass_6() *PatternFlowPfcPausePauseClass6 {
	if x != nil {
		return x.PauseClass_6
	}
	return nil
}

func (x *FlowPfcPause) GetPauseClass_7() *PatternFlowPfcPausePauseClass7 {
	if x != nil {
		return x.PauseClass_7
	}
	return nil
}

// IEEE 802.3x global ethernet pause packet header
type FlowEthernetPause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Dst *PatternFlowEthernetPauseDst `protobuf:"bytes,1,opt,name=dst,proto3,oneof" json:"dst,omitempty"`
	// Description missing in models
	Src *PatternFlowEthernetPauseSrc `protobuf:"bytes,2,opt,name=src,proto3,oneof" json:"src,omitempty"`
	// Description missing in models
	EtherType *PatternFlowEthernetPauseEtherType `protobuf:"bytes,3,opt,name=ether_type,json=etherType,proto3,oneof" json:"ether_type,omitempty"`
	// Description missing in models
	ControlOpCode *PatternFlowEthernetPauseControlOpCode `protobuf:"bytes,4,opt,name=control_op_code,json=controlOpCode,proto3,oneof" json:"control_op_code,omitempty"`
	// Description missing in models
	Time *PatternFlowEthernetPauseTime `protobuf:"bytes,5,opt,name=time,proto3,oneof" json:"time,omitempty"`
}

func (x *FlowEthernetPause) Reset() {
	*x = FlowEthernetPause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowEthernetPause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowEthernetPause) ProtoMessage() {}

func (x *FlowEthernetPause) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowEthernetPause.ProtoReflect.Descriptor instead.
func (*FlowEthernetPause) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{147}
}

func (x *FlowEthernetPause) GetDst() *PatternFlowEthernetPauseDst {
	if x != nil {
		return x.Dst
	}
	return nil
}

func (x *FlowEthernetPause) GetSrc() *PatternFlowEthernetPauseSrc {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *FlowEthernetPause) GetEtherType() *PatternFlowEthernetPauseEtherType {
	if x != nil {
		return x.EtherType
	}
	return nil
}

func (x *FlowEthernetPause) GetControlOpCode() *PatternFlowEthernetPauseControlOpCode {
	if x != nil {
		return x.ControlOpCode
	}
	return nil
}

func (x *FlowEthernetPause) GetTime() *PatternFlowEthernetPauseTime {
	if x != nil {
		return x.Time
	}
	return nil
}

// TCP packet header
type FlowTcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	SrcPort *PatternFlowTcpSrcPort `protobuf:"bytes,1,opt,name=src_port,json=srcPort,proto3,oneof" json:"src_port,omitempty"`
	// Description missing in models
	DstPort *PatternFlowTcpDstPort `protobuf:"bytes,2,opt,name=dst_port,json=dstPort,proto3,oneof" json:"dst_port,omitempty"`
	// Description missing in models
	SeqNum *PatternFlowTcpSeqNum `protobuf:"bytes,3,opt,name=seq_num,json=seqNum,proto3,oneof" json:"seq_num,omitempty"`
	// Description missing in models
	AckNum *PatternFlowTcpAckNum `protobuf:"bytes,4,opt,name=ack_num,json=ackNum,proto3,oneof" json:"ack_num,omitempty"`
	// Description missing in models
	DataOffset *PatternFlowTcpDataOffset `protobuf:"bytes,5,opt,name=data_offset,json=dataOffset,proto3,oneof" json:"data_offset,omitempty"`
	// Description missing in models
	EcnNs *PatternFlowTcpEcnNs `protobuf:"bytes,6,opt,name=ecn_ns,json=ecnNs,proto3,oneof" json:"ecn_ns,omitempty"`
	// Description missing in models
	EcnCwr *PatternFlowTcpEcnCwr `protobuf:"bytes,7,opt,name=ecn_cwr,json=ecnCwr,proto3,oneof" json:"ecn_cwr,omitempty"`
	// Description missing in models
	EcnEcho *PatternFlowTcpEcnEcho `protobuf:"bytes,8,opt,name=ecn_echo,json=ecnEcho,proto3,oneof" json:"ecn_echo,omitempty"`
	// Description missing in models
	CtlUrg *PatternFlowTcpCtlUrg `protobuf:"bytes,9,opt,name=ctl_urg,json=ctlUrg,proto3,oneof" json:"ctl_urg,omitempty"`
	// Description missing in models
	CtlAck *PatternFlowTcpCtlAck `protobuf:"bytes,10,opt,name=ctl_ack,json=ctlAck,proto3,oneof" json:"ctl_ack,omitempty"`
	// Description missing in models
	CtlPsh *PatternFlowTcpCtlPsh `protobuf:"bytes,11,opt,name=ctl_psh,json=ctlPsh,proto3,oneof" json:"ctl_psh,omitempty"`
	// Description missing in models
	CtlRst *PatternFlowTcpCtlRst `protobuf:"bytes,12,opt,name=ctl_rst,json=ctlRst,proto3,oneof" json:"ctl_rst,omitempty"`
	// Description missing in models
	CtlSyn *PatternFlowTcpCtlSyn `protobuf:"bytes,13,opt,name=ctl_syn,json=ctlSyn,proto3,oneof" json:"ctl_syn,omitempty"`
	// Description missing in models
	CtlFin *PatternFlowTcpCtlFin `protobuf:"bytes,14,opt,name=ctl_fin,json=ctlFin,proto3,oneof" json:"ctl_fin,omitempty"`
	// Description missing in models
	Window *PatternFlowTcpWindow `protobuf:"bytes,15,opt,name=window,proto3,oneof" json:"window,omitempty"`
}

func (x *FlowTcp) Reset() {
	*x = FlowTcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowTcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTcp) ProtoMessage() {}

func (x *FlowTcp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTcp.ProtoReflect.Descriptor instead.
func (*FlowTcp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{148}
}

func (x *FlowTcp) GetSrcPort() *PatternFlowTcpSrcPort {
	if x != nil {
		return x.SrcPort
	}
	return nil
}

func (x *FlowTcp) GetDstPort() *PatternFlowTcpDstPort {
	if x != nil {
		return x.DstPort
	}
	return nil
}

func (x *FlowTcp) GetSeqNum() *PatternFlowTcpSeqNum {
	if x != nil {
		return x.SeqNum
	}
	return nil
}

func (x *FlowTcp) GetAckNum() *PatternFlowTcpAckNum {
	if x != nil {
		return x.AckNum
	}
	return nil
}

func (x *FlowTcp) GetDataOffset() *PatternFlowTcpDataOffset {
	if x != nil {
		return x.DataOffset
	}
	return nil
}

func (x *FlowTcp) GetEcnNs() *PatternFlowTcpEcnNs {
	if x != nil {
		return x.EcnNs
	}
	return nil
}

func (x *FlowTcp) GetEcnCwr() *PatternFlowTcpEcnCwr {
	if x != nil {
		return x.EcnCwr
	}
	return nil
}

func (x *FlowTcp) GetEcnEcho() *PatternFlowTcpEcnEcho {
	if x != nil {
		return x.EcnEcho
	}
	return nil
}

func (x *FlowTcp) GetCtlUrg() *PatternFlowTcpCtlUrg {
	if x != nil {
		return x.CtlUrg
	}
	return nil
}

func (x *FlowTcp) GetCtlAck() *PatternFlowTcpCtlAck {
	if x != nil {
		return x.CtlAck
	}
	return nil
}

func (x *FlowTcp) GetCtlPsh() *PatternFlowTcpCtlPsh {
	if x != nil {
		return x.CtlPsh
	}
	return nil
}

func (x *FlowTcp) GetCtlRst() *PatternFlowTcpCtlRst {
	if x != nil {
		return x.CtlRst
	}
	return nil
}

func (x *FlowTcp) GetCtlSyn() *PatternFlowTcpCtlSyn {
	if x != nil {
		return x.CtlSyn
	}
	return nil
}

func (x *FlowTcp) GetCtlFin() *PatternFlowTcpCtlFin {
	if x != nil {
		return x.CtlFin
	}
	return nil
}

func (x *FlowTcp) GetWindow() *PatternFlowTcpWindow {
	if x != nil {
		return x.Window
	}
	return nil
}

// UDP packet header
type FlowUdp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	SrcPort *PatternFlowUdpSrcPort `protobuf:"bytes,1,opt,name=src_port,json=srcPort,proto3,oneof" json:"src_port,omitempty"`
	// Description missing in models
	DstPort *PatternFlowUdpDstPort `protobuf:"bytes,2,opt,name=dst_port,json=dstPort,proto3,oneof" json:"dst_port,omitempty"`
	// Description missing in models
	Length *PatternFlowUdpLength `protobuf:"bytes,3,opt,name=length,proto3,oneof" json:"length,omitempty"`
	// Description missing in models
	Checksum *PatternFlowUdpChecksum `protobuf:"bytes,4,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
}

func (x *FlowUdp) Reset() {
	*x = FlowUdp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowUdp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowUdp) ProtoMessage() {}

func (x *FlowUdp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowUdp.ProtoReflect.Descriptor instead.
func (*FlowUdp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{149}
}

func (x *FlowUdp) GetSrcPort() *PatternFlowUdpSrcPort {
	if x != nil {
		return x.SrcPort
	}
	return nil
}

func (x *FlowUdp) GetDstPort() *PatternFlowUdpDstPort {
	if x != nil {
		return x.DstPort
	}
	return nil
}

func (x *FlowUdp) GetLength() *PatternFlowUdpLength {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *FlowUdp) GetChecksum() *PatternFlowUdpChecksum {
	if x != nil {
		return x.Checksum
	}
	return nil
}

// Standard GRE packet header (RFC2784)
type FlowGre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	ChecksumPresent *PatternFlowGreChecksumPresent `protobuf:"bytes,1,opt,name=checksum_present,json=checksumPresent,proto3,oneof" json:"checksum_present,omitempty"`
	// Description missing in models
	Reserved0 *PatternFlowGreReserved0 `protobuf:"bytes,2,opt,name=reserved0,proto3,oneof" json:"reserved0,omitempty"`
	// Description missing in models
	Version *PatternFlowGreVersion `protobuf:"bytes,3,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Description missing in models
	Protocol *PatternFlowGreProtocol `protobuf:"bytes,4,opt,name=protocol,proto3,oneof" json:"protocol,omitempty"`
	// Description missing in models
	Checksum *PatternFlowGreChecksum `protobuf:"bytes,5,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
	// Description missing in models
	Reserved1 *PatternFlowGreReserved1 `protobuf:"bytes,6,opt,name=reserved1,proto3,oneof" json:"reserved1,omitempty"`
}

func (x *FlowGre) Reset() {
	*x = FlowGre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowGre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowGre) ProtoMessage() {}

func (x *FlowGre) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowGre.ProtoReflect.Descriptor instead.
func (*FlowGre) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{150}
}

func (x *FlowGre) GetChecksumPresent() *PatternFlowGreChecksumPresent {
	if x != nil {
		return x.ChecksumPresent
	}
	return nil
}

func (x *FlowGre) GetReserved0() *PatternFlowGreReserved0 {
	if x != nil {
		return x.Reserved0
	}
	return nil
}

func (x *FlowGre) GetVersion() *PatternFlowGreVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *FlowGre) GetProtocol() *PatternFlowGreProtocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *FlowGre) GetChecksum() *PatternFlowGreChecksum {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *FlowGre) GetReserved1() *PatternFlowGreReserved1 {
	if x != nil {
		return x.Reserved1
	}
	return nil
}

// GTPv1 packet header
type FlowGtpv1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Version *PatternFlowGtpv1Version `protobuf:"bytes,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Description missing in models
	ProtocolType *PatternFlowGtpv1ProtocolType `protobuf:"bytes,2,opt,name=protocol_type,json=protocolType,proto3,oneof" json:"protocol_type,omitempty"`
	// Description missing in models
	Reserved *PatternFlowGtpv1Reserved `protobuf:"bytes,3,opt,name=reserved,proto3,oneof" json:"reserved,omitempty"`
	// Description missing in models
	EFlag *PatternFlowGtpv1EFlag `protobuf:"bytes,4,opt,name=e_flag,json=eFlag,proto3,oneof" json:"e_flag,omitempty"`
	// Description missing in models
	SFlag *PatternFlowGtpv1SFlag `protobuf:"bytes,5,opt,name=s_flag,json=sFlag,proto3,oneof" json:"s_flag,omitempty"`
	// Description missing in models
	PnFlag *PatternFlowGtpv1PnFlag `protobuf:"bytes,6,opt,name=pn_flag,json=pnFlag,proto3,oneof" json:"pn_flag,omitempty"`
	// Description missing in models
	MessageType *PatternFlowGtpv1MessageType `protobuf:"bytes,7,opt,name=message_type,json=messageType,proto3,oneof" json:"message_type,omitempty"`
	// Description missing in models
	MessageLength *PatternFlowGtpv1MessageLength `protobuf:"bytes,8,opt,name=message_length,json=messageLength,proto3,oneof" json:"message_length,omitempty"`
	// Description missing in models
	Teid *PatternFlowGtpv1Teid `protobuf:"bytes,9,opt,name=teid,proto3,oneof" json:"teid,omitempty"`
	// Description missing in models
	SquenceNumber *PatternFlowGtpv1SquenceNumber `protobuf:"bytes,10,opt,name=squence_number,json=squenceNumber,proto3,oneof" json:"squence_number,omitempty"`
	// Description missing in models
	NPduNumber *PatternFlowGtpv1NPduNumber `protobuf:"bytes,11,opt,name=n_pdu_number,json=nPduNumber,proto3,oneof" json:"n_pdu_number,omitempty"`
	// Description missing in models
	NextExtensionHeaderType *PatternFlowGtpv1NextExtensionHeaderType `protobuf:"bytes,12,opt,name=next_extension_header_type,json=nextExtensionHeaderType,proto3,oneof" json:"next_extension_header_type,omitempty"`
	// A list of optional extension headers.
	ExtensionHeaders []*FlowGtpExtension `protobuf:"bytes,13,rep,name=extension_headers,json=extensionHeaders,proto3" json:"extension_headers,omitempty"`
}

func (x *FlowGtpv1) Reset() {
	*x = FlowGtpv1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowGtpv1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowGtpv1) ProtoMessage() {}

func (x *FlowGtpv1) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowGtpv1.ProtoReflect.Descriptor instead.
func (*FlowGtpv1) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{151}
}

func (x *FlowGtpv1) GetVersion() *PatternFlowGtpv1Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *FlowGtpv1) GetProtocolType() *PatternFlowGtpv1ProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return nil
}

func (x *FlowGtpv1) GetReserved() *PatternFlowGtpv1Reserved {
	if x != nil {
		return x.Reserved
	}
	return nil
}

func (x *FlowGtpv1) GetEFlag() *PatternFlowGtpv1EFlag {
	if x != nil {
		return x.EFlag
	}
	return nil
}

func (x *FlowGtpv1) GetSFlag() *PatternFlowGtpv1SFlag {
	if x != nil {
		return x.SFlag
	}
	return nil
}

func (x *FlowGtpv1) GetPnFlag() *PatternFlowGtpv1PnFlag {
	if x != nil {
		return x.PnFlag
	}
	return nil
}

func (x *FlowGtpv1) GetMessageType() *PatternFlowGtpv1MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *FlowGtpv1) GetMessageLength() *PatternFlowGtpv1MessageLength {
	if x != nil {
		return x.MessageLength
	}
	return nil
}

func (x *FlowGtpv1) GetTeid() *PatternFlowGtpv1Teid {
	if x != nil {
		return x.Teid
	}
	return nil
}

func (x *FlowGtpv1) GetSquenceNumber() *PatternFlowGtpv1SquenceNumber {
	if x != nil {
		return x.SquenceNumber
	}
	return nil
}

func (x *FlowGtpv1) GetNPduNumber() *PatternFlowGtpv1NPduNumber {
	if x != nil {
		return x.NPduNumber
	}
	return nil
}

func (x *FlowGtpv1) GetNextExtensionHeaderType() *PatternFlowGtpv1NextExtensionHeaderType {
	if x != nil {
		return x.NextExtensionHeaderType
	}
	return nil
}

func (x *FlowGtpv1) GetExtensionHeaders() []*FlowGtpExtension {
	if x != nil {
		return x.ExtensionHeaders
	}
	return nil
}

// Description missing in models
type FlowGtpExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	ExtensionLength *PatternFlowGtpExtensionExtensionLength `protobuf:"bytes,1,opt,name=extension_length,json=extensionLength,proto3,oneof" json:"extension_length,omitempty"`
	// Description missing in models
	Contents *PatternFlowGtpExtensionContents `protobuf:"bytes,2,opt,name=contents,proto3,oneof" json:"contents,omitempty"`
	// Description missing in models
	NextExtensionHeader *PatternFlowGtpExtensionNextExtensionHeader `protobuf:"bytes,3,opt,name=next_extension_header,json=nextExtensionHeader,proto3,oneof" json:"next_extension_header,omitempty"`
}

func (x *FlowGtpExtension) Reset() {
	*x = FlowGtpExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowGtpExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowGtpExtension) ProtoMessage() {}

func (x *FlowGtpExtension) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowGtpExtension.ProtoReflect.Descriptor instead.
func (*FlowGtpExtension) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{152}
}

func (x *FlowGtpExtension) GetExtensionLength() *PatternFlowGtpExtensionExtensionLength {
	if x != nil {
		return x.ExtensionLength
	}
	return nil
}

func (x *FlowGtpExtension) GetContents() *PatternFlowGtpExtensionContents {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *FlowGtpExtension) GetNextExtensionHeader() *PatternFlowGtpExtensionNextExtensionHeader {
	if x != nil {
		return x.NextExtensionHeader
	}
	return nil
}

// GTPv2 packet header
type FlowGtpv2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Version *PatternFlowGtpv2Version `protobuf:"bytes,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Description missing in models
	PiggybackingFlag *PatternFlowGtpv2PiggybackingFlag `protobuf:"bytes,2,opt,name=piggybacking_flag,json=piggybackingFlag,proto3,oneof" json:"piggybacking_flag,omitempty"`
	// Description missing in models
	TeidFlag *PatternFlowGtpv2TeidFlag `protobuf:"bytes,3,opt,name=teid_flag,json=teidFlag,proto3,oneof" json:"teid_flag,omitempty"`
	// Description missing in models
	Spare1 *PatternFlowGtpv2Spare1 `protobuf:"bytes,4,opt,name=spare1,proto3,oneof" json:"spare1,omitempty"`
	// Description missing in models
	MessageType *PatternFlowGtpv2MessageType `protobuf:"bytes,5,opt,name=message_type,json=messageType,proto3,oneof" json:"message_type,omitempty"`
	// Description missing in models
	MessageLength *PatternFlowGtpv2MessageLength `protobuf:"bytes,6,opt,name=message_length,json=messageLength,proto3,oneof" json:"message_length,omitempty"`
	// Description missing in models
	Teid *PatternFlowGtpv2Teid `protobuf:"bytes,7,opt,name=teid,proto3,oneof" json:"teid,omitempty"`
	// Description missing in models
	SequenceNumber *PatternFlowGtpv2SequenceNumber `protobuf:"bytes,8,opt,name=sequence_number,json=sequenceNumber,proto3,oneof" json:"sequence_number,omitempty"`
	// Description missing in models
	Spare2 *PatternFlowGtpv2Spare2 `protobuf:"bytes,9,opt,name=spare2,proto3,oneof" json:"spare2,omitempty"`
}

func (x *FlowGtpv2) Reset() {
	*x = FlowGtpv2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowGtpv2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowGtpv2) ProtoMessage() {}

func (x *FlowGtpv2) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowGtpv2.ProtoReflect.Descriptor instead.
func (*FlowGtpv2) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{153}
}

func (x *FlowGtpv2) GetVersion() *PatternFlowGtpv2Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *FlowGtpv2) GetPiggybackingFlag() *PatternFlowGtpv2PiggybackingFlag {
	if x != nil {
		return x.PiggybackingFlag
	}
	return nil
}

func (x *FlowGtpv2) GetTeidFlag() *PatternFlowGtpv2TeidFlag {
	if x != nil {
		return x.TeidFlag
	}
	return nil
}

func (x *FlowGtpv2) GetSpare1() *PatternFlowGtpv2Spare1 {
	if x != nil {
		return x.Spare1
	}
	return nil
}

func (x *FlowGtpv2) GetMessageType() *PatternFlowGtpv2MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *FlowGtpv2) GetMessageLength() *PatternFlowGtpv2MessageLength {
	if x != nil {
		return x.MessageLength
	}
	return nil
}

func (x *FlowGtpv2) GetTeid() *PatternFlowGtpv2Teid {
	if x != nil {
		return x.Teid
	}
	return nil
}

func (x *FlowGtpv2) GetSequenceNumber() *PatternFlowGtpv2SequenceNumber {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

func (x *FlowGtpv2) GetSpare2() *PatternFlowGtpv2Spare2 {
	if x != nil {
		return x.Spare2
	}
	return nil
}

// ARP packet header
type FlowArp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	HardwareType *PatternFlowArpHardwareType `protobuf:"bytes,1,opt,name=hardware_type,json=hardwareType,proto3,oneof" json:"hardware_type,omitempty"`
	// Description missing in models
	ProtocolType *PatternFlowArpProtocolType `protobuf:"bytes,2,opt,name=protocol_type,json=protocolType,proto3,oneof" json:"protocol_type,omitempty"`
	// Description missing in models
	HardwareLength *PatternFlowArpHardwareLength `protobuf:"bytes,3,opt,name=hardware_length,json=hardwareLength,proto3,oneof" json:"hardware_length,omitempty"`
	// Description missing in models
	ProtocolLength *PatternFlowArpProtocolLength `protobuf:"bytes,4,opt,name=protocol_length,json=protocolLength,proto3,oneof" json:"protocol_length,omitempty"`
	// Description missing in models
	Operation *PatternFlowArpOperation `protobuf:"bytes,5,opt,name=operation,proto3,oneof" json:"operation,omitempty"`
	// Description missing in models
	SenderHardwareAddr *PatternFlowArpSenderHardwareAddr `protobuf:"bytes,6,opt,name=sender_hardware_addr,json=senderHardwareAddr,proto3,oneof" json:"sender_hardware_addr,omitempty"`
	// Description missing in models
	SenderProtocolAddr *PatternFlowArpSenderProtocolAddr `protobuf:"bytes,7,opt,name=sender_protocol_addr,json=senderProtocolAddr,proto3,oneof" json:"sender_protocol_addr,omitempty"`
	// Description missing in models
	TargetHardwareAddr *PatternFlowArpTargetHardwareAddr `protobuf:"bytes,8,opt,name=target_hardware_addr,json=targetHardwareAddr,proto3,oneof" json:"target_hardware_addr,omitempty"`
	// Description missing in models
	TargetProtocolAddr *PatternFlowArpTargetProtocolAddr `protobuf:"bytes,9,opt,name=target_protocol_addr,json=targetProtocolAddr,proto3,oneof" json:"target_protocol_addr,omitempty"`
}

func (x *FlowArp) Reset() {
	*x = FlowArp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowArp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowArp) ProtoMessage() {}

func (x *FlowArp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowArp.ProtoReflect.Descriptor instead.
func (*FlowArp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{154}
}

func (x *FlowArp) GetHardwareType() *PatternFlowArpHardwareType {
	if x != nil {
		return x.HardwareType
	}
	return nil
}

func (x *FlowArp) GetProtocolType() *PatternFlowArpProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return nil
}

func (x *FlowArp) GetHardwareLength() *PatternFlowArpHardwareLength {
	if x != nil {
		return x.HardwareLength
	}
	return nil
}

func (x *FlowArp) GetProtocolLength() *PatternFlowArpProtocolLength {
	if x != nil {
		return x.ProtocolLength
	}
	return nil
}

func (x *FlowArp) GetOperation() *PatternFlowArpOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *FlowArp) GetSenderHardwareAddr() *PatternFlowArpSenderHardwareAddr {
	if x != nil {
		return x.SenderHardwareAddr
	}
	return nil
}

func (x *FlowArp) GetSenderProtocolAddr() *PatternFlowArpSenderProtocolAddr {
	if x != nil {
		return x.SenderProtocolAddr
	}
	return nil
}

func (x *FlowArp) GetTargetHardwareAddr() *PatternFlowArpTargetHardwareAddr {
	if x != nil {
		return x.TargetHardwareAddr
	}
	return nil
}

func (x *FlowArp) GetTargetProtocolAddr() *PatternFlowArpTargetProtocolAddr {
	if x != nil {
		return x.TargetProtocolAddr
	}
	return nil
}

// ICMP packet header
type FlowIcmp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.echo
	Choice *FlowIcmp_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.FlowIcmp_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Echo *FlowIcmpEcho `protobuf:"bytes,2,opt,name=echo,proto3,oneof" json:"echo,omitempty"`
}

func (x *FlowIcmp) Reset() {
	*x = FlowIcmp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIcmp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIcmp) ProtoMessage() {}

func (x *FlowIcmp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIcmp.ProtoReflect.Descriptor instead.
func (*FlowIcmp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{155}
}

func (x *FlowIcmp) GetChoice() FlowIcmp_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FlowIcmp_Choice_unspecified
}

func (x *FlowIcmp) GetEcho() *FlowIcmpEcho {
	if x != nil {
		return x.Echo
	}
	return nil
}

// Packet Header for ICMP echo request
type FlowIcmpEcho struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Type *PatternFlowIcmpEchoType `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// Description missing in models
	Code *PatternFlowIcmpEchoCode `protobuf:"bytes,2,opt,name=code,proto3,oneof" json:"code,omitempty"`
	// Description missing in models
	Checksum *PatternFlowIcmpEchoChecksum `protobuf:"bytes,3,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
	// Description missing in models
	Identifier *PatternFlowIcmpEchoIdentifier `protobuf:"bytes,4,opt,name=identifier,proto3,oneof" json:"identifier,omitempty"`
	// Description missing in models
	SequenceNumber *PatternFlowIcmpEchoSequenceNumber `protobuf:"bytes,5,opt,name=sequence_number,json=sequenceNumber,proto3,oneof" json:"sequence_number,omitempty"`
}

func (x *FlowIcmpEcho) Reset() {
	*x = FlowIcmpEcho{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIcmpEcho) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIcmpEcho) ProtoMessage() {}

func (x *FlowIcmpEcho) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIcmpEcho.ProtoReflect.Descriptor instead.
func (*FlowIcmpEcho) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{156}
}

func (x *FlowIcmpEcho) GetType() *PatternFlowIcmpEchoType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FlowIcmpEcho) GetCode() *PatternFlowIcmpEchoCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *FlowIcmpEcho) GetChecksum() *PatternFlowIcmpEchoChecksum {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *FlowIcmpEcho) GetIdentifier() *PatternFlowIcmpEchoIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *FlowIcmpEcho) GetSequenceNumber() *PatternFlowIcmpEchoSequenceNumber {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

// ICMPv6 packet header
type FlowIcmpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.echo
	Choice *FlowIcmpv6_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.FlowIcmpv6_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Echo *FlowIcmpv6Echo `protobuf:"bytes,2,opt,name=echo,proto3,oneof" json:"echo,omitempty"`
}

func (x *FlowIcmpv6) Reset() {
	*x = FlowIcmpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIcmpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIcmpv6) ProtoMessage() {}

func (x *FlowIcmpv6) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIcmpv6.ProtoReflect.Descriptor instead.
func (*FlowIcmpv6) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{157}
}

func (x *FlowIcmpv6) GetChoice() FlowIcmpv6_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FlowIcmpv6_Choice_unspecified
}

func (x *FlowIcmpv6) GetEcho() *FlowIcmpv6Echo {
	if x != nil {
		return x.Echo
	}
	return nil
}

// Packet Header for ICMPv6 Echo
type FlowIcmpv6Echo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Type *PatternFlowIcmpv6EchoType `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// Description missing in models
	Code *PatternFlowIcmpv6EchoCode `protobuf:"bytes,2,opt,name=code,proto3,oneof" json:"code,omitempty"`
	// Description missing in models
	Identifier *PatternFlowIcmpv6EchoIdentifier `protobuf:"bytes,3,opt,name=identifier,proto3,oneof" json:"identifier,omitempty"`
	// Description missing in models
	SequenceNumber *PatternFlowIcmpv6EchoSequenceNumber `protobuf:"bytes,4,opt,name=sequence_number,json=sequenceNumber,proto3,oneof" json:"sequence_number,omitempty"`
	// Description missing in models
	Checksum *PatternFlowIcmpv6EchoChecksum `protobuf:"bytes,5,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
}

func (x *FlowIcmpv6Echo) Reset() {
	*x = FlowIcmpv6Echo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIcmpv6Echo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIcmpv6Echo) ProtoMessage() {}

func (x *FlowIcmpv6Echo) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIcmpv6Echo.ProtoReflect.Descriptor instead.
func (*FlowIcmpv6Echo) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{158}
}

func (x *FlowIcmpv6Echo) GetType() *PatternFlowIcmpv6EchoType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FlowIcmpv6Echo) GetCode() *PatternFlowIcmpv6EchoCode {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *FlowIcmpv6Echo) GetIdentifier() *PatternFlowIcmpv6EchoIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *FlowIcmpv6Echo) GetSequenceNumber() *PatternFlowIcmpv6EchoSequenceNumber {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

func (x *FlowIcmpv6Echo) GetChecksum() *PatternFlowIcmpv6EchoChecksum {
	if x != nil {
		return x.Checksum
	}
	return nil
}

// PPP packet header
type FlowPpp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Address *PatternFlowPppAddress `protobuf:"bytes,1,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// Description missing in models
	Control *PatternFlowPppControl `protobuf:"bytes,2,opt,name=control,proto3,oneof" json:"control,omitempty"`
	// Description missing in models
	ProtocolType *PatternFlowPppProtocolType `protobuf:"bytes,3,opt,name=protocol_type,json=protocolType,proto3,oneof" json:"protocol_type,omitempty"`
}

func (x *FlowPpp) Reset() {
	*x = FlowPpp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowPpp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowPpp) ProtoMessage() {}

func (x *FlowPpp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowPpp.ProtoReflect.Descriptor instead.
func (*FlowPpp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{159}
}

func (x *FlowPpp) GetAddress() *PatternFlowPppAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *FlowPpp) GetControl() *PatternFlowPppControl {
	if x != nil {
		return x.Control
	}
	return nil
}

func (x *FlowPpp) GetProtocolType() *PatternFlowPppProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return nil
}

// IGMPv1 packet header
type FlowIgmpv1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Version *PatternFlowIgmpv1Version `protobuf:"bytes,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Description missing in models
	Type *PatternFlowIgmpv1Type `protobuf:"bytes,2,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// Description missing in models
	Unused *PatternFlowIgmpv1Unused `protobuf:"bytes,3,opt,name=unused,proto3,oneof" json:"unused,omitempty"`
	// Description missing in models
	Checksum *PatternFlowIgmpv1Checksum `protobuf:"bytes,4,opt,name=checksum,proto3,oneof" json:"checksum,omitempty"`
	// Description missing in models
	GroupAddress *PatternFlowIgmpv1GroupAddress `protobuf:"bytes,5,opt,name=group_address,json=groupAddress,proto3,oneof" json:"group_address,omitempty"`
}

func (x *FlowIgmpv1) Reset() {
	*x = FlowIgmpv1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIgmpv1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIgmpv1) ProtoMessage() {}

func (x *FlowIgmpv1) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIgmpv1.ProtoReflect.Descriptor instead.
func (*FlowIgmpv1) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{160}
}

func (x *FlowIgmpv1) GetVersion() *PatternFlowIgmpv1Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *FlowIgmpv1) GetType() *PatternFlowIgmpv1Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FlowIgmpv1) GetUnused() *PatternFlowIgmpv1Unused {
	if x != nil {
		return x.Unused
	}
	return nil
}

func (x *FlowIgmpv1) GetChecksum() *PatternFlowIgmpv1Checksum {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *FlowIgmpv1) GetGroupAddress() *PatternFlowIgmpv1GroupAddress {
	if x != nil {
		return x.GroupAddress
	}
	return nil
}

// MPLS packet header; When configuring multiple such headers, the count shall not exceed
// 20.
type FlowMpls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Label *PatternFlowMplsLabel `protobuf:"bytes,1,opt,name=label,proto3,oneof" json:"label,omitempty"`
	// Description missing in models
	TrafficClass *PatternFlowMplsTrafficClass `protobuf:"bytes,2,opt,name=traffic_class,json=trafficClass,proto3,oneof" json:"traffic_class,omitempty"`
	// Description missing in models
	BottomOfStack *PatternFlowMplsBottomOfStack `protobuf:"bytes,3,opt,name=bottom_of_stack,json=bottomOfStack,proto3,oneof" json:"bottom_of_stack,omitempty"`
	// Description missing in models
	TimeToLive *PatternFlowMplsTimeToLive `protobuf:"bytes,4,opt,name=time_to_live,json=timeToLive,proto3,oneof" json:"time_to_live,omitempty"`
}

func (x *FlowMpls) Reset() {
	*x = FlowMpls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMpls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMpls) ProtoMessage() {}

func (x *FlowMpls) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMpls.ProtoReflect.Descriptor instead.
func (*FlowMpls) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{161}
}

func (x *FlowMpls) GetLabel() *PatternFlowMplsLabel {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *FlowMpls) GetTrafficClass() *PatternFlowMplsTrafficClass {
	if x != nil {
		return x.TrafficClass
	}
	return nil
}

func (x *FlowMpls) GetBottomOfStack() *PatternFlowMplsBottomOfStack {
	if x != nil {
		return x.BottomOfStack
	}
	return nil
}

func (x *FlowMpls) GetTimeToLive() *PatternFlowMplsTimeToLive {
	if x != nil {
		return x.TimeToLive
	}
	return nil
}

// The frame size which overrides the total length of the packet
type FlowSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.fixed
	Choice *FlowSize_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.FlowSize_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 64
	Fixed *int32 `protobuf:"varint,2,opt,name=fixed,proto3,oneof" json:"fixed,omitempty"`
	// Description missing in models
	Increment *FlowSizeIncrement `protobuf:"bytes,3,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Random *FlowSizeRandom `protobuf:"bytes,4,opt,name=random,proto3,oneof" json:"random,omitempty"`
}

func (x *FlowSize) Reset() {
	*x = FlowSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSize) ProtoMessage() {}

func (x *FlowSize) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSize.ProtoReflect.Descriptor instead.
func (*FlowSize) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{162}
}

func (x *FlowSize) GetChoice() FlowSize_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FlowSize_Choice_unspecified
}

func (x *FlowSize) GetFixed() int32 {
	if x != nil && x.Fixed != nil {
		return *x.Fixed
	}
	return 0
}

func (x *FlowSize) GetIncrement() *FlowSizeIncrement {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *FlowSize) GetRandom() *FlowSizeRandom {
	if x != nil {
		return x.Random
	}
	return nil
}

// Frame size that increments from a starting size to
// an ending size incrementing by a step size.
type FlowSizeIncrement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Starting frame size in bytes
	// default = 64
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Ending frame size in bytes
	// default = 1518
	End *int32 `protobuf:"varint,2,opt,name=end,proto3,oneof" json:"end,omitempty"`
	// Step frame size in bytes
	// default = 1
	Step *int32 `protobuf:"varint,3,opt,name=step,proto3,oneof" json:"step,omitempty"`
}

func (x *FlowSizeIncrement) Reset() {
	*x = FlowSizeIncrement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSizeIncrement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSizeIncrement) ProtoMessage() {}

func (x *FlowSizeIncrement) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSizeIncrement.ProtoReflect.Descriptor instead.
func (*FlowSizeIncrement) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{163}
}

func (x *FlowSizeIncrement) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *FlowSizeIncrement) GetEnd() int32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *FlowSizeIncrement) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

// Random frame size from a min value to a max value.
type FlowSizeRandom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 64
	Min *int32 `protobuf:"varint,1,opt,name=min,proto3,oneof" json:"min,omitempty"`
	// Description missing in models
	// default = 1518
	Max *int32 `protobuf:"varint,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
}

func (x *FlowSizeRandom) Reset() {
	*x = FlowSizeRandom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSizeRandom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSizeRandom) ProtoMessage() {}

func (x *FlowSizeRandom) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSizeRandom.ProtoReflect.Descriptor instead.
func (*FlowSizeRandom) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{164}
}

func (x *FlowSizeRandom) GetMin() int32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *FlowSizeRandom) GetMax() int32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

// The rate of packet transmission
type FlowRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The available types of flow rate.
	// default = Choice.Enum.pps
	Choice *FlowRate_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.FlowRate_Choice_Enum,oneof" json:"choice,omitempty"`
	// Packets per second.
	// default = 1000
	Pps *int64 `protobuf:"varint,2,opt,name=pps,proto3,oneof" json:"pps,omitempty"`
	// Bits per second.
	// default = 1000000000
	Bps *int64 `protobuf:"varint,3,opt,name=bps,proto3,oneof" json:"bps,omitempty"`
	// Kilobits per second.
	// default = 1000000
	Kbps *int64 `protobuf:"varint,4,opt,name=kbps,proto3,oneof" json:"kbps,omitempty"`
	// Megabits per second.
	// default = 1000
	Mbps *int64 `protobuf:"varint,5,opt,name=mbps,proto3,oneof" json:"mbps,omitempty"`
	// Gigabits per second.
	// default = 1
	Gbps *int32 `protobuf:"varint,6,opt,name=gbps,proto3,oneof" json:"gbps,omitempty"`
	// The percentage of a port location's available bandwidth.
	// default = 100
	Percentage *float32 `protobuf:"fixed32,7,opt,name=percentage,proto3,oneof" json:"percentage,omitempty"`
}

func (x *FlowRate) Reset() {
	*x = FlowRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRate) ProtoMessage() {}

func (x *FlowRate) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRate.ProtoReflect.Descriptor instead.
func (*FlowRate) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{165}
}

func (x *FlowRate) GetChoice() FlowRate_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FlowRate_Choice_unspecified
}

func (x *FlowRate) GetPps() int64 {
	if x != nil && x.Pps != nil {
		return *x.Pps
	}
	return 0
}

func (x *FlowRate) GetBps() int64 {
	if x != nil && x.Bps != nil {
		return *x.Bps
	}
	return 0
}

func (x *FlowRate) GetKbps() int64 {
	if x != nil && x.Kbps != nil {
		return *x.Kbps
	}
	return 0
}

func (x *FlowRate) GetMbps() int64 {
	if x != nil && x.Mbps != nil {
		return *x.Mbps
	}
	return 0
}

func (x *FlowRate) GetGbps() int32 {
	if x != nil && x.Gbps != nil {
		return *x.Gbps
	}
	return 0
}

func (x *FlowRate) GetPercentage() float32 {
	if x != nil && x.Percentage != nil {
		return *x.Percentage
	}
	return 0
}

// A container for different transmit durations.
type FlowDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A choice used to determine the type of duration.
	// default = Choice.Enum.continuous
	Choice *FlowDuration_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.FlowDuration_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	FixedPackets *FlowFixedPackets `protobuf:"bytes,2,opt,name=fixed_packets,json=fixedPackets,proto3,oneof" json:"fixed_packets,omitempty"`
	// Description missing in models
	FixedSeconds *FlowFixedSeconds `protobuf:"bytes,3,opt,name=fixed_seconds,json=fixedSeconds,proto3,oneof" json:"fixed_seconds,omitempty"`
	// Description missing in models
	Burst *FlowBurst `protobuf:"bytes,4,opt,name=burst,proto3,oneof" json:"burst,omitempty"`
	// Description missing in models
	Continuous *FlowContinuous `protobuf:"bytes,5,opt,name=continuous,proto3,oneof" json:"continuous,omitempty"`
}

func (x *FlowDuration) Reset() {
	*x = FlowDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowDuration) ProtoMessage() {}

func (x *FlowDuration) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowDuration.ProtoReflect.Descriptor instead.
func (*FlowDuration) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{166}
}

func (x *FlowDuration) GetChoice() FlowDuration_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FlowDuration_Choice_unspecified
}

func (x *FlowDuration) GetFixedPackets() *FlowFixedPackets {
	if x != nil {
		return x.FixedPackets
	}
	return nil
}

func (x *FlowDuration) GetFixedSeconds() *FlowFixedSeconds {
	if x != nil {
		return x.FixedSeconds
	}
	return nil
}

func (x *FlowDuration) GetBurst() *FlowBurst {
	if x != nil {
		return x.Burst
	}
	return nil
}

func (x *FlowDuration) GetContinuous() *FlowContinuous {
	if x != nil {
		return x.Continuous
	}
	return nil
}

// Transmit will be continuous and will not stop automatically.
type FlowContinuous struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum gap between packets expressed as bytes.
	// default = 12
	Gap *int32 `protobuf:"varint,1,opt,name=gap,proto3,oneof" json:"gap,omitempty"`
	// Description missing in models
	Delay *FlowDelay `protobuf:"bytes,2,opt,name=delay,proto3,oneof" json:"delay,omitempty"`
}

func (x *FlowContinuous) Reset() {
	*x = FlowContinuous{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowContinuous) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowContinuous) ProtoMessage() {}

func (x *FlowContinuous) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowContinuous.ProtoReflect.Descriptor instead.
func (*FlowContinuous) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{167}
}

func (x *FlowContinuous) GetGap() int32 {
	if x != nil && x.Gap != nil {
		return *x.Gap
	}
	return 0
}

func (x *FlowContinuous) GetDelay() *FlowDelay {
	if x != nil {
		return x.Delay
	}
	return nil
}

// The optional container to specify the delay before starting
// transmission of packets.
type FlowDelay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.bytes
	Choice *FlowDelay_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.FlowDelay_Choice_Enum,oneof" json:"choice,omitempty"`
	// The delay before starting transmission of packets.
	// A value of 0 indicates no delay.
	// default = 0
	Bytes *float32 `protobuf:"fixed32,2,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
	// The delay before starting transmission of packets.
	// A value of 0 indicates no delay.
	// default = 0
	Nanoseconds *float32 `protobuf:"fixed32,3,opt,name=nanoseconds,proto3,oneof" json:"nanoseconds,omitempty"`
	// The delay before starting transmission of packets.
	// A value of 0 indicates no delay.
	// default = 0
	Microseconds *float32 `protobuf:"fixed32,4,opt,name=microseconds,proto3,oneof" json:"microseconds,omitempty"`
}

func (x *FlowDelay) Reset() {
	*x = FlowDelay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowDelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowDelay) ProtoMessage() {}

func (x *FlowDelay) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowDelay.ProtoReflect.Descriptor instead.
func (*FlowDelay) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{168}
}

func (x *FlowDelay) GetChoice() FlowDelay_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FlowDelay_Choice_unspecified
}

func (x *FlowDelay) GetBytes() float32 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *FlowDelay) GetNanoseconds() float32 {
	if x != nil && x.Nanoseconds != nil {
		return *x.Nanoseconds
	}
	return 0
}

func (x *FlowDelay) GetMicroseconds() float32 {
	if x != nil && x.Microseconds != nil {
		return *x.Microseconds
	}
	return 0
}

// Transmit a fixed number of packets after which the flow will stop.
type FlowFixedPackets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stop transmit of the flow after this number of packets.
	// default = 1
	Packets *int32 `protobuf:"varint,1,opt,name=packets,proto3,oneof" json:"packets,omitempty"`
	// The minimum gap between packets expressed as bytes.
	// default = 12
	Gap *int32 `protobuf:"varint,2,opt,name=gap,proto3,oneof" json:"gap,omitempty"`
	// Description missing in models
	Delay *FlowDelay `protobuf:"bytes,3,opt,name=delay,proto3,oneof" json:"delay,omitempty"`
}

func (x *FlowFixedPackets) Reset() {
	*x = FlowFixedPackets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowFixedPackets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowFixedPackets) ProtoMessage() {}

func (x *FlowFixedPackets) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowFixedPackets.ProtoReflect.Descriptor instead.
func (*FlowFixedPackets) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{169}
}

func (x *FlowFixedPackets) GetPackets() int32 {
	if x != nil && x.Packets != nil {
		return *x.Packets
	}
	return 0
}

func (x *FlowFixedPackets) GetGap() int32 {
	if x != nil && x.Gap != nil {
		return *x.Gap
	}
	return 0
}

func (x *FlowFixedPackets) GetDelay() *FlowDelay {
	if x != nil {
		return x.Delay
	}
	return nil
}

// Transmit for a fixed number of seconds after which the flow will stop.
type FlowFixedSeconds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stop transmit of the flow after this number of seconds.
	// default = 1
	Seconds *float32 `protobuf:"fixed32,1,opt,name=seconds,proto3,oneof" json:"seconds,omitempty"`
	// The minimum gap between packets expressed as bytes.
	// default = 12
	Gap *int32 `protobuf:"varint,2,opt,name=gap,proto3,oneof" json:"gap,omitempty"`
	// Description missing in models
	Delay *FlowDelay `protobuf:"bytes,3,opt,name=delay,proto3,oneof" json:"delay,omitempty"`
}

func (x *FlowFixedSeconds) Reset() {
	*x = FlowFixedSeconds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowFixedSeconds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowFixedSeconds) ProtoMessage() {}

func (x *FlowFixedSeconds) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowFixedSeconds.ProtoReflect.Descriptor instead.
func (*FlowFixedSeconds) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{170}
}

func (x *FlowFixedSeconds) GetSeconds() float32 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *FlowFixedSeconds) GetGap() int32 {
	if x != nil && x.Gap != nil {
		return *x.Gap
	}
	return 0
}

func (x *FlowFixedSeconds) GetDelay() *FlowDelay {
	if x != nil {
		return x.Delay
	}
	return nil
}

// Transmits continuous or fixed burst of packets.
// For continuous burst of packets, it will not automatically stop.
// For fixed burst of packets, it will stop after transmitting fixed number of bursts.
//
type FlowBurst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of packet bursts transmitted per flow.
	// A value of 0 implies continuous burst of packets.
	// default = 0
	Bursts *int32 `protobuf:"varint,1,opt,name=bursts,proto3,oneof" json:"bursts,omitempty"`
	// The number of packets transmitted per burst.
	// default = 1
	Packets *int32 `protobuf:"varint,2,opt,name=packets,proto3,oneof" json:"packets,omitempty"`
	// The minimum gap between packets expressed as bytes.
	// default = 12
	Gap *int32 `protobuf:"varint,3,opt,name=gap,proto3,oneof" json:"gap,omitempty"`
	// Description missing in models
	InterBurstGap *FlowDurationInterBurstGap `protobuf:"bytes,4,opt,name=inter_burst_gap,json=interBurstGap,proto3,oneof" json:"inter_burst_gap,omitempty"`
}

func (x *FlowBurst) Reset() {
	*x = FlowBurst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowBurst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowBurst) ProtoMessage() {}

func (x *FlowBurst) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowBurst.ProtoReflect.Descriptor instead.
func (*FlowBurst) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{171}
}

func (x *FlowBurst) GetBursts() int32 {
	if x != nil && x.Bursts != nil {
		return *x.Bursts
	}
	return 0
}

func (x *FlowBurst) GetPackets() int32 {
	if x != nil && x.Packets != nil {
		return *x.Packets
	}
	return 0
}

func (x *FlowBurst) GetGap() int32 {
	if x != nil && x.Gap != nil {
		return *x.Gap
	}
	return 0
}

func (x *FlowBurst) GetInterBurstGap() *FlowDurationInterBurstGap {
	if x != nil {
		return x.InterBurstGap
	}
	return nil
}

// The optional container for specifying a gap between bursts.
type FlowDurationInterBurstGap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of inter burst gap units.
	// default = Choice.Enum.bytes
	Choice *FlowDurationInterBurstGap_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.FlowDurationInterBurstGap_Choice_Enum,oneof" json:"choice,omitempty"`
	// The amount of time between bursts expressed in bytes.
	// A value of 0 indicates no gap between bursts.
	// default = 12
	Bytes *float64 `protobuf:"fixed64,2,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
	// The amount of time between bursts expressed in nanoseconds.
	// A value of 0 indicates no gap between bursts.
	// default = 96
	Nanoseconds *float64 `protobuf:"fixed64,3,opt,name=nanoseconds,proto3,oneof" json:"nanoseconds,omitempty"`
	// The amount of time between bursts expressed in microseconds.
	// A value of 0 indicates no gap between bursts.
	// default = 0.096
	Microseconds *float64 `protobuf:"fixed64,4,opt,name=microseconds,proto3,oneof" json:"microseconds,omitempty"`
}

func (x *FlowDurationInterBurstGap) Reset() {
	*x = FlowDurationInterBurstGap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowDurationInterBurstGap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowDurationInterBurstGap) ProtoMessage() {}

func (x *FlowDurationInterBurstGap) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowDurationInterBurstGap.ProtoReflect.Descriptor instead.
func (*FlowDurationInterBurstGap) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{172}
}

func (x *FlowDurationInterBurstGap) GetChoice() FlowDurationInterBurstGap_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FlowDurationInterBurstGap_Choice_unspecified
}

func (x *FlowDurationInterBurstGap) GetBytes() float64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *FlowDurationInterBurstGap) GetNanoseconds() float64 {
	if x != nil && x.Nanoseconds != nil {
		return *x.Nanoseconds
	}
	return 0
}

func (x *FlowDurationInterBurstGap) GetMicroseconds() float64 {
	if x != nil && x.Microseconds != nil {
		return *x.Microseconds
	}
	return 0
}

// The optional container for configuring flow metrics.
type FlowMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enables flow metrics.
	// Enabling this option may affect the resultant packet payload due to
	// additional instrumentation data.
	// default = False
	Enable *bool `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Enables additional flow metric loss calculation.
	// default = False
	Loss *bool `protobuf:"varint,2,opt,name=loss,proto3,oneof" json:"loss,omitempty"`
	// Enables additional flow metric first and last timestamps.
	// default = False
	Timestamps *bool `protobuf:"varint,3,opt,name=timestamps,proto3,oneof" json:"timestamps,omitempty"`
	// Latency metrics.
	Latency *FlowLatencyMetrics `protobuf:"bytes,4,opt,name=latency,proto3,oneof" json:"latency,omitempty"`
}

func (x *FlowMetrics) Reset() {
	*x = FlowMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMetrics) ProtoMessage() {}

func (x *FlowMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMetrics.ProtoReflect.Descriptor instead.
func (*FlowMetrics) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{173}
}

func (x *FlowMetrics) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *FlowMetrics) GetLoss() bool {
	if x != nil && x.Loss != nil {
		return *x.Loss
	}
	return false
}

func (x *FlowMetrics) GetTimestamps() bool {
	if x != nil && x.Timestamps != nil {
		return *x.Timestamps
	}
	return false
}

func (x *FlowMetrics) GetLatency() *FlowLatencyMetrics {
	if x != nil {
		return x.Latency
	}
	return nil
}

// The optional container for per flow latency metric configuration.
type FlowLatencyMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True to enable latency metrics using timestamps.
	//
	// Enabling this option may affect the resultant packet payload due to
	// additional instrumentation data.
	// default = False
	Enable *bool `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Select the type of latency measurement. The different types of
	// latency measurements are:
	//
	//
	// store_forward:
	// The time interval starting when the last bit of the frame leaves the
	// sending port and ending when the first bit of the frame is seen on
	// the receiving port (LIFO).  This is based on the RFC 1242 standard.
	//
	//
	// cut_through:
	// The time interval starting when the first bit of the frame leaves
	// the sending port and ending when the first bit of the frame is seen
	// on the receiving port (FIFO).  This is based on the RFC 1242
	// standard.
	// default = Mode.Enum.store_forward
	Mode *FlowLatencyMetrics_Mode_Enum `protobuf:"varint,2,opt,name=mode,proto3,enum=otg.FlowLatencyMetrics_Mode_Enum,oneof" json:"mode,omitempty"`
}

func (x *FlowLatencyMetrics) Reset() {
	*x = FlowLatencyMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowLatencyMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowLatencyMetrics) ProtoMessage() {}

func (x *FlowLatencyMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowLatencyMetrics.ProtoReflect.Descriptor instead.
func (*FlowLatencyMetrics) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{174}
}

func (x *FlowLatencyMetrics) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *FlowLatencyMetrics) GetMode() FlowLatencyMetrics_Mode_Enum {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return FlowLatencyMetrics_Mode_unspecified
}

// The optional container for event configuration.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True to enable all events.
	// Enabling this option may affect the resultant packet payload due to
	// additional instrumentation data.
	// default = False
	Enable *bool `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// Description missing in models
	Link *EventLink `protobuf:"bytes,2,opt,name=link,proto3,oneof" json:"link,omitempty"`
	// Description missing in models
	RxRateThreshold *EventRxRateThreshold `protobuf:"bytes,3,opt,name=rx_rate_threshold,json=rxRateThreshold,proto3,oneof" json:"rx_rate_threshold,omitempty"`
	// Description missing in models
	RouteAdvertiseWithdraw *EventRouteAdvertiseWithdraw `protobuf:"bytes,4,opt,name=route_advertise_withdraw,json=routeAdvertiseWithdraw,proto3,oneof" json:"route_advertise_withdraw,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{175}
}

func (x *Event) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *Event) GetLink() *EventLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Event) GetRxRateThreshold() *EventRxRateThreshold {
	if x != nil {
		return x.RxRateThreshold
	}
	return nil
}

func (x *Event) GetRouteAdvertiseWithdraw() *EventRouteAdvertiseWithdraw {
	if x != nil {
		return x.RouteAdvertiseWithdraw
	}
	return nil
}

// The optional container for rx rate threshold event configuration.
type EventRxRateThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True to enable the rx_rate_threshold event.
	// Enabling this option may affect the resultant packet payload due to
	// additional instrumentation data.
	// default = False
	Enable *bool `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
	// True to enable notifications when the rx rate of a flow passes above
	// or below the threshold value.
	// default = 95
	Threshold *float32 `protobuf:"fixed32,2,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
}

func (x *EventRxRateThreshold) Reset() {
	*x = EventRxRateThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRxRateThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRxRateThreshold) ProtoMessage() {}

func (x *EventRxRateThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRxRateThreshold.ProtoReflect.Descriptor instead.
func (*EventRxRateThreshold) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{176}
}

func (x *EventRxRateThreshold) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

func (x *EventRxRateThreshold) GetThreshold() float32 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

// The optional container for link up/down event configuration.
type EventLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True to enable notifications when a link up/down event occurs.
	// default = False
	Enable *bool `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}

func (x *EventLink) Reset() {
	*x = EventLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLink) ProtoMessage() {}

func (x *EventLink) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLink.ProtoReflect.Descriptor instead.
func (*EventLink) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{177}
}

func (x *EventLink) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

// The optional container for route advertise/withdraw event configuration.
type EventRouteAdvertiseWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True to enable notifications when a route advertise/withdraw
	// event occurs.
	// default = False
	Enable *bool `protobuf:"varint,1,opt,name=enable,proto3,oneof" json:"enable,omitempty"`
}

func (x *EventRouteAdvertiseWithdraw) Reset() {
	*x = EventRouteAdvertiseWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRouteAdvertiseWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRouteAdvertiseWithdraw) ProtoMessage() {}

func (x *EventRouteAdvertiseWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRouteAdvertiseWithdraw.ProtoReflect.Descriptor instead.
func (*EventRouteAdvertiseWithdraw) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{178}
}

func (x *EventRouteAdvertiseWithdraw) GetEnable() bool {
	if x != nil && x.Enable != nil {
		return *x.Enable
	}
	return false
}

// Description missing in models
type EventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Constrain the events being returned by specifying event types.
	// If the list is empty then all event types will be returned.
	Type []EventRequest_Type_Enum `protobuf:"varint,1,rep,packed,name=type,proto3,enum=otg.EventRequest_Type_Enum" json:"type,omitempty"`
	// Constrain the events being returned by specifying event sources.
	// If the list is empty then all event sources will be returned.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	// - /components/schemas/Bgp.V4RouteRange/name
	// - /components/schemas/Bgp.V6RouteRange/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	// - /components/schemas/Bgp.V4RouteRange/name
	// - /components/schemas/Bgp.V6RouteRange/name
	//
	Source []string `protobuf:"bytes,2,rep,name=source,proto3" json:"source,omitempty"`
}

func (x *EventRequest) Reset() {
	*x = EventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest) ProtoMessage() {}

func (x *EventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest.ProtoReflect.Descriptor instead.
func (*EventRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{179}
}

func (x *EventRequest) GetType() []EventRequest_Type_Enum {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EventRequest) GetSource() []string {
	if x != nil {
		return x.Source
	}
	return nil
}

// A container that describes what events a system should provide and
// optionally where to publish them.
type EventSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Events *EventRequest `protobuf:"bytes,1,opt,name=events,proto3,oneof" json:"events,omitempty"`
	// Indicates where a client wants to be notified of the events set in
	// the events property.
	// If this property is empty or null then no event notifications will
	// be forwarded.
	CallbackUrl *string `protobuf:"bytes,2,opt,name=callback_url,json=callbackUrl,proto3,oneof" json:"callback_url,omitempty"`
}

func (x *EventSubscription) Reset() {
	*x = EventSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSubscription) ProtoMessage() {}

func (x *EventSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSubscription.ProtoReflect.Descriptor instead.
func (*EventSubscription) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{180}
}

func (x *EventSubscription) GetEvents() *EventRequest {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EventSubscription) GetCallbackUrl() string {
	if x != nil && x.CallbackUrl != nil {
		return *x.CallbackUrl
	}
	return ""
}

// Configuration of LLDP protocol IEEE Ref: https://www.ieee802.org/1/files/public/docs2002/lldp-protocol-00.pdf
type Lldp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique name of the object on which LLDP is running.
	// required = true
	Connection *LldpConnection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint
	// identifier associated  with the transmitting LLDP agent. If mac address is specified
	// it should be in colon seperated mac address format.
	ChassisId *LldpChassisId `protobuf:"bytes,2,opt,name=chassis_id,json=chassisId,proto3,oneof" json:"chassis_id,omitempty"`
	// The Port ID is a mandatory TLV which identifies the port component of the endpoint
	// identifier associated with  the transmitting LLDP agent. If the specified port is
	// an IEEE 802.3 Repeater port, then this TLV is optional.
	PortId *LldpPortId `protobuf:"bytes,3,opt,name=port_id,json=portId,proto3,oneof" json:"port_id,omitempty"`
	// The system name field shall contain an alpha-numeric string that indicates the system's
	// administratively assigned  name. The system name should be the system's fully qualified
	// domain name. If implementations support IETF RFC  3418, the sysName object should
	// be used for this field.
	SystemName *LldpSystemName `protobuf:"bytes,4,opt,name=system_name,json=systemName,proto3,oneof" json:"system_name,omitempty"`
	// Specifies the amount of time in seconds a receiving device should maintain LLDP information
	// sent  by the device before discarding it.
	// default = 120
	HoldTime *int32 `protobuf:"varint,5,opt,name=hold_time,json=holdTime,proto3,oneof" json:"hold_time,omitempty"`
	// Set the transmission frequency of LLDP updates in seconds.
	// default = 30
	AdvertisementInterval *int32 `protobuf:"varint,6,opt,name=advertisement_interval,json=advertisementInterval,proto3,oneof" json:"advertisement_interval,omitempty"`
	// Globally unique name of an object. It also serves as the primary key for arrays of
	// objects.
	// required = true
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Lldp) Reset() {
	*x = Lldp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lldp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lldp) ProtoMessage() {}

func (x *Lldp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lldp.ProtoReflect.Descriptor instead.
func (*Lldp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{181}
}

func (x *Lldp) GetConnection() *LldpConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *Lldp) GetChassisId() *LldpChassisId {
	if x != nil {
		return x.ChassisId
	}
	return nil
}

func (x *Lldp) GetPortId() *LldpPortId {
	if x != nil {
		return x.PortId
	}
	return nil
}

func (x *Lldp) GetSystemName() *LldpSystemName {
	if x != nil {
		return x.SystemName
	}
	return nil
}

func (x *Lldp) GetHoldTime() int32 {
	if x != nil && x.HoldTime != nil {
		return *x.HoldTime
	}
	return 0
}

func (x *Lldp) GetAdvertisementInterval() int32 {
	if x != nil && x.AdvertisementInterval != nil {
		return *x.AdvertisementInterval
	}
	return 0
}

func (x *Lldp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// LLDP connection to a test port. In future if more connection options arise  LLDP
// connection object will be enhanced.
type LldpConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the test port or other connection objects on which LLDP is configured.
	Choice *LldpConnection_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.LldpConnection_Choice_Enum,oneof" json:"choice,omitempty"`
	// Name of the test port on which LLDP is configured on.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	PortName *string `protobuf:"bytes,2,opt,name=port_name,json=portName,proto3,oneof" json:"port_name,omitempty"`
}

func (x *LldpConnection) Reset() {
	*x = LldpConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpConnection) ProtoMessage() {}

func (x *LldpConnection) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpConnection.ProtoReflect.Descriptor instead.
func (*LldpConnection) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{182}
}

func (x *LldpConnection) GetChoice() LldpConnection_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return LldpConnection_Choice_unspecified
}

func (x *LldpConnection) GetPortName() string {
	if x != nil && x.PortName != nil {
		return *x.PortName
	}
	return ""
}

// The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint
// identifier associated  with the transmitting LLDP agent. This field identifies the
// format and source of the chassis identifier string.  It is based on the enumerator
// defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.
type LldpChassisId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chassis ID subtype to be used in Chassis ID TLV.
	// default = Choice.Enum.mac_address_subtype
	Choice *LldpChassisId_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.LldpChassisId_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	MacAddressSubtype *LldpChassisMacSubType `protobuf:"bytes,2,opt,name=mac_address_subtype,json=macAddressSubtype,proto3,oneof" json:"mac_address_subtype,omitempty"`
	// Name of an interface of the chassis that uniquely identifies the chassis.
	InterfaceNameSubtype *string `protobuf:"bytes,3,opt,name=interface_name_subtype,json=interfaceNameSubtype,proto3,oneof" json:"interface_name_subtype,omitempty"`
	// Locally assigned name of the chassis.
	LocalSubtype *string `protobuf:"bytes,4,opt,name=local_subtype,json=localSubtype,proto3,oneof" json:"local_subtype,omitempty"`
}

func (x *LldpChassisId) Reset() {
	*x = LldpChassisId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpChassisId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpChassisId) ProtoMessage() {}

func (x *LldpChassisId) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpChassisId.ProtoReflect.Descriptor instead.
func (*LldpChassisId) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{183}
}

func (x *LldpChassisId) GetChoice() LldpChassisId_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return LldpChassisId_Choice_unspecified
}

func (x *LldpChassisId) GetMacAddressSubtype() *LldpChassisMacSubType {
	if x != nil {
		return x.MacAddressSubtype
	}
	return nil
}

func (x *LldpChassisId) GetInterfaceNameSubtype() string {
	if x != nil && x.InterfaceNameSubtype != nil {
		return *x.InterfaceNameSubtype
	}
	return ""
}

func (x *LldpChassisId) GetLocalSubtype() string {
	if x != nil && x.LocalSubtype != nil {
		return *x.LocalSubtype
	}
	return ""
}

// The Port ID is a mandatory TLV which identifies the port component of the endpoint
// identifier associated with  the transmitting LLDP agent.This field identifies the
// format and source of the port identifier string. It is  based on the enumerator defined
// by the PtopoPortIdType object from RFC2922.
type LldpPortId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port ID subtype to be used in Port ID TLV.
	// default = Choice.Enum.interface_name_subtype
	Choice *LldpPortId_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.LldpPortId_Choice_Enum,oneof" json:"choice,omitempty"`
	// The MAC Address configured in the Port ID TLV.
	MacAddressSubtype *string `protobuf:"bytes,2,opt,name=mac_address_subtype,json=macAddressSubtype,proto3,oneof" json:"mac_address_subtype,omitempty"`
	// Description missing in models
	InterfaceNameSubtype *LldpPortInterfaceNameSubType `protobuf:"bytes,3,opt,name=interface_name_subtype,json=interfaceNameSubtype,proto3,oneof" json:"interface_name_subtype,omitempty"`
	// The Locally assigned name configured in the Port ID TLV.
	LocalSubtype *string `protobuf:"bytes,4,opt,name=local_subtype,json=localSubtype,proto3,oneof" json:"local_subtype,omitempty"`
}

func (x *LldpPortId) Reset() {
	*x = LldpPortId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpPortId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpPortId) ProtoMessage() {}

func (x *LldpPortId) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpPortId.ProtoReflect.Descriptor instead.
func (*LldpPortId) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{184}
}

func (x *LldpPortId) GetChoice() LldpPortId_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return LldpPortId_Choice_unspecified
}

func (x *LldpPortId) GetMacAddressSubtype() string {
	if x != nil && x.MacAddressSubtype != nil {
		return *x.MacAddressSubtype
	}
	return ""
}

func (x *LldpPortId) GetInterfaceNameSubtype() *LldpPortInterfaceNameSubType {
	if x != nil {
		return x.InterfaceNameSubtype
	}
	return nil
}

func (x *LldpPortId) GetLocalSubtype() string {
	if x != nil && x.LocalSubtype != nil {
		return *x.LocalSubtype
	}
	return ""
}

// The MAC address configured in the Chassis ID TLV.
type LldpChassisMacSubType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In auto mode the system generated value is set for this property, while if the choice
	// is selected as value,  a user configured value will be used for this property.
	// default = Choice.Enum.auto
	Choice *LldpChassisMacSubType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.LldpChassisMacSubType_Choice_Enum,oneof" json:"choice,omitempty"`
	// The OTG implementation must provide a system generated value for this property.
	Auto *string `protobuf:"bytes,2,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// User must specify a value if mode is not auto.
	Value *string `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *LldpChassisMacSubType) Reset() {
	*x = LldpChassisMacSubType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpChassisMacSubType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpChassisMacSubType) ProtoMessage() {}

func (x *LldpChassisMacSubType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpChassisMacSubType.ProtoReflect.Descriptor instead.
func (*LldpChassisMacSubType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{185}
}

func (x *LldpChassisMacSubType) GetChoice() LldpChassisMacSubType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return LldpChassisMacSubType_Choice_unspecified
}

func (x *LldpChassisMacSubType) GetAuto() string {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return ""
}

func (x *LldpChassisMacSubType) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// The interface name configured in the Port ID TLV.
type LldpPortInterfaceNameSubType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In auto mode the system generated value is set for this property, while if the choice
	// is selected as value,  a user configured value will be used for this property.
	// default = Choice.Enum.auto
	Choice *LldpPortInterfaceNameSubType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.LldpPortInterfaceNameSubType_Choice_Enum,oneof" json:"choice,omitempty"`
	// The OTG implementation must provide a system generated value for this property.
	Auto *string `protobuf:"bytes,2,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// User must specify a value if mode is not auto.
	Value *string `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *LldpPortInterfaceNameSubType) Reset() {
	*x = LldpPortInterfaceNameSubType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpPortInterfaceNameSubType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpPortInterfaceNameSubType) ProtoMessage() {}

func (x *LldpPortInterfaceNameSubType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpPortInterfaceNameSubType.ProtoReflect.Descriptor instead.
func (*LldpPortInterfaceNameSubType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{186}
}

func (x *LldpPortInterfaceNameSubType) GetChoice() LldpPortInterfaceNameSubType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return LldpPortInterfaceNameSubType_Choice_unspecified
}

func (x *LldpPortInterfaceNameSubType) GetAuto() string {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return ""
}

func (x *LldpPortInterfaceNameSubType) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// The system Name configured in the System Name TLV.
type LldpSystemName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In auto mode the system generated value is set for this property, while if the choice
	// is selected as value,  a user configured value will be used for this property.
	// default = Choice.Enum.auto
	Choice *LldpSystemName_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.LldpSystemName_Choice_Enum,oneof" json:"choice,omitempty"`
	// The OTG implementation must provide a system generated value for this property.
	Auto *string `protobuf:"bytes,2,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// User must specify a value if mode is not auto.
	Value *string `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *LldpSystemName) Reset() {
	*x = LldpSystemName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpSystemName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpSystemName) ProtoMessage() {}

func (x *LldpSystemName) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpSystemName.ProtoReflect.Descriptor instead.
func (*LldpSystemName) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{187}
}

func (x *LldpSystemName) GetChoice() LldpSystemName_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return LldpSystemName_Choice_unspecified
}

func (x *LldpSystemName) GetAuto() string {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return ""
}

func (x *LldpSystemName) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// A list of errors that may have occurred while executing the request.
type ResponseError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of any system specific errors that have occurred while
	// executing the request.
	Errors []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ResponseError) Reset() {
	*x = ResponseError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseError) ProtoMessage() {}

func (x *ResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseError.ProtoReflect.Descriptor instead.
func (*ResponseError) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{188}
}

func (x *ResponseError) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

// A list of warnings that have occurred while executing the request.
type ResponseWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of any system specific warnings that have occurred while
	// executing the request.
	Warnings []string `protobuf:"bytes,1,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *ResponseWarning) Reset() {
	*x = ResponseWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseWarning) ProtoMessage() {}

func (x *ResponseWarning) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseWarning.ProtoReflect.Descriptor instead.
func (*ResponseWarning) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{189}
}

func (x *ResponseWarning) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Port link state.
type LinkState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of port objects to. An empty or null list will control all port objects.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	PortNames []string `protobuf:"bytes,1,rep,name=port_names,json=portNames,proto3" json:"port_names,omitempty"`
	// The link state.
	// required = true
	State LinkState_State_Enum `protobuf:"varint,2,opt,name=state,proto3,enum=otg.LinkState_State_Enum" json:"state,omitempty"`
}

func (x *LinkState) Reset() {
	*x = LinkState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkState) ProtoMessage() {}

func (x *LinkState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkState.ProtoReflect.Descriptor instead.
func (*LinkState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{190}
}

func (x *LinkState) GetPortNames() []string {
	if x != nil {
		return x.PortNames
	}
	return nil
}

func (x *LinkState) GetState() LinkState_State_Enum {
	if x != nil {
		return x.State
	}
	return LinkState_State_unspecified
}

// Flow transmit state.
type TransmitState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of flows to which the transmit state will be applied to. If the list of
	// flow_names is empty or null the state will be applied to all configured flows.
	// If the list is not empty any flow that is not included in the list of flow_names
	// MUST be ignored and not included in the state change.
	//
	// x-constraint:
	// - /components/schemas/Flow/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Flow/properties/name
	//
	FlowNames []string `protobuf:"bytes,1,rep,name=flow_names,json=flowNames,proto3" json:"flow_names,omitempty"`
	// The transmit state.
	// If the value of the state property is 'start' then all flows defined by the 'flow_names'
	// property will be started and the metric counters MUST be cleared prior to starting
	// the flow(s).
	// If the value of the state property is 'stop' then all flows defined by the 'flow_names'
	// property will be stopped and the metric counters MUST NOT be cleared.
	// If the value of the state property is 'pause' then all flows defined by the 'flow_names'
	// property will be paused and the metric counters MUST NOT be cleared.
	// If the value of the state property is 'resume' then any paused flows defined by the
	// 'flow_names' property will start transmit at the point at which they were paused.
	// Any flow that is stopped will start transmit at the beginning of the flow. The flow(s)
	// MUST NOT have their metric counters cleared.
	// required = true
	State TransmitState_State_Enum `protobuf:"varint,2,opt,name=state,proto3,enum=otg.TransmitState_State_Enum" json:"state,omitempty"`
}

func (x *TransmitState) Reset() {
	*x = TransmitState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitState) ProtoMessage() {}

func (x *TransmitState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitState.ProtoReflect.Descriptor instead.
func (*TransmitState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{191}
}

func (x *TransmitState) GetFlowNames() []string {
	if x != nil {
		return x.FlowNames
	}
	return nil
}

func (x *TransmitState) GetState() TransmitState_State_Enum {
	if x != nil {
		return x.State
	}
	return TransmitState_State_unspecified
}

// Control port capture state
type CaptureState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of ports to which the capture state will be applied to. If the list of
	// port_names is empty or null the state will be applied to all configured ports.
	// If the list is not empty any port that is not included in the list of port_names
	// MUST be ignored and not included in the state change.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	PortNames []string `protobuf:"bytes,1,rep,name=port_names,json=portNames,proto3" json:"port_names,omitempty"`
	// The capture state.
	// required = true
	State CaptureState_State_Enum `protobuf:"varint,2,opt,name=state,proto3,enum=otg.CaptureState_State_Enum" json:"state,omitempty"`
}

func (x *CaptureState) Reset() {
	*x = CaptureState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureState) ProtoMessage() {}

func (x *CaptureState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureState.ProtoReflect.Descriptor instead.
func (*CaptureState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{192}
}

func (x *CaptureState) GetPortNames() []string {
	if x != nil {
		return x.PortNames
	}
	return nil
}

func (x *CaptureState) GetState() CaptureState_State_Enum {
	if x != nil {
		return x.State
	}
	return CaptureState_State_unspecified
}

// A container of flows with associated properties to be updated without affecting the
// flows current transmit state.
type FlowsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flow properties to be updated without affecting the transmit state.
	PropertyNames []FlowsUpdate_PropertyNames_Enum `protobuf:"varint,1,rep,packed,name=property_names,json=propertyNames,proto3,enum=otg.FlowsUpdate_PropertyNames_Enum" json:"property_names,omitempty"`
	// The list of configured flows for which given property will be updated.
	Flows []*Flow `protobuf:"bytes,2,rep,name=flows,proto3" json:"flows,omitempty"`
}

func (x *FlowsUpdate) Reset() {
	*x = FlowsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowsUpdate) ProtoMessage() {}

func (x *FlowsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowsUpdate.ProtoReflect.Descriptor instead.
func (*FlowsUpdate) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{193}
}

func (x *FlowsUpdate) GetPropertyNames() []FlowsUpdate_PropertyNames_Enum {
	if x != nil {
		return x.PropertyNames
	}
	return nil
}

func (x *FlowsUpdate) GetFlows() []*Flow {
	if x != nil {
		return x.Flows
	}
	return nil
}

// Sets the device route state
type RouteState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of device route objects to control. If no names are specified then all
	// route objects that match the x-constraint will be affected.
	//
	// x-constraint:
	// - /components/schemas/Bgp.V4RouteRange/properties/name
	// - /components/schemas/Bgp.V6RouteRange/properties/name
	// - /components/schemas/Isis.V4RouteRange/properties/name
	// - /components/schemas/Isis.V6RouteRange/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Bgp.V4RouteRange/properties/name
	// - /components/schemas/Bgp.V6RouteRange/properties/name
	// - /components/schemas/Isis.V4RouteRange/properties/name
	// - /components/schemas/Isis.V6RouteRange/properties/name
	//
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	// Route specific states
	// required = true
	State RouteState_State_Enum `protobuf:"varint,2,opt,name=state,proto3,enum=otg.RouteState_State_Enum" json:"state,omitempty"`
}

func (x *RouteState) Reset() {
	*x = RouteState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteState) ProtoMessage() {}

func (x *RouteState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteState.ProtoReflect.Descriptor instead.
func (*RouteState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{194}
}

func (x *RouteState) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *RouteState) GetState() RouteState_State_Enum {
	if x != nil {
		return x.State
	}
	return RouteState_State_unspecified
}

// Ping request details
type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of ping requests
	Endpoints []*Ping `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{195}
}

func (x *PingRequest) GetEndpoints() []*Ping {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

// Sets all configured protocols to `start` or `stop` state. Setting protocol state
// to `start`  shall be a no-op if preceding `set_config` API call was made with  `config.options.protocol_options.auto_start_all`
// set to `true` or if all the configured protocols are already started.
type ProtocolState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol specific states
	// required = true
	State ProtocolState_State_Enum `protobuf:"varint,1,opt,name=state,proto3,enum=otg.ProtocolState_State_Enum" json:"state,omitempty"`
}

func (x *ProtocolState) Reset() {
	*x = ProtocolState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolState) ProtoMessage() {}

func (x *ProtocolState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolState.ProtoReflect.Descriptor instead.
func (*ProtocolState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{196}
}

func (x *ProtocolState) GetState() ProtocolState_State_Enum {
	if x != nil {
		return x.State
	}
	return ProtocolState_State_unspecified
}

// Sets attributes for the requested state/actions to be performed on device(s)
type DeviceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Choice *DeviceState_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.DeviceState_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	LacpMemberState *LacpMemberState `protobuf:"bytes,2,opt,name=lacp_member_state,json=lacpMemberState,proto3,oneof" json:"lacp_member_state,omitempty"`
}

func (x *DeviceState) Reset() {
	*x = DeviceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceState) ProtoMessage() {}

func (x *DeviceState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceState.ProtoReflect.Descriptor instead.
func (*DeviceState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{197}
}

func (x *DeviceState) GetChoice() DeviceState_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return DeviceState_Choice_unspecified
}

func (x *DeviceState) GetLacpMemberState() *LacpMemberState {
	if x != nil {
		return x.LacpMemberState
	}
	return nil
}

// Description missing in models
type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 or IPv6 ping.
	// default = Choice.Enum.ipv4
	Choice *Ping_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.Ping_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Ipv4 *PingIpv4 `protobuf:"bytes,2,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
	// Description missing in models
	Ipv6 *PingIpv6 `protobuf:"bytes,3,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{198}
}

func (x *Ping) GetChoice() Ping_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return Ping_Choice_unspecified
}

func (x *Ping) GetIpv4() *PingIpv4 {
	if x != nil {
		return x.Ipv4
	}
	return nil
}

func (x *Ping) GetIpv6() *PingIpv6 {
	if x != nil {
		return x.Ipv6
	}
	return nil
}

// Description missing in models
type PingIpv4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A base IPv4 interface
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	//
	SrcName *string `protobuf:"bytes,1,opt,name=src_name,json=srcName,proto3,oneof" json:"src_name,omitempty"`
	// IPv4 address to ping
	DstIp *string `protobuf:"bytes,2,opt,name=dst_ip,json=dstIp,proto3,oneof" json:"dst_ip,omitempty"`
}

func (x *PingIpv4) Reset() {
	*x = PingIpv4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingIpv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingIpv4) ProtoMessage() {}

func (x *PingIpv4) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingIpv4.ProtoReflect.Descriptor instead.
func (*PingIpv4) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{199}
}

func (x *PingIpv4) GetSrcName() string {
	if x != nil && x.SrcName != nil {
		return *x.SrcName
	}
	return ""
}

func (x *PingIpv4) GetDstIp() string {
	if x != nil && x.DstIp != nil {
		return *x.DstIp
	}
	return ""
}

// Description missing in models
type PingIpv6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A base IPv6 interface
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv6/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv6/properties/name
	//
	SrcName *string `protobuf:"bytes,1,opt,name=src_name,json=srcName,proto3,oneof" json:"src_name,omitempty"`
	// IPv6 addresses to ping.
	DstIp *string `protobuf:"bytes,2,opt,name=dst_ip,json=dstIp,proto3,oneof" json:"dst_ip,omitempty"`
}

func (x *PingIpv6) Reset() {
	*x = PingIpv6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingIpv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingIpv6) ProtoMessage() {}

func (x *PingIpv6) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingIpv6.ProtoReflect.Descriptor instead.
func (*PingIpv6) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{200}
}

func (x *PingIpv6) GetSrcName() string {
	if x != nil && x.SrcName != nil {
		return *x.SrcName
	}
	return ""
}

func (x *PingIpv6) GetDstIp() string {
	if x != nil && x.DstIp != nil {
		return *x.DstIp
	}
	return ""
}

// A container for ping responses.
type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	Responses []*Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{201}
}

func (x *PingResponse) GetResponses() []*Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

// Description missing in models
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the source IPv4 or IPv6 interface from which ping was sent.
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv6/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ipv4/properties/name
	// - /components/schemas/Device.Ipv6/properties/name
	//
	SrcName *string `protobuf:"bytes,1,opt,name=src_name,json=srcName,proto3,oneof" json:"src_name,omitempty"`
	// Destination address.
	DstIp *string `protobuf:"bytes,2,opt,name=dst_ip,json=dstIp,proto3,oneof" json:"dst_ip,omitempty"`
	// Result of the ping request.
	// default = Result.Enum.failure
	Result *Response_Result_Enum `protobuf:"varint,3,opt,name=result,proto3,enum=otg.Response_Result_Enum,oneof" json:"result,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{202}
}

func (x *Response) GetSrcName() string {
	if x != nil && x.SrcName != nil {
		return *x.SrcName
	}
	return ""
}

func (x *Response) GetDstIp() string {
	if x != nil && x.DstIp != nil {
		return *x.DstIp
	}
	return ""
}

func (x *Response) GetResult() Response_Result_Enum {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return Response_Result_unspecified
}

// Set LACP state for specified LAG Member Port(s).
type LacpMemberState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of LAG members (ports) for which the state has to be applied. An empty
	// or null list will control all LAG members.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	LagMemberPortNames []string `protobuf:"bytes,1,rep,name=lag_member_port_names,json=lagMemberPortNames,proto3" json:"lag_member_port_names,omitempty"`
	// The LACP Member admin state. 'up' will send LACPDUs with 'sync' flag set on selected
	// member ports. 'down' will send LACPDUs with 'sync' flag unset on selected member
	// ports.
	// required = true
	State LacpMemberState_State_Enum `protobuf:"varint,2,opt,name=state,proto3,enum=otg.LacpMemberState_State_Enum" json:"state,omitempty"`
}

func (x *LacpMemberState) Reset() {
	*x = LacpMemberState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LacpMemberState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpMemberState) ProtoMessage() {}

func (x *LacpMemberState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpMemberState.ProtoReflect.Descriptor instead.
func (*LacpMemberState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{203}
}

func (x *LacpMemberState) GetLagMemberPortNames() []string {
	if x != nil {
		return x.LagMemberPortNames
	}
	return nil
}

func (x *LacpMemberState) GetState() LacpMemberState_State_Enum {
	if x != nil {
		return x.State
	}
	return LacpMemberState_State_unspecified
}

// Request to traffic generator for metrics of choice.
type MetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.port
	Choice *MetricsRequest_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.MetricsRequest_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Port *PortMetricsRequest `protobuf:"bytes,2,opt,name=port,proto3,oneof" json:"port,omitempty"`
	// Description missing in models
	Flow *FlowMetricsRequest `protobuf:"bytes,3,opt,name=flow,proto3,oneof" json:"flow,omitempty"`
	// Description missing in models
	Bgpv4 *Bgpv4MetricsRequest `protobuf:"bytes,4,opt,name=bgpv4,proto3,oneof" json:"bgpv4,omitempty"`
	// Description missing in models
	Bgpv6 *Bgpv6MetricsRequest `protobuf:"bytes,5,opt,name=bgpv6,proto3,oneof" json:"bgpv6,omitempty"`
	// Description missing in models
	Isis *IsisMetricsRequest `protobuf:"bytes,6,opt,name=isis,proto3,oneof" json:"isis,omitempty"`
	// Description missing in models
	Lag *LagMetricsRequest `protobuf:"bytes,7,opt,name=lag,proto3,oneof" json:"lag,omitempty"`
	// Description missing in models
	Lacp *LacpMetricsRequest `protobuf:"bytes,8,opt,name=lacp,proto3,oneof" json:"lacp,omitempty"`
	// Description missing in models
	Lldp *LldpMetricsRequest `protobuf:"bytes,9,opt,name=lldp,proto3,oneof" json:"lldp,omitempty"`
	// Description missing in models
	Rsvp *RsvpMetricsRequest `protobuf:"bytes,10,opt,name=rsvp,proto3,oneof" json:"rsvp,omitempty"`
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{204}
}

func (x *MetricsRequest) GetChoice() MetricsRequest_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return MetricsRequest_Choice_unspecified
}

func (x *MetricsRequest) GetPort() *PortMetricsRequest {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *MetricsRequest) GetFlow() *FlowMetricsRequest {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *MetricsRequest) GetBgpv4() *Bgpv4MetricsRequest {
	if x != nil {
		return x.Bgpv4
	}
	return nil
}

func (x *MetricsRequest) GetBgpv6() *Bgpv6MetricsRequest {
	if x != nil {
		return x.Bgpv6
	}
	return nil
}

func (x *MetricsRequest) GetIsis() *IsisMetricsRequest {
	if x != nil {
		return x.Isis
	}
	return nil
}

func (x *MetricsRequest) GetLag() *LagMetricsRequest {
	if x != nil {
		return x.Lag
	}
	return nil
}

func (x *MetricsRequest) GetLacp() *LacpMetricsRequest {
	if x != nil {
		return x.Lacp
	}
	return nil
}

func (x *MetricsRequest) GetLldp() *LldpMetricsRequest {
	if x != nil {
		return x.Lldp
	}
	return nil
}

func (x *MetricsRequest) GetRsvp() *RsvpMetricsRequest {
	if x != nil {
		return x.Rsvp
	}
	return nil
}

// Response containing chosen traffic generator metrics.
type MetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.port_metrics
	Choice *MetricsResponse_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.MetricsResponse_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	PortMetrics []*PortMetric `protobuf:"bytes,2,rep,name=port_metrics,json=portMetrics,proto3" json:"port_metrics,omitempty"`
	// Description missing in models
	FlowMetrics []*FlowMetric `protobuf:"bytes,3,rep,name=flow_metrics,json=flowMetrics,proto3" json:"flow_metrics,omitempty"`
	// Description missing in models
	Bgpv4Metrics []*Bgpv4Metric `protobuf:"bytes,4,rep,name=bgpv4_metrics,json=bgpv4Metrics,proto3" json:"bgpv4_metrics,omitempty"`
	// Description missing in models
	Bgpv6Metrics []*Bgpv6Metric `protobuf:"bytes,5,rep,name=bgpv6_metrics,json=bgpv6Metrics,proto3" json:"bgpv6_metrics,omitempty"`
	// Description missing in models
	IsisMetrics []*IsisMetric `protobuf:"bytes,6,rep,name=isis_metrics,json=isisMetrics,proto3" json:"isis_metrics,omitempty"`
	// Description missing in models
	LagMetrics []*LagMetric `protobuf:"bytes,7,rep,name=lag_metrics,json=lagMetrics,proto3" json:"lag_metrics,omitempty"`
	// Description missing in models
	LacpMetrics []*LacpMetric `protobuf:"bytes,8,rep,name=lacp_metrics,json=lacpMetrics,proto3" json:"lacp_metrics,omitempty"`
	// Description missing in models
	LldpMetrics []*LldpMetric `protobuf:"bytes,9,rep,name=lldp_metrics,json=lldpMetrics,proto3" json:"lldp_metrics,omitempty"`
	// Description missing in models
	RsvpMetrics []*RsvpMetric `protobuf:"bytes,10,rep,name=rsvp_metrics,json=rsvpMetrics,proto3" json:"rsvp_metrics,omitempty"`
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{205}
}

func (x *MetricsResponse) GetChoice() MetricsResponse_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return MetricsResponse_Choice_unspecified
}

func (x *MetricsResponse) GetPortMetrics() []*PortMetric {
	if x != nil {
		return x.PortMetrics
	}
	return nil
}

func (x *MetricsResponse) GetFlowMetrics() []*FlowMetric {
	if x != nil {
		return x.FlowMetrics
	}
	return nil
}

func (x *MetricsResponse) GetBgpv4Metrics() []*Bgpv4Metric {
	if x != nil {
		return x.Bgpv4Metrics
	}
	return nil
}

func (x *MetricsResponse) GetBgpv6Metrics() []*Bgpv6Metric {
	if x != nil {
		return x.Bgpv6Metrics
	}
	return nil
}

func (x *MetricsResponse) GetIsisMetrics() []*IsisMetric {
	if x != nil {
		return x.IsisMetrics
	}
	return nil
}

func (x *MetricsResponse) GetLagMetrics() []*LagMetric {
	if x != nil {
		return x.LagMetrics
	}
	return nil
}

func (x *MetricsResponse) GetLacpMetrics() []*LacpMetric {
	if x != nil {
		return x.LacpMetrics
	}
	return nil
}

func (x *MetricsResponse) GetLldpMetrics() []*LldpMetric {
	if x != nil {
		return x.LldpMetrics
	}
	return nil
}

func (x *MetricsResponse) GetRsvpMetrics() []*RsvpMetric {
	if x != nil {
		return x.RsvpMetrics
	}
	return nil
}

// The port result request to the traffic generator
type PortMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of objects to return results for. An empty list will return all port row
	// results.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	PortNames []string `protobuf:"bytes,1,rep,name=port_names,json=portNames,proto3" json:"port_names,omitempty"`
	// The list of column names that the returned result set will contain. If the list is
	// empty then all columns will be returned. The name of the port cannot be excluded.
	ColumnNames []PortMetricsRequest_ColumnNames_Enum `protobuf:"varint,2,rep,packed,name=column_names,json=columnNames,proto3,enum=otg.PortMetricsRequest_ColumnNames_Enum" json:"column_names,omitempty"`
}

func (x *PortMetricsRequest) Reset() {
	*x = PortMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMetricsRequest) ProtoMessage() {}

func (x *PortMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMetricsRequest.ProtoReflect.Descriptor instead.
func (*PortMetricsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{206}
}

func (x *PortMetricsRequest) GetPortNames() []string {
	if x != nil {
		return x.PortNames
	}
	return nil
}

func (x *PortMetricsRequest) GetColumnNames() []PortMetricsRequest_ColumnNames_Enum {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

// Description missing in models
type PortMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a configured port
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The state of the connection to the test port location. The format should be the configured
	// port location along with  any custom connection state message.
	Location *string `protobuf:"bytes,2,opt,name=location,proto3,oneof" json:"location,omitempty"`
	// The state of the test port link The string can be up, down or a custom error message.
	Link *PortMetric_Link_Enum `protobuf:"varint,3,opt,name=link,proto3,enum=otg.PortMetric_Link_Enum,oneof" json:"link,omitempty"`
	// The state of the test port capture infrastructure. The string can be started, stopped
	// or a custom error message.
	Capture *PortMetric_Capture_Enum `protobuf:"varint,4,opt,name=capture,proto3,enum=otg.PortMetric_Capture_Enum,oneof" json:"capture,omitempty"`
	// The current total number of frames transmitted
	FramesTx *int64 `protobuf:"varint,5,opt,name=frames_tx,json=framesTx,proto3,oneof" json:"frames_tx,omitempty"`
	// The current total number of valid frames received
	FramesRx *int64 `protobuf:"varint,6,opt,name=frames_rx,json=framesRx,proto3,oneof" json:"frames_rx,omitempty"`
	// The current total number of bytes transmitted
	BytesTx *int64 `protobuf:"varint,7,opt,name=bytes_tx,json=bytesTx,proto3,oneof" json:"bytes_tx,omitempty"`
	// The current total number of valid bytes received
	BytesRx *int64 `protobuf:"varint,8,opt,name=bytes_rx,json=bytesRx,proto3,oneof" json:"bytes_rx,omitempty"`
	// The current rate of frames transmitted
	FramesTxRate *float32 `protobuf:"fixed32,9,opt,name=frames_tx_rate,json=framesTxRate,proto3,oneof" json:"frames_tx_rate,omitempty"`
	// The current rate of valid frames received
	FramesRxRate *float32 `protobuf:"fixed32,10,opt,name=frames_rx_rate,json=framesRxRate,proto3,oneof" json:"frames_rx_rate,omitempty"`
	// The current rate of bytes transmitted
	BytesTxRate *float32 `protobuf:"fixed32,11,opt,name=bytes_tx_rate,json=bytesTxRate,proto3,oneof" json:"bytes_tx_rate,omitempty"`
	// The current rate of bytes received
	BytesRxRate *float32 `protobuf:"fixed32,12,opt,name=bytes_rx_rate,json=bytesRxRate,proto3,oneof" json:"bytes_rx_rate,omitempty"`
	// The transmit state of the flow.
	Transmit *PortMetric_Transmit_Enum `protobuf:"varint,13,opt,name=transmit,proto3,enum=otg.PortMetric_Transmit_Enum,oneof" json:"transmit,omitempty"`
}

func (x *PortMetric) Reset() {
	*x = PortMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMetric) ProtoMessage() {}

func (x *PortMetric) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMetric.ProtoReflect.Descriptor instead.
func (*PortMetric) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{207}
}

func (x *PortMetric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PortMetric) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *PortMetric) GetLink() PortMetric_Link_Enum {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return PortMetric_Link_unspecified
}

func (x *PortMetric) GetCapture() PortMetric_Capture_Enum {
	if x != nil && x.Capture != nil {
		return *x.Capture
	}
	return PortMetric_Capture_unspecified
}

func (x *PortMetric) GetFramesTx() int64 {
	if x != nil && x.FramesTx != nil {
		return *x.FramesTx
	}
	return 0
}

func (x *PortMetric) GetFramesRx() int64 {
	if x != nil && x.FramesRx != nil {
		return *x.FramesRx
	}
	return 0
}

func (x *PortMetric) GetBytesTx() int64 {
	if x != nil && x.BytesTx != nil {
		return *x.BytesTx
	}
	return 0
}

func (x *PortMetric) GetBytesRx() int64 {
	if x != nil && x.BytesRx != nil {
		return *x.BytesRx
	}
	return 0
}

func (x *PortMetric) GetFramesTxRate() float32 {
	if x != nil && x.FramesTxRate != nil {
		return *x.FramesTxRate
	}
	return 0
}

func (x *PortMetric) GetFramesRxRate() float32 {
	if x != nil && x.FramesRxRate != nil {
		return *x.FramesRxRate
	}
	return 0
}

func (x *PortMetric) GetBytesTxRate() float32 {
	if x != nil && x.BytesTxRate != nil {
		return *x.BytesTxRate
	}
	return 0
}

func (x *PortMetric) GetBytesRxRate() float32 {
	if x != nil && x.BytesRxRate != nil {
		return *x.BytesRxRate
	}
	return 0
}

func (x *PortMetric) GetTransmit() PortMetric_Transmit_Enum {
	if x != nil && x.Transmit != nil {
		return *x.Transmit
	}
	return PortMetric_Transmit_unspecified
}

// The container for a flow metric request.
type FlowMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flow metrics will be retrieved for these flow names.
	// If no flow names are specified then all flows will be returned.
	//
	// x-constraint:
	// - /components/schemas/Flow/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Flow/properties/name
	//
	FlowNames []string `protobuf:"bytes,1,rep,name=flow_names,json=flowNames,proto3" json:"flow_names,omitempty"`
	// A list of metric groups used to disaggregate flows. A metric group that does not
	// exist for a flow group MUST return an error.
	MetricGroups *FlowMetricGroupRequest `protobuf:"bytes,2,opt,name=metric_groups,json=metricGroups,proto3,oneof" json:"metric_groups,omitempty"`
	// The list of metric names that the returned result set will contain. If the list is
	// empty then all metrics will be returned.
	MetricNames []FlowMetricsRequest_MetricNames_Enum `protobuf:"varint,3,rep,packed,name=metric_names,json=metricNames,proto3,enum=otg.FlowMetricsRequest_MetricNames_Enum" json:"metric_names,omitempty"`
}

func (x *FlowMetricsRequest) Reset() {
	*x = FlowMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMetricsRequest) ProtoMessage() {}

func (x *FlowMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMetricsRequest.ProtoReflect.Descriptor instead.
func (*FlowMetricsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{208}
}

func (x *FlowMetricsRequest) GetFlowNames() []string {
	if x != nil {
		return x.FlowNames
	}
	return nil
}

func (x *FlowMetricsRequest) GetMetricGroups() *FlowMetricGroupRequest {
	if x != nil {
		return x.MetricGroups
	}
	return nil
}

func (x *FlowMetricsRequest) GetMetricNames() []FlowMetricsRequest_MetricNames_Enum {
	if x != nil {
		return x.MetricNames
	}
	return nil
}

// Description missing in models
type FlowMetricGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of disaggregation to be applied to the flow metrics.
	// default = Choice.Enum.ingress
	Choice *FlowMetricGroupRequest_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.FlowMetricGroupRequest_Choice_Enum,oneof" json:"choice,omitempty"`
	// Disaggregate the flow metrics by ingress packet header field names.
	// If the items is empty then no disaggregation will be done.
	//
	// x-constraint:
	// - /components/schemas/Flow/properties/packet/../metric_group
	//
	//
	// x-constraint:
	// - /components/schemas/Flow/properties/packet/../metric_group
	//
	// default = []
	Ingress []string `protobuf:"bytes,2,rep,name=ingress,proto3" json:"ingress,omitempty"`
	// Disaggregate the flow metrics by egress packet header field names
	// If the items is empty then no disaggregation will be done.
	//
	// x-constraint:
	// - /components/schemas/Flow/properties/egress/../metric_group
	//
	//
	// x-constraint:
	// - /components/schemas/Flow/properties/egress/../metric_group
	//
	// default = []
	Egress []string `protobuf:"bytes,3,rep,name=egress,proto3" json:"egress,omitempty"`
}

func (x *FlowMetricGroupRequest) Reset() {
	*x = FlowMetricGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMetricGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMetricGroupRequest) ProtoMessage() {}

func (x *FlowMetricGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMetricGroupRequest.ProtoReflect.Descriptor instead.
func (*FlowMetricGroupRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{209}
}

func (x *FlowMetricGroupRequest) GetChoice() FlowMetricGroupRequest_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return FlowMetricGroupRequest_Choice_unspecified
}

func (x *FlowMetricGroupRequest) GetIngress() []string {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *FlowMetricGroupRequest) GetEgress() []string {
	if x != nil {
		return x.Egress
	}
	return nil
}

// A container for flow metrics.
// The container is keyed by the name, port_tx, port_rx and metric_groups
// values.
type FlowMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the flow
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The name of the transmit port
	PortTx *string `protobuf:"bytes,2,opt,name=port_tx,json=portTx,proto3,oneof" json:"port_tx,omitempty"`
	// The name of the receive port
	PortRx *string `protobuf:"bytes,3,opt,name=port_rx,json=portRx,proto3,oneof" json:"port_rx,omitempty"`
	// Flow disaggregation groups.
	MetricGroups []*FlowMetricGroup `protobuf:"bytes,4,rep,name=metric_groups,json=metricGroups,proto3" json:"metric_groups,omitempty"`
	// The transmit state of the flow.
	Transmit *FlowMetric_Transmit_Enum `protobuf:"varint,5,opt,name=transmit,proto3,enum=otg.FlowMetric_Transmit_Enum,oneof" json:"transmit,omitempty"`
	// The current total number of frames transmitted
	FramesTx *int64 `protobuf:"varint,6,opt,name=frames_tx,json=framesTx,proto3,oneof" json:"frames_tx,omitempty"`
	// The current total number of valid frames received
	FramesRx *int64 `protobuf:"varint,7,opt,name=frames_rx,json=framesRx,proto3,oneof" json:"frames_rx,omitempty"`
	// The current total number of bytes transmitted
	BytesTx *int64 `protobuf:"varint,8,opt,name=bytes_tx,json=bytesTx,proto3,oneof" json:"bytes_tx,omitempty"`
	// The current total number of bytes received
	BytesRx *int64 `protobuf:"varint,9,opt,name=bytes_rx,json=bytesRx,proto3,oneof" json:"bytes_rx,omitempty"`
	// The current rate of frames transmitted
	FramesTxRate *float32 `protobuf:"fixed32,10,opt,name=frames_tx_rate,json=framesTxRate,proto3,oneof" json:"frames_tx_rate,omitempty"`
	// The current rate of valid frames received
	FramesRxRate *float32 `protobuf:"fixed32,11,opt,name=frames_rx_rate,json=framesRxRate,proto3,oneof" json:"frames_rx_rate,omitempty"`
	// The percentage of lost frames
	Loss *float32 `protobuf:"fixed32,12,opt,name=loss,proto3,oneof" json:"loss,omitempty"`
	// Description missing in models
	Timestamps *MetricTimestamp `protobuf:"bytes,13,opt,name=timestamps,proto3,oneof" json:"timestamps,omitempty"`
	// Description missing in models
	Latency *MetricLatency `protobuf:"bytes,14,opt,name=latency,proto3,oneof" json:"latency,omitempty"`
}

func (x *FlowMetric) Reset() {
	*x = FlowMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMetric) ProtoMessage() {}

func (x *FlowMetric) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMetric.ProtoReflect.Descriptor instead.
func (*FlowMetric) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{210}
}

func (x *FlowMetric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FlowMetric) GetPortTx() string {
	if x != nil && x.PortTx != nil {
		return *x.PortTx
	}
	return ""
}

func (x *FlowMetric) GetPortRx() string {
	if x != nil && x.PortRx != nil {
		return *x.PortRx
	}
	return ""
}

func (x *FlowMetric) GetMetricGroups() []*FlowMetricGroup {
	if x != nil {
		return x.MetricGroups
	}
	return nil
}

func (x *FlowMetric) GetTransmit() FlowMetric_Transmit_Enum {
	if x != nil && x.Transmit != nil {
		return *x.Transmit
	}
	return FlowMetric_Transmit_unspecified
}

func (x *FlowMetric) GetFramesTx() int64 {
	if x != nil && x.FramesTx != nil {
		return *x.FramesTx
	}
	return 0
}

func (x *FlowMetric) GetFramesRx() int64 {
	if x != nil && x.FramesRx != nil {
		return *x.FramesRx
	}
	return 0
}

func (x *FlowMetric) GetBytesTx() int64 {
	if x != nil && x.BytesTx != nil {
		return *x.BytesTx
	}
	return 0
}

func (x *FlowMetric) GetBytesRx() int64 {
	if x != nil && x.BytesRx != nil {
		return *x.BytesRx
	}
	return 0
}

func (x *FlowMetric) GetFramesTxRate() float32 {
	if x != nil && x.FramesTxRate != nil {
		return *x.FramesTxRate
	}
	return 0
}

func (x *FlowMetric) GetFramesRxRate() float32 {
	if x != nil && x.FramesRxRate != nil {
		return *x.FramesRxRate
	}
	return 0
}

func (x *FlowMetric) GetLoss() float32 {
	if x != nil && x.Loss != nil {
		return *x.Loss
	}
	return 0
}

func (x *FlowMetric) GetTimestamps() *MetricTimestamp {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *FlowMetric) GetLatency() *MetricLatency {
	if x != nil {
		return x.Latency
	}
	return nil
}

// Description missing in models
type FlowMetricGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of packet field metric group
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Value of named packet field metric group
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *FlowMetricGroup) Reset() {
	*x = FlowMetricGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMetricGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMetricGroup) ProtoMessage() {}

func (x *FlowMetricGroup) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMetricGroup.ProtoReflect.Descriptor instead.
func (*FlowMetricGroup) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{211}
}

func (x *FlowMetricGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FlowMetricGroup) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// The container for timestamp metrics.
// The container will be empty if the timestamp has not been configured for
// the flow.
type MetricTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First timestamp in nanoseconds
	FirstTimestampNs *float64 `protobuf:"fixed64,1,opt,name=first_timestamp_ns,json=firstTimestampNs,proto3,oneof" json:"first_timestamp_ns,omitempty"`
	// Last timestamp in nanoseconds
	LastTimestampNs *float64 `protobuf:"fixed64,2,opt,name=last_timestamp_ns,json=lastTimestampNs,proto3,oneof" json:"last_timestamp_ns,omitempty"`
}

func (x *MetricTimestamp) Reset() {
	*x = MetricTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricTimestamp) ProtoMessage() {}

func (x *MetricTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricTimestamp.ProtoReflect.Descriptor instead.
func (*MetricTimestamp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{212}
}

func (x *MetricTimestamp) GetFirstTimestampNs() float64 {
	if x != nil && x.FirstTimestampNs != nil {
		return *x.FirstTimestampNs
	}
	return 0
}

func (x *MetricTimestamp) GetLastTimestampNs() float64 {
	if x != nil && x.LastTimestampNs != nil {
		return *x.LastTimestampNs
	}
	return 0
}

// The container for latency metrics.
// The min/max/avg values are dependent on the type of latency measurement
// mode that is configured.
// The container will be empty if the latency has not been configured for
// the flow.
type MetricLatency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum latency in nanoseconds
	MinimumNs *float64 `protobuf:"fixed64,1,opt,name=minimum_ns,json=minimumNs,proto3,oneof" json:"minimum_ns,omitempty"`
	// Maximum latency in nanoseconds
	MaximumNs *float64 `protobuf:"fixed64,2,opt,name=maximum_ns,json=maximumNs,proto3,oneof" json:"maximum_ns,omitempty"`
	// Average latency in nanoseconds
	AverageNs *float64 `protobuf:"fixed64,3,opt,name=average_ns,json=averageNs,proto3,oneof" json:"average_ns,omitempty"`
}

func (x *MetricLatency) Reset() {
	*x = MetricLatency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricLatency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricLatency) ProtoMessage() {}

func (x *MetricLatency) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricLatency.ProtoReflect.Descriptor instead.
func (*MetricLatency) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{213}
}

func (x *MetricLatency) GetMinimumNs() float64 {
	if x != nil && x.MinimumNs != nil {
		return *x.MinimumNs
	}
	return 0
}

func (x *MetricLatency) GetMaximumNs() float64 {
	if x != nil && x.MaximumNs != nil {
		return *x.MaximumNs
	}
	return 0
}

func (x *MetricLatency) GetAverageNs() float64 {
	if x != nil && x.AverageNs != nil {
		return *x.AverageNs
	}
	return 0
}

// The request to retrieve BGPv4 per peer metrics/statistics.
type Bgpv4MetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of BGPv4 peers to return results for. An empty list will return results
	// for all BGPv4 peers.
	//
	// x-constraint:
	// - /components/schemas/Bgp.V4peer/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Bgp.V4peer/properties/name
	//
	PeerNames []string `protobuf:"bytes,1,rep,name=peer_names,json=peerNames,proto3" json:"peer_names,omitempty"`
	// The list of column names that the returned result set will contain. If the list is
	// empty then all columns will be returned except for any result_groups. The name of
	// the BGPv4 peer cannot be excluded.
	ColumnNames []Bgpv4MetricsRequest_ColumnNames_Enum `protobuf:"varint,2,rep,packed,name=column_names,json=columnNames,proto3,enum=otg.Bgpv4MetricsRequest_ColumnNames_Enum" json:"column_names,omitempty"`
}

func (x *Bgpv4MetricsRequest) Reset() {
	*x = Bgpv4MetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgpv4MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgpv4MetricsRequest) ProtoMessage() {}

func (x *Bgpv4MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgpv4MetricsRequest.ProtoReflect.Descriptor instead.
func (*Bgpv4MetricsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{214}
}

func (x *Bgpv4MetricsRequest) GetPeerNames() []string {
	if x != nil {
		return x.PeerNames
	}
	return nil
}

func (x *Bgpv4MetricsRequest) GetColumnNames() []Bgpv4MetricsRequest_ColumnNames_Enum {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

// BGPv4 per peer statistics information.
type Bgpv4Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a configured BGPv4 peer.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Session state as up or down. Up refers to an Established state and Down refers to
	// any other state.
	SessionState *Bgpv4Metric_SessionState_Enum `protobuf:"varint,2,opt,name=session_state,json=sessionState,proto3,enum=otg.Bgpv4Metric_SessionState_Enum,oneof" json:"session_state,omitempty"`
	// Number of times the session went from Up to Down state.
	SessionFlapCount *int32 `protobuf:"varint,3,opt,name=session_flap_count,json=sessionFlapCount,proto3,oneof" json:"session_flap_count,omitempty"`
	// Number of routes advertised.
	RoutesAdvertised *int32 `protobuf:"varint,4,opt,name=routes_advertised,json=routesAdvertised,proto3,oneof" json:"routes_advertised,omitempty"`
	// Number of routes received.
	RoutesReceived *int32 `protobuf:"varint,5,opt,name=routes_received,json=routesReceived,proto3,oneof" json:"routes_received,omitempty"`
	// Number of route withdraws sent.
	RouteWithdrawsSent *int32 `protobuf:"varint,6,opt,name=route_withdraws_sent,json=routeWithdrawsSent,proto3,oneof" json:"route_withdraws_sent,omitempty"`
	// Number of route withdraws received.
	RouteWithdrawsReceived *int32 `protobuf:"varint,7,opt,name=route_withdraws_received,json=routeWithdrawsReceived,proto3,oneof" json:"route_withdraws_received,omitempty"`
	// Number of Update messages sent.
	UpdatesSent *int32 `protobuf:"varint,8,opt,name=updates_sent,json=updatesSent,proto3,oneof" json:"updates_sent,omitempty"`
	// Number of Update messages received.
	UpdatesReceived *int32 `protobuf:"varint,9,opt,name=updates_received,json=updatesReceived,proto3,oneof" json:"updates_received,omitempty"`
	// Number of Open messages sent.
	OpensSent *int32 `protobuf:"varint,10,opt,name=opens_sent,json=opensSent,proto3,oneof" json:"opens_sent,omitempty"`
	// Number of Open messages received.
	OpensReceived *int32 `protobuf:"varint,11,opt,name=opens_received,json=opensReceived,proto3,oneof" json:"opens_received,omitempty"`
	// Number of Keepalive messages sent.
	KeepalivesSent *int32 `protobuf:"varint,12,opt,name=keepalives_sent,json=keepalivesSent,proto3,oneof" json:"keepalives_sent,omitempty"`
	// Number of Keepalive messages received.
	KeepalivesReceived *int32 `protobuf:"varint,13,opt,name=keepalives_received,json=keepalivesReceived,proto3,oneof" json:"keepalives_received,omitempty"`
	// Number of Notification messages sent.
	NotificationsSent *int32 `protobuf:"varint,14,opt,name=notifications_sent,json=notificationsSent,proto3,oneof" json:"notifications_sent,omitempty"`
	// Number of Notification messages received.
	NotificationsReceived *int32 `protobuf:"varint,15,opt,name=notifications_received,json=notificationsReceived,proto3,oneof" json:"notifications_received,omitempty"`
	// BGP peer FSM (Finite State Machine) state as Idle, Connect, Active, OpenSent, OpenConfirm
	// and Established. In all the states except Established the BGP session is down. Idle
	// refers to the Idle state of the FSM. Connect refers to the state where the session
	// is waiting for the underlying transport session to be established. Active refers
	// to the state where the session is awaiting for a connection from the remote peer.
	// OpenSent refers to the state where the session is in the process of being established.
	// The local system has sent an OPEN message. OpenConfirm refers to the state where
	// the session is in the process of being established. The local system has sent and
	// received an OPEN message and is awaiting a NOTIFICATION or KEEPALIVE message from
	// remote peer. Established refers to the state where the BGP session with the peer
	// is established.
	FsmState *Bgpv4Metric_FsmState_Enum `protobuf:"varint,16,opt,name=fsm_state,json=fsmState,proto3,enum=otg.Bgpv4Metric_FsmState_Enum,oneof" json:"fsm_state,omitempty"`
}

func (x *Bgpv4Metric) Reset() {
	*x = Bgpv4Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgpv4Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgpv4Metric) ProtoMessage() {}

func (x *Bgpv4Metric) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgpv4Metric.ProtoReflect.Descriptor instead.
func (*Bgpv4Metric) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{215}
}

func (x *Bgpv4Metric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Bgpv4Metric) GetSessionState() Bgpv4Metric_SessionState_Enum {
	if x != nil && x.SessionState != nil {
		return *x.SessionState
	}
	return Bgpv4Metric_SessionState_unspecified
}

func (x *Bgpv4Metric) GetSessionFlapCount() int32 {
	if x != nil && x.SessionFlapCount != nil {
		return *x.SessionFlapCount
	}
	return 0
}

func (x *Bgpv4Metric) GetRoutesAdvertised() int32 {
	if x != nil && x.RoutesAdvertised != nil {
		return *x.RoutesAdvertised
	}
	return 0
}

func (x *Bgpv4Metric) GetRoutesReceived() int32 {
	if x != nil && x.RoutesReceived != nil {
		return *x.RoutesReceived
	}
	return 0
}

func (x *Bgpv4Metric) GetRouteWithdrawsSent() int32 {
	if x != nil && x.RouteWithdrawsSent != nil {
		return *x.RouteWithdrawsSent
	}
	return 0
}

func (x *Bgpv4Metric) GetRouteWithdrawsReceived() int32 {
	if x != nil && x.RouteWithdrawsReceived != nil {
		return *x.RouteWithdrawsReceived
	}
	return 0
}

func (x *Bgpv4Metric) GetUpdatesSent() int32 {
	if x != nil && x.UpdatesSent != nil {
		return *x.UpdatesSent
	}
	return 0
}

func (x *Bgpv4Metric) GetUpdatesReceived() int32 {
	if x != nil && x.UpdatesReceived != nil {
		return *x.UpdatesReceived
	}
	return 0
}

func (x *Bgpv4Metric) GetOpensSent() int32 {
	if x != nil && x.OpensSent != nil {
		return *x.OpensSent
	}
	return 0
}

func (x *Bgpv4Metric) GetOpensReceived() int32 {
	if x != nil && x.OpensReceived != nil {
		return *x.OpensReceived
	}
	return 0
}

func (x *Bgpv4Metric) GetKeepalivesSent() int32 {
	if x != nil && x.KeepalivesSent != nil {
		return *x.KeepalivesSent
	}
	return 0
}

func (x *Bgpv4Metric) GetKeepalivesReceived() int32 {
	if x != nil && x.KeepalivesReceived != nil {
		return *x.KeepalivesReceived
	}
	return 0
}

func (x *Bgpv4Metric) GetNotificationsSent() int32 {
	if x != nil && x.NotificationsSent != nil {
		return *x.NotificationsSent
	}
	return 0
}

func (x *Bgpv4Metric) GetNotificationsReceived() int32 {
	if x != nil && x.NotificationsReceived != nil {
		return *x.NotificationsReceived
	}
	return 0
}

func (x *Bgpv4Metric) GetFsmState() Bgpv4Metric_FsmState_Enum {
	if x != nil && x.FsmState != nil {
		return *x.FsmState
	}
	return Bgpv4Metric_FsmState_unspecified
}

// The request to retrieve BGPv6 per peer metrics/statistics.
type Bgpv6MetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of BGPv6 peers to return results for. An empty list will return results
	// for all BGPv6 peers.
	//
	// x-constraint:
	// - /components/schemas/Bgp.V6peer/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Bgp.V6peer/properties/name
	//
	PeerNames []string `protobuf:"bytes,1,rep,name=peer_names,json=peerNames,proto3" json:"peer_names,omitempty"`
	// The list of column names that the returned result set will contain. If the list is
	// empty then all columns will be returned except for any result_groups. The name of
	// the BGPv6 peer cannot be excluded.
	ColumnNames []Bgpv6MetricsRequest_ColumnNames_Enum `protobuf:"varint,2,rep,packed,name=column_names,json=columnNames,proto3,enum=otg.Bgpv6MetricsRequest_ColumnNames_Enum" json:"column_names,omitempty"`
}

func (x *Bgpv6MetricsRequest) Reset() {
	*x = Bgpv6MetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgpv6MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgpv6MetricsRequest) ProtoMessage() {}

func (x *Bgpv6MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgpv6MetricsRequest.ProtoReflect.Descriptor instead.
func (*Bgpv6MetricsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{216}
}

func (x *Bgpv6MetricsRequest) GetPeerNames() []string {
	if x != nil {
		return x.PeerNames
	}
	return nil
}

func (x *Bgpv6MetricsRequest) GetColumnNames() []Bgpv6MetricsRequest_ColumnNames_Enum {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

// BGPv6 per peer statistics information.
type Bgpv6Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a configured BGPv6 peer.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Session state as up or down. Up refers to an Established state and Down refers to
	// any other state.
	SessionState *Bgpv6Metric_SessionState_Enum `protobuf:"varint,2,opt,name=session_state,json=sessionState,proto3,enum=otg.Bgpv6Metric_SessionState_Enum,oneof" json:"session_state,omitempty"`
	// Number of times the session went from Up to Down state.
	SessionFlapCount *int32 `protobuf:"varint,3,opt,name=session_flap_count,json=sessionFlapCount,proto3,oneof" json:"session_flap_count,omitempty"`
	// Number of routes advertised.
	RoutesAdvertised *int32 `protobuf:"varint,4,opt,name=routes_advertised,json=routesAdvertised,proto3,oneof" json:"routes_advertised,omitempty"`
	// Number of routes received.
	RoutesReceived *int32 `protobuf:"varint,5,opt,name=routes_received,json=routesReceived,proto3,oneof" json:"routes_received,omitempty"`
	// Number of route withdraws sent.
	RouteWithdrawsSent *int32 `protobuf:"varint,6,opt,name=route_withdraws_sent,json=routeWithdrawsSent,proto3,oneof" json:"route_withdraws_sent,omitempty"`
	// Number of route withdraws received.
	RouteWithdrawsReceived *int32 `protobuf:"varint,7,opt,name=route_withdraws_received,json=routeWithdrawsReceived,proto3,oneof" json:"route_withdraws_received,omitempty"`
	// Number of Update messages sent.
	UpdatesSent *int32 `protobuf:"varint,8,opt,name=updates_sent,json=updatesSent,proto3,oneof" json:"updates_sent,omitempty"`
	// Number of Update messages received.
	UpdatesReceived *int32 `protobuf:"varint,9,opt,name=updates_received,json=updatesReceived,proto3,oneof" json:"updates_received,omitempty"`
	// Number of Open messages sent.
	OpensSent *int32 `protobuf:"varint,10,opt,name=opens_sent,json=opensSent,proto3,oneof" json:"opens_sent,omitempty"`
	// Number of Open messages received.
	OpensReceived *int32 `protobuf:"varint,11,opt,name=opens_received,json=opensReceived,proto3,oneof" json:"opens_received,omitempty"`
	// Number of Keepalive messages sent.
	KeepalivesSent *int32 `protobuf:"varint,12,opt,name=keepalives_sent,json=keepalivesSent,proto3,oneof" json:"keepalives_sent,omitempty"`
	// Number of Keepalive messages received.
	KeepalivesReceived *int32 `protobuf:"varint,13,opt,name=keepalives_received,json=keepalivesReceived,proto3,oneof" json:"keepalives_received,omitempty"`
	// Number of Notification messages sent.
	NotificationsSent *int32 `protobuf:"varint,14,opt,name=notifications_sent,json=notificationsSent,proto3,oneof" json:"notifications_sent,omitempty"`
	// Number of Notification messages received.
	NotificationsReceived *int32 `protobuf:"varint,15,opt,name=notifications_received,json=notificationsReceived,proto3,oneof" json:"notifications_received,omitempty"`
	// BGP peer FSM (Finite State Machine) state as Idle, Connect, Active, OpenSent, OpenConfirm
	// and Established. In all the states except Established the BGP session is down. Idle
	// refers to the Idle state of the FSM. Connect refers to the state where the session
	// is waiting for the underlying transport session to be established. Active refers
	// to the state where the session is awaiting for a connection from the remote peer.
	// OpenSent refers to the state where the session is in the process of being established.
	// The local system has sent an OPEN message. OpenConfirm refers to the state where
	// the session is in the process of being established. The local system has sent and
	// received an OPEN message and is awaiting a NOTIFICATION or KEEPALIVE message from
	// remote peer. Established refers to the state where the BGP session with the peer
	// is established.
	FsmState *Bgpv6Metric_FsmState_Enum `protobuf:"varint,16,opt,name=fsm_state,json=fsmState,proto3,enum=otg.Bgpv6Metric_FsmState_Enum,oneof" json:"fsm_state,omitempty"`
}

func (x *Bgpv6Metric) Reset() {
	*x = Bgpv6Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgpv6Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgpv6Metric) ProtoMessage() {}

func (x *Bgpv6Metric) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgpv6Metric.ProtoReflect.Descriptor instead.
func (*Bgpv6Metric) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{217}
}

func (x *Bgpv6Metric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Bgpv6Metric) GetSessionState() Bgpv6Metric_SessionState_Enum {
	if x != nil && x.SessionState != nil {
		return *x.SessionState
	}
	return Bgpv6Metric_SessionState_unspecified
}

func (x *Bgpv6Metric) GetSessionFlapCount() int32 {
	if x != nil && x.SessionFlapCount != nil {
		return *x.SessionFlapCount
	}
	return 0
}

func (x *Bgpv6Metric) GetRoutesAdvertised() int32 {
	if x != nil && x.RoutesAdvertised != nil {
		return *x.RoutesAdvertised
	}
	return 0
}

func (x *Bgpv6Metric) GetRoutesReceived() int32 {
	if x != nil && x.RoutesReceived != nil {
		return *x.RoutesReceived
	}
	return 0
}

func (x *Bgpv6Metric) GetRouteWithdrawsSent() int32 {
	if x != nil && x.RouteWithdrawsSent != nil {
		return *x.RouteWithdrawsSent
	}
	return 0
}

func (x *Bgpv6Metric) GetRouteWithdrawsReceived() int32 {
	if x != nil && x.RouteWithdrawsReceived != nil {
		return *x.RouteWithdrawsReceived
	}
	return 0
}

func (x *Bgpv6Metric) GetUpdatesSent() int32 {
	if x != nil && x.UpdatesSent != nil {
		return *x.UpdatesSent
	}
	return 0
}

func (x *Bgpv6Metric) GetUpdatesReceived() int32 {
	if x != nil && x.UpdatesReceived != nil {
		return *x.UpdatesReceived
	}
	return 0
}

func (x *Bgpv6Metric) GetOpensSent() int32 {
	if x != nil && x.OpensSent != nil {
		return *x.OpensSent
	}
	return 0
}

func (x *Bgpv6Metric) GetOpensReceived() int32 {
	if x != nil && x.OpensReceived != nil {
		return *x.OpensReceived
	}
	return 0
}

func (x *Bgpv6Metric) GetKeepalivesSent() int32 {
	if x != nil && x.KeepalivesSent != nil {
		return *x.KeepalivesSent
	}
	return 0
}

func (x *Bgpv6Metric) GetKeepalivesReceived() int32 {
	if x != nil && x.KeepalivesReceived != nil {
		return *x.KeepalivesReceived
	}
	return 0
}

func (x *Bgpv6Metric) GetNotificationsSent() int32 {
	if x != nil && x.NotificationsSent != nil {
		return *x.NotificationsSent
	}
	return 0
}

func (x *Bgpv6Metric) GetNotificationsReceived() int32 {
	if x != nil && x.NotificationsReceived != nil {
		return *x.NotificationsReceived
	}
	return 0
}

func (x *Bgpv6Metric) GetFsmState() Bgpv6Metric_FsmState_Enum {
	if x != nil && x.FsmState != nil {
		return *x.FsmState
	}
	return Bgpv6Metric_FsmState_unspecified
}

// The request to retrieve ISIS per Router metrics/statistics.
type IsisMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of ISIS Routers to return results for. An empty list will return results
	// for all ISIS router.
	//
	// x-constraint:
	// - /components/schemas/Device.IsisRouter/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.IsisRouter/properties/name
	//
	RouterNames []string `protobuf:"bytes,1,rep,name=router_names,json=routerNames,proto3" json:"router_names,omitempty"`
	// The list of column names that the returned result set will contain. If the list is
	// empty then all columns will be returned except for any result_groups. The name of
	// the ISIS Router cannot be excluded.
	ColumnNames []IsisMetricsRequest_ColumnNames_Enum `protobuf:"varint,2,rep,packed,name=column_names,json=columnNames,proto3,enum=otg.IsisMetricsRequest_ColumnNames_Enum" json:"column_names,omitempty"`
}

func (x *IsisMetricsRequest) Reset() {
	*x = IsisMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisMetricsRequest) ProtoMessage() {}

func (x *IsisMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisMetricsRequest.ProtoReflect.Descriptor instead.
func (*IsisMetricsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{218}
}

func (x *IsisMetricsRequest) GetRouterNames() []string {
	if x != nil {
		return x.RouterNames
	}
	return nil
}

func (x *IsisMetricsRequest) GetColumnNames() []IsisMetricsRequest_ColumnNames_Enum {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

// ISIS per router statistics information.
type IsisMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a configured ISIS router.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The number of Level 1 (L1) sessions that are fully up.
	L1SessionsUp *int32 `protobuf:"varint,2,opt,name=l1_sessions_up,json=l1SessionsUp,proto3,oneof" json:"l1_sessions_up,omitempty"`
	// The number of Level 1 Sessions Flap.
	L1SessionFlap *int32 `protobuf:"varint,3,opt,name=l1_session_flap,json=l1SessionFlap,proto3,oneof" json:"l1_session_flap,omitempty"`
	// Number of Level 1 Hello messages sent.
	L1BroadcastHellosSent *int32 `protobuf:"varint,4,opt,name=l1_broadcast_hellos_sent,json=l1BroadcastHellosSent,proto3,oneof" json:"l1_broadcast_hellos_sent,omitempty"`
	// Number of Level 1 Hello messages received.
	L1BroadcastHellosReceived *int32 `protobuf:"varint,5,opt,name=l1_broadcast_hellos_received,json=l1BroadcastHellosReceived,proto3,oneof" json:"l1_broadcast_hellos_received,omitempty"`
	// Number of Level 1 Point-to-Point(P2P) Hello messages sent.
	L1PointToPointHellosSent *int32 `protobuf:"varint,6,opt,name=l1_point_to_point_hellos_sent,json=l1PointToPointHellosSent,proto3,oneof" json:"l1_point_to_point_hellos_sent,omitempty"`
	// Number of Level 1 Point-to-Point(P2P) Hello messages received.
	L1PointToPointHellosReceived *int32 `protobuf:"varint,7,opt,name=l1_point_to_point_hellos_received,json=l1PointToPointHellosReceived,proto3,oneof" json:"l1_point_to_point_hellos_received,omitempty"`
	// Number of Link State Updates (LSPs) in the Level 1 LSP Databases.
	L1DatabaseSize *int32 `protobuf:"varint,8,opt,name=l1_database_size,json=l1DatabaseSize,proto3,oneof" json:"l1_database_size,omitempty"`
	// Number of Level 1 (L1) Partial Sequence Number Packet (PSNPs) sent.
	L1PsnpSent *int32 `protobuf:"varint,9,opt,name=l1_psnp_sent,json=l1PsnpSent,proto3,oneof" json:"l1_psnp_sent,omitempty"`
	// Number of Level 1 (L1) Complete Sequence Number Packet (PSNPs) received.
	L1PsnpReceived *int32 `protobuf:"varint,10,opt,name=l1_psnp_received,json=l1PsnpReceived,proto3,oneof" json:"l1_psnp_received,omitempty"`
	// Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) sent.
	L1CsnpSent *int32 `protobuf:"varint,11,opt,name=l1_csnp_sent,json=l1CsnpSent,proto3,oneof" json:"l1_csnp_sent,omitempty"`
	// Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) received.
	L1CsnpReceived *int32 `protobuf:"varint,12,opt,name=l1_csnp_received,json=l1CsnpReceived,proto3,oneof" json:"l1_csnp_received,omitempty"`
	// Number of Level 1 (L1) Link State Protocol Data Units (LSPs) sent.
	L1LspSent *int32 `protobuf:"varint,13,opt,name=l1_lsp_sent,json=l1LspSent,proto3,oneof" json:"l1_lsp_sent,omitempty"`
	// Number of Level 1 (L1) Link State Protocol Data Units (LSPs) received.
	L1LspReceived *int32 `protobuf:"varint,14,opt,name=l1_lsp_received,json=l1LspReceived,proto3,oneof" json:"l1_lsp_received,omitempty"`
	// The number of Level 2 (L2) sessions that are fully up.
	L2SessionsUp *int32 `protobuf:"varint,15,opt,name=l2_sessions_up,json=l2SessionsUp,proto3,oneof" json:"l2_sessions_up,omitempty"`
	// The number of Level 2 Sessions Flap.
	L2SessionFlap *int32 `protobuf:"varint,16,opt,name=l2_session_flap,json=l2SessionFlap,proto3,oneof" json:"l2_session_flap,omitempty"`
	// Number of Level 2 Hello messages sent.
	L2BroadcastHellosSent *int32 `protobuf:"varint,17,opt,name=l2_broadcast_hellos_sent,json=l2BroadcastHellosSent,proto3,oneof" json:"l2_broadcast_hellos_sent,omitempty"`
	// Number of Level 2 Hello messages received.
	L2BroadcastHellosReceived *int32 `protobuf:"varint,18,opt,name=l2_broadcast_hellos_received,json=l2BroadcastHellosReceived,proto3,oneof" json:"l2_broadcast_hellos_received,omitempty"`
	// Number of Level 2 Point-to-Point(P2P) Hello messages sent.
	L2PointToPointHellosSent *int32 `protobuf:"varint,19,opt,name=l2_point_to_point_hellos_sent,json=l2PointToPointHellosSent,proto3,oneof" json:"l2_point_to_point_hellos_sent,omitempty"`
	// Number of Level 2 Point-to-Point(P2P) Hello messages received.
	L2PointToPointHellosReceived *int32 `protobuf:"varint,20,opt,name=l2_point_to_point_hellos_received,json=l2PointToPointHellosReceived,proto3,oneof" json:"l2_point_to_point_hellos_received,omitempty"`
	// Number of Link State Updates (LSPs) in the Level 2 LSP Databases.
	L2DatabaseSize *int32 `protobuf:"varint,21,opt,name=l2_database_size,json=l2DatabaseSize,proto3,oneof" json:"l2_database_size,omitempty"`
	// Number of Level 2 (L2) Partial Sequence Number Packet (PSNPs) sent.
	L2PsnpSent *int32 `protobuf:"varint,22,opt,name=l2_psnp_sent,json=l2PsnpSent,proto3,oneof" json:"l2_psnp_sent,omitempty"`
	// Number of Level 2 (L2) Complete Sequence Number Packet (PSNPs) received.
	L2PsnpReceived *int32 `protobuf:"varint,23,opt,name=l2_psnp_received,json=l2PsnpReceived,proto3,oneof" json:"l2_psnp_received,omitempty"`
	// Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) sent.
	L2CsnpSent *int32 `protobuf:"varint,24,opt,name=l2_csnp_sent,json=l2CsnpSent,proto3,oneof" json:"l2_csnp_sent,omitempty"`
	// Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) received.
	L2CsnpReceived *int32 `protobuf:"varint,25,opt,name=l2_csnp_received,json=l2CsnpReceived,proto3,oneof" json:"l2_csnp_received,omitempty"`
	// Number of Level 2 (L2) Link State Protocol Data Units (LSPs) sent.
	L2LspSent *int32 `protobuf:"varint,26,opt,name=l2_lsp_sent,json=l2LspSent,proto3,oneof" json:"l2_lsp_sent,omitempty"`
	// Number of Level 2 (L2) Link State Protocol Data Units (LSPs) received.
	L2LspReceived *int32 `protobuf:"varint,27,opt,name=l2_lsp_received,json=l2LspReceived,proto3,oneof" json:"l2_lsp_received,omitempty"`
}

func (x *IsisMetric) Reset() {
	*x = IsisMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisMetric) ProtoMessage() {}

func (x *IsisMetric) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisMetric.ProtoReflect.Descriptor instead.
func (*IsisMetric) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{219}
}

func (x *IsisMetric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *IsisMetric) GetL1SessionsUp() int32 {
	if x != nil && x.L1SessionsUp != nil {
		return *x.L1SessionsUp
	}
	return 0
}

func (x *IsisMetric) GetL1SessionFlap() int32 {
	if x != nil && x.L1SessionFlap != nil {
		return *x.L1SessionFlap
	}
	return 0
}

func (x *IsisMetric) GetL1BroadcastHellosSent() int32 {
	if x != nil && x.L1BroadcastHellosSent != nil {
		return *x.L1BroadcastHellosSent
	}
	return 0
}

func (x *IsisMetric) GetL1BroadcastHellosReceived() int32 {
	if x != nil && x.L1BroadcastHellosReceived != nil {
		return *x.L1BroadcastHellosReceived
	}
	return 0
}

func (x *IsisMetric) GetL1PointToPointHellosSent() int32 {
	if x != nil && x.L1PointToPointHellosSent != nil {
		return *x.L1PointToPointHellosSent
	}
	return 0
}

func (x *IsisMetric) GetL1PointToPointHellosReceived() int32 {
	if x != nil && x.L1PointToPointHellosReceived != nil {
		return *x.L1PointToPointHellosReceived
	}
	return 0
}

func (x *IsisMetric) GetL1DatabaseSize() int32 {
	if x != nil && x.L1DatabaseSize != nil {
		return *x.L1DatabaseSize
	}
	return 0
}

func (x *IsisMetric) GetL1PsnpSent() int32 {
	if x != nil && x.L1PsnpSent != nil {
		return *x.L1PsnpSent
	}
	return 0
}

func (x *IsisMetric) GetL1PsnpReceived() int32 {
	if x != nil && x.L1PsnpReceived != nil {
		return *x.L1PsnpReceived
	}
	return 0
}

func (x *IsisMetric) GetL1CsnpSent() int32 {
	if x != nil && x.L1CsnpSent != nil {
		return *x.L1CsnpSent
	}
	return 0
}

func (x *IsisMetric) GetL1CsnpReceived() int32 {
	if x != nil && x.L1CsnpReceived != nil {
		return *x.L1CsnpReceived
	}
	return 0
}

func (x *IsisMetric) GetL1LspSent() int32 {
	if x != nil && x.L1LspSent != nil {
		return *x.L1LspSent
	}
	return 0
}

func (x *IsisMetric) GetL1LspReceived() int32 {
	if x != nil && x.L1LspReceived != nil {
		return *x.L1LspReceived
	}
	return 0
}

func (x *IsisMetric) GetL2SessionsUp() int32 {
	if x != nil && x.L2SessionsUp != nil {
		return *x.L2SessionsUp
	}
	return 0
}

func (x *IsisMetric) GetL2SessionFlap() int32 {
	if x != nil && x.L2SessionFlap != nil {
		return *x.L2SessionFlap
	}
	return 0
}

func (x *IsisMetric) GetL2BroadcastHellosSent() int32 {
	if x != nil && x.L2BroadcastHellosSent != nil {
		return *x.L2BroadcastHellosSent
	}
	return 0
}

func (x *IsisMetric) GetL2BroadcastHellosReceived() int32 {
	if x != nil && x.L2BroadcastHellosReceived != nil {
		return *x.L2BroadcastHellosReceived
	}
	return 0
}

func (x *IsisMetric) GetL2PointToPointHellosSent() int32 {
	if x != nil && x.L2PointToPointHellosSent != nil {
		return *x.L2PointToPointHellosSent
	}
	return 0
}

func (x *IsisMetric) GetL2PointToPointHellosReceived() int32 {
	if x != nil && x.L2PointToPointHellosReceived != nil {
		return *x.L2PointToPointHellosReceived
	}
	return 0
}

func (x *IsisMetric) GetL2DatabaseSize() int32 {
	if x != nil && x.L2DatabaseSize != nil {
		return *x.L2DatabaseSize
	}
	return 0
}

func (x *IsisMetric) GetL2PsnpSent() int32 {
	if x != nil && x.L2PsnpSent != nil {
		return *x.L2PsnpSent
	}
	return 0
}

func (x *IsisMetric) GetL2PsnpReceived() int32 {
	if x != nil && x.L2PsnpReceived != nil {
		return *x.L2PsnpReceived
	}
	return 0
}

func (x *IsisMetric) GetL2CsnpSent() int32 {
	if x != nil && x.L2CsnpSent != nil {
		return *x.L2CsnpSent
	}
	return 0
}

func (x *IsisMetric) GetL2CsnpReceived() int32 {
	if x != nil && x.L2CsnpReceived != nil {
		return *x.L2CsnpReceived
	}
	return 0
}

func (x *IsisMetric) GetL2LspSent() int32 {
	if x != nil && x.L2LspSent != nil {
		return *x.L2LspSent
	}
	return 0
}

func (x *IsisMetric) GetL2LspReceived() int32 {
	if x != nil && x.L2LspReceived != nil {
		return *x.L2LspReceived
	}
	return 0
}

// The request to retrieve per LAG metrics/statistics.
type LagMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of LAGs to return results for. An empty list will return results for all
	// LAGs.
	//
	// x-constraint:
	// - /components/schemas/Lag/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Lag/properties/name
	//
	LagNames []string `protobuf:"bytes,1,rep,name=lag_names,json=lagNames,proto3" json:"lag_names,omitempty"`
	// The list of column names that the returned result set will contain. If the list is
	// empty then all columns will be returned. The name of the LAG cannot be excluded.
	ColumnNames []LagMetricsRequest_ColumnNames_Enum `protobuf:"varint,2,rep,packed,name=column_names,json=columnNames,proto3,enum=otg.LagMetricsRequest_ColumnNames_Enum" json:"column_names,omitempty"`
}

func (x *LagMetricsRequest) Reset() {
	*x = LagMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagMetricsRequest) ProtoMessage() {}

func (x *LagMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagMetricsRequest.ProtoReflect.Descriptor instead.
func (*LagMetricsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{220}
}

func (x *LagMetricsRequest) GetLagNames() []string {
	if x != nil {
		return x.LagNames
	}
	return nil
}

func (x *LagMetricsRequest) GetColumnNames() []LagMetricsRequest_ColumnNames_Enum {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

// Description missing in models
type LagMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a configured LAG
	//
	// x-constraint:
	// - /components/schemas/Lag/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Lag/properties/name
	//
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The current operational state of the LAG. The state can be up or down. State 'up'
	// indicates member_ports_up >= min_links.
	OperStatus *LagMetric_OperStatus_Enum `protobuf:"varint,2,opt,name=oper_status,json=operStatus,proto3,enum=otg.LagMetric_OperStatus_Enum,oneof" json:"oper_status,omitempty"`
	// The number of LAG member ports up.
	MemberPortsUp *int32 `protobuf:"varint,3,opt,name=member_ports_up,json=memberPortsUp,proto3,oneof" json:"member_ports_up,omitempty"`
	// The current total number of frames transmitted.
	FramesTx *int64 `protobuf:"varint,4,opt,name=frames_tx,json=framesTx,proto3,oneof" json:"frames_tx,omitempty"`
	// The current total number of valid frames received.
	FramesRx *int64 `protobuf:"varint,5,opt,name=frames_rx,json=framesRx,proto3,oneof" json:"frames_rx,omitempty"`
	// The current total number of bytes transmitted.
	BytesTx *int64 `protobuf:"varint,6,opt,name=bytes_tx,json=bytesTx,proto3,oneof" json:"bytes_tx,omitempty"`
	// The current total number of valid bytes received.
	BytesRx *int64 `protobuf:"varint,7,opt,name=bytes_rx,json=bytesRx,proto3,oneof" json:"bytes_rx,omitempty"`
	// The current rate of frames transmitted.
	FramesTxRate *float32 `protobuf:"fixed32,8,opt,name=frames_tx_rate,json=framesTxRate,proto3,oneof" json:"frames_tx_rate,omitempty"`
	// The current rate of valid frames received.
	FramesRxRate *float32 `protobuf:"fixed32,9,opt,name=frames_rx_rate,json=framesRxRate,proto3,oneof" json:"frames_rx_rate,omitempty"`
	// The current rate of bytes transmitted.
	BytesTxRate *float32 `protobuf:"fixed32,10,opt,name=bytes_tx_rate,json=bytesTxRate,proto3,oneof" json:"bytes_tx_rate,omitempty"`
	// The current rate of bytes received.
	BytesRxRate *float32 `protobuf:"fixed32,11,opt,name=bytes_rx_rate,json=bytesRxRate,proto3,oneof" json:"bytes_rx_rate,omitempty"`
}

func (x *LagMetric) Reset() {
	*x = LagMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagMetric) ProtoMessage() {}

func (x *LagMetric) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagMetric.ProtoReflect.Descriptor instead.
func (*LagMetric) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{221}
}

func (x *LagMetric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LagMetric) GetOperStatus() LagMetric_OperStatus_Enum {
	if x != nil && x.OperStatus != nil {
		return *x.OperStatus
	}
	return LagMetric_OperStatus_unspecified
}

func (x *LagMetric) GetMemberPortsUp() int32 {
	if x != nil && x.MemberPortsUp != nil {
		return *x.MemberPortsUp
	}
	return 0
}

func (x *LagMetric) GetFramesTx() int64 {
	if x != nil && x.FramesTx != nil {
		return *x.FramesTx
	}
	return 0
}

func (x *LagMetric) GetFramesRx() int64 {
	if x != nil && x.FramesRx != nil {
		return *x.FramesRx
	}
	return 0
}

func (x *LagMetric) GetBytesTx() int64 {
	if x != nil && x.BytesTx != nil {
		return *x.BytesTx
	}
	return 0
}

func (x *LagMetric) GetBytesRx() int64 {
	if x != nil && x.BytesRx != nil {
		return *x.BytesRx
	}
	return 0
}

func (x *LagMetric) GetFramesTxRate() float32 {
	if x != nil && x.FramesTxRate != nil {
		return *x.FramesTxRate
	}
	return 0
}

func (x *LagMetric) GetFramesRxRate() float32 {
	if x != nil && x.FramesRxRate != nil {
		return *x.FramesRxRate
	}
	return 0
}

func (x *LagMetric) GetBytesTxRate() float32 {
	if x != nil && x.BytesTxRate != nil {
		return *x.BytesTxRate
	}
	return 0
}

func (x *LagMetric) GetBytesRxRate() float32 {
	if x != nil && x.BytesRxRate != nil {
		return *x.BytesRxRate
	}
	return 0
}

// The request to retrieve LACP per LAG member metrics/statistics.
type LacpMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of LAG (ports group) for which LACP metrics to be returned. An empty list
	// will return metrics for all LAGs.
	//
	// x-constraint:
	// - /components/schemas/Lag/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Lag/properties/name
	//
	LagNames []string `protobuf:"bytes,1,rep,name=lag_names,json=lagNames,proto3" json:"lag_names,omitempty"`
	// The names of LAG members (ports) for which LACP metrics to be returned. An empty
	// list will return metrics for all LAG members.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	LagMemberPortNames []string `protobuf:"bytes,2,rep,name=lag_member_port_names,json=lagMemberPortNames,proto3" json:"lag_member_port_names,omitempty"`
	// The list of column names that the returned result set will contain. If the list is
	// empty then all columns will be returned. The name of LAG and LAG member can not be
	// excluded.
	ColumnNames []LacpMetricsRequest_ColumnNames_Enum `protobuf:"varint,3,rep,packed,name=column_names,json=columnNames,proto3,enum=otg.LacpMetricsRequest_ColumnNames_Enum" json:"column_names,omitempty"`
}

func (x *LacpMetricsRequest) Reset() {
	*x = LacpMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LacpMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpMetricsRequest) ProtoMessage() {}

func (x *LacpMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpMetricsRequest.ProtoReflect.Descriptor instead.
func (*LacpMetricsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{222}
}

func (x *LacpMetricsRequest) GetLagNames() []string {
	if x != nil {
		return x.LagNames
	}
	return nil
}

func (x *LacpMetricsRequest) GetLagMemberPortNames() []string {
	if x != nil {
		return x.LagMemberPortNames
	}
	return nil
}

func (x *LacpMetricsRequest) GetColumnNames() []LacpMetricsRequest_ColumnNames_Enum {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

// LACP metrics (statistics) per LAG member.
type LacpMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a LAG (ports group) configured with LACP.
	LagName *string `protobuf:"bytes,1,opt,name=lag_name,json=lagName,proto3,oneof" json:"lag_name,omitempty"`
	// The name of a LAG member (port) configured with LACP.
	LagMemberPortName *string `protobuf:"bytes,2,opt,name=lag_member_port_name,json=lagMemberPortName,proto3,oneof" json:"lag_member_port_name,omitempty"`
	// Number of LACPDUs received.
	LacpPacketsRx *int64 `protobuf:"varint,3,opt,name=lacp_packets_rx,json=lacpPacketsRx,proto3,oneof" json:"lacp_packets_rx,omitempty"`
	// Number of LACPDUs transmitted.
	LacpPacketsTx *int64 `protobuf:"varint,4,opt,name=lacp_packets_tx,json=lacpPacketsTx,proto3,oneof" json:"lacp_packets_tx,omitempty"`
	// Number of LACPDUs receive packet errors.
	LacpRxErrors *int64 `protobuf:"varint,5,opt,name=lacp_rx_errors,json=lacpRxErrors,proto3,oneof" json:"lacp_rx_errors,omitempty"`
	// Indicates participant is active or passive.
	Activity *LacpMetric_Activity_Enum `protobuf:"varint,6,opt,name=activity,proto3,enum=otg.LacpMetric_Activity_Enum,oneof" json:"activity,omitempty"`
	// The timeout type (short or long) used by the participant.
	Timeout *LacpMetric_Timeout_Enum `protobuf:"varint,7,opt,name=timeout,proto3,enum=otg.LacpMetric_Timeout_Enum,oneof" json:"timeout,omitempty"`
	// Indicates whether the participant is in-sync or out-of-sync.
	Synchronization *LacpMetric_Synchronization_Enum `protobuf:"varint,8,opt,name=synchronization,proto3,enum=otg.LacpMetric_Synchronization_Enum,oneof" json:"synchronization,omitempty"`
	// A true value indicates that the participant will allow the link to be used as part
	// of the aggregate. A false value indicates the link should be used as an  individual
	// link.
	Aggregatable *bool `protobuf:"varint,9,opt,name=aggregatable,proto3,oneof" json:"aggregatable,omitempty"`
	// If true, the participant is collecting incoming frames on the link, otherwise false.
	Collecting *bool `protobuf:"varint,10,opt,name=collecting,proto3,oneof" json:"collecting,omitempty"`
	// When true, the participant is distributing outgoing frames; when false, distribution
	// is disabled.
	Distributing *bool `protobuf:"varint,11,opt,name=distributing,proto3,oneof" json:"distributing,omitempty"`
	// MAC address that defines the local system ID for the aggregate interface.
	SystemId *string `protobuf:"bytes,12,opt,name=system_id,json=systemId,proto3,oneof" json:"system_id,omitempty"`
	// Current operational value of the key for the aggregate interface.
	OperKey *int32 `protobuf:"varint,13,opt,name=oper_key,json=operKey,proto3,oneof" json:"oper_key,omitempty"`
	// MAC address representing the protocol partner's interface system ID.
	PartnerId *string `protobuf:"bytes,14,opt,name=partner_id,json=partnerId,proto3,oneof" json:"partner_id,omitempty"`
	// Operational value of the protocol partner's key.
	PartnerKey *int32 `protobuf:"varint,15,opt,name=partner_key,json=partnerKey,proto3,oneof" json:"partner_key,omitempty"`
	// Port number of the local (actor) aggregation member.
	PortNum *int32 `protobuf:"varint,16,opt,name=port_num,json=portNum,proto3,oneof" json:"port_num,omitempty"`
	// Port number of the partner (remote) port for this member port.
	PartnerPortNum *int32 `protobuf:"varint,17,opt,name=partner_port_num,json=partnerPortNum,proto3,oneof" json:"partner_port_num,omitempty"`
}

func (x *LacpMetric) Reset() {
	*x = LacpMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LacpMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpMetric) ProtoMessage() {}

func (x *LacpMetric) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpMetric.ProtoReflect.Descriptor instead.
func (*LacpMetric) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{223}
}

func (x *LacpMetric) GetLagName() string {
	if x != nil && x.LagName != nil {
		return *x.LagName
	}
	return ""
}

func (x *LacpMetric) GetLagMemberPortName() string {
	if x != nil && x.LagMemberPortName != nil {
		return *x.LagMemberPortName
	}
	return ""
}

func (x *LacpMetric) GetLacpPacketsRx() int64 {
	if x != nil && x.LacpPacketsRx != nil {
		return *x.LacpPacketsRx
	}
	return 0
}

func (x *LacpMetric) GetLacpPacketsTx() int64 {
	if x != nil && x.LacpPacketsTx != nil {
		return *x.LacpPacketsTx
	}
	return 0
}

func (x *LacpMetric) GetLacpRxErrors() int64 {
	if x != nil && x.LacpRxErrors != nil {
		return *x.LacpRxErrors
	}
	return 0
}

func (x *LacpMetric) GetActivity() LacpMetric_Activity_Enum {
	if x != nil && x.Activity != nil {
		return *x.Activity
	}
	return LacpMetric_Activity_unspecified
}

func (x *LacpMetric) GetTimeout() LacpMetric_Timeout_Enum {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return LacpMetric_Timeout_unspecified
}

func (x *LacpMetric) GetSynchronization() LacpMetric_Synchronization_Enum {
	if x != nil && x.Synchronization != nil {
		return *x.Synchronization
	}
	return LacpMetric_Synchronization_unspecified
}

func (x *LacpMetric) GetAggregatable() bool {
	if x != nil && x.Aggregatable != nil {
		return *x.Aggregatable
	}
	return false
}

func (x *LacpMetric) GetCollecting() bool {
	if x != nil && x.Collecting != nil {
		return *x.Collecting
	}
	return false
}

func (x *LacpMetric) GetDistributing() bool {
	if x != nil && x.Distributing != nil {
		return *x.Distributing
	}
	return false
}

func (x *LacpMetric) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *LacpMetric) GetOperKey() int32 {
	if x != nil && x.OperKey != nil {
		return *x.OperKey
	}
	return 0
}

func (x *LacpMetric) GetPartnerId() string {
	if x != nil && x.PartnerId != nil {
		return *x.PartnerId
	}
	return ""
}

func (x *LacpMetric) GetPartnerKey() int32 {
	if x != nil && x.PartnerKey != nil {
		return *x.PartnerKey
	}
	return 0
}

func (x *LacpMetric) GetPortNum() int32 {
	if x != nil && x.PortNum != nil {
		return *x.PortNum
	}
	return 0
}

func (x *LacpMetric) GetPartnerPortNum() int32 {
	if x != nil && x.PartnerPortNum != nil {
		return *x.PartnerPortNum
	}
	return 0
}

// The request to retrieve LLDP per instance metrics/statistics.
type LldpMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of LLDP instances to return results for. An empty list will return results
	// for all LLDP instances.
	//
	// x-constraint:
	// - /components/schemas/Lldp/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Lldp/properties/name
	//
	LldpNames []string `protobuf:"bytes,1,rep,name=lldp_names,json=lldpNames,proto3" json:"lldp_names,omitempty"`
	// The requested list of column names for the result set. If the list is empty then
	// metrics for all columns will be returned. The name of LLDP instance can not be excluded.
	ColumnNames []LldpMetricsRequest_ColumnNames_Enum `protobuf:"varint,2,rep,packed,name=column_names,json=columnNames,proto3,enum=otg.LldpMetricsRequest_ColumnNames_Enum" json:"column_names,omitempty"`
}

func (x *LldpMetricsRequest) Reset() {
	*x = LldpMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpMetricsRequest) ProtoMessage() {}

func (x *LldpMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpMetricsRequest.ProtoReflect.Descriptor instead.
func (*LldpMetricsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{224}
}

func (x *LldpMetricsRequest) GetLldpNames() []string {
	if x != nil {
		return x.LldpNames
	}
	return nil
}

func (x *LldpMetricsRequest) GetColumnNames() []LldpMetricsRequest_ColumnNames_Enum {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

// LLDP per instance statistics information.
type LldpMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the configured LLDP instance.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Number of LLDP frames received.
	FramesRx *int64 `protobuf:"varint,2,opt,name=frames_rx,json=framesRx,proto3,oneof" json:"frames_rx,omitempty"`
	// Number of LLDP frames transmitted.
	FramesTx *int64 `protobuf:"varint,3,opt,name=frames_tx,json=framesTx,proto3,oneof" json:"frames_tx,omitempty"`
	// Number of LLDP frames received with packet errors. This stat should be incremented
	// based on statsFramesInErrorsTotal increment rule in section 10.3.2 of IEEE Std 802.1
	// AB-2005.
	FramesErrorRx *int64 `protobuf:"varint,4,opt,name=frames_error_rx,json=framesErrorRx,proto3,oneof" json:"frames_error_rx,omitempty"`
	// Number of LLDP frames received that are discarded. This stat should be incremented
	// when one or more of the three mandatory  TLVs at the beginning of the LLDPDU is missing,
	// out of order or  contains an out of range information string length. This stat should
	// follow the validation rules in section 10.3.2 of IEEE  Std 802.1 AB-2005.
	FramesDiscard *int64 `protobuf:"varint,5,opt,name=frames_discard,json=framesDiscard,proto3,oneof" json:"frames_discard,omitempty"`
	// Number of LLDP tlvs received that are discarded. If any TLV contains  an error condition
	// specific for that particular TLV or if any TLV  extends past the physical end of
	// the frame then these TLVs will be discarded.
	TlvsDiscard *int64 `protobuf:"varint,6,opt,name=tlvs_discard,json=tlvsDiscard,proto3,oneof" json:"tlvs_discard,omitempty"`
	// Number of LLDP unknown tlvs received. If the OUI of the organizationlly specific
	// TLV and/or organizationally defined subtype are not recognized,or if TLV type  value
	// is in the range of reserved TLV types then these TLVs will be considered as  unknown
	// TLVs.
	TlvsUnknown *int64 `protobuf:"varint,7,opt,name=tlvs_unknown,json=tlvsUnknown,proto3,oneof" json:"tlvs_unknown,omitempty"`
}

func (x *LldpMetric) Reset() {
	*x = LldpMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpMetric) ProtoMessage() {}

func (x *LldpMetric) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpMetric.ProtoReflect.Descriptor instead.
func (*LldpMetric) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{225}
}

func (x *LldpMetric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LldpMetric) GetFramesRx() int64 {
	if x != nil && x.FramesRx != nil {
		return *x.FramesRx
	}
	return 0
}

func (x *LldpMetric) GetFramesTx() int64 {
	if x != nil && x.FramesTx != nil {
		return *x.FramesTx
	}
	return 0
}

func (x *LldpMetric) GetFramesErrorRx() int64 {
	if x != nil && x.FramesErrorRx != nil {
		return *x.FramesErrorRx
	}
	return 0
}

func (x *LldpMetric) GetFramesDiscard() int64 {
	if x != nil && x.FramesDiscard != nil {
		return *x.FramesDiscard
	}
	return 0
}

func (x *LldpMetric) GetTlvsDiscard() int64 {
	if x != nil && x.TlvsDiscard != nil {
		return *x.TlvsDiscard
	}
	return 0
}

func (x *LldpMetric) GetTlvsUnknown() int64 {
	if x != nil && x.TlvsUnknown != nil {
		return *x.TlvsUnknown
	}
	return 0
}

// The request to retrieve RSVP-TE per Router metrics/statistics.
type RsvpMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of RSVP-TE Routers to return results for. An empty list as input will return
	// results for all RSVP-TE routers.
	//
	// x-constraint:
	// - /components/schemas/Device.Rsvp/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Rsvp/properties/name
	//
	RouterNames []string `protobuf:"bytes,1,rep,name=router_names,json=routerNames,proto3" json:"router_names,omitempty"`
	// The list of column names that the returned result set will contain. If the input
	// list is empty then all columns will be returned except for any result_groups.
	//
	ColumnNames []RsvpMetricsRequest_ColumnNames_Enum `protobuf:"varint,2,rep,packed,name=column_names,json=columnNames,proto3,enum=otg.RsvpMetricsRequest_ColumnNames_Enum" json:"column_names,omitempty"`
}

func (x *RsvpMetricsRequest) Reset() {
	*x = RsvpMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpMetricsRequest) ProtoMessage() {}

func (x *RsvpMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpMetricsRequest.ProtoReflect.Descriptor instead.
func (*RsvpMetricsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{226}
}

func (x *RsvpMetricsRequest) GetRouterNames() []string {
	if x != nil {
		return x.RouterNames
	}
	return nil
}

func (x *RsvpMetricsRequest) GetColumnNames() []RsvpMetricsRequest_ColumnNames_Enum {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

// RSVP-TE per router statistics information.
type RsvpMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a configured RSVP router.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The number of ingress point-to-point LSPs configured or transiting through the RSVP
	// router which have been initated from the test port.
	IngressP2PLspsConfigured *int32 `protobuf:"varint,2,opt,name=ingress_p2p_lsps_configured,json=ingressP2pLspsConfigured,proto3,oneof" json:"ingress_p2p_lsps_configured,omitempty"`
	// The number of ingress point-to-point LSPs for which Resv has been received and is
	// currently up.
	IngressP2PLspsUp *int32 `protobuf:"varint,3,opt,name=ingress_p2p_lsps_up,json=ingressP2pLspsUp,proto3,oneof" json:"ingress_p2p_lsps_up,omitempty"`
	// The number of egress point-to-point LSPs for which Path requests were successfully
	// processed and is currently up.
	EgressP2PLspsUp *int32 `protobuf:"varint,4,opt,name=egress_p2p_lsps_up,json=egressP2pLspsUp,proto3,oneof" json:"egress_p2p_lsps_up,omitempty"`
	// The number of times an LSP went from up to down state either because it timed out
	// while waiting for Refreshes or  a PathTear or ResvTear message was received which
	// caused the LSP to flap.
	LspFlapCount *int32 `protobuf:"varint,5,opt,name=lsp_flap_count,json=lspFlapCount,proto3,oneof" json:"lsp_flap_count,omitempty"`
	// The number of Path messages sent by this RSVP router.
	PathsTx *int32 `protobuf:"varint,6,opt,name=paths_tx,json=pathsTx,proto3,oneof" json:"paths_tx,omitempty"`
	// The number of Path messages received by this RSVP router.
	PathsRx *int32 `protobuf:"varint,7,opt,name=paths_rx,json=pathsRx,proto3,oneof" json:"paths_rx,omitempty"`
	// The number of Resv messages sent by this RSVP router.
	ResvsTx *int32 `protobuf:"varint,8,opt,name=resvs_tx,json=resvsTx,proto3,oneof" json:"resvs_tx,omitempty"`
	// The number of Resv messages received by this RSVP router.
	ResvsRx *int32 `protobuf:"varint,9,opt,name=resvs_rx,json=resvsRx,proto3,oneof" json:"resvs_rx,omitempty"`
	// The number of  Path Tear messages sent by this RSVP router.
	PathTearsTx *int32 `protobuf:"varint,10,opt,name=path_tears_tx,json=pathTearsTx,proto3,oneof" json:"path_tears_tx,omitempty"`
	// The number of Path Tear messages received by this RSVP router.
	PathTearsRx *int32 `protobuf:"varint,11,opt,name=path_tears_rx,json=pathTearsRx,proto3,oneof" json:"path_tears_rx,omitempty"`
	// The number of  Resv Tear messages sent by this RSVP router.
	ResvTearsTx *int32 `protobuf:"varint,12,opt,name=resv_tears_tx,json=resvTearsTx,proto3,oneof" json:"resv_tears_tx,omitempty"`
	// The number of Resv Tear messages received by this RSVP router.
	ResvTearsRx *int32 `protobuf:"varint,13,opt,name=resv_tears_rx,json=resvTearsRx,proto3,oneof" json:"resv_tears_rx,omitempty"`
	// The number of Path Error messages sent by this RSVP router.
	PathErrorsTx *int32 `protobuf:"varint,14,opt,name=path_errors_tx,json=pathErrorsTx,proto3,oneof" json:"path_errors_tx,omitempty"`
	// The number of Path Error messages received by this RSVP router.
	PathErrorsRx *int32 `protobuf:"varint,15,opt,name=path_errors_rx,json=pathErrorsRx,proto3,oneof" json:"path_errors_rx,omitempty"`
	// The number of Resv Error messages sent by this RSVP router.
	ResvErrorsTx *int32 `protobuf:"varint,16,opt,name=resv_errors_tx,json=resvErrorsTx,proto3,oneof" json:"resv_errors_tx,omitempty"`
	// The number of Resv Error messages received by this RSVP router.
	ResvErrorsRx *int32 `protobuf:"varint,17,opt,name=resv_errors_rx,json=resvErrorsRx,proto3,oneof" json:"resv_errors_rx,omitempty"`
	// The number of ResvConf messages sent by this RSVP router.
	ResvConfTx *int32 `protobuf:"varint,18,opt,name=resv_conf_tx,json=resvConfTx,proto3,oneof" json:"resv_conf_tx,omitempty"`
	// The number of ResvConf messages received by this RSVP router.
	ResvConfRx *int32 `protobuf:"varint,19,opt,name=resv_conf_rx,json=resvConfRx,proto3,oneof" json:"resv_conf_rx,omitempty"`
	// The number of Hello messages sent by this RSVP router.
	HellosTx *int32 `protobuf:"varint,20,opt,name=hellos_tx,json=hellosTx,proto3,oneof" json:"hellos_tx,omitempty"`
	// The number of Hello messages received by this RSVP router.
	HellosRx *int32 `protobuf:"varint,21,opt,name=hellos_rx,json=hellosRx,proto3,oneof" json:"hellos_rx,omitempty"`
	// The number of Ack messages sent by this RSVP router.
	AcksTx *int32 `protobuf:"varint,22,opt,name=acks_tx,json=acksTx,proto3,oneof" json:"acks_tx,omitempty"`
	// The number of Ack messages received by this RSVP router.
	AcksRx *int32 `protobuf:"varint,23,opt,name=acks_rx,json=acksRx,proto3,oneof" json:"acks_rx,omitempty"`
	// The number of Nack messages sent by this RSVP router.
	NacksTx *int32 `protobuf:"varint,24,opt,name=nacks_tx,json=nacksTx,proto3,oneof" json:"nacks_tx,omitempty"`
	// The number of Nack messages received by this RSVP router.
	NacksRx *int32 `protobuf:"varint,25,opt,name=nacks_rx,json=nacksRx,proto3,oneof" json:"nacks_rx,omitempty"`
	// The number of SRefresh messages sent by this RSVP router.
	SrefreshTx *int32 `protobuf:"varint,26,opt,name=srefresh_tx,json=srefreshTx,proto3,oneof" json:"srefresh_tx,omitempty"`
	// The number of SRefresh messages received by this RSVP router.
	SrefreshRx *int32 `protobuf:"varint,27,opt,name=srefresh_rx,json=srefreshRx,proto3,oneof" json:"srefresh_rx,omitempty"`
	// The number of Bundle messages sent by this RSVP router.
	BundleTx *int32 `protobuf:"varint,28,opt,name=bundle_tx,json=bundleTx,proto3,oneof" json:"bundle_tx,omitempty"`
	// The number of Bundle messages received by this RSVP router.
	BundleRx *int32 `protobuf:"varint,29,opt,name=bundle_rx,json=bundleRx,proto3,oneof" json:"bundle_rx,omitempty"`
	// The number of Path messages with Path Re-evaluation Request enabled sent by this
	// RSVP router.
	PathReevaluationRequestTx *int32 `protobuf:"varint,30,opt,name=path_reevaluation_request_tx,json=pathReevaluationRequestTx,proto3,oneof" json:"path_reevaluation_request_tx,omitempty"`
	// The number of successfully completed Make-Before-Break operations on LSPs on this
	// RSVP router.
	PathReoptimizations *int32 `protobuf:"varint,31,opt,name=path_reoptimizations,json=pathReoptimizations,proto3,oneof" json:"path_reoptimizations,omitempty"`
}

func (x *RsvpMetric) Reset() {
	*x = RsvpMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpMetric) ProtoMessage() {}

func (x *RsvpMetric) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpMetric.ProtoReflect.Descriptor instead.
func (*RsvpMetric) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{227}
}

func (x *RsvpMetric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RsvpMetric) GetIngressP2PLspsConfigured() int32 {
	if x != nil && x.IngressP2PLspsConfigured != nil {
		return *x.IngressP2PLspsConfigured
	}
	return 0
}

func (x *RsvpMetric) GetIngressP2PLspsUp() int32 {
	if x != nil && x.IngressP2PLspsUp != nil {
		return *x.IngressP2PLspsUp
	}
	return 0
}

func (x *RsvpMetric) GetEgressP2PLspsUp() int32 {
	if x != nil && x.EgressP2PLspsUp != nil {
		return *x.EgressP2PLspsUp
	}
	return 0
}

func (x *RsvpMetric) GetLspFlapCount() int32 {
	if x != nil && x.LspFlapCount != nil {
		return *x.LspFlapCount
	}
	return 0
}

func (x *RsvpMetric) GetPathsTx() int32 {
	if x != nil && x.PathsTx != nil {
		return *x.PathsTx
	}
	return 0
}

func (x *RsvpMetric) GetPathsRx() int32 {
	if x != nil && x.PathsRx != nil {
		return *x.PathsRx
	}
	return 0
}

func (x *RsvpMetric) GetResvsTx() int32 {
	if x != nil && x.ResvsTx != nil {
		return *x.ResvsTx
	}
	return 0
}

func (x *RsvpMetric) GetResvsRx() int32 {
	if x != nil && x.ResvsRx != nil {
		return *x.ResvsRx
	}
	return 0
}

func (x *RsvpMetric) GetPathTearsTx() int32 {
	if x != nil && x.PathTearsTx != nil {
		return *x.PathTearsTx
	}
	return 0
}

func (x *RsvpMetric) GetPathTearsRx() int32 {
	if x != nil && x.PathTearsRx != nil {
		return *x.PathTearsRx
	}
	return 0
}

func (x *RsvpMetric) GetResvTearsTx() int32 {
	if x != nil && x.ResvTearsTx != nil {
		return *x.ResvTearsTx
	}
	return 0
}

func (x *RsvpMetric) GetResvTearsRx() int32 {
	if x != nil && x.ResvTearsRx != nil {
		return *x.ResvTearsRx
	}
	return 0
}

func (x *RsvpMetric) GetPathErrorsTx() int32 {
	if x != nil && x.PathErrorsTx != nil {
		return *x.PathErrorsTx
	}
	return 0
}

func (x *RsvpMetric) GetPathErrorsRx() int32 {
	if x != nil && x.PathErrorsRx != nil {
		return *x.PathErrorsRx
	}
	return 0
}

func (x *RsvpMetric) GetResvErrorsTx() int32 {
	if x != nil && x.ResvErrorsTx != nil {
		return *x.ResvErrorsTx
	}
	return 0
}

func (x *RsvpMetric) GetResvErrorsRx() int32 {
	if x != nil && x.ResvErrorsRx != nil {
		return *x.ResvErrorsRx
	}
	return 0
}

func (x *RsvpMetric) GetResvConfTx() int32 {
	if x != nil && x.ResvConfTx != nil {
		return *x.ResvConfTx
	}
	return 0
}

func (x *RsvpMetric) GetResvConfRx() int32 {
	if x != nil && x.ResvConfRx != nil {
		return *x.ResvConfRx
	}
	return 0
}

func (x *RsvpMetric) GetHellosTx() int32 {
	if x != nil && x.HellosTx != nil {
		return *x.HellosTx
	}
	return 0
}

func (x *RsvpMetric) GetHellosRx() int32 {
	if x != nil && x.HellosRx != nil {
		return *x.HellosRx
	}
	return 0
}

func (x *RsvpMetric) GetAcksTx() int32 {
	if x != nil && x.AcksTx != nil {
		return *x.AcksTx
	}
	return 0
}

func (x *RsvpMetric) GetAcksRx() int32 {
	if x != nil && x.AcksRx != nil {
		return *x.AcksRx
	}
	return 0
}

func (x *RsvpMetric) GetNacksTx() int32 {
	if x != nil && x.NacksTx != nil {
		return *x.NacksTx
	}
	return 0
}

func (x *RsvpMetric) GetNacksRx() int32 {
	if x != nil && x.NacksRx != nil {
		return *x.NacksRx
	}
	return 0
}

func (x *RsvpMetric) GetSrefreshTx() int32 {
	if x != nil && x.SrefreshTx != nil {
		return *x.SrefreshTx
	}
	return 0
}

func (x *RsvpMetric) GetSrefreshRx() int32 {
	if x != nil && x.SrefreshRx != nil {
		return *x.SrefreshRx
	}
	return 0
}

func (x *RsvpMetric) GetBundleTx() int32 {
	if x != nil && x.BundleTx != nil {
		return *x.BundleTx
	}
	return 0
}

func (x *RsvpMetric) GetBundleRx() int32 {
	if x != nil && x.BundleRx != nil {
		return *x.BundleRx
	}
	return 0
}

func (x *RsvpMetric) GetPathReevaluationRequestTx() int32 {
	if x != nil && x.PathReevaluationRequestTx != nil {
		return *x.PathReevaluationRequestTx
	}
	return 0
}

func (x *RsvpMetric) GetPathReoptimizations() int32 {
	if x != nil && x.PathReoptimizations != nil {
		return *x.PathReoptimizations
	}
	return 0
}

// Request to traffic generator for states of choice
type StatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.ipv4_neighbors
	Choice *StatesRequest_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.StatesRequest_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Ipv4Neighbors *Neighborsv4StatesRequest `protobuf:"bytes,2,opt,name=ipv4_neighbors,json=ipv4Neighbors,proto3,oneof" json:"ipv4_neighbors,omitempty"`
	// Description missing in models
	Ipv6Neighbors *Neighborsv6StatesRequest `protobuf:"bytes,3,opt,name=ipv6_neighbors,json=ipv6Neighbors,proto3,oneof" json:"ipv6_neighbors,omitempty"`
	// Description missing in models
	BgpPrefixes *BgpPrefixStateRequest `protobuf:"bytes,4,opt,name=bgp_prefixes,json=bgpPrefixes,proto3,oneof" json:"bgp_prefixes,omitempty"`
	// Description missing in models
	IsisLsps *IsisLspsStateRequest `protobuf:"bytes,5,opt,name=isis_lsps,json=isisLsps,proto3,oneof" json:"isis_lsps,omitempty"`
	// Description missing in models
	LldpNeighbors *LldpNeighborsStateRequest `protobuf:"bytes,6,opt,name=lldp_neighbors,json=lldpNeighbors,proto3,oneof" json:"lldp_neighbors,omitempty"`
	// Description missing in models
	RsvpLsps *RsvpLspsStateRequest `protobuf:"bytes,7,opt,name=rsvp_lsps,json=rsvpLsps,proto3,oneof" json:"rsvp_lsps,omitempty"`
}

func (x *StatesRequest) Reset() {
	*x = StatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatesRequest) ProtoMessage() {}

func (x *StatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatesRequest.ProtoReflect.Descriptor instead.
func (*StatesRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{228}
}

func (x *StatesRequest) GetChoice() StatesRequest_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return StatesRequest_Choice_unspecified
}

func (x *StatesRequest) GetIpv4Neighbors() *Neighborsv4StatesRequest {
	if x != nil {
		return x.Ipv4Neighbors
	}
	return nil
}

func (x *StatesRequest) GetIpv6Neighbors() *Neighborsv6StatesRequest {
	if x != nil {
		return x.Ipv6Neighbors
	}
	return nil
}

func (x *StatesRequest) GetBgpPrefixes() *BgpPrefixStateRequest {
	if x != nil {
		return x.BgpPrefixes
	}
	return nil
}

func (x *StatesRequest) GetIsisLsps() *IsisLspsStateRequest {
	if x != nil {
		return x.IsisLsps
	}
	return nil
}

func (x *StatesRequest) GetLldpNeighbors() *LldpNeighborsStateRequest {
	if x != nil {
		return x.LldpNeighbors
	}
	return nil
}

func (x *StatesRequest) GetRsvpLsps() *RsvpLspsStateRequest {
	if x != nil {
		return x.RsvpLsps
	}
	return nil
}

// Response containing chosen traffic generator states
type StatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.ipv4_neighbors
	Choice *StatesResponse_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.StatesResponse_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	Ipv4Neighbors []*Neighborsv4State `protobuf:"bytes,2,rep,name=ipv4_neighbors,json=ipv4Neighbors,proto3" json:"ipv4_neighbors,omitempty"`
	// Description missing in models
	Ipv6Neighbors []*Neighborsv6State `protobuf:"bytes,3,rep,name=ipv6_neighbors,json=ipv6Neighbors,proto3" json:"ipv6_neighbors,omitempty"`
	// Description missing in models
	BgpPrefixes []*BgpPrefixesState `protobuf:"bytes,4,rep,name=bgp_prefixes,json=bgpPrefixes,proto3" json:"bgp_prefixes,omitempty"`
	// Description missing in models
	IsisLsps []*IsisLspsState `protobuf:"bytes,5,rep,name=isis_lsps,json=isisLsps,proto3" json:"isis_lsps,omitempty"`
	// Description missing in models
	LldpNeighbors []*LldpNeighborsState `protobuf:"bytes,6,rep,name=lldp_neighbors,json=lldpNeighbors,proto3" json:"lldp_neighbors,omitempty"`
	// Description missing in models
	RsvpLsps []*RsvpLspsState `protobuf:"bytes,7,rep,name=rsvp_lsps,json=rsvpLsps,proto3" json:"rsvp_lsps,omitempty"`
}

func (x *StatesResponse) Reset() {
	*x = StatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatesResponse) ProtoMessage() {}

func (x *StatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatesResponse.ProtoReflect.Descriptor instead.
func (*StatesResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{229}
}

func (x *StatesResponse) GetChoice() StatesResponse_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return StatesResponse_Choice_unspecified
}

func (x *StatesResponse) GetIpv4Neighbors() []*Neighborsv4State {
	if x != nil {
		return x.Ipv4Neighbors
	}
	return nil
}

func (x *StatesResponse) GetIpv6Neighbors() []*Neighborsv6State {
	if x != nil {
		return x.Ipv6Neighbors
	}
	return nil
}

func (x *StatesResponse) GetBgpPrefixes() []*BgpPrefixesState {
	if x != nil {
		return x.BgpPrefixes
	}
	return nil
}

func (x *StatesResponse) GetIsisLsps() []*IsisLspsState {
	if x != nil {
		return x.IsisLsps
	}
	return nil
}

func (x *StatesResponse) GetLldpNeighbors() []*LldpNeighborsState {
	if x != nil {
		return x.LldpNeighbors
	}
	return nil
}

func (x *StatesResponse) GetRsvpLsps() []*RsvpLspsState {
	if x != nil {
		return x.RsvpLsps
	}
	return nil
}

// The request to retrieve IPv4 Neighbor state (ARP cache entries) of a network interface(s).
type Neighborsv4StatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of Ethernet interfaces for which Neighbor state (ARP cache entries) will
	// be retrieved. If no names are specified then the results will contain Neighbor state
	// (ARP cache entries) for all available Ethernet interfaces.
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	//
	EthernetNames []string `protobuf:"bytes,1,rep,name=ethernet_names,json=ethernetNames,proto3" json:"ethernet_names,omitempty"`
}

func (x *Neighborsv4StatesRequest) Reset() {
	*x = Neighborsv4StatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Neighborsv4StatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neighborsv4StatesRequest) ProtoMessage() {}

func (x *Neighborsv4StatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neighborsv4StatesRequest.ProtoReflect.Descriptor instead.
func (*Neighborsv4StatesRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{230}
}

func (x *Neighborsv4StatesRequest) GetEthernetNames() []string {
	if x != nil {
		return x.EthernetNames
	}
	return nil
}

// IPv4 Neighbor state (ARP cache entry).
type Neighborsv4State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Ethernet interface associated with the Neighbor state (ARP cache
	// entry).
	// required = true
	EthernetName string `protobuf:"bytes,1,opt,name=ethernet_name,json=ethernetName,proto3" json:"ethernet_name,omitempty"`
	// The IPv4 address of the neighbor.
	// required = true
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	// The link-layer address (MAC) of the neighbor.
	LinkLayerAddress *string `protobuf:"bytes,3,opt,name=link_layer_address,json=linkLayerAddress,proto3,oneof" json:"link_layer_address,omitempty"`
}

func (x *Neighborsv4State) Reset() {
	*x = Neighborsv4State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Neighborsv4State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neighborsv4State) ProtoMessage() {}

func (x *Neighborsv4State) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neighborsv4State.ProtoReflect.Descriptor instead.
func (*Neighborsv4State) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{231}
}

func (x *Neighborsv4State) GetEthernetName() string {
	if x != nil {
		return x.EthernetName
	}
	return ""
}

func (x *Neighborsv4State) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *Neighborsv4State) GetLinkLayerAddress() string {
	if x != nil && x.LinkLayerAddress != nil {
		return *x.LinkLayerAddress
	}
	return ""
}

// The request to retrieve IPv6 Neighbor state (NDISC cache entries) of a network interface(s).
type Neighborsv6StatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of Ethernet interfaces for which Neighbor state (NDISC cache entries) will
	// be retrieved. If no names are specified then the results will contain Neighbor state
	// (NDISC cache entries) for all available Ethernet interfaces.
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Ethernet/properties/name
	//
	EthernetNames []string `protobuf:"bytes,1,rep,name=ethernet_names,json=ethernetNames,proto3" json:"ethernet_names,omitempty"`
}

func (x *Neighborsv6StatesRequest) Reset() {
	*x = Neighborsv6StatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Neighborsv6StatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neighborsv6StatesRequest) ProtoMessage() {}

func (x *Neighborsv6StatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neighborsv6StatesRequest.ProtoReflect.Descriptor instead.
func (*Neighborsv6StatesRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{232}
}

func (x *Neighborsv6StatesRequest) GetEthernetNames() []string {
	if x != nil {
		return x.EthernetNames
	}
	return nil
}

// IPv6 Neighbor state (NDISC cache entry).
type Neighborsv6State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Ethernet interface associated with the Neighbor state (NDISC cache
	// entry).
	// required = true
	EthernetName string `protobuf:"bytes,1,opt,name=ethernet_name,json=ethernetName,proto3" json:"ethernet_name,omitempty"`
	// The IPv6 address of the neighbor.
	// required = true
	Ipv6Address string `protobuf:"bytes,2,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	// The link-layer address (MAC) of the neighbor.
	LinkLayerAddress *string `protobuf:"bytes,3,opt,name=link_layer_address,json=linkLayerAddress,proto3,oneof" json:"link_layer_address,omitempty"`
}

func (x *Neighborsv6State) Reset() {
	*x = Neighborsv6State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Neighborsv6State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neighborsv6State) ProtoMessage() {}

func (x *Neighborsv6State) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neighborsv6State.ProtoReflect.Descriptor instead.
func (*Neighborsv6State) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{233}
}

func (x *Neighborsv6State) GetEthernetName() string {
	if x != nil {
		return x.EthernetName
	}
	return ""
}

func (x *Neighborsv6State) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *Neighborsv6State) GetLinkLayerAddress() string {
	if x != nil && x.LinkLayerAddress != nil {
		return *x.LinkLayerAddress
	}
	return ""
}

// The request to retrieve BGP peer prefix information.
type BgpPrefixStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of BGP peers for which prefix information will be retrieved. If no names
	// are specified then the results will contain prefix information for all configured
	// BGP peers.
	//
	// x-constraint:
	// - /components/schemas/Bgp.V4Peer/properties/name
	// - /components/schemas/Bgp.V6Peer/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Bgp.V4Peer/properties/name
	// - /components/schemas/Bgp.V6Peer/properties/name
	//
	BgpPeerNames []string `protobuf:"bytes,1,rep,name=bgp_peer_names,json=bgpPeerNames,proto3" json:"bgp_peer_names,omitempty"`
	// Specify which prefixes to return. If the list is empty or missing then all prefixes
	// will be returned.
	PrefixFilters []BgpPrefixStateRequest_PrefixFilters_Enum `protobuf:"varint,2,rep,packed,name=prefix_filters,json=prefixFilters,proto3,enum=otg.BgpPrefixStateRequest_PrefixFilters_Enum" json:"prefix_filters,omitempty"`
	// The IPv4 unicast results can be filtered by specifying additional prefix search criteria.
	// If the ipv4_unicast_filters property is missing or empty then all IPv4 prefixes will
	// be returned.
	Ipv4UnicastFilters []*BgpPrefixIpv4UnicastFilter `protobuf:"bytes,3,rep,name=ipv4_unicast_filters,json=ipv4UnicastFilters,proto3" json:"ipv4_unicast_filters,omitempty"`
	// The IPv6 unicast results can be filtered by specifying additional prefix search criteria.
	// If the ipv6_unicast_filters property is missing or empty then all IPv6 prefixes will
	// be returned.
	Ipv6UnicastFilters []*BgpPrefixIpv6UnicastFilter `protobuf:"bytes,4,rep,name=ipv6_unicast_filters,json=ipv6UnicastFilters,proto3" json:"ipv6_unicast_filters,omitempty"`
}

func (x *BgpPrefixStateRequest) Reset() {
	*x = BgpPrefixStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPrefixStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixStateRequest) ProtoMessage() {}

func (x *BgpPrefixStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixStateRequest.ProtoReflect.Descriptor instead.
func (*BgpPrefixStateRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{234}
}

func (x *BgpPrefixStateRequest) GetBgpPeerNames() []string {
	if x != nil {
		return x.BgpPeerNames
	}
	return nil
}

func (x *BgpPrefixStateRequest) GetPrefixFilters() []BgpPrefixStateRequest_PrefixFilters_Enum {
	if x != nil {
		return x.PrefixFilters
	}
	return nil
}

func (x *BgpPrefixStateRequest) GetIpv4UnicastFilters() []*BgpPrefixIpv4UnicastFilter {
	if x != nil {
		return x.Ipv4UnicastFilters
	}
	return nil
}

func (x *BgpPrefixStateRequest) GetIpv6UnicastFilters() []*BgpPrefixIpv6UnicastFilter {
	if x != nil {
		return x.Ipv6UnicastFilters
	}
	return nil
}

// Description missing in models
type BgpPrefixIpv4UnicastFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The addresses to match. If the addresses property is missing or empty then all addresses
	// will match.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// The prefix length to match. If the prefix length is missing then all prefix lengths
	// will match.
	PrefixLength *int32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
	// The origin to match. If the origin is missing then all origins will match.
	Origin *BgpPrefixIpv4UnicastFilter_Origin_Enum `protobuf:"varint,3,opt,name=origin,proto3,enum=otg.BgpPrefixIpv4UnicastFilter_Origin_Enum,oneof" json:"origin,omitempty"`
	// The path id to match. If the path id is missing then all path ids will match.
	PathId *int32 `protobuf:"varint,4,opt,name=path_id,json=pathId,proto3,oneof" json:"path_id,omitempty"`
}

func (x *BgpPrefixIpv4UnicastFilter) Reset() {
	*x = BgpPrefixIpv4UnicastFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPrefixIpv4UnicastFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixIpv4UnicastFilter) ProtoMessage() {}

func (x *BgpPrefixIpv4UnicastFilter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixIpv4UnicastFilter.ProtoReflect.Descriptor instead.
func (*BgpPrefixIpv4UnicastFilter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{235}
}

func (x *BgpPrefixIpv4UnicastFilter) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *BgpPrefixIpv4UnicastFilter) GetPrefixLength() int32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *BgpPrefixIpv4UnicastFilter) GetOrigin() BgpPrefixIpv4UnicastFilter_Origin_Enum {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return BgpPrefixIpv4UnicastFilter_Origin_unspecified
}

func (x *BgpPrefixIpv4UnicastFilter) GetPathId() int32 {
	if x != nil && x.PathId != nil {
		return *x.PathId
	}
	return 0
}

// Description missing in models
type BgpPrefixIpv6UnicastFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The addresses to match. If the addresses property is missing or empty then all addresses
	// will match.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// The prefix length to match. If the prefix length is missing then all prefix lengths
	// will match.
	PrefixLength *int32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
	// The origin to match. If the origin is missing then all origins will match.
	Origin *BgpPrefixIpv6UnicastFilter_Origin_Enum `protobuf:"varint,3,opt,name=origin,proto3,enum=otg.BgpPrefixIpv6UnicastFilter_Origin_Enum,oneof" json:"origin,omitempty"`
	// The path id to match. If the path id is missing then all path ids will match.
	PathId *int32 `protobuf:"varint,4,opt,name=path_id,json=pathId,proto3,oneof" json:"path_id,omitempty"`
}

func (x *BgpPrefixIpv6UnicastFilter) Reset() {
	*x = BgpPrefixIpv6UnicastFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPrefixIpv6UnicastFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixIpv6UnicastFilter) ProtoMessage() {}

func (x *BgpPrefixIpv6UnicastFilter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixIpv6UnicastFilter.ProtoReflect.Descriptor instead.
func (*BgpPrefixIpv6UnicastFilter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{236}
}

func (x *BgpPrefixIpv6UnicastFilter) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *BgpPrefixIpv6UnicastFilter) GetPrefixLength() int32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *BgpPrefixIpv6UnicastFilter) GetOrigin() BgpPrefixIpv6UnicastFilter_Origin_Enum {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return BgpPrefixIpv6UnicastFilter_Origin_unspecified
}

func (x *BgpPrefixIpv6UnicastFilter) GetPathId() int32 {
	if x != nil && x.PathId != nil {
		return *x.PathId
	}
	return 0
}

// BGP peer prefixes.
type BgpPrefixesState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a BGP peer.
	BgpPeerName *string `protobuf:"bytes,1,opt,name=bgp_peer_name,json=bgpPeerName,proto3,oneof" json:"bgp_peer_name,omitempty"`
	// Description missing in models
	Ipv4UnicastPrefixes []*BgpPrefixIpv4UnicastState `protobuf:"bytes,2,rep,name=ipv4_unicast_prefixes,json=ipv4UnicastPrefixes,proto3" json:"ipv4_unicast_prefixes,omitempty"`
	// Description missing in models
	Ipv6UnicastPrefixes []*BgpPrefixIpv6UnicastState `protobuf:"bytes,3,rep,name=ipv6_unicast_prefixes,json=ipv6UnicastPrefixes,proto3" json:"ipv6_unicast_prefixes,omitempty"`
}

func (x *BgpPrefixesState) Reset() {
	*x = BgpPrefixesState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPrefixesState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixesState) ProtoMessage() {}

func (x *BgpPrefixesState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixesState.ProtoReflect.Descriptor instead.
func (*BgpPrefixesState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{237}
}

func (x *BgpPrefixesState) GetBgpPeerName() string {
	if x != nil && x.BgpPeerName != nil {
		return *x.BgpPeerName
	}
	return ""
}

func (x *BgpPrefixesState) GetIpv4UnicastPrefixes() []*BgpPrefixIpv4UnicastState {
	if x != nil {
		return x.Ipv4UnicastPrefixes
	}
	return nil
}

func (x *BgpPrefixesState) GetIpv6UnicastPrefixes() []*BgpPrefixIpv6UnicastState {
	if x != nil {
		return x.Ipv6UnicastPrefixes
	}
	return nil
}

// IPv4 unicast prefix.
type BgpPrefixIpv4UnicastState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An IPv4 unicast address
	Ipv4Address *string `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3,oneof" json:"ipv4_address,omitempty"`
	// The length of the prefix.
	PrefixLength *int32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
	// The origin of the prefix.
	Origin *BgpPrefixIpv4UnicastState_Origin_Enum `protobuf:"varint,3,opt,name=origin,proto3,enum=otg.BgpPrefixIpv4UnicastState_Origin_Enum,oneof" json:"origin,omitempty"`
	// The path id.
	PathId *int32 `protobuf:"varint,4,opt,name=path_id,json=pathId,proto3,oneof" json:"path_id,omitempty"`
	// The IPv4 address of the egress interface.
	Ipv4NextHop *string `protobuf:"bytes,5,opt,name=ipv4_next_hop,json=ipv4NextHop,proto3,oneof" json:"ipv4_next_hop,omitempty"`
	// The IPv6 address of the egress interface.
	Ipv6NextHop *string `protobuf:"bytes,6,opt,name=ipv6_next_hop,json=ipv6NextHop,proto3,oneof" json:"ipv6_next_hop,omitempty"`
	// Optional community attributes.
	Communities []*ResultBgpCommunity `protobuf:"bytes,7,rep,name=communities,proto3" json:"communities,omitempty"`
	// Description missing in models
	AsPath *ResultBgpAsPath `protobuf:"bytes,8,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
}

func (x *BgpPrefixIpv4UnicastState) Reset() {
	*x = BgpPrefixIpv4UnicastState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPrefixIpv4UnicastState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixIpv4UnicastState) ProtoMessage() {}

func (x *BgpPrefixIpv4UnicastState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixIpv4UnicastState.ProtoReflect.Descriptor instead.
func (*BgpPrefixIpv4UnicastState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{238}
}

func (x *BgpPrefixIpv4UnicastState) GetIpv4Address() string {
	if x != nil && x.Ipv4Address != nil {
		return *x.Ipv4Address
	}
	return ""
}

func (x *BgpPrefixIpv4UnicastState) GetPrefixLength() int32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *BgpPrefixIpv4UnicastState) GetOrigin() BgpPrefixIpv4UnicastState_Origin_Enum {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return BgpPrefixIpv4UnicastState_Origin_unspecified
}

func (x *BgpPrefixIpv4UnicastState) GetPathId() int32 {
	if x != nil && x.PathId != nil {
		return *x.PathId
	}
	return 0
}

func (x *BgpPrefixIpv4UnicastState) GetIpv4NextHop() string {
	if x != nil && x.Ipv4NextHop != nil {
		return *x.Ipv4NextHop
	}
	return ""
}

func (x *BgpPrefixIpv4UnicastState) GetIpv6NextHop() string {
	if x != nil && x.Ipv6NextHop != nil {
		return *x.Ipv6NextHop
	}
	return ""
}

func (x *BgpPrefixIpv4UnicastState) GetCommunities() []*ResultBgpCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpPrefixIpv4UnicastState) GetAsPath() *ResultBgpAsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

// IPv6 unicast prefix.
type BgpPrefixIpv6UnicastState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An IPv6 unicast address
	Ipv6Address *string `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address,proto3,oneof" json:"ipv6_address,omitempty"`
	// The length of the prefix.
	PrefixLength *int32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
	// The origin of the prefix.
	Origin *BgpPrefixIpv6UnicastState_Origin_Enum `protobuf:"varint,3,opt,name=origin,proto3,enum=otg.BgpPrefixIpv6UnicastState_Origin_Enum,oneof" json:"origin,omitempty"`
	// The path id.
	PathId *int32 `protobuf:"varint,4,opt,name=path_id,json=pathId,proto3,oneof" json:"path_id,omitempty"`
	// The IPv4 address of the egress interface.
	Ipv4NextHop *string `protobuf:"bytes,5,opt,name=ipv4_next_hop,json=ipv4NextHop,proto3,oneof" json:"ipv4_next_hop,omitempty"`
	// The IPv6 address of the egress interface.
	Ipv6NextHop *string `protobuf:"bytes,6,opt,name=ipv6_next_hop,json=ipv6NextHop,proto3,oneof" json:"ipv6_next_hop,omitempty"`
	// Optional community attributes.
	Communities []*ResultBgpCommunity `protobuf:"bytes,7,rep,name=communities,proto3" json:"communities,omitempty"`
	// Description missing in models
	AsPath *ResultBgpAsPath `protobuf:"bytes,8,opt,name=as_path,json=asPath,proto3,oneof" json:"as_path,omitempty"`
}

func (x *BgpPrefixIpv6UnicastState) Reset() {
	*x = BgpPrefixIpv6UnicastState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPrefixIpv6UnicastState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixIpv6UnicastState) ProtoMessage() {}

func (x *BgpPrefixIpv6UnicastState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixIpv6UnicastState.ProtoReflect.Descriptor instead.
func (*BgpPrefixIpv6UnicastState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{239}
}

func (x *BgpPrefixIpv6UnicastState) GetIpv6Address() string {
	if x != nil && x.Ipv6Address != nil {
		return *x.Ipv6Address
	}
	return ""
}

func (x *BgpPrefixIpv6UnicastState) GetPrefixLength() int32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *BgpPrefixIpv6UnicastState) GetOrigin() BgpPrefixIpv6UnicastState_Origin_Enum {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return BgpPrefixIpv6UnicastState_Origin_unspecified
}

func (x *BgpPrefixIpv6UnicastState) GetPathId() int32 {
	if x != nil && x.PathId != nil {
		return *x.PathId
	}
	return 0
}

func (x *BgpPrefixIpv6UnicastState) GetIpv4NextHop() string {
	if x != nil && x.Ipv4NextHop != nil {
		return *x.Ipv4NextHop
	}
	return ""
}

func (x *BgpPrefixIpv6UnicastState) GetIpv6NextHop() string {
	if x != nil && x.Ipv6NextHop != nil {
		return *x.Ipv6NextHop
	}
	return ""
}

func (x *BgpPrefixIpv6UnicastState) GetCommunities() []*ResultBgpCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpPrefixIpv6UnicastState) GetAsPath() *ResultBgpAsPath {
	if x != nil {
		return x.AsPath
	}
	return nil
}

// BGP communities provide additional capability for tagging routes and  for modifying
// BGP routing policy on upstream and downstream routers. BGP community is a 32-bit
// number which is broken into 16-bit AS number and  a 16-bit custom value.
type ResultBgpCommunity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of community AS number. If community type is manual_as_number then as_number
	// and as_custom will be available.
	Type *ResultBgpCommunity_Type_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=otg.ResultBgpCommunity_Type_Enum,oneof" json:"type,omitempty"`
	// First two octets of 32 bit community AS number.
	AsNumber *int32 `protobuf:"varint,2,opt,name=as_number,json=asNumber,proto3,oneof" json:"as_number,omitempty"`
	// Last two octets of the community value.
	AsCustom *int32 `protobuf:"varint,3,opt,name=as_custom,json=asCustom,proto3,oneof" json:"as_custom,omitempty"`
}

func (x *ResultBgpCommunity) Reset() {
	*x = ResultBgpCommunity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultBgpCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultBgpCommunity) ProtoMessage() {}

func (x *ResultBgpCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultBgpCommunity.ProtoReflect.Descriptor instead.
func (*ResultBgpCommunity) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{240}
}

func (x *ResultBgpCommunity) GetType() ResultBgpCommunity_Type_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ResultBgpCommunity_Type_unspecified
}

func (x *ResultBgpCommunity) GetAsNumber() int32 {
	if x != nil && x.AsNumber != nil {
		return *x.AsNumber
	}
	return 0
}

func (x *ResultBgpCommunity) GetAsCustom() int32 {
	if x != nil && x.AsCustom != nil {
		return *x.AsCustom
	}
	return 0
}

// This attribute identifies the autonomous systems through  which routing information
// carried in this UPDATE message has passed.
type ResultBgpAsPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AS Path segments present in the received AS Path attribute.
	Segments []*ResultBgpAsPathSegment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *ResultBgpAsPath) Reset() {
	*x = ResultBgpAsPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultBgpAsPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultBgpAsPath) ProtoMessage() {}

func (x *ResultBgpAsPath) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultBgpAsPath.ProtoReflect.Descriptor instead.
func (*ResultBgpAsPath) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{241}
}

func (x *ResultBgpAsPath) GetSegments() []*ResultBgpAsPathSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// Configuration for a single BGP AS path segment
type ResultBgpAsPathSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AS sequence is the most common type of AS_PATH, it contains the  list of ASNs starting
	// with the most recent ASN being added read  from left to right.
	// The other three AS_PATH types are used for Confederations - AS_SET is the type of
	// AS_PATH attribute that summarizes routes using using the aggregate-address command,
	// allowing AS_PATHs to be  summarized in the update as well. - AS_CONFED_SEQ gives
	// the list of ASNs in the path starting with the  most recent ASN to be added reading
	// left to right - AS_CONFED_SET will allow summarization of multiple AS PATHs to be
	// sent in BGP Updates.
	Type *ResultBgpAsPathSegment_Type_Enum `protobuf:"varint,1,opt,name=type,proto3,enum=otg.ResultBgpAsPathSegment_Type_Enum,oneof" json:"type,omitempty"`
	// The AS numbers in this AS path segment.
	AsNumbers []int64 `protobuf:"varint,2,rep,packed,name=as_numbers,json=asNumbers,proto3" json:"as_numbers,omitempty"`
}

func (x *ResultBgpAsPathSegment) Reset() {
	*x = ResultBgpAsPathSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultBgpAsPathSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultBgpAsPathSegment) ProtoMessage() {}

func (x *ResultBgpAsPathSegment) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultBgpAsPathSegment.ProtoReflect.Descriptor instead.
func (*ResultBgpAsPathSegment) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{242}
}

func (x *ResultBgpAsPathSegment) GetType() ResultBgpAsPathSegment_Type_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ResultBgpAsPathSegment_Type_unspecified
}

func (x *ResultBgpAsPathSegment) GetAsNumbers() []int64 {
	if x != nil {
		return x.AsNumbers
	}
	return nil
}

// The request to retrieve ISIS Link State PDU (LSP) information learned by the router.
type IsisLspsStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of ISIS routers for which learned information is requested. An empty list
	// will return results for all ISIS routers.
	//
	// x-constraint:
	// - /components/schemas/Device.IsisRouter/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.IsisRouter/properties/name
	//
	IsisRouterNames []string `protobuf:"bytes,1,rep,name=isis_router_names,json=isisRouterNames,proto3" json:"isis_router_names,omitempty"`
}

func (x *IsisLspsStateRequest) Reset() {
	*x = IsisLspsStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspsStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspsStateRequest) ProtoMessage() {}

func (x *IsisLspsStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspsStateRequest.ProtoReflect.Descriptor instead.
func (*IsisLspsStateRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{243}
}

func (x *IsisLspsStateRequest) GetIsisRouterNames() []string {
	if x != nil {
		return x.IsisRouterNames
	}
	return nil
}

// The result of ISIS LSP information that are retrieved.
type IsisLspsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the ISIS Router.
	IsisRouterName *string `protobuf:"bytes,1,opt,name=isis_router_name,json=isisRouterName,proto3,oneof" json:"isis_router_name,omitempty"`
	// One or more LSPs that are learned by this ISIS router.
	Lsps []*IsisLspState `protobuf:"bytes,2,rep,name=lsps,proto3" json:"lsps,omitempty"`
}

func (x *IsisLspsState) Reset() {
	*x = IsisLspsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspsState) ProtoMessage() {}

func (x *IsisLspsState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspsState.ProtoReflect.Descriptor instead.
func (*IsisLspsState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{244}
}

func (x *IsisLspsState) GetIsisRouterName() string {
	if x != nil && x.IsisRouterName != nil {
		return *x.IsisRouterName
	}
	return ""
}

func (x *IsisLspsState) GetLsps() []*IsisLspState {
	if x != nil {
		return x.Lsps
	}
	return nil
}

// ISIS LSP.
type IsisLspState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LSP ID in the format, e.g. '640000000001-00-00'. LSP ID consists of the System ID
	// of a neighbor, the Pseudonode ID, and the LSP number. The last two bytes represent
	// Pseudonode ID and LSP number respectively. A pseudonode is a logical representation
	// of the LAN which is generated by a Designated Intermediate System (DIS) on a LAN
	// segment. If one LSP exceeds the maximum LSP size then it is sent in another LSP with
	// the LSP number incremented by one. A router's learned LSP gets refreshed by 'remaining_lifetime'.
	// Then the sequence number is incremented by 1.
	// required = true
	LspId string `protobuf:"bytes,1,opt,name=lsp_id,json=lspId,proto3" json:"lsp_id,omitempty"`
	// Link State PDU type.
	PduType *IsisLspState_PduType_Enum `protobuf:"varint,2,opt,name=pdu_type,json=pduType,proto3,enum=otg.IsisLspState_PduType_Enum,oneof" json:"pdu_type,omitempty"`
	// Remaining lifetime in seconds before LSP expires.
	RemainingLifetime *int64 `protobuf:"varint,3,opt,name=remaining_lifetime,json=remainingLifetime,proto3,oneof" json:"remaining_lifetime,omitempty"`
	// Sequence number of the LSP.
	SequenceNumber *int64 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3,oneof" json:"sequence_number,omitempty"`
	// Total length of the LSP.
	PduLength *int32 `protobuf:"varint,5,opt,name=pdu_length,json=pduLength,proto3,oneof" json:"pdu_length,omitempty"`
	// LSP Type-Block flags.
	Flags *IsisLspFlags `protobuf:"bytes,6,opt,name=flags,proto3,oneof" json:"flags,omitempty"`
	// IS Type - bits 1 and 2 indicate the type of Intermediate System.
	// 1 - ( i.e. bit 1 set) Level 1 Intermediate system.
	// 2 - Unused value.
	// 3 - (i.e. bits 1 and 2 set) Level 2 Intermediate system.
	IsType *int32 `protobuf:"varint,7,opt,name=is_type,json=isType,proto3,oneof" json:"is_type,omitempty"`
	// It refers to Link State PDU State TLVs container.
	Tlvs *IsisLspTlvs `protobuf:"bytes,8,opt,name=tlvs,proto3,oneof" json:"tlvs,omitempty"`
}

func (x *IsisLspState) Reset() {
	*x = IsisLspState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspState) ProtoMessage() {}

func (x *IsisLspState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspState.ProtoReflect.Descriptor instead.
func (*IsisLspState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{245}
}

func (x *IsisLspState) GetLspId() string {
	if x != nil {
		return x.LspId
	}
	return ""
}

func (x *IsisLspState) GetPduType() IsisLspState_PduType_Enum {
	if x != nil && x.PduType != nil {
		return *x.PduType
	}
	return IsisLspState_PduType_unspecified
}

func (x *IsisLspState) GetRemainingLifetime() int64 {
	if x != nil && x.RemainingLifetime != nil {
		return *x.RemainingLifetime
	}
	return 0
}

func (x *IsisLspState) GetSequenceNumber() int64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *IsisLspState) GetPduLength() int32 {
	if x != nil && x.PduLength != nil {
		return *x.PduLength
	}
	return 0
}

func (x *IsisLspState) GetFlags() *IsisLspFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *IsisLspState) GetIsType() int32 {
	if x != nil && x.IsType != nil {
		return *x.IsType
	}
	return 0
}

func (x *IsisLspState) GetTlvs() *IsisLspTlvs {
	if x != nil {
		return x.Tlvs
	}
	return nil
}

// This contains the list of TLVs present in one LSP.
type IsisLspTlvs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of Hostname TLVs ( type 137) present in this LSP.
	HostnameTlvs []*IsisLspHostname `protobuf:"bytes,1,rep,name=hostname_tlvs,json=hostnameTlvs,proto3" json:"hostname_tlvs,omitempty"`
	// Array of IS-Reachability TLVs (type 2) present in this LSP.
	IsReachabilityTlvs []*IsisLspIsReachabilityTlv `protobuf:"bytes,2,rep,name=is_reachability_tlvs,json=isReachabilityTlvs,proto3" json:"is_reachability_tlvs,omitempty"`
	// Array of Extended IS-Reachability TLVs (type 22) present in this LSP.
	ExtendedIsReachabilityTlvs []*IsisLspExtendedIsReachabilityTlv `protobuf:"bytes,3,rep,name=extended_is_reachability_tlvs,json=extendedIsReachabilityTlvs,proto3" json:"extended_is_reachability_tlvs,omitempty"`
	// Array of IPv4 Internal Reachability TLVs (type 128) present in this LSP.
	Ipv4InternalReachabilityTlvs []*IsisLspIpv4InternalReachabilityTlv `protobuf:"bytes,4,rep,name=ipv4_internal_reachability_tlvs,json=ipv4InternalReachabilityTlvs,proto3" json:"ipv4_internal_reachability_tlvs,omitempty"`
	// Array of IPv4 External Reachability TLVs (type 130) present in this LSP.
	Ipv4ExternalReachabilityTlvs []*IsisLspIpv4ExternalReachabilityTlv `protobuf:"bytes,5,rep,name=ipv4_external_reachability_tlvs,json=ipv4ExternalReachabilityTlvs,proto3" json:"ipv4_external_reachability_tlvs,omitempty"`
	// Array of IPv4 Extended Reachability TLVs (type 135) present in this LSP.
	ExtendedIpv4ReachabilityTlvs []*IsisLspExtendedIpv4ReachabilityTlv `protobuf:"bytes,6,rep,name=extended_ipv4_reachability_tlvs,json=extendedIpv4ReachabilityTlvs,proto3" json:"extended_ipv4_reachability_tlvs,omitempty"`
	// Array of IPv6 Reachability TLVs (type 236) present in this LSP.
	Ipv6ReachabilityTlvs []*IsisLspIpv6ReachabilityTlv `protobuf:"bytes,7,rep,name=ipv6_reachability_tlvs,json=ipv6ReachabilityTlvs,proto3" json:"ipv6_reachability_tlvs,omitempty"`
}

func (x *IsisLspTlvs) Reset() {
	*x = IsisLspTlvs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspTlvs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspTlvs) ProtoMessage() {}

func (x *IsisLspTlvs) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspTlvs.ProtoReflect.Descriptor instead.
func (*IsisLspTlvs) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{246}
}

func (x *IsisLspTlvs) GetHostnameTlvs() []*IsisLspHostname {
	if x != nil {
		return x.HostnameTlvs
	}
	return nil
}

func (x *IsisLspTlvs) GetIsReachabilityTlvs() []*IsisLspIsReachabilityTlv {
	if x != nil {
		return x.IsReachabilityTlvs
	}
	return nil
}

func (x *IsisLspTlvs) GetExtendedIsReachabilityTlvs() []*IsisLspExtendedIsReachabilityTlv {
	if x != nil {
		return x.ExtendedIsReachabilityTlvs
	}
	return nil
}

func (x *IsisLspTlvs) GetIpv4InternalReachabilityTlvs() []*IsisLspIpv4InternalReachabilityTlv {
	if x != nil {
		return x.Ipv4InternalReachabilityTlvs
	}
	return nil
}

func (x *IsisLspTlvs) GetIpv4ExternalReachabilityTlvs() []*IsisLspIpv4ExternalReachabilityTlv {
	if x != nil {
		return x.Ipv4ExternalReachabilityTlvs
	}
	return nil
}

func (x *IsisLspTlvs) GetExtendedIpv4ReachabilityTlvs() []*IsisLspExtendedIpv4ReachabilityTlv {
	if x != nil {
		return x.ExtendedIpv4ReachabilityTlvs
	}
	return nil
}

func (x *IsisLspTlvs) GetIpv6ReachabilityTlvs() []*IsisLspIpv6ReachabilityTlv {
	if x != nil {
		return x.Ipv6ReachabilityTlvs
	}
	return nil
}

// It contains Hostname for the TLV 137.
type IsisLspHostname struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hostname for an ISIS router.
	Hostname *string `protobuf:"bytes,1,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
}

func (x *IsisLspHostname) Reset() {
	*x = IsisLspHostname{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspHostname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspHostname) ProtoMessage() {}

func (x *IsisLspHostname) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspHostname.ProtoReflect.Descriptor instead.
func (*IsisLspHostname) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{247}
}

func (x *IsisLspHostname) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

// LSP Type flags.
type IsisLspFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When set, the originator supports partition repair.
	PartitionRepair *bool `protobuf:"varint,1,opt,name=partition_repair,json=partitionRepair,proto3,oneof" json:"partition_repair,omitempty"`
	// When set, the originator is attached to another area using the referred metric.
	AttachedError *bool `protobuf:"varint,2,opt,name=attached_error,json=attachedError,proto3,oneof" json:"attached_error,omitempty"`
	// When set, the originator is attached to another
	// area using the referred metric.
	AttachedExpense *bool `protobuf:"varint,3,opt,name=attached_expense,json=attachedExpense,proto3,oneof" json:"attached_expense,omitempty"`
	// Delay Metric - when set, the originator is attached to another
	// area using the referred metric.
	AttachedDelay *bool `protobuf:"varint,4,opt,name=attached_delay,json=attachedDelay,proto3,oneof" json:"attached_delay,omitempty"`
	// Default Metric - when set, the originator is attached to another
	// area using the referred metric.
	AttachedDefault *bool `protobuf:"varint,5,opt,name=attached_default,json=attachedDefault,proto3,oneof" json:"attached_default,omitempty"`
	// Overload bit - when set, the originator is overloaded, and must
	// be avoided in path calculation.
	Overload *bool `protobuf:"varint,6,opt,name=overload,proto3,oneof" json:"overload,omitempty"`
}

func (x *IsisLspFlags) Reset() {
	*x = IsisLspFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspFlags) ProtoMessage() {}

func (x *IsisLspFlags) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspFlags.ProtoReflect.Descriptor instead.
func (*IsisLspFlags) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{248}
}

func (x *IsisLspFlags) GetPartitionRepair() bool {
	if x != nil && x.PartitionRepair != nil {
		return *x.PartitionRepair
	}
	return false
}

func (x *IsisLspFlags) GetAttachedError() bool {
	if x != nil && x.AttachedError != nil {
		return *x.AttachedError
	}
	return false
}

func (x *IsisLspFlags) GetAttachedExpense() bool {
	if x != nil && x.AttachedExpense != nil {
		return *x.AttachedExpense
	}
	return false
}

func (x *IsisLspFlags) GetAttachedDelay() bool {
	if x != nil && x.AttachedDelay != nil {
		return *x.AttachedDelay
	}
	return false
}

func (x *IsisLspFlags) GetAttachedDefault() bool {
	if x != nil && x.AttachedDefault != nil {
		return *x.AttachedDefault
	}
	return false
}

func (x *IsisLspFlags) GetOverload() bool {
	if x != nil && x.Overload != nil {
		return *x.Overload
	}
	return false
}

// This container describes list of ISIS neighbors and attributes in IS-Reachability
// TLV (type 2).
type IsisLspIsReachabilityTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This container describes Intermediate System (IS) neighbors.
	Neighbors []*IsisLspneighbor `protobuf:"bytes,1,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *IsisLspIsReachabilityTlv) Reset() {
	*x = IsisLspIsReachabilityTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspIsReachabilityTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspIsReachabilityTlv) ProtoMessage() {}

func (x *IsisLspIsReachabilityTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspIsReachabilityTlv.ProtoReflect.Descriptor instead.
func (*IsisLspIsReachabilityTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{249}
}

func (x *IsisLspIsReachabilityTlv) GetNeighbors() []*IsisLspneighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

// This is list of ISIS neighbors and attributes in Extended-IS-Reachability TLV (type
// 22).
type IsisLspExtendedIsReachabilityTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This container describes IS neighbors.
	Neighbors []*IsisLspneighbor `protobuf:"bytes,1,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *IsisLspExtendedIsReachabilityTlv) Reset() {
	*x = IsisLspExtendedIsReachabilityTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspExtendedIsReachabilityTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspExtendedIsReachabilityTlv) ProtoMessage() {}

func (x *IsisLspExtendedIsReachabilityTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspExtendedIsReachabilityTlv.ProtoReflect.Descriptor instead.
func (*IsisLspExtendedIsReachabilityTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{250}
}

func (x *IsisLspExtendedIsReachabilityTlv) GetNeighbors() []*IsisLspneighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

// This contains IS neighbors.
type IsisLspneighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The System ID for this emulated ISIS router, e.g. 640100010000.
	SystemId *string `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3,oneof" json:"system_id,omitempty"`
}

func (x *IsisLspneighbor) Reset() {
	*x = IsisLspneighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspneighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspneighbor) ProtoMessage() {}

func (x *IsisLspneighbor) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspneighbor.ProtoReflect.Descriptor instead.
func (*IsisLspneighbor) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{251}
}

func (x *IsisLspneighbor) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

// This container defines list of IPv4 internal reachability information in one IPv4
// internal reachability TLV.
// This is advertised when the origin-type is set 'internal' in route range configurations.
type IsisLspIpv4InternalReachabilityTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes list of IPv4 prefixes in this TLV.
	Prefixes []*IsisLspV4Prefix `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *IsisLspIpv4InternalReachabilityTlv) Reset() {
	*x = IsisLspIpv4InternalReachabilityTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspIpv4InternalReachabilityTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspIpv4InternalReachabilityTlv) ProtoMessage() {}

func (x *IsisLspIpv4InternalReachabilityTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspIpv4InternalReachabilityTlv.ProtoReflect.Descriptor instead.
func (*IsisLspIpv4InternalReachabilityTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{252}
}

func (x *IsisLspIpv4InternalReachabilityTlv) GetPrefixes() []*IsisLspV4Prefix {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

// This container defines list of IPv4 external reachability information in one IPv4
// external reachability TLV.
// This is advertised when the origin-type is set 'external' in route range configurations.
type IsisLspIpv4ExternalReachabilityTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes list of IPv4 prefixes in this TLV..
	Prefixes []*IsisLspV4Prefix `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *IsisLspIpv4ExternalReachabilityTlv) Reset() {
	*x = IsisLspIpv4ExternalReachabilityTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspIpv4ExternalReachabilityTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspIpv4ExternalReachabilityTlv) ProtoMessage() {}

func (x *IsisLspIpv4ExternalReachabilityTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspIpv4ExternalReachabilityTlv.ProtoReflect.Descriptor instead.
func (*IsisLspIpv4ExternalReachabilityTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{253}
}

func (x *IsisLspIpv4ExternalReachabilityTlv) GetPrefixes() []*IsisLspV4Prefix {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

// This group defines attributes of an IPv4 standard prefix.
type IsisLspV4Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An IPv4 unicast prefix reachable via the originator of this LSP.
	Ipv4Address *string `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3,oneof" json:"ipv4_address,omitempty"`
	// The length of the IPv4 prefix.
	PrefixLength *int32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
	// Up (0)-used when a prefix is initially advertised within the ISIS L3 hierarchy,
	// and for all other prefixes in L1 and L2 LSPs. (default)
	// Down (1)-used when an L1/L2 router advertises L2 prefixes in L1 LSPs.
	// The prefixes are being advertised from a higher level (L2) down to a lower level
	// (L1).
	RedistributionType *IsisLspV4Prefix_RedistributionType_Enum `protobuf:"varint,3,opt,name=redistribution_type,json=redistributionType,proto3,enum=otg.IsisLspV4Prefix_RedistributionType_Enum,oneof" json:"redistribution_type,omitempty"`
	// ISIS default metric value.
	DefaultMetric *int32 `protobuf:"varint,4,opt,name=default_metric,json=defaultMetric,proto3,oneof" json:"default_metric,omitempty"`
	// The origin of the advertised route-internal or external to the ISIS area. Options
	// include the following:
	// Internal-for intra-area routes, through Level 1 LSPs.
	// External-for inter-area routes redistributed within L1, through Level
	// 1 LSPs.
	OriginType *IsisLspV4Prefix_OriginType_Enum `protobuf:"varint,5,opt,name=origin_type,json=originType,proto3,enum=otg.IsisLspV4Prefix_OriginType_Enum,oneof" json:"origin_type,omitempty"`
}

func (x *IsisLspV4Prefix) Reset() {
	*x = IsisLspV4Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspV4Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspV4Prefix) ProtoMessage() {}

func (x *IsisLspV4Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspV4Prefix.ProtoReflect.Descriptor instead.
func (*IsisLspV4Prefix) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{254}
}

func (x *IsisLspV4Prefix) GetIpv4Address() string {
	if x != nil && x.Ipv4Address != nil {
		return *x.Ipv4Address
	}
	return ""
}

func (x *IsisLspV4Prefix) GetPrefixLength() int32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *IsisLspV4Prefix) GetRedistributionType() IsisLspV4Prefix_RedistributionType_Enum {
	if x != nil && x.RedistributionType != nil {
		return *x.RedistributionType
	}
	return IsisLspV4Prefix_RedistributionType_unspecified
}

func (x *IsisLspV4Prefix) GetDefaultMetric() int32 {
	if x != nil && x.DefaultMetric != nil {
		return *x.DefaultMetric
	}
	return 0
}

func (x *IsisLspV4Prefix) GetOriginType() IsisLspV4Prefix_OriginType_Enum {
	if x != nil && x.OriginType != nil {
		return *x.OriginType
	}
	return IsisLspV4Prefix_OriginType_unspecified
}

// This container defines list of IPv4 extended reachability information in one Extended
// IPv4 External Reachability TLV.
// It is advertised when the 'wide metric' is enabled.
type IsisLspExtendedIpv4ReachabilityTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 prefix contained within extended reachability TLVs.
	Prefixes []*IsisLspExtendedV4Prefix `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *IsisLspExtendedIpv4ReachabilityTlv) Reset() {
	*x = IsisLspExtendedIpv4ReachabilityTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspExtendedIpv4ReachabilityTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspExtendedIpv4ReachabilityTlv) ProtoMessage() {}

func (x *IsisLspExtendedIpv4ReachabilityTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspExtendedIpv4ReachabilityTlv.ProtoReflect.Descriptor instead.
func (*IsisLspExtendedIpv4ReachabilityTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{255}
}

func (x *IsisLspExtendedIpv4ReachabilityTlv) GetPrefixes() []*IsisLspExtendedV4Prefix {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

// This group defines attributes of an IPv4 standard prefix.
type IsisLspExtendedV4Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An IPv4 unicast prefix reachable via the originator of this LSP.
	Ipv4Address *string `protobuf:"bytes,1,opt,name=ipv4_address,json=ipv4Address,proto3,oneof" json:"ipv4_address,omitempty"`
	// The length of the IPv4 prefix.
	PrefixLength *int32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
	// ISIS wide metric.
	Metric *int32 `protobuf:"varint,3,opt,name=metric,proto3,oneof" json:"metric,omitempty"`
	// Up (0)-used when a prefix is initially advertised within the ISIS L3 hierarchy,
	// and for all other prefixes in L1 and L2 LSPs. (default)
	// Down (1)-used when an L1/L2 router advertises L2 prefixes in L1 LSPs.
	// The prefixes are being advertised from a higher level (L2) down to a lower level
	// (L1).
	RedistributionType *IsisLspExtendedV4Prefix_RedistributionType_Enum `protobuf:"varint,4,opt,name=redistribution_type,json=redistributionType,proto3,enum=otg.IsisLspExtendedV4Prefix_RedistributionType_Enum,oneof" json:"redistribution_type,omitempty"`
	// Description missing in models
	PrefixAttributes *IsisLspPrefixAttributes `protobuf:"bytes,5,opt,name=prefix_attributes,json=prefixAttributes,proto3,oneof" json:"prefix_attributes,omitempty"`
}

func (x *IsisLspExtendedV4Prefix) Reset() {
	*x = IsisLspExtendedV4Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspExtendedV4Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspExtendedV4Prefix) ProtoMessage() {}

func (x *IsisLspExtendedV4Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspExtendedV4Prefix.ProtoReflect.Descriptor instead.
func (*IsisLspExtendedV4Prefix) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{256}
}

func (x *IsisLspExtendedV4Prefix) GetIpv4Address() string {
	if x != nil && x.Ipv4Address != nil {
		return *x.Ipv4Address
	}
	return ""
}

func (x *IsisLspExtendedV4Prefix) GetPrefixLength() int32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *IsisLspExtendedV4Prefix) GetMetric() int32 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

func (x *IsisLspExtendedV4Prefix) GetRedistributionType() IsisLspExtendedV4Prefix_RedistributionType_Enum {
	if x != nil && x.RedistributionType != nil {
		return *x.RedistributionType
	}
	return IsisLspExtendedV4Prefix_RedistributionType_unspecified
}

func (x *IsisLspExtendedV4Prefix) GetPrefixAttributes() *IsisLspPrefixAttributes {
	if x != nil {
		return x.PrefixAttributes
	}
	return nil
}

// It defines list of IPv6 extended reachability information in one IPv6 Reachability
// TLV.
type IsisLspIpv6ReachabilityTlv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv6 prefix contained within reachability TLVs.
	Prefixes []*IsisLspV6Prefix `protobuf:"bytes,1,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *IsisLspIpv6ReachabilityTlv) Reset() {
	*x = IsisLspIpv6ReachabilityTlv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspIpv6ReachabilityTlv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspIpv6ReachabilityTlv) ProtoMessage() {}

func (x *IsisLspIpv6ReachabilityTlv) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspIpv6ReachabilityTlv.ProtoReflect.Descriptor instead.
func (*IsisLspIpv6ReachabilityTlv) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{257}
}

func (x *IsisLspIpv6ReachabilityTlv) GetPrefixes() []*IsisLspV6Prefix {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

// It defines attributes of an IPv6 standard prefix.
type IsisLspV6Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An IPv6 unicast prefix reachable via the originator of this LSP.
	Ipv6Address *string `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address,proto3,oneof" json:"ipv6_address,omitempty"`
	// The length of the IPv6 prefix.
	PrefixLength *int32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3,oneof" json:"prefix_length,omitempty"`
	// ISIS wide metric.
	Metric *int32 `protobuf:"varint,3,opt,name=metric,proto3,oneof" json:"metric,omitempty"`
	// Up (0)-used when a prefix is initially advertised within the ISIS L3 hierarchy,
	// and for all other prefixes in L1 and L2 LSPs. (default)
	// Down (1)-used when an L1/L2 router advertises L2 prefixes in L1 LSPs.
	// The prefixes are being advertised from a higher level (L2) down to a lower level
	// (L1).
	RedistributionType *IsisLspV6Prefix_RedistributionType_Enum `protobuf:"varint,4,opt,name=redistribution_type,json=redistributionType,proto3,enum=otg.IsisLspV6Prefix_RedistributionType_Enum,oneof" json:"redistribution_type,omitempty"`
	// The origin of the advertised route-internal or external to the ISIS area. Options
	// include the following:
	// Internal-for intra-area routes, through Level 1 LSPs.
	// External-for inter-area routes redistributed within L1, through Level
	// 1 LSPs.
	OriginType *IsisLspV6Prefix_OriginType_Enum `protobuf:"varint,5,opt,name=origin_type,json=originType,proto3,enum=otg.IsisLspV6Prefix_OriginType_Enum,oneof" json:"origin_type,omitempty"`
	// Description missing in models
	PrefixAttributes *IsisLspPrefixAttributes `protobuf:"bytes,6,opt,name=prefix_attributes,json=prefixAttributes,proto3,oneof" json:"prefix_attributes,omitempty"`
}

func (x *IsisLspV6Prefix) Reset() {
	*x = IsisLspV6Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspV6Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspV6Prefix) ProtoMessage() {}

func (x *IsisLspV6Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspV6Prefix.ProtoReflect.Descriptor instead.
func (*IsisLspV6Prefix) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{258}
}

func (x *IsisLspV6Prefix) GetIpv6Address() string {
	if x != nil && x.Ipv6Address != nil {
		return *x.Ipv6Address
	}
	return ""
}

func (x *IsisLspV6Prefix) GetPrefixLength() int32 {
	if x != nil && x.PrefixLength != nil {
		return *x.PrefixLength
	}
	return 0
}

func (x *IsisLspV6Prefix) GetMetric() int32 {
	if x != nil && x.Metric != nil {
		return *x.Metric
	}
	return 0
}

func (x *IsisLspV6Prefix) GetRedistributionType() IsisLspV6Prefix_RedistributionType_Enum {
	if x != nil && x.RedistributionType != nil {
		return *x.RedistributionType
	}
	return IsisLspV6Prefix_RedistributionType_unspecified
}

func (x *IsisLspV6Prefix) GetOriginType() IsisLspV6Prefix_OriginType_Enum {
	if x != nil && x.OriginType != nil {
		return *x.OriginType
	}
	return IsisLspV6Prefix_OriginType_unspecified
}

func (x *IsisLspV6Prefix) GetPrefixAttributes() *IsisLspPrefixAttributes {
	if x != nil {
		return x.PrefixAttributes
	}
	return nil
}

// This contains the properties of ISIS Prefix attributes for  the extended IPv4 and
// IPv6 reachability. https://www.rfc-editor.org/rfc/rfc7794.html
type IsisLspPrefixAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// External Prefix Flag (Bit 0)
	XFlag *bool `protobuf:"varint,1,opt,name=x_flag,json=xFlag,proto3,oneof" json:"x_flag,omitempty"`
	// Re-advertisement Flag (Bit 1)
	RFlag *bool `protobuf:"varint,2,opt,name=r_flag,json=rFlag,proto3,oneof" json:"r_flag,omitempty"`
	// Node Flag (Bit 2)
	NFlag *bool `protobuf:"varint,3,opt,name=n_flag,json=nFlag,proto3,oneof" json:"n_flag,omitempty"`
}

func (x *IsisLspPrefixAttributes) Reset() {
	*x = IsisLspPrefixAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspPrefixAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspPrefixAttributes) ProtoMessage() {}

func (x *IsisLspPrefixAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspPrefixAttributes.ProtoReflect.Descriptor instead.
func (*IsisLspPrefixAttributes) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{259}
}

func (x *IsisLspPrefixAttributes) GetXFlag() bool {
	if x != nil && x.XFlag != nil {
		return *x.XFlag
	}
	return false
}

func (x *IsisLspPrefixAttributes) GetRFlag() bool {
	if x != nil && x.RFlag != nil {
		return *x.RFlag
	}
	return false
}

func (x *IsisLspPrefixAttributes) GetNFlag() bool {
	if x != nil && x.NFlag != nil {
		return *x.NFlag
	}
	return false
}

// The request to retrieve LLDP neighbor information for a given instance.
type LldpNeighborsStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of LLDP instances for which neighbor information will be retrieved. If
	// no names are specified then the results will contain neighbor information for all
	// configured LLDP instances.
	//
	// x-constraint:
	// - /components/schemas/Lldp/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Lldp/properties/name
	//
	LldpNames []string `protobuf:"bytes,1,rep,name=lldp_names,json=lldpNames,proto3" json:"lldp_names,omitempty"`
	// Specify the neighbors for which information will be returned. If empty  or missing
	// then information for all neighbors will be returned.
	NeighborIdFilters []string `protobuf:"bytes,2,rep,name=neighbor_id_filters,json=neighborIdFilters,proto3" json:"neighbor_id_filters,omitempty"`
}

func (x *LldpNeighborsStateRequest) Reset() {
	*x = LldpNeighborsStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighborsStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighborsStateRequest) ProtoMessage() {}

func (x *LldpNeighborsStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighborsStateRequest.ProtoReflect.Descriptor instead.
func (*LldpNeighborsStateRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{260}
}

func (x *LldpNeighborsStateRequest) GetLldpNames() []string {
	if x != nil {
		return x.LldpNames
	}
	return nil
}

func (x *LldpNeighborsStateRequest) GetNeighborIdFilters() []string {
	if x != nil {
		return x.NeighborIdFilters
	}
	return nil
}

// LLDP neighbor information.
type LldpNeighborsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the LLDP instance.
	LldpName *string `protobuf:"bytes,1,opt,name=lldp_name,json=lldpName,proto3,oneof" json:"lldp_name,omitempty"`
	// The system name field shall contain an alpha-numeric string that  indicates the system's
	// administratively assigned name. The system name  should be the system's fully qualified
	// domain name. If implementations  support IETF RFC 3418, the sysName object should
	// be used for this field.
	SystemName *string `protobuf:"bytes,2,opt,name=system_name,json=systemName,proto3,oneof" json:"system_name,omitempty"`
	// The system description field shall contain an alpha-numeric string that  is the textual
	// description of the network entity. The system description  should include the full
	// name and version identification of the system's  hardware type, software operating
	// system, and networking software. If  implementations support IETF RFC 3418, the sysDescr
	// object should be used  for this field.
	SystemDescription *string `protobuf:"bytes,3,opt,name=system_description,json=systemDescription,proto3,oneof" json:"system_description,omitempty"`
	// The Chassis ID is a mandatory TLV which identifies the chassis component of  the
	// endpoint identifier associated with the transmitting LLDP agent.
	ChassisId *string `protobuf:"bytes,4,opt,name=chassis_id,json=chassisId,proto3,oneof" json:"chassis_id,omitempty"`
	// This field identifies the format and source of the chassis identifier string.  It
	// is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB  MIB.
	ChassisIdType *LldpNeighborsState_ChassisIdType_Enum `protobuf:"varint,5,opt,name=chassis_id_type,json=chassisIdType,proto3,enum=otg.LldpNeighborsState_ChassisIdType_Enum,oneof" json:"chassis_id_type,omitempty"`
	// System generated identifier for the neighbor on the LLDP instance.
	NeighborId *string `protobuf:"bytes,6,opt,name=neighbor_id,json=neighborId,proto3,oneof" json:"neighbor_id,omitempty"`
	// Age since discovery in seconds.
	Age *int64 `protobuf:"varint,7,opt,name=age,proto3,oneof" json:"age,omitempty"`
	// Seconds since last update received.
	LastUpdate *int64 `protobuf:"varint,8,opt,name=last_update,json=lastUpdate,proto3,oneof" json:"last_update,omitempty"`
	// The time-to-live (TTL) in seconds is a mandatory TLV which indicates how long information
	// from the neighbor  should be considered valid.
	Ttl *int32 `protobuf:"varint,9,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
	// The Port ID is a mandatory TLV which identifies the port component of the endpoint
	// identifier associated with  the transmitting LLDP agent. If the specified port is
	// an IEEE 802.3 Repeater port, then this TLV is optional.
	PortId *string `protobuf:"bytes,10,opt,name=port_id,json=portId,proto3,oneof" json:"port_id,omitempty"`
	// This field identifies the format and source of the port identifier string. It is
	// an enumerator defined by the PtopoPortIdType object from RFC2922.
	PortIdType *LldpNeighborsState_PortIdType_Enum `protobuf:"varint,11,opt,name=port_id_type,json=portIdType,proto3,enum=otg.LldpNeighborsState_PortIdType_Enum,oneof" json:"port_id_type,omitempty"`
	// The binary string containing the actual port identifier for the port which this LLDP
	// PDU was transmitted. The source  and format of this field is defined by PtopoPortId
	// from RFC2922.
	PortDescription *string `protobuf:"bytes,12,opt,name=port_description,json=portDescription,proto3,oneof" json:"port_description,omitempty"`
	// The Management Address is a mandatory TLV which identifies a network address associated
	// with the local LLDP agent, which  can be used to reach the agent on the port identified
	// in the Port ID TLV.
	ManagementAddress *string `protobuf:"bytes,13,opt,name=management_address,json=managementAddress,proto3,oneof" json:"management_address,omitempty"`
	// The enumerated value for the network address type identified in this TLV. This enumeration
	// is defined in the 'Assigned Numbers'  RFC [RFC3232] and the ianaAddressFamilyNumbers
	// object.
	ManagementAddressType *string `protobuf:"bytes,14,opt,name=management_address_type,json=managementAddressType,proto3,oneof" json:"management_address_type,omitempty"`
	// Description missing in models
	CustomTlvs []*LldpCustomTLVState `protobuf:"bytes,15,rep,name=custom_tlvs,json=customTlvs,proto3" json:"custom_tlvs,omitempty"`
	// Description missing in models
	Capabilities []*LldpCapabilityState `protobuf:"bytes,16,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *LldpNeighborsState) Reset() {
	*x = LldpNeighborsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighborsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighborsState) ProtoMessage() {}

func (x *LldpNeighborsState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighborsState.ProtoReflect.Descriptor instead.
func (*LldpNeighborsState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{261}
}

func (x *LldpNeighborsState) GetLldpName() string {
	if x != nil && x.LldpName != nil {
		return *x.LldpName
	}
	return ""
}

func (x *LldpNeighborsState) GetSystemName() string {
	if x != nil && x.SystemName != nil {
		return *x.SystemName
	}
	return ""
}

func (x *LldpNeighborsState) GetSystemDescription() string {
	if x != nil && x.SystemDescription != nil {
		return *x.SystemDescription
	}
	return ""
}

func (x *LldpNeighborsState) GetChassisId() string {
	if x != nil && x.ChassisId != nil {
		return *x.ChassisId
	}
	return ""
}

func (x *LldpNeighborsState) GetChassisIdType() LldpNeighborsState_ChassisIdType_Enum {
	if x != nil && x.ChassisIdType != nil {
		return *x.ChassisIdType
	}
	return LldpNeighborsState_ChassisIdType_unspecified
}

func (x *LldpNeighborsState) GetNeighborId() string {
	if x != nil && x.NeighborId != nil {
		return *x.NeighborId
	}
	return ""
}

func (x *LldpNeighborsState) GetAge() int64 {
	if x != nil && x.Age != nil {
		return *x.Age
	}
	return 0
}

func (x *LldpNeighborsState) GetLastUpdate() int64 {
	if x != nil && x.LastUpdate != nil {
		return *x.LastUpdate
	}
	return 0
}

func (x *LldpNeighborsState) GetTtl() int32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *LldpNeighborsState) GetPortId() string {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return ""
}

func (x *LldpNeighborsState) GetPortIdType() LldpNeighborsState_PortIdType_Enum {
	if x != nil && x.PortIdType != nil {
		return *x.PortIdType
	}
	return LldpNeighborsState_PortIdType_unspecified
}

func (x *LldpNeighborsState) GetPortDescription() string {
	if x != nil && x.PortDescription != nil {
		return *x.PortDescription
	}
	return ""
}

func (x *LldpNeighborsState) GetManagementAddress() string {
	if x != nil && x.ManagementAddress != nil {
		return *x.ManagementAddress
	}
	return ""
}

func (x *LldpNeighborsState) GetManagementAddressType() string {
	if x != nil && x.ManagementAddressType != nil {
		return *x.ManagementAddressType
	}
	return ""
}

func (x *LldpNeighborsState) GetCustomTlvs() []*LldpCustomTLVState {
	if x != nil {
		return x.CustomTlvs
	}
	return nil
}

func (x *LldpNeighborsState) GetCapabilities() []*LldpCapabilityState {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// Custom TLV received from a neighbor.Custom TLVs are organization specific TLVs advertised
// with TLV type 127.
type LldpCustomTLVState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The integer value identifying the type of information contained in the value field.
	CustomType *int32 `protobuf:"varint,1,opt,name=custom_type,json=customType,proto3,oneof" json:"custom_type,omitempty"`
	// The organizationally unique identifier field shall contain the organization's OUI
	// as defined in Clause 9 of IEEE Std 802. The high-order octet is 0 and the low-order
	// 3 octets are the SMI Network Management Private Enterprise Code of the Vendor in
	// network byte order,  as defined in the 'Assigned Numbers' RFC [RFC3232].
	Oui *string `protobuf:"bytes,2,opt,name=oui,proto3,oneof" json:"oui,omitempty"`
	// The organizationally defined subtype field shall contain a unique subtype value assigned
	// by the defining organization.
	OuiSubtype *string `protobuf:"bytes,3,opt,name=oui_subtype,json=ouiSubtype,proto3,oneof" json:"oui_subtype,omitempty"`
}

func (x *LldpCustomTLVState) Reset() {
	*x = LldpCustomTLVState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpCustomTLVState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpCustomTLVState) ProtoMessage() {}

func (x *LldpCustomTLVState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpCustomTLVState.ProtoReflect.Descriptor instead.
func (*LldpCustomTLVState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{262}
}

func (x *LldpCustomTLVState) GetCustomType() int32 {
	if x != nil && x.CustomType != nil {
		return *x.CustomType
	}
	return 0
}

func (x *LldpCustomTLVState) GetOui() string {
	if x != nil && x.Oui != nil {
		return *x.Oui
	}
	return ""
}

func (x *LldpCustomTLVState) GetOuiSubtype() string {
	if x != nil && x.OuiSubtype != nil {
		return *x.OuiSubtype
	}
	return ""
}

// LLDP system capability advertised by the neighbor
type LldpCapabilityState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the system capability advertised by the neighbor. Capabilities are represented
	// in a bitmap that defines the primary functions of the system.  The capabilities are
	// defined in IEEE 802.1AB.
	CapabilityName *LldpCapabilityState_CapabilityName_Enum `protobuf:"varint,1,opt,name=capability_name,json=capabilityName,proto3,enum=otg.LldpCapabilityState_CapabilityName_Enum,oneof" json:"capability_name,omitempty"`
	// Indicates whether the corresponding system capability is enabled on the neighbor.
	CapabilityEnabled *bool `protobuf:"varint,2,opt,name=capability_enabled,json=capabilityEnabled,proto3,oneof" json:"capability_enabled,omitempty"`
}

func (x *LldpCapabilityState) Reset() {
	*x = LldpCapabilityState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpCapabilityState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpCapabilityState) ProtoMessage() {}

func (x *LldpCapabilityState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpCapabilityState.ProtoReflect.Descriptor instead.
func (*LldpCapabilityState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{263}
}

func (x *LldpCapabilityState) GetCapabilityName() LldpCapabilityState_CapabilityName_Enum {
	if x != nil && x.CapabilityName != nil {
		return *x.CapabilityName
	}
	return LldpCapabilityState_CapabilityName_unspecified
}

func (x *LldpCapabilityState) GetCapabilityEnabled() bool {
	if x != nil && x.CapabilityEnabled != nil {
		return *x.CapabilityEnabled
	}
	return false
}

// The request to retrieve RSVP Label Switched Path (LSP) information learned by the
// router.
type RsvpLspsStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of RSVP-TE routers for which learned information is requested. An empty
	// list will return results for all RSVP=TE routers.
	//
	// x-constraint:
	// - /components/schemas/Device.Rsvp/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Device.Rsvp/properties/name
	//
	RsvpRouterNames []string `protobuf:"bytes,1,rep,name=rsvp_router_names,json=rsvpRouterNames,proto3" json:"rsvp_router_names,omitempty"`
}

func (x *RsvpLspsStateRequest) Reset() {
	*x = RsvpLspsStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspsStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspsStateRequest) ProtoMessage() {}

func (x *RsvpLspsStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspsStateRequest.ProtoReflect.Descriptor instead.
func (*RsvpLspsStateRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{264}
}

func (x *RsvpLspsStateRequest) GetRsvpRouterNames() []string {
	if x != nil {
		return x.RsvpRouterNames
	}
	return nil
}

// Discovered IPv4 Point-to-Point LSPs of a RSVP-TE router.
type RsvpLspsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the RSVP-TE Router.
	RsvpRouterName *string `protobuf:"bytes,1,opt,name=rsvp_router_name,json=rsvpRouterName,proto3,oneof" json:"rsvp_router_name,omitempty"`
	// IPv4 Point-to-Point RSVP-TE Discovered LSPs.
	Ipv4Lsps []*RsvpIPv4LspState `protobuf:"bytes,2,rep,name=ipv4_lsps,json=ipv4Lsps,proto3" json:"ipv4_lsps,omitempty"`
}

func (x *RsvpLspsState) Reset() {
	*x = RsvpLspsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspsState) ProtoMessage() {}

func (x *RsvpLspsState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspsState.ProtoReflect.Descriptor instead.
func (*RsvpLspsState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{265}
}

func (x *RsvpLspsState) GetRsvpRouterName() string {
	if x != nil && x.RsvpRouterName != nil {
		return *x.RsvpRouterName
	}
	return ""
}

func (x *RsvpLspsState) GetIpv4Lsps() []*RsvpIPv4LspState {
	if x != nil {
		return x.Ipv4Lsps
	}
	return nil
}

// IPv4 RSVP-TE Discovered LSPs.
type RsvpIPv4LspState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The origin IPv4 address of RSVP session.
	SourceAddress *string `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3,oneof" json:"source_address,omitempty"`
	// The IPv4 destination address of RSVP session.
	DestinationAddress *string `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3,oneof" json:"destination_address,omitempty"`
	// It refers to the RSVP LSP properties.
	Lsp *RsvpLspState `protobuf:"bytes,3,opt,name=lsp,proto3,oneof" json:"lsp,omitempty"`
	// It refers to RSVP RRO objects container.
	Rros []*RsvpLspIpv4Rro `protobuf:"bytes,4,rep,name=rros,proto3" json:"rros,omitempty"`
	// It refers to RSVP ERO objects container.
	Eros []*RsvpLspIpv4Ero `protobuf:"bytes,5,rep,name=eros,proto3" json:"eros,omitempty"`
}

func (x *RsvpIPv4LspState) Reset() {
	*x = RsvpIPv4LspState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpIPv4LspState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpIPv4LspState) ProtoMessage() {}

func (x *RsvpIPv4LspState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpIPv4LspState.ProtoReflect.Descriptor instead.
func (*RsvpIPv4LspState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{266}
}

func (x *RsvpIPv4LspState) GetSourceAddress() string {
	if x != nil && x.SourceAddress != nil {
		return *x.SourceAddress
	}
	return ""
}

func (x *RsvpIPv4LspState) GetDestinationAddress() string {
	if x != nil && x.DestinationAddress != nil {
		return *x.DestinationAddress
	}
	return ""
}

func (x *RsvpIPv4LspState) GetLsp() *RsvpLspState {
	if x != nil {
		return x.Lsp
	}
	return nil
}

func (x *RsvpIPv4LspState) GetRros() []*RsvpLspIpv4Rro {
	if x != nil {
		return x.Rros
	}
	return nil
}

func (x *RsvpIPv4LspState) GetEros() []*RsvpLspIpv4Ero {
	if x != nil {
		return x.Eros
	}
	return nil
}

// IPv4 RSVP-TE Discovered LSPs.
type RsvpLspState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tunnel id of RSVP session which acts as an identifier that remains constant over
	// the life of the tunnel.
	TunnelId *int32 `protobuf:"varint,1,opt,name=tunnel_id,json=tunnelId,proto3,oneof" json:"tunnel_id,omitempty"`
	// The lsp-id of RSVP session which acts as a differentiator for two lsps originating
	// from the same headend, commonly used to distinguish RSVP sessions during make before
	// break operations.
	LspId *int32 `protobuf:"varint,2,opt,name=lsp_id,json=lspId,proto3,oneof" json:"lsp_id,omitempty"`
	// The value of RSVP-TE Session Name field of the Session Attribute object.
	SessionName *string `protobuf:"bytes,3,opt,name=session_name,json=sessionName,proto3,oneof" json:"session_name,omitempty"`
	// The label received by RSVP-TE ingress.
	LabelIn *int32 `protobuf:"varint,4,opt,name=label_in,json=labelIn,proto3,oneof" json:"label_in,omitempty"`
	// The label assigned by RSVP-TE egress.
	LabelOut *int32 `protobuf:"varint,5,opt,name=label_out,json=labelOut,proto3,oneof" json:"label_out,omitempty"`
	// Operational state of the RSVP LSP.
	SessionStatus *RsvpLspState_SessionStatus_Enum `protobuf:"varint,6,opt,name=session_status,json=sessionStatus,proto3,enum=otg.RsvpLspState_SessionStatus_Enum,oneof" json:"session_status,omitempty"`
	// The reason for the last flap of this RSVP session.
	LastFlapReason *RsvpLspState_LastFlapReason_Enum `protobuf:"varint,7,opt,name=last_flap_reason,json=lastFlapReason,proto3,enum=otg.RsvpLspState_LastFlapReason_Enum,oneof" json:"last_flap_reason,omitempty"`
	// The tunnel UP time in milli seconds. If the tunnel is DOWN the UP time will be zero.
	UpTime *int64 `protobuf:"varint,8,opt,name=up_time,json=upTime,proto3,oneof" json:"up_time,omitempty"`
}

func (x *RsvpLspState) Reset() {
	*x = RsvpLspState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspState) ProtoMessage() {}

func (x *RsvpLspState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspState.ProtoReflect.Descriptor instead.
func (*RsvpLspState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{267}
}

func (x *RsvpLspState) GetTunnelId() int32 {
	if x != nil && x.TunnelId != nil {
		return *x.TunnelId
	}
	return 0
}

func (x *RsvpLspState) GetLspId() int32 {
	if x != nil && x.LspId != nil {
		return *x.LspId
	}
	return 0
}

func (x *RsvpLspState) GetSessionName() string {
	if x != nil && x.SessionName != nil {
		return *x.SessionName
	}
	return ""
}

func (x *RsvpLspState) GetLabelIn() int32 {
	if x != nil && x.LabelIn != nil {
		return *x.LabelIn
	}
	return 0
}

func (x *RsvpLspState) GetLabelOut() int32 {
	if x != nil && x.LabelOut != nil {
		return *x.LabelOut
	}
	return 0
}

func (x *RsvpLspState) GetSessionStatus() RsvpLspState_SessionStatus_Enum {
	if x != nil && x.SessionStatus != nil {
		return *x.SessionStatus
	}
	return RsvpLspState_SessionStatus_unspecified
}

func (x *RsvpLspState) GetLastFlapReason() RsvpLspState_LastFlapReason_Enum {
	if x != nil && x.LastFlapReason != nil {
		return *x.LastFlapReason
	}
	return RsvpLspState_LastFlapReason_unspecified
}

func (x *RsvpLspState) GetUpTime() int64 {
	if x != nil && x.UpTime != nil {
		return *x.UpTime
	}
	return 0
}

// This contains the list of Record Route Object(RRO) objects associated with the traffic
// engineering tunnel. The  Record Route Object(RRO) is used in RSVP-TE to record the
// route traversed by the LSP. The RRO might be present in both   Path message and Resv
// message, the RRO stores the IP addresses of the routers that the traffic engineering
// tunnel  traversed and also the label generated and distributed by the routers. The
// RROs in the Resv message mirrors that of  the Path message, the only difference is
// that the RRO in a Resv message records the path information in the reverse  direction.
//
type RsvpLspIpv4Rro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IPv4 addresses of the routers that the traffic engineering tunnel traversed.
	Address *string `protobuf:"bytes,1,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// Label reported for RRO hop. When the Label_Recording flag is set in the Session Attribute
	// object, nodes doing route recording should include the Label Record subobject containing
	// the reported label.
	ReportedLabel *int32 `protobuf:"varint,2,opt,name=reported_label,json=reportedLabel,proto3,oneof" json:"reported_label,omitempty"`
}

func (x *RsvpLspIpv4Rro) Reset() {
	*x = RsvpLspIpv4Rro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspIpv4Rro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspIpv4Rro) ProtoMessage() {}

func (x *RsvpLspIpv4Rro) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspIpv4Rro.ProtoReflect.Descriptor instead.
func (*RsvpLspIpv4Rro) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{268}
}

func (x *RsvpLspIpv4Rro) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *RsvpLspIpv4Rro) GetReportedLabel() int32 {
	if x != nil && x.ReportedLabel != nil {
		return *x.ReportedLabel
	}
	return 0
}

// This contains the list of sub-objects included in the Explicit Route Object(ERO)
// object send in the PATH message from the ingress. These sub-objects contain the intermediate
// hops to be traversed by the LSP while being forwarded  towards the egress endpoint.
type RsvpLspIpv4Ero struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IPv4 prefix indicated by the ERO. Specified only when the ERO hop is an IPv4
	// prefix.
	Prefix *string `protobuf:"bytes,1,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// The autonomous system number indicated by the ERO. Specified only when the ERO hop
	// is an  2 or 4-byte AS number.
	Asn *int32 `protobuf:"varint,2,opt,name=asn,proto3,oneof" json:"asn,omitempty"`
	// The type indicated by the ERO.
	Type *RsvpLspIpv4Ero_Type_Enum `protobuf:"varint,3,opt,name=type,proto3,enum=otg.RsvpLspIpv4Ero_Type_Enum,oneof" json:"type,omitempty"`
}

func (x *RsvpLspIpv4Ero) Reset() {
	*x = RsvpLspIpv4Ero{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspIpv4Ero) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspIpv4Ero) ProtoMessage() {}

func (x *RsvpLspIpv4Ero) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspIpv4Ero.ProtoReflect.Descriptor instead.
func (*RsvpLspIpv4Ero) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{269}
}

func (x *RsvpLspIpv4Ero) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *RsvpLspIpv4Ero) GetAsn() int32 {
	if x != nil && x.Asn != nil {
		return *x.Asn
	}
	return 0
}

func (x *RsvpLspIpv4Ero) GetType() RsvpLspIpv4Ero_Type_Enum {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RsvpLspIpv4Ero_Type_unspecified
}

// The capture result request to the traffic generator. Stops the port capture on the
// port_name and returns the capture.
type CaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a port a capture is started on.
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	//
	// x-constraint:
	// - /components/schemas/Port/properties/name
	//
	// required = true
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *CaptureRequest) Reset() {
	*x = CaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureRequest) ProtoMessage() {}

func (x *CaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureRequest.ProtoReflect.Descriptor instead.
func (*CaptureRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{270}
}

func (x *CaptureRequest) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

// mac counter pattern
type PatternFlowEthernetDstCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 00:00:00:00:00:00
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:01
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowEthernetDstCounter) Reset() {
	*x = PatternFlowEthernetDstCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetDstCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetDstCounter) ProtoMessage() {}

func (x *PatternFlowEthernetDstCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetDstCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetDstCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{271}
}

func (x *PatternFlowEthernetDstCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowEthernetDstCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowEthernetDstCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Destination MAC address
type PatternFlowEthernetDst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.auto
	Choice *PatternFlowEthernetDst_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowEthernetDst_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:00
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['00:00:00:00:00:00']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// The OTG implementation can provide a system generated
	// value for this property. If the OTG is unable to generate a value
	// the default value must be used.
	// default = 00:00:00:00:00:00
	Auto *string `protobuf:"bytes,4,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,5,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowEthernetDstCounter `protobuf:"bytes,6,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowEthernetDstCounter `protobuf:"bytes,7,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowEthernetDst) Reset() {
	*x = PatternFlowEthernetDst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetDst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetDst) ProtoMessage() {}

func (x *PatternFlowEthernetDst) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetDst.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetDst) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{272}
}

func (x *PatternFlowEthernetDst) GetChoice() PatternFlowEthernetDst_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowEthernetDst_Choice_unspecified
}

func (x *PatternFlowEthernetDst) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowEthernetDst) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowEthernetDst) GetAuto() string {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return ""
}

func (x *PatternFlowEthernetDst) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowEthernetDst) GetIncrement() *PatternFlowEthernetDstCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowEthernetDst) GetDecrement() *PatternFlowEthernetDstCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// mac counter pattern
type PatternFlowEthernetSrcCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 00:00:00:00:00:00
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:01
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowEthernetSrcCounter) Reset() {
	*x = PatternFlowEthernetSrcCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetSrcCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetSrcCounter) ProtoMessage() {}

func (x *PatternFlowEthernetSrcCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetSrcCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetSrcCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{273}
}

func (x *PatternFlowEthernetSrcCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowEthernetSrcCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowEthernetSrcCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Source MAC address
type PatternFlowEthernetSrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowEthernetSrc_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowEthernetSrc_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:00
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['00:00:00:00:00:00']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowEthernetSrcCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowEthernetSrcCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowEthernetSrc) Reset() {
	*x = PatternFlowEthernetSrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetSrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetSrc) ProtoMessage() {}

func (x *PatternFlowEthernetSrc) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetSrc.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetSrc) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{274}
}

func (x *PatternFlowEthernetSrc) GetChoice() PatternFlowEthernetSrc_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowEthernetSrc_Choice_unspecified
}

func (x *PatternFlowEthernetSrc) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowEthernetSrc) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowEthernetSrc) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowEthernetSrc) GetIncrement() *PatternFlowEthernetSrcCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowEthernetSrc) GetDecrement() *PatternFlowEthernetSrcCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowEthernetEtherTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 65535
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowEthernetEtherTypeCounter) Reset() {
	*x = PatternFlowEthernetEtherTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetEtherTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetEtherTypeCounter) ProtoMessage() {}

func (x *PatternFlowEthernetEtherTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetEtherTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetEtherTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{275}
}

func (x *PatternFlowEthernetEtherTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowEthernetEtherTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowEthernetEtherTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Ethernet type
type PatternFlowEthernetEtherType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.auto
	Choice *PatternFlowEthernetEtherType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowEthernetEtherType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 65535
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [65535]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// The OTG implementation can provide a system generated
	// value for this property. If the OTG is unable to generate a value
	// the default value must be used.
	// default = 65535
	Auto *int32 `protobuf:"varint,4,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,5,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowEthernetEtherTypeCounter `protobuf:"bytes,6,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowEthernetEtherTypeCounter `protobuf:"bytes,7,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowEthernetEtherType) Reset() {
	*x = PatternFlowEthernetEtherType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetEtherType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetEtherType) ProtoMessage() {}

func (x *PatternFlowEthernetEtherType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetEtherType.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetEtherType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{276}
}

func (x *PatternFlowEthernetEtherType) GetChoice() PatternFlowEthernetEtherType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowEthernetEtherType_Choice_unspecified
}

func (x *PatternFlowEthernetEtherType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowEthernetEtherType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowEthernetEtherType) GetAuto() int32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return 0
}

func (x *PatternFlowEthernetEtherType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowEthernetEtherType) GetIncrement() *PatternFlowEthernetEtherTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowEthernetEtherType) GetDecrement() *PatternFlowEthernetEtherTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowEthernetPfcQueueCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowEthernetPfcQueueCounter) Reset() {
	*x = PatternFlowEthernetPfcQueueCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPfcQueueCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPfcQueueCounter) ProtoMessage() {}

func (x *PatternFlowEthernetPfcQueueCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPfcQueueCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPfcQueueCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{277}
}

func (x *PatternFlowEthernetPfcQueueCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowEthernetPfcQueueCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowEthernetPfcQueueCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Priority flow control queue
type PatternFlowEthernetPfcQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowEthernetPfcQueue_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowEthernetPfcQueue_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowEthernetPfcQueueCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowEthernetPfcQueueCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowEthernetPfcQueue) Reset() {
	*x = PatternFlowEthernetPfcQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPfcQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPfcQueue) ProtoMessage() {}

func (x *PatternFlowEthernetPfcQueue) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPfcQueue.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPfcQueue) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{278}
}

func (x *PatternFlowEthernetPfcQueue) GetChoice() PatternFlowEthernetPfcQueue_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowEthernetPfcQueue_Choice_unspecified
}

func (x *PatternFlowEthernetPfcQueue) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowEthernetPfcQueue) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowEthernetPfcQueue) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowEthernetPfcQueue) GetIncrement() *PatternFlowEthernetPfcQueueCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowEthernetPfcQueue) GetDecrement() *PatternFlowEthernetPfcQueueCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowVlanPriorityCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowVlanPriorityCounter) Reset() {
	*x = PatternFlowVlanPriorityCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanPriorityCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanPriorityCounter) ProtoMessage() {}

func (x *PatternFlowVlanPriorityCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanPriorityCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanPriorityCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{279}
}

func (x *PatternFlowVlanPriorityCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowVlanPriorityCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowVlanPriorityCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Priority code point
type PatternFlowVlanPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowVlanPriority_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowVlanPriority_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowVlanPriorityCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowVlanPriorityCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowVlanPriority) Reset() {
	*x = PatternFlowVlanPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanPriority) ProtoMessage() {}

func (x *PatternFlowVlanPriority) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanPriority.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanPriority) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{280}
}

func (x *PatternFlowVlanPriority) GetChoice() PatternFlowVlanPriority_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowVlanPriority_Choice_unspecified
}

func (x *PatternFlowVlanPriority) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowVlanPriority) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowVlanPriority) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowVlanPriority) GetIncrement() *PatternFlowVlanPriorityCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowVlanPriority) GetDecrement() *PatternFlowVlanPriorityCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowVlanCfiCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowVlanCfiCounter) Reset() {
	*x = PatternFlowVlanCfiCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanCfiCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanCfiCounter) ProtoMessage() {}

func (x *PatternFlowVlanCfiCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanCfiCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanCfiCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{281}
}

func (x *PatternFlowVlanCfiCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowVlanCfiCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowVlanCfiCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Canonical format indicator or drop elegible indicator
type PatternFlowVlanCfi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowVlanCfi_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowVlanCfi_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowVlanCfiCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowVlanCfiCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowVlanCfi) Reset() {
	*x = PatternFlowVlanCfi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanCfi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanCfi) ProtoMessage() {}

func (x *PatternFlowVlanCfi) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanCfi.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanCfi) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{282}
}

func (x *PatternFlowVlanCfi) GetChoice() PatternFlowVlanCfi_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowVlanCfi_Choice_unspecified
}

func (x *PatternFlowVlanCfi) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowVlanCfi) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowVlanCfi) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowVlanCfi) GetIncrement() *PatternFlowVlanCfiCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowVlanCfi) GetDecrement() *PatternFlowVlanCfiCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowVlanIdCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowVlanIdCounter) Reset() {
	*x = PatternFlowVlanIdCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanIdCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanIdCounter) ProtoMessage() {}

func (x *PatternFlowVlanIdCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanIdCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanIdCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{283}
}

func (x *PatternFlowVlanIdCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowVlanIdCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowVlanIdCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Vlan identifier
type PatternFlowVlanId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowVlanId_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowVlanId_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowVlanIdCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowVlanIdCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowVlanId) Reset() {
	*x = PatternFlowVlanId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanId) ProtoMessage() {}

func (x *PatternFlowVlanId) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanId.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanId) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{284}
}

func (x *PatternFlowVlanId) GetChoice() PatternFlowVlanId_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowVlanId_Choice_unspecified
}

func (x *PatternFlowVlanId) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowVlanId) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowVlanId) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowVlanId) GetIncrement() *PatternFlowVlanIdCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowVlanId) GetDecrement() *PatternFlowVlanIdCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowVlanTpidCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 33024
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowVlanTpidCounter) Reset() {
	*x = PatternFlowVlanTpidCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanTpidCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanTpidCounter) ProtoMessage() {}

func (x *PatternFlowVlanTpidCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanTpidCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanTpidCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{285}
}

func (x *PatternFlowVlanTpidCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowVlanTpidCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowVlanTpidCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Protocol identifier
type PatternFlowVlanTpid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowVlanTpid_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowVlanTpid_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 33024
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [33024]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowVlanTpidCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowVlanTpidCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowVlanTpid) Reset() {
	*x = PatternFlowVlanTpid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanTpid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanTpid) ProtoMessage() {}

func (x *PatternFlowVlanTpid) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanTpid.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanTpid) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{286}
}

func (x *PatternFlowVlanTpid) GetChoice() PatternFlowVlanTpid_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowVlanTpid_Choice_unspecified
}

func (x *PatternFlowVlanTpid) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowVlanTpid) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowVlanTpid) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowVlanTpid) GetIncrement() *PatternFlowVlanTpidCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowVlanTpid) GetDecrement() *PatternFlowVlanTpidCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowVxlanFlagsCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 8
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowVxlanFlagsCounter) Reset() {
	*x = PatternFlowVxlanFlagsCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanFlagsCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanFlagsCounter) ProtoMessage() {}

func (x *PatternFlowVxlanFlagsCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanFlagsCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanFlagsCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{287}
}

func (x *PatternFlowVxlanFlagsCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowVxlanFlagsCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowVxlanFlagsCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Flags field with a bit format of RRRRIRRR. The I flag MUST be set to 1 for a valid
// vxlan network id (VNI).   The other 7 bits (designated R) are reserved fields and
// MUST be  set to zero on transmission and ignored on receipt.
type PatternFlowVxlanFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowVxlanFlags_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowVxlanFlags_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 8
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [8]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowVxlanFlagsCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowVxlanFlagsCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowVxlanFlags) Reset() {
	*x = PatternFlowVxlanFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanFlags) ProtoMessage() {}

func (x *PatternFlowVxlanFlags) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanFlags.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanFlags) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{288}
}

func (x *PatternFlowVxlanFlags) GetChoice() PatternFlowVxlanFlags_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowVxlanFlags_Choice_unspecified
}

func (x *PatternFlowVxlanFlags) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowVxlanFlags) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowVxlanFlags) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowVxlanFlags) GetIncrement() *PatternFlowVxlanFlagsCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowVxlanFlags) GetDecrement() *PatternFlowVxlanFlagsCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowVxlanReserved0Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowVxlanReserved0Counter) Reset() {
	*x = PatternFlowVxlanReserved0Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanReserved0Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanReserved0Counter) ProtoMessage() {}

func (x *PatternFlowVxlanReserved0Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanReserved0Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanReserved0Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{289}
}

func (x *PatternFlowVxlanReserved0Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowVxlanReserved0Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowVxlanReserved0Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Reserved field
type PatternFlowVxlanReserved0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowVxlanReserved0_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowVxlanReserved0_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowVxlanReserved0Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowVxlanReserved0Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowVxlanReserved0) Reset() {
	*x = PatternFlowVxlanReserved0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanReserved0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanReserved0) ProtoMessage() {}

func (x *PatternFlowVxlanReserved0) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanReserved0.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanReserved0) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{290}
}

func (x *PatternFlowVxlanReserved0) GetChoice() PatternFlowVxlanReserved0_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowVxlanReserved0_Choice_unspecified
}

func (x *PatternFlowVxlanReserved0) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowVxlanReserved0) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowVxlanReserved0) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowVxlanReserved0) GetIncrement() *PatternFlowVxlanReserved0Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowVxlanReserved0) GetDecrement() *PatternFlowVxlanReserved0Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowVxlanVniCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowVxlanVniCounter) Reset() {
	*x = PatternFlowVxlanVniCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanVniCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanVniCounter) ProtoMessage() {}

func (x *PatternFlowVxlanVniCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanVniCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanVniCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{291}
}

func (x *PatternFlowVxlanVniCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowVxlanVniCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowVxlanVniCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// VXLAN network id
type PatternFlowVxlanVni struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.auto
	Choice *PatternFlowVxlanVni_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowVxlanVni_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// The OTG implementation can provide a system generated
	// value for this property. If the OTG is unable to generate a value
	// the default value must be used.
	// default = 0
	Auto *int32 `protobuf:"varint,4,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,5,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowVxlanVniCounter `protobuf:"bytes,6,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowVxlanVniCounter `protobuf:"bytes,7,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowVxlanVni) Reset() {
	*x = PatternFlowVxlanVni{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanVni) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanVni) ProtoMessage() {}

func (x *PatternFlowVxlanVni) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanVni.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanVni) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{292}
}

func (x *PatternFlowVxlanVni) GetChoice() PatternFlowVxlanVni_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowVxlanVni_Choice_unspecified
}

func (x *PatternFlowVxlanVni) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowVxlanVni) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowVxlanVni) GetAuto() int32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return 0
}

func (x *PatternFlowVxlanVni) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowVxlanVni) GetIncrement() *PatternFlowVxlanVniCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowVxlanVni) GetDecrement() *PatternFlowVxlanVniCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowVxlanReserved1Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowVxlanReserved1Counter) Reset() {
	*x = PatternFlowVxlanReserved1Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanReserved1Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanReserved1Counter) ProtoMessage() {}

func (x *PatternFlowVxlanReserved1Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanReserved1Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanReserved1Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{293}
}

func (x *PatternFlowVxlanReserved1Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowVxlanReserved1Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowVxlanReserved1Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Reserved field
type PatternFlowVxlanReserved1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowVxlanReserved1_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowVxlanReserved1_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowVxlanReserved1Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowVxlanReserved1Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowVxlanReserved1) Reset() {
	*x = PatternFlowVxlanReserved1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanReserved1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanReserved1) ProtoMessage() {}

func (x *PatternFlowVxlanReserved1) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanReserved1.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanReserved1) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{294}
}

func (x *PatternFlowVxlanReserved1) GetChoice() PatternFlowVxlanReserved1_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowVxlanReserved1_Choice_unspecified
}

func (x *PatternFlowVxlanReserved1) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowVxlanReserved1) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowVxlanReserved1) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowVxlanReserved1) GetIncrement() *PatternFlowVxlanReserved1Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowVxlanReserved1) GetDecrement() *PatternFlowVxlanReserved1Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4VersionCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 4
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4VersionCounter) Reset() {
	*x = PatternFlowIpv4VersionCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4VersionCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4VersionCounter) ProtoMessage() {}

func (x *PatternFlowIpv4VersionCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4VersionCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4VersionCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{295}
}

func (x *PatternFlowIpv4VersionCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4VersionCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4VersionCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Version
type PatternFlowIpv4Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4Version_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4Version_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 4
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [4]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4VersionCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4VersionCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4Version) Reset() {
	*x = PatternFlowIpv4Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Version) ProtoMessage() {}

func (x *PatternFlowIpv4Version) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Version.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Version) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{296}
}

func (x *PatternFlowIpv4Version) GetChoice() PatternFlowIpv4Version_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4Version_Choice_unspecified
}

func (x *PatternFlowIpv4Version) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4Version) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4Version) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4Version) GetIncrement() *PatternFlowIpv4VersionCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4Version) GetDecrement() *PatternFlowIpv4VersionCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4HeaderLengthCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 5
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4HeaderLengthCounter) Reset() {
	*x = PatternFlowIpv4HeaderLengthCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4HeaderLengthCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4HeaderLengthCounter) ProtoMessage() {}

func (x *PatternFlowIpv4HeaderLengthCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4HeaderLengthCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4HeaderLengthCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{297}
}

func (x *PatternFlowIpv4HeaderLengthCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4HeaderLengthCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4HeaderLengthCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Header length
type PatternFlowIpv4HeaderLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.auto
	Choice *PatternFlowIpv4HeaderLength_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4HeaderLength_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 5
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [5]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// The OTG implementation can provide a system generated
	// value for this property. If the OTG is unable to generate a value
	// the default value must be used.
	// default = 5
	Auto *int32 `protobuf:"varint,4,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,5,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4HeaderLengthCounter `protobuf:"bytes,6,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4HeaderLengthCounter `protobuf:"bytes,7,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4HeaderLength) Reset() {
	*x = PatternFlowIpv4HeaderLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4HeaderLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4HeaderLength) ProtoMessage() {}

func (x *PatternFlowIpv4HeaderLength) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4HeaderLength.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4HeaderLength) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{298}
}

func (x *PatternFlowIpv4HeaderLength) GetChoice() PatternFlowIpv4HeaderLength_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4HeaderLength_Choice_unspecified
}

func (x *PatternFlowIpv4HeaderLength) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4HeaderLength) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4HeaderLength) GetAuto() int32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return 0
}

func (x *PatternFlowIpv4HeaderLength) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4HeaderLength) GetIncrement() *PatternFlowIpv4HeaderLengthCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4HeaderLength) GetDecrement() *PatternFlowIpv4HeaderLengthCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4TotalLengthCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 46
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4TotalLengthCounter) Reset() {
	*x = PatternFlowIpv4TotalLengthCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TotalLengthCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TotalLengthCounter) ProtoMessage() {}

func (x *PatternFlowIpv4TotalLengthCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TotalLengthCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TotalLengthCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{299}
}

func (x *PatternFlowIpv4TotalLengthCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4TotalLengthCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4TotalLengthCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Total length
type PatternFlowIpv4TotalLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.auto
	Choice *PatternFlowIpv4TotalLength_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4TotalLength_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 46
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [46]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// The OTG implementation can provide a system generated
	// value for this property. If the OTG is unable to generate a value
	// the default value must be used.
	// default = 46
	Auto *int32 `protobuf:"varint,4,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,5,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4TotalLengthCounter `protobuf:"bytes,6,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4TotalLengthCounter `protobuf:"bytes,7,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4TotalLength) Reset() {
	*x = PatternFlowIpv4TotalLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TotalLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TotalLength) ProtoMessage() {}

func (x *PatternFlowIpv4TotalLength) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TotalLength.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TotalLength) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{300}
}

func (x *PatternFlowIpv4TotalLength) GetChoice() PatternFlowIpv4TotalLength_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4TotalLength_Choice_unspecified
}

func (x *PatternFlowIpv4TotalLength) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4TotalLength) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4TotalLength) GetAuto() int32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return 0
}

func (x *PatternFlowIpv4TotalLength) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4TotalLength) GetIncrement() *PatternFlowIpv4TotalLengthCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4TotalLength) GetDecrement() *PatternFlowIpv4TotalLengthCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4IdentificationCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4IdentificationCounter) Reset() {
	*x = PatternFlowIpv4IdentificationCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4IdentificationCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4IdentificationCounter) ProtoMessage() {}

func (x *PatternFlowIpv4IdentificationCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4IdentificationCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4IdentificationCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{301}
}

func (x *PatternFlowIpv4IdentificationCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4IdentificationCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4IdentificationCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Identification
type PatternFlowIpv4Identification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4Identification_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4Identification_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4IdentificationCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4IdentificationCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4Identification) Reset() {
	*x = PatternFlowIpv4Identification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Identification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Identification) ProtoMessage() {}

func (x *PatternFlowIpv4Identification) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Identification.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Identification) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{302}
}

func (x *PatternFlowIpv4Identification) GetChoice() PatternFlowIpv4Identification_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4Identification_Choice_unspecified
}

func (x *PatternFlowIpv4Identification) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4Identification) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4Identification) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4Identification) GetIncrement() *PatternFlowIpv4IdentificationCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4Identification) GetDecrement() *PatternFlowIpv4IdentificationCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4ReservedCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4ReservedCounter) Reset() {
	*x = PatternFlowIpv4ReservedCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4ReservedCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4ReservedCounter) ProtoMessage() {}

func (x *PatternFlowIpv4ReservedCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4ReservedCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4ReservedCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{303}
}

func (x *PatternFlowIpv4ReservedCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4ReservedCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4ReservedCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Reserved flag.
type PatternFlowIpv4Reserved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4Reserved_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4Reserved_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4ReservedCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4ReservedCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4Reserved) Reset() {
	*x = PatternFlowIpv4Reserved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Reserved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Reserved) ProtoMessage() {}

func (x *PatternFlowIpv4Reserved) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Reserved.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Reserved) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{304}
}

func (x *PatternFlowIpv4Reserved) GetChoice() PatternFlowIpv4Reserved_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4Reserved_Choice_unspecified
}

func (x *PatternFlowIpv4Reserved) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4Reserved) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4Reserved) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4Reserved) GetIncrement() *PatternFlowIpv4ReservedCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4Reserved) GetDecrement() *PatternFlowIpv4ReservedCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4DontFragmentCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4DontFragmentCounter) Reset() {
	*x = PatternFlowIpv4DontFragmentCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4DontFragmentCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4DontFragmentCounter) ProtoMessage() {}

func (x *PatternFlowIpv4DontFragmentCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4DontFragmentCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4DontFragmentCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{305}
}

func (x *PatternFlowIpv4DontFragmentCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4DontFragmentCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4DontFragmentCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Dont fragment flag If the dont_fragment flag is set and fragmentation is required
// to route the packet then the packet is dropped.
type PatternFlowIpv4DontFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4DontFragment_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4DontFragment_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4DontFragmentCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4DontFragmentCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4DontFragment) Reset() {
	*x = PatternFlowIpv4DontFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4DontFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4DontFragment) ProtoMessage() {}

func (x *PatternFlowIpv4DontFragment) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4DontFragment.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4DontFragment) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{306}
}

func (x *PatternFlowIpv4DontFragment) GetChoice() PatternFlowIpv4DontFragment_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4DontFragment_Choice_unspecified
}

func (x *PatternFlowIpv4DontFragment) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4DontFragment) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4DontFragment) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4DontFragment) GetIncrement() *PatternFlowIpv4DontFragmentCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4DontFragment) GetDecrement() *PatternFlowIpv4DontFragmentCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4MoreFragmentsCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4MoreFragmentsCounter) Reset() {
	*x = PatternFlowIpv4MoreFragmentsCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4MoreFragmentsCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4MoreFragmentsCounter) ProtoMessage() {}

func (x *PatternFlowIpv4MoreFragmentsCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4MoreFragmentsCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4MoreFragmentsCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{307}
}

func (x *PatternFlowIpv4MoreFragmentsCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4MoreFragmentsCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4MoreFragmentsCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// More fragments flag
type PatternFlowIpv4MoreFragments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4MoreFragments_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4MoreFragments_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4MoreFragmentsCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4MoreFragmentsCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4MoreFragments) Reset() {
	*x = PatternFlowIpv4MoreFragments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4MoreFragments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4MoreFragments) ProtoMessage() {}

func (x *PatternFlowIpv4MoreFragments) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4MoreFragments.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4MoreFragments) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{308}
}

func (x *PatternFlowIpv4MoreFragments) GetChoice() PatternFlowIpv4MoreFragments_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4MoreFragments_Choice_unspecified
}

func (x *PatternFlowIpv4MoreFragments) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4MoreFragments) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4MoreFragments) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4MoreFragments) GetIncrement() *PatternFlowIpv4MoreFragmentsCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4MoreFragments) GetDecrement() *PatternFlowIpv4MoreFragmentsCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4FragmentOffsetCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4FragmentOffsetCounter) Reset() {
	*x = PatternFlowIpv4FragmentOffsetCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4FragmentOffsetCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4FragmentOffsetCounter) ProtoMessage() {}

func (x *PatternFlowIpv4FragmentOffsetCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4FragmentOffsetCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4FragmentOffsetCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{309}
}

func (x *PatternFlowIpv4FragmentOffsetCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4FragmentOffsetCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4FragmentOffsetCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Fragment offset
type PatternFlowIpv4FragmentOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4FragmentOffset_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4FragmentOffset_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4FragmentOffsetCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4FragmentOffsetCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4FragmentOffset) Reset() {
	*x = PatternFlowIpv4FragmentOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4FragmentOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4FragmentOffset) ProtoMessage() {}

func (x *PatternFlowIpv4FragmentOffset) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4FragmentOffset.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4FragmentOffset) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{310}
}

func (x *PatternFlowIpv4FragmentOffset) GetChoice() PatternFlowIpv4FragmentOffset_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4FragmentOffset_Choice_unspecified
}

func (x *PatternFlowIpv4FragmentOffset) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4FragmentOffset) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4FragmentOffset) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4FragmentOffset) GetIncrement() *PatternFlowIpv4FragmentOffsetCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4FragmentOffset) GetDecrement() *PatternFlowIpv4FragmentOffsetCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4TimeToLiveCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 64
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4TimeToLiveCounter) Reset() {
	*x = PatternFlowIpv4TimeToLiveCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TimeToLiveCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TimeToLiveCounter) ProtoMessage() {}

func (x *PatternFlowIpv4TimeToLiveCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TimeToLiveCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TimeToLiveCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{311}
}

func (x *PatternFlowIpv4TimeToLiveCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4TimeToLiveCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4TimeToLiveCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Time to live
type PatternFlowIpv4TimeToLive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4TimeToLive_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4TimeToLive_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 64
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [64]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4TimeToLiveCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4TimeToLiveCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4TimeToLive) Reset() {
	*x = PatternFlowIpv4TimeToLive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TimeToLive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TimeToLive) ProtoMessage() {}

func (x *PatternFlowIpv4TimeToLive) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TimeToLive.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TimeToLive) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{312}
}

func (x *PatternFlowIpv4TimeToLive) GetChoice() PatternFlowIpv4TimeToLive_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4TimeToLive_Choice_unspecified
}

func (x *PatternFlowIpv4TimeToLive) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4TimeToLive) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4TimeToLive) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4TimeToLive) GetIncrement() *PatternFlowIpv4TimeToLiveCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4TimeToLive) GetDecrement() *PatternFlowIpv4TimeToLiveCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4ProtocolCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 61
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4ProtocolCounter) Reset() {
	*x = PatternFlowIpv4ProtocolCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4ProtocolCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4ProtocolCounter) ProtoMessage() {}

func (x *PatternFlowIpv4ProtocolCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4ProtocolCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4ProtocolCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{313}
}

func (x *PatternFlowIpv4ProtocolCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4ProtocolCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4ProtocolCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Protocol, default is 61 any host internal protocol
type PatternFlowIpv4Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.auto
	Choice *PatternFlowIpv4Protocol_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4Protocol_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 61
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [61]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// The OTG implementation can provide a system generated
	// value for this property. If the OTG is unable to generate a value
	// the default value must be used.
	// default = 61
	Auto *int32 `protobuf:"varint,4,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,5,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4ProtocolCounter `protobuf:"bytes,6,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4ProtocolCounter `protobuf:"bytes,7,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4Protocol) Reset() {
	*x = PatternFlowIpv4Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Protocol) ProtoMessage() {}

func (x *PatternFlowIpv4Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Protocol.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Protocol) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{314}
}

func (x *PatternFlowIpv4Protocol) GetChoice() PatternFlowIpv4Protocol_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4Protocol_Choice_unspecified
}

func (x *PatternFlowIpv4Protocol) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4Protocol) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4Protocol) GetAuto() int32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return 0
}

func (x *PatternFlowIpv4Protocol) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4Protocol) GetIncrement() *PatternFlowIpv4ProtocolCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4Protocol) GetDecrement() *PatternFlowIpv4ProtocolCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// Header checksum
type PatternFlowIpv4HeaderChecksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of checksum
	// default = Choice.Enum.generated
	Choice *PatternFlowIpv4HeaderChecksum_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4HeaderChecksum_Choice_Enum,oneof" json:"choice,omitempty"`
	// A system generated checksum value
	// default = Generated.Enum.good
	Generated *PatternFlowIpv4HeaderChecksum_Generated_Enum `protobuf:"varint,2,opt,name=generated,proto3,enum=otg.PatternFlowIpv4HeaderChecksum_Generated_Enum,oneof" json:"generated,omitempty"`
	// A custom checksum value
	Custom *int32 `protobuf:"varint,3,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (x *PatternFlowIpv4HeaderChecksum) Reset() {
	*x = PatternFlowIpv4HeaderChecksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4HeaderChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4HeaderChecksum) ProtoMessage() {}

func (x *PatternFlowIpv4HeaderChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4HeaderChecksum.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4HeaderChecksum) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{315}
}

func (x *PatternFlowIpv4HeaderChecksum) GetChoice() PatternFlowIpv4HeaderChecksum_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4HeaderChecksum_Choice_unspecified
}

func (x *PatternFlowIpv4HeaderChecksum) GetGenerated() PatternFlowIpv4HeaderChecksum_Generated_Enum {
	if x != nil && x.Generated != nil {
		return *x.Generated
	}
	return PatternFlowIpv4HeaderChecksum_Generated_unspecified
}

func (x *PatternFlowIpv4HeaderChecksum) GetCustom() int32 {
	if x != nil && x.Custom != nil {
		return *x.Custom
	}
	return 0
}

// ipv4 counter pattern
type PatternFlowIpv4SrcCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0.0.0.0
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 0.0.0.1
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4SrcCounter) Reset() {
	*x = PatternFlowIpv4SrcCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4SrcCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4SrcCounter) ProtoMessage() {}

func (x *PatternFlowIpv4SrcCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4SrcCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4SrcCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{316}
}

func (x *PatternFlowIpv4SrcCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowIpv4SrcCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowIpv4SrcCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Source address
type PatternFlowIpv4Src struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4Src_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4Src_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0.0.0.0
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['0.0.0.0']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4SrcCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4SrcCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4Src) Reset() {
	*x = PatternFlowIpv4Src{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Src) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Src) ProtoMessage() {}

func (x *PatternFlowIpv4Src) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Src.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Src) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{317}
}

func (x *PatternFlowIpv4Src) GetChoice() PatternFlowIpv4Src_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4Src_Choice_unspecified
}

func (x *PatternFlowIpv4Src) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowIpv4Src) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4Src) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4Src) GetIncrement() *PatternFlowIpv4SrcCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4Src) GetDecrement() *PatternFlowIpv4SrcCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// ipv4 counter pattern
type PatternFlowIpv4DstCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0.0.0.0
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 0.0.0.1
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4DstCounter) Reset() {
	*x = PatternFlowIpv4DstCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4DstCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4DstCounter) ProtoMessage() {}

func (x *PatternFlowIpv4DstCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4DstCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4DstCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{318}
}

func (x *PatternFlowIpv4DstCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowIpv4DstCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowIpv4DstCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Destination address
type PatternFlowIpv4Dst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4Dst_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4Dst_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0.0.0.0
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['0.0.0.0']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4DstCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4DstCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4Dst) Reset() {
	*x = PatternFlowIpv4Dst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Dst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Dst) ProtoMessage() {}

func (x *PatternFlowIpv4Dst) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Dst.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Dst) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{319}
}

func (x *PatternFlowIpv4Dst) GetChoice() PatternFlowIpv4Dst_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4Dst_Choice_unspecified
}

func (x *PatternFlowIpv4Dst) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowIpv4Dst) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4Dst) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4Dst) GetIncrement() *PatternFlowIpv4DstCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4Dst) GetDecrement() *PatternFlowIpv4DstCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4PriorityRawCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4PriorityRawCounter) Reset() {
	*x = PatternFlowIpv4PriorityRawCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4PriorityRawCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4PriorityRawCounter) ProtoMessage() {}

func (x *PatternFlowIpv4PriorityRawCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4PriorityRawCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4PriorityRawCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{320}
}

func (x *PatternFlowIpv4PriorityRawCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4PriorityRawCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4PriorityRawCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Raw priority
type PatternFlowIpv4PriorityRaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4PriorityRaw_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4PriorityRaw_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4PriorityRawCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4PriorityRawCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4PriorityRaw) Reset() {
	*x = PatternFlowIpv4PriorityRaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4PriorityRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4PriorityRaw) ProtoMessage() {}

func (x *PatternFlowIpv4PriorityRaw) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4PriorityRaw.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4PriorityRaw) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{321}
}

func (x *PatternFlowIpv4PriorityRaw) GetChoice() PatternFlowIpv4PriorityRaw_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4PriorityRaw_Choice_unspecified
}

func (x *PatternFlowIpv4PriorityRaw) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4PriorityRaw) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4PriorityRaw) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4PriorityRaw) GetIncrement() *PatternFlowIpv4PriorityRawCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4PriorityRaw) GetDecrement() *PatternFlowIpv4PriorityRawCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4DscpPhbCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4DscpPhbCounter) Reset() {
	*x = PatternFlowIpv4DscpPhbCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4DscpPhbCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4DscpPhbCounter) ProtoMessage() {}

func (x *PatternFlowIpv4DscpPhbCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4DscpPhbCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4DscpPhbCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{322}
}

func (x *PatternFlowIpv4DscpPhbCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4DscpPhbCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4DscpPhbCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Per hop behavior
type PatternFlowIpv4DscpPhb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4DscpPhb_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4DscpPhb_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4DscpPhbCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4DscpPhbCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4DscpPhb) Reset() {
	*x = PatternFlowIpv4DscpPhb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4DscpPhb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4DscpPhb) ProtoMessage() {}

func (x *PatternFlowIpv4DscpPhb) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4DscpPhb.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4DscpPhb) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{323}
}

func (x *PatternFlowIpv4DscpPhb) GetChoice() PatternFlowIpv4DscpPhb_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4DscpPhb_Choice_unspecified
}

func (x *PatternFlowIpv4DscpPhb) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4DscpPhb) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4DscpPhb) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4DscpPhb) GetIncrement() *PatternFlowIpv4DscpPhbCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4DscpPhb) GetDecrement() *PatternFlowIpv4DscpPhbCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4DscpEcnCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4DscpEcnCounter) Reset() {
	*x = PatternFlowIpv4DscpEcnCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4DscpEcnCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4DscpEcnCounter) ProtoMessage() {}

func (x *PatternFlowIpv4DscpEcnCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4DscpEcnCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4DscpEcnCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{324}
}

func (x *PatternFlowIpv4DscpEcnCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4DscpEcnCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4DscpEcnCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Explicit congestion notification
type PatternFlowIpv4DscpEcn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4DscpEcn_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4DscpEcn_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4DscpEcnCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4DscpEcnCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4DscpEcn) Reset() {
	*x = PatternFlowIpv4DscpEcn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4DscpEcn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4DscpEcn) ProtoMessage() {}

func (x *PatternFlowIpv4DscpEcn) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4DscpEcn.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4DscpEcn) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{325}
}

func (x *PatternFlowIpv4DscpEcn) GetChoice() PatternFlowIpv4DscpEcn_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4DscpEcn_Choice_unspecified
}

func (x *PatternFlowIpv4DscpEcn) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4DscpEcn) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4DscpEcn) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4DscpEcn) GetIncrement() *PatternFlowIpv4DscpEcnCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4DscpEcn) GetDecrement() *PatternFlowIpv4DscpEcnCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4TosPrecedenceCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4TosPrecedenceCounter) Reset() {
	*x = PatternFlowIpv4TosPrecedenceCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosPrecedenceCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosPrecedenceCounter) ProtoMessage() {}

func (x *PatternFlowIpv4TosPrecedenceCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosPrecedenceCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosPrecedenceCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{326}
}

func (x *PatternFlowIpv4TosPrecedenceCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4TosPrecedenceCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4TosPrecedenceCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Precedence
type PatternFlowIpv4TosPrecedence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4TosPrecedence_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4TosPrecedence_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4TosPrecedenceCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4TosPrecedenceCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4TosPrecedence) Reset() {
	*x = PatternFlowIpv4TosPrecedence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosPrecedence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosPrecedence) ProtoMessage() {}

func (x *PatternFlowIpv4TosPrecedence) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosPrecedence.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosPrecedence) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{327}
}

func (x *PatternFlowIpv4TosPrecedence) GetChoice() PatternFlowIpv4TosPrecedence_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4TosPrecedence_Choice_unspecified
}

func (x *PatternFlowIpv4TosPrecedence) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4TosPrecedence) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4TosPrecedence) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4TosPrecedence) GetIncrement() *PatternFlowIpv4TosPrecedenceCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4TosPrecedence) GetDecrement() *PatternFlowIpv4TosPrecedenceCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4TosDelayCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4TosDelayCounter) Reset() {
	*x = PatternFlowIpv4TosDelayCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosDelayCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosDelayCounter) ProtoMessage() {}

func (x *PatternFlowIpv4TosDelayCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosDelayCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosDelayCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{328}
}

func (x *PatternFlowIpv4TosDelayCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4TosDelayCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4TosDelayCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Delay
type PatternFlowIpv4TosDelay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4TosDelay_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4TosDelay_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4TosDelayCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4TosDelayCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4TosDelay) Reset() {
	*x = PatternFlowIpv4TosDelay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosDelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosDelay) ProtoMessage() {}

func (x *PatternFlowIpv4TosDelay) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosDelay.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosDelay) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{329}
}

func (x *PatternFlowIpv4TosDelay) GetChoice() PatternFlowIpv4TosDelay_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4TosDelay_Choice_unspecified
}

func (x *PatternFlowIpv4TosDelay) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4TosDelay) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4TosDelay) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4TosDelay) GetIncrement() *PatternFlowIpv4TosDelayCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4TosDelay) GetDecrement() *PatternFlowIpv4TosDelayCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4TosThroughputCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4TosThroughputCounter) Reset() {
	*x = PatternFlowIpv4TosThroughputCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosThroughputCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosThroughputCounter) ProtoMessage() {}

func (x *PatternFlowIpv4TosThroughputCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosThroughputCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosThroughputCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{330}
}

func (x *PatternFlowIpv4TosThroughputCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4TosThroughputCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4TosThroughputCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Throughput
type PatternFlowIpv4TosThroughput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4TosThroughput_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4TosThroughput_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4TosThroughputCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4TosThroughputCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4TosThroughput) Reset() {
	*x = PatternFlowIpv4TosThroughput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosThroughput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosThroughput) ProtoMessage() {}

func (x *PatternFlowIpv4TosThroughput) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosThroughput.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosThroughput) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{331}
}

func (x *PatternFlowIpv4TosThroughput) GetChoice() PatternFlowIpv4TosThroughput_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4TosThroughput_Choice_unspecified
}

func (x *PatternFlowIpv4TosThroughput) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4TosThroughput) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4TosThroughput) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4TosThroughput) GetIncrement() *PatternFlowIpv4TosThroughputCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4TosThroughput) GetDecrement() *PatternFlowIpv4TosThroughputCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4TosReliabilityCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4TosReliabilityCounter) Reset() {
	*x = PatternFlowIpv4TosReliabilityCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosReliabilityCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosReliabilityCounter) ProtoMessage() {}

func (x *PatternFlowIpv4TosReliabilityCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosReliabilityCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosReliabilityCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{332}
}

func (x *PatternFlowIpv4TosReliabilityCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4TosReliabilityCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4TosReliabilityCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Reliability
type PatternFlowIpv4TosReliability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4TosReliability_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4TosReliability_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4TosReliabilityCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4TosReliabilityCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4TosReliability) Reset() {
	*x = PatternFlowIpv4TosReliability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosReliability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosReliability) ProtoMessage() {}

func (x *PatternFlowIpv4TosReliability) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosReliability.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosReliability) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{333}
}

func (x *PatternFlowIpv4TosReliability) GetChoice() PatternFlowIpv4TosReliability_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4TosReliability_Choice_unspecified
}

func (x *PatternFlowIpv4TosReliability) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4TosReliability) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4TosReliability) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4TosReliability) GetIncrement() *PatternFlowIpv4TosReliabilityCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4TosReliability) GetDecrement() *PatternFlowIpv4TosReliabilityCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4TosMonetaryCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4TosMonetaryCounter) Reset() {
	*x = PatternFlowIpv4TosMonetaryCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosMonetaryCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosMonetaryCounter) ProtoMessage() {}

func (x *PatternFlowIpv4TosMonetaryCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosMonetaryCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosMonetaryCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{334}
}

func (x *PatternFlowIpv4TosMonetaryCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4TosMonetaryCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4TosMonetaryCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Monetary
type PatternFlowIpv4TosMonetary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4TosMonetary_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4TosMonetary_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4TosMonetaryCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4TosMonetaryCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4TosMonetary) Reset() {
	*x = PatternFlowIpv4TosMonetary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosMonetary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosMonetary) ProtoMessage() {}

func (x *PatternFlowIpv4TosMonetary) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosMonetary.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosMonetary) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{335}
}

func (x *PatternFlowIpv4TosMonetary) GetChoice() PatternFlowIpv4TosMonetary_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4TosMonetary_Choice_unspecified
}

func (x *PatternFlowIpv4TosMonetary) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4TosMonetary) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4TosMonetary) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4TosMonetary) GetIncrement() *PatternFlowIpv4TosMonetaryCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4TosMonetary) GetDecrement() *PatternFlowIpv4TosMonetaryCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv4TosUnusedCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv4TosUnusedCounter) Reset() {
	*x = PatternFlowIpv4TosUnusedCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosUnusedCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosUnusedCounter) ProtoMessage() {}

func (x *PatternFlowIpv4TosUnusedCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosUnusedCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosUnusedCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{336}
}

func (x *PatternFlowIpv4TosUnusedCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv4TosUnusedCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv4TosUnusedCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Unused
type PatternFlowIpv4TosUnused struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv4TosUnused_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv4TosUnused_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv4TosUnusedCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv4TosUnusedCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv4TosUnused) Reset() {
	*x = PatternFlowIpv4TosUnused{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosUnused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosUnused) ProtoMessage() {}

func (x *PatternFlowIpv4TosUnused) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosUnused.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosUnused) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{337}
}

func (x *PatternFlowIpv4TosUnused) GetChoice() PatternFlowIpv4TosUnused_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv4TosUnused_Choice_unspecified
}

func (x *PatternFlowIpv4TosUnused) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv4TosUnused) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv4TosUnused) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv4TosUnused) GetIncrement() *PatternFlowIpv4TosUnusedCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv4TosUnused) GetDecrement() *PatternFlowIpv4TosUnusedCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv6VersionCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 6
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv6VersionCounter) Reset() {
	*x = PatternFlowIpv6VersionCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6VersionCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6VersionCounter) ProtoMessage() {}

func (x *PatternFlowIpv6VersionCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6VersionCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6VersionCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{338}
}

func (x *PatternFlowIpv6VersionCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv6VersionCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv6VersionCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Version number
type PatternFlowIpv6Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv6Version_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv6Version_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 6
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [6]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv6VersionCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv6VersionCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv6Version) Reset() {
	*x = PatternFlowIpv6Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6Version) ProtoMessage() {}

func (x *PatternFlowIpv6Version) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6Version.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6Version) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{339}
}

func (x *PatternFlowIpv6Version) GetChoice() PatternFlowIpv6Version_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv6Version_Choice_unspecified
}

func (x *PatternFlowIpv6Version) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv6Version) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv6Version) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv6Version) GetIncrement() *PatternFlowIpv6VersionCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv6Version) GetDecrement() *PatternFlowIpv6VersionCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv6TrafficClassCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv6TrafficClassCounter) Reset() {
	*x = PatternFlowIpv6TrafficClassCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6TrafficClassCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6TrafficClassCounter) ProtoMessage() {}

func (x *PatternFlowIpv6TrafficClassCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6TrafficClassCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6TrafficClassCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{340}
}

func (x *PatternFlowIpv6TrafficClassCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv6TrafficClassCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv6TrafficClassCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Traffic class
type PatternFlowIpv6TrafficClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv6TrafficClass_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv6TrafficClass_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv6TrafficClassCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv6TrafficClassCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv6TrafficClass) Reset() {
	*x = PatternFlowIpv6TrafficClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6TrafficClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6TrafficClass) ProtoMessage() {}

func (x *PatternFlowIpv6TrafficClass) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6TrafficClass.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6TrafficClass) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{341}
}

func (x *PatternFlowIpv6TrafficClass) GetChoice() PatternFlowIpv6TrafficClass_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv6TrafficClass_Choice_unspecified
}

func (x *PatternFlowIpv6TrafficClass) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv6TrafficClass) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv6TrafficClass) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv6TrafficClass) GetIncrement() *PatternFlowIpv6TrafficClassCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv6TrafficClass) GetDecrement() *PatternFlowIpv6TrafficClassCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv6FlowLabelCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv6FlowLabelCounter) Reset() {
	*x = PatternFlowIpv6FlowLabelCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6FlowLabelCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6FlowLabelCounter) ProtoMessage() {}

func (x *PatternFlowIpv6FlowLabelCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6FlowLabelCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6FlowLabelCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{342}
}

func (x *PatternFlowIpv6FlowLabelCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv6FlowLabelCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv6FlowLabelCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Flow label
type PatternFlowIpv6FlowLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv6FlowLabel_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv6FlowLabel_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv6FlowLabelCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv6FlowLabelCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv6FlowLabel) Reset() {
	*x = PatternFlowIpv6FlowLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6FlowLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6FlowLabel) ProtoMessage() {}

func (x *PatternFlowIpv6FlowLabel) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6FlowLabel.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6FlowLabel) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{343}
}

func (x *PatternFlowIpv6FlowLabel) GetChoice() PatternFlowIpv6FlowLabel_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv6FlowLabel_Choice_unspecified
}

func (x *PatternFlowIpv6FlowLabel) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv6FlowLabel) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv6FlowLabel) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv6FlowLabel) GetIncrement() *PatternFlowIpv6FlowLabelCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv6FlowLabel) GetDecrement() *PatternFlowIpv6FlowLabelCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv6PayloadLengthCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv6PayloadLengthCounter) Reset() {
	*x = PatternFlowIpv6PayloadLengthCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6PayloadLengthCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6PayloadLengthCounter) ProtoMessage() {}

func (x *PatternFlowIpv6PayloadLengthCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6PayloadLengthCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6PayloadLengthCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{344}
}

func (x *PatternFlowIpv6PayloadLengthCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv6PayloadLengthCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv6PayloadLengthCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Payload length
type PatternFlowIpv6PayloadLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.auto
	Choice *PatternFlowIpv6PayloadLength_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv6PayloadLength_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// The OTG implementation can provide a system generated
	// value for this property. If the OTG is unable to generate a value
	// the default value must be used.
	// default = 0
	Auto *int32 `protobuf:"varint,4,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,5,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv6PayloadLengthCounter `protobuf:"bytes,6,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv6PayloadLengthCounter `protobuf:"bytes,7,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv6PayloadLength) Reset() {
	*x = PatternFlowIpv6PayloadLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6PayloadLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6PayloadLength) ProtoMessage() {}

func (x *PatternFlowIpv6PayloadLength) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6PayloadLength.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6PayloadLength) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{345}
}

func (x *PatternFlowIpv6PayloadLength) GetChoice() PatternFlowIpv6PayloadLength_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv6PayloadLength_Choice_unspecified
}

func (x *PatternFlowIpv6PayloadLength) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv6PayloadLength) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv6PayloadLength) GetAuto() int32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return 0
}

func (x *PatternFlowIpv6PayloadLength) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv6PayloadLength) GetIncrement() *PatternFlowIpv6PayloadLengthCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv6PayloadLength) GetDecrement() *PatternFlowIpv6PayloadLengthCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv6NextHeaderCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 59
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv6NextHeaderCounter) Reset() {
	*x = PatternFlowIpv6NextHeaderCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6NextHeaderCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6NextHeaderCounter) ProtoMessage() {}

func (x *PatternFlowIpv6NextHeaderCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6NextHeaderCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6NextHeaderCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{346}
}

func (x *PatternFlowIpv6NextHeaderCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv6NextHeaderCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv6NextHeaderCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Next header
type PatternFlowIpv6NextHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.auto
	Choice *PatternFlowIpv6NextHeader_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv6NextHeader_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 59
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [59]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// The OTG implementation can provide a system generated
	// value for this property. If the OTG is unable to generate a value
	// the default value must be used.
	// default = 59
	Auto *int32 `protobuf:"varint,4,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,5,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv6NextHeaderCounter `protobuf:"bytes,6,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv6NextHeaderCounter `protobuf:"bytes,7,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv6NextHeader) Reset() {
	*x = PatternFlowIpv6NextHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6NextHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6NextHeader) ProtoMessage() {}

func (x *PatternFlowIpv6NextHeader) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6NextHeader.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6NextHeader) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{347}
}

func (x *PatternFlowIpv6NextHeader) GetChoice() PatternFlowIpv6NextHeader_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv6NextHeader_Choice_unspecified
}

func (x *PatternFlowIpv6NextHeader) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv6NextHeader) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv6NextHeader) GetAuto() int32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return 0
}

func (x *PatternFlowIpv6NextHeader) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv6NextHeader) GetIncrement() *PatternFlowIpv6NextHeaderCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv6NextHeader) GetDecrement() *PatternFlowIpv6NextHeaderCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIpv6HopLimitCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 64
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv6HopLimitCounter) Reset() {
	*x = PatternFlowIpv6HopLimitCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6HopLimitCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6HopLimitCounter) ProtoMessage() {}

func (x *PatternFlowIpv6HopLimitCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6HopLimitCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6HopLimitCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{348}
}

func (x *PatternFlowIpv6HopLimitCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIpv6HopLimitCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIpv6HopLimitCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Hop limit
type PatternFlowIpv6HopLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv6HopLimit_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv6HopLimit_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 64
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [64]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv6HopLimitCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv6HopLimitCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv6HopLimit) Reset() {
	*x = PatternFlowIpv6HopLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6HopLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6HopLimit) ProtoMessage() {}

func (x *PatternFlowIpv6HopLimit) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6HopLimit.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6HopLimit) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{349}
}

func (x *PatternFlowIpv6HopLimit) GetChoice() PatternFlowIpv6HopLimit_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv6HopLimit_Choice_unspecified
}

func (x *PatternFlowIpv6HopLimit) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIpv6HopLimit) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv6HopLimit) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv6HopLimit) GetIncrement() *PatternFlowIpv6HopLimitCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv6HopLimit) GetDecrement() *PatternFlowIpv6HopLimitCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// ipv6 counter pattern
type PatternFlowIpv6SrcCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = ::0
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = ::1
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv6SrcCounter) Reset() {
	*x = PatternFlowIpv6SrcCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6SrcCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6SrcCounter) ProtoMessage() {}

func (x *PatternFlowIpv6SrcCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6SrcCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6SrcCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{350}
}

func (x *PatternFlowIpv6SrcCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowIpv6SrcCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowIpv6SrcCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Source address
type PatternFlowIpv6Src struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv6Src_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv6Src_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = ::0
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['::0']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv6SrcCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv6SrcCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv6Src) Reset() {
	*x = PatternFlowIpv6Src{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6Src) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6Src) ProtoMessage() {}

func (x *PatternFlowIpv6Src) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6Src.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6Src) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{351}
}

func (x *PatternFlowIpv6Src) GetChoice() PatternFlowIpv6Src_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv6Src_Choice_unspecified
}

func (x *PatternFlowIpv6Src) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowIpv6Src) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv6Src) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv6Src) GetIncrement() *PatternFlowIpv6SrcCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv6Src) GetDecrement() *PatternFlowIpv6SrcCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// ipv6 counter pattern
type PatternFlowIpv6DstCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = ::0
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = ::1
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIpv6DstCounter) Reset() {
	*x = PatternFlowIpv6DstCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6DstCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6DstCounter) ProtoMessage() {}

func (x *PatternFlowIpv6DstCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6DstCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6DstCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{352}
}

func (x *PatternFlowIpv6DstCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowIpv6DstCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowIpv6DstCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Destination address
type PatternFlowIpv6Dst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIpv6Dst_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIpv6Dst_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = ::0
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['::0']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIpv6DstCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIpv6DstCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIpv6Dst) Reset() {
	*x = PatternFlowIpv6Dst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6Dst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6Dst) ProtoMessage() {}

func (x *PatternFlowIpv6Dst) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6Dst.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6Dst) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{353}
}

func (x *PatternFlowIpv6Dst) GetChoice() PatternFlowIpv6Dst_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIpv6Dst_Choice_unspecified
}

func (x *PatternFlowIpv6Dst) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowIpv6Dst) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIpv6Dst) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIpv6Dst) GetIncrement() *PatternFlowIpv6DstCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIpv6Dst) GetDecrement() *PatternFlowIpv6DstCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// mac counter pattern
type PatternFlowPfcPauseDstCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 01:80:c2:00:00:01
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:01
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPauseDstCounter) Reset() {
	*x = PatternFlowPfcPauseDstCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseDstCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseDstCounter) ProtoMessage() {}

func (x *PatternFlowPfcPauseDstCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseDstCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseDstCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{354}
}

func (x *PatternFlowPfcPauseDstCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowPfcPauseDstCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowPfcPauseDstCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Destination MAC address
type PatternFlowPfcPauseDst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPauseDst_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPauseDst_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 01:80:c2:00:00:01
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['01:80:c2:00:00:01']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPauseDstCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPauseDstCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPauseDst) Reset() {
	*x = PatternFlowPfcPauseDst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseDst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseDst) ProtoMessage() {}

func (x *PatternFlowPfcPauseDst) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseDst.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseDst) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{355}
}

func (x *PatternFlowPfcPauseDst) GetChoice() PatternFlowPfcPauseDst_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPauseDst_Choice_unspecified
}

func (x *PatternFlowPfcPauseDst) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowPfcPauseDst) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPauseDst) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPauseDst) GetIncrement() *PatternFlowPfcPauseDstCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPauseDst) GetDecrement() *PatternFlowPfcPauseDstCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// mac counter pattern
type PatternFlowPfcPauseSrcCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 00:00:00:00:00:00
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:01
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPauseSrcCounter) Reset() {
	*x = PatternFlowPfcPauseSrcCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseSrcCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseSrcCounter) ProtoMessage() {}

func (x *PatternFlowPfcPauseSrcCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseSrcCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseSrcCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{356}
}

func (x *PatternFlowPfcPauseSrcCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowPfcPauseSrcCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowPfcPauseSrcCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Source MAC address
type PatternFlowPfcPauseSrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPauseSrc_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPauseSrc_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:00
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['00:00:00:00:00:00']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPauseSrcCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPauseSrcCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPauseSrc) Reset() {
	*x = PatternFlowPfcPauseSrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseSrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseSrc) ProtoMessage() {}

func (x *PatternFlowPfcPauseSrc) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseSrc.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseSrc) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{357}
}

func (x *PatternFlowPfcPauseSrc) GetChoice() PatternFlowPfcPauseSrc_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPauseSrc_Choice_unspecified
}

func (x *PatternFlowPfcPauseSrc) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowPfcPauseSrc) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPauseSrc) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPauseSrc) GetIncrement() *PatternFlowPfcPauseSrcCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPauseSrc) GetDecrement() *PatternFlowPfcPauseSrcCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPfcPauseEtherTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 34824
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPauseEtherTypeCounter) Reset() {
	*x = PatternFlowPfcPauseEtherTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseEtherTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseEtherTypeCounter) ProtoMessage() {}

func (x *PatternFlowPfcPauseEtherTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseEtherTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseEtherTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{358}
}

func (x *PatternFlowPfcPauseEtherTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPfcPauseEtherTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPfcPauseEtherTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Ethernet type
type PatternFlowPfcPauseEtherType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPauseEtherType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPauseEtherType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 34824
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [34824]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPauseEtherTypeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPauseEtherTypeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPauseEtherType) Reset() {
	*x = PatternFlowPfcPauseEtherType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseEtherType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseEtherType) ProtoMessage() {}

func (x *PatternFlowPfcPauseEtherType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseEtherType.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseEtherType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{359}
}

func (x *PatternFlowPfcPauseEtherType) GetChoice() PatternFlowPfcPauseEtherType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPauseEtherType_Choice_unspecified
}

func (x *PatternFlowPfcPauseEtherType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPfcPauseEtherType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPauseEtherType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPauseEtherType) GetIncrement() *PatternFlowPfcPauseEtherTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPauseEtherType) GetDecrement() *PatternFlowPfcPauseEtherTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPfcPauseControlOpCodeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 257
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPauseControlOpCodeCounter) Reset() {
	*x = PatternFlowPfcPauseControlOpCodeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseControlOpCodeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseControlOpCodeCounter) ProtoMessage() {}

func (x *PatternFlowPfcPauseControlOpCodeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseControlOpCodeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseControlOpCodeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{360}
}

func (x *PatternFlowPfcPauseControlOpCodeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPfcPauseControlOpCodeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPfcPauseControlOpCodeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Control operation code
type PatternFlowPfcPauseControlOpCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPauseControlOpCode_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPauseControlOpCode_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 257
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [257]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPauseControlOpCodeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPauseControlOpCodeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPauseControlOpCode) Reset() {
	*x = PatternFlowPfcPauseControlOpCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseControlOpCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseControlOpCode) ProtoMessage() {}

func (x *PatternFlowPfcPauseControlOpCode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseControlOpCode.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseControlOpCode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{361}
}

func (x *PatternFlowPfcPauseControlOpCode) GetChoice() PatternFlowPfcPauseControlOpCode_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPauseControlOpCode_Choice_unspecified
}

func (x *PatternFlowPfcPauseControlOpCode) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPfcPauseControlOpCode) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPauseControlOpCode) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPauseControlOpCode) GetIncrement() *PatternFlowPfcPauseControlOpCodeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPauseControlOpCode) GetDecrement() *PatternFlowPfcPauseControlOpCodeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPfcPauseClassEnableVectorCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPauseClassEnableVectorCounter) Reset() {
	*x = PatternFlowPfcPauseClassEnableVectorCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseClassEnableVectorCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseClassEnableVectorCounter) ProtoMessage() {}

func (x *PatternFlowPfcPauseClassEnableVectorCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseClassEnableVectorCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseClassEnableVectorCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{362}
}

func (x *PatternFlowPfcPauseClassEnableVectorCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPfcPauseClassEnableVectorCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPfcPauseClassEnableVectorCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Destination
type PatternFlowPfcPauseClassEnableVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPauseClassEnableVector_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPauseClassEnableVector_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPauseClassEnableVectorCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPauseClassEnableVectorCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPauseClassEnableVector) Reset() {
	*x = PatternFlowPfcPauseClassEnableVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseClassEnableVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseClassEnableVector) ProtoMessage() {}

func (x *PatternFlowPfcPauseClassEnableVector) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseClassEnableVector.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseClassEnableVector) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{363}
}

func (x *PatternFlowPfcPauseClassEnableVector) GetChoice() PatternFlowPfcPauseClassEnableVector_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPauseClassEnableVector_Choice_unspecified
}

func (x *PatternFlowPfcPauseClassEnableVector) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPfcPauseClassEnableVector) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPauseClassEnableVector) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPauseClassEnableVector) GetIncrement() *PatternFlowPfcPauseClassEnableVectorCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPauseClassEnableVector) GetDecrement() *PatternFlowPfcPauseClassEnableVectorCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPfcPausePauseClass0Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass0Counter) Reset() {
	*x = PatternFlowPfcPausePauseClass0Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass0Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass0Counter) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass0Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass0Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass0Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{364}
}

func (x *PatternFlowPfcPausePauseClass0Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass0Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass0Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Pause class 0
type PatternFlowPfcPausePauseClass0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPausePauseClass0_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPausePauseClass0_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPausePauseClass0Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPausePauseClass0Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass0) Reset() {
	*x = PatternFlowPfcPausePauseClass0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass0) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass0) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass0.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass0) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{365}
}

func (x *PatternFlowPfcPausePauseClass0) GetChoice() PatternFlowPfcPausePauseClass0_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPausePauseClass0_Choice_unspecified
}

func (x *PatternFlowPfcPausePauseClass0) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass0) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass0) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPausePauseClass0) GetIncrement() *PatternFlowPfcPausePauseClass0Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass0) GetDecrement() *PatternFlowPfcPausePauseClass0Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPfcPausePauseClass1Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass1Counter) Reset() {
	*x = PatternFlowPfcPausePauseClass1Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass1Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass1Counter) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass1Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass1Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass1Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{366}
}

func (x *PatternFlowPfcPausePauseClass1Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass1Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass1Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Pause class 1
type PatternFlowPfcPausePauseClass1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPausePauseClass1_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPausePauseClass1_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPausePauseClass1Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPausePauseClass1Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass1) Reset() {
	*x = PatternFlowPfcPausePauseClass1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass1) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass1) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass1.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass1) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{367}
}

func (x *PatternFlowPfcPausePauseClass1) GetChoice() PatternFlowPfcPausePauseClass1_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPausePauseClass1_Choice_unspecified
}

func (x *PatternFlowPfcPausePauseClass1) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass1) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass1) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPausePauseClass1) GetIncrement() *PatternFlowPfcPausePauseClass1Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass1) GetDecrement() *PatternFlowPfcPausePauseClass1Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPfcPausePauseClass2Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass2Counter) Reset() {
	*x = PatternFlowPfcPausePauseClass2Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass2Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass2Counter) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass2Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass2Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass2Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{368}
}

func (x *PatternFlowPfcPausePauseClass2Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass2Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass2Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Pause class 2
type PatternFlowPfcPausePauseClass2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPausePauseClass2_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPausePauseClass2_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPausePauseClass2Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPausePauseClass2Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass2) Reset() {
	*x = PatternFlowPfcPausePauseClass2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass2) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass2) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass2.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass2) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{369}
}

func (x *PatternFlowPfcPausePauseClass2) GetChoice() PatternFlowPfcPausePauseClass2_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPausePauseClass2_Choice_unspecified
}

func (x *PatternFlowPfcPausePauseClass2) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass2) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass2) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPausePauseClass2) GetIncrement() *PatternFlowPfcPausePauseClass2Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass2) GetDecrement() *PatternFlowPfcPausePauseClass2Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPfcPausePauseClass3Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass3Counter) Reset() {
	*x = PatternFlowPfcPausePauseClass3Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass3Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass3Counter) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass3Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass3Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass3Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{370}
}

func (x *PatternFlowPfcPausePauseClass3Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass3Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass3Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Pause class 3
type PatternFlowPfcPausePauseClass3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPausePauseClass3_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPausePauseClass3_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPausePauseClass3Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPausePauseClass3Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass3) Reset() {
	*x = PatternFlowPfcPausePauseClass3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass3) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass3) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass3.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass3) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{371}
}

func (x *PatternFlowPfcPausePauseClass3) GetChoice() PatternFlowPfcPausePauseClass3_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPausePauseClass3_Choice_unspecified
}

func (x *PatternFlowPfcPausePauseClass3) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass3) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass3) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPausePauseClass3) GetIncrement() *PatternFlowPfcPausePauseClass3Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass3) GetDecrement() *PatternFlowPfcPausePauseClass3Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPfcPausePauseClass4Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass4Counter) Reset() {
	*x = PatternFlowPfcPausePauseClass4Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass4Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass4Counter) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass4Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass4Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass4Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{372}
}

func (x *PatternFlowPfcPausePauseClass4Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass4Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass4Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Pause class 4
type PatternFlowPfcPausePauseClass4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPausePauseClass4_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPausePauseClass4_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPausePauseClass4Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPausePauseClass4Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass4) Reset() {
	*x = PatternFlowPfcPausePauseClass4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass4) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass4) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass4.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass4) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{373}
}

func (x *PatternFlowPfcPausePauseClass4) GetChoice() PatternFlowPfcPausePauseClass4_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPausePauseClass4_Choice_unspecified
}

func (x *PatternFlowPfcPausePauseClass4) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass4) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass4) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPausePauseClass4) GetIncrement() *PatternFlowPfcPausePauseClass4Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass4) GetDecrement() *PatternFlowPfcPausePauseClass4Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPfcPausePauseClass5Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass5Counter) Reset() {
	*x = PatternFlowPfcPausePauseClass5Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass5Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass5Counter) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass5Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass5Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass5Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{374}
}

func (x *PatternFlowPfcPausePauseClass5Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass5Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass5Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Pause class 5
type PatternFlowPfcPausePauseClass5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPausePauseClass5_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPausePauseClass5_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPausePauseClass5Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPausePauseClass5Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass5) Reset() {
	*x = PatternFlowPfcPausePauseClass5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass5) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass5) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass5.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass5) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{375}
}

func (x *PatternFlowPfcPausePauseClass5) GetChoice() PatternFlowPfcPausePauseClass5_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPausePauseClass5_Choice_unspecified
}

func (x *PatternFlowPfcPausePauseClass5) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass5) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass5) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPausePauseClass5) GetIncrement() *PatternFlowPfcPausePauseClass5Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass5) GetDecrement() *PatternFlowPfcPausePauseClass5Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPfcPausePauseClass6Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass6Counter) Reset() {
	*x = PatternFlowPfcPausePauseClass6Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass6Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass6Counter) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass6Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass6Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass6Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{376}
}

func (x *PatternFlowPfcPausePauseClass6Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass6Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass6Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Pause class 6
type PatternFlowPfcPausePauseClass6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPausePauseClass6_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPausePauseClass6_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPausePauseClass6Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPausePauseClass6Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass6) Reset() {
	*x = PatternFlowPfcPausePauseClass6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass6) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass6) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass6.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass6) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{377}
}

func (x *PatternFlowPfcPausePauseClass6) GetChoice() PatternFlowPfcPausePauseClass6_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPausePauseClass6_Choice_unspecified
}

func (x *PatternFlowPfcPausePauseClass6) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass6) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass6) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPausePauseClass6) GetIncrement() *PatternFlowPfcPausePauseClass6Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass6) GetDecrement() *PatternFlowPfcPausePauseClass6Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPfcPausePauseClass7Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass7Counter) Reset() {
	*x = PatternFlowPfcPausePauseClass7Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass7Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass7Counter) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass7Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass7Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass7Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{378}
}

func (x *PatternFlowPfcPausePauseClass7Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass7Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass7Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Pause class 7
type PatternFlowPfcPausePauseClass7 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPfcPausePauseClass7_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPfcPausePauseClass7_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPfcPausePauseClass7Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPfcPausePauseClass7Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPfcPausePauseClass7) Reset() {
	*x = PatternFlowPfcPausePauseClass7{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass7) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass7) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass7.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass7) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{379}
}

func (x *PatternFlowPfcPausePauseClass7) GetChoice() PatternFlowPfcPausePauseClass7_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPfcPausePauseClass7_Choice_unspecified
}

func (x *PatternFlowPfcPausePauseClass7) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPfcPausePauseClass7) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass7) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPfcPausePauseClass7) GetIncrement() *PatternFlowPfcPausePauseClass7Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPfcPausePauseClass7) GetDecrement() *PatternFlowPfcPausePauseClass7Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// mac counter pattern
type PatternFlowEthernetPauseDstCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 01:80:c2:00:00:01
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:01
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowEthernetPauseDstCounter) Reset() {
	*x = PatternFlowEthernetPauseDstCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseDstCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseDstCounter) ProtoMessage() {}

func (x *PatternFlowEthernetPauseDstCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseDstCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseDstCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{380}
}

func (x *PatternFlowEthernetPauseDstCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowEthernetPauseDstCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowEthernetPauseDstCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Destination MAC address
type PatternFlowEthernetPauseDst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowEthernetPauseDst_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowEthernetPauseDst_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 01:80:c2:00:00:01
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['01:80:c2:00:00:01']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowEthernetPauseDstCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowEthernetPauseDstCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowEthernetPauseDst) Reset() {
	*x = PatternFlowEthernetPauseDst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseDst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseDst) ProtoMessage() {}

func (x *PatternFlowEthernetPauseDst) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseDst.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseDst) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{381}
}

func (x *PatternFlowEthernetPauseDst) GetChoice() PatternFlowEthernetPauseDst_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowEthernetPauseDst_Choice_unspecified
}

func (x *PatternFlowEthernetPauseDst) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowEthernetPauseDst) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowEthernetPauseDst) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowEthernetPauseDst) GetIncrement() *PatternFlowEthernetPauseDstCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowEthernetPauseDst) GetDecrement() *PatternFlowEthernetPauseDstCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// mac counter pattern
type PatternFlowEthernetPauseSrcCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 00:00:00:00:00:00
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:01
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowEthernetPauseSrcCounter) Reset() {
	*x = PatternFlowEthernetPauseSrcCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseSrcCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseSrcCounter) ProtoMessage() {}

func (x *PatternFlowEthernetPauseSrcCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseSrcCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseSrcCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{382}
}

func (x *PatternFlowEthernetPauseSrcCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowEthernetPauseSrcCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowEthernetPauseSrcCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Source MAC address
type PatternFlowEthernetPauseSrc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowEthernetPauseSrc_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowEthernetPauseSrc_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:00
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['00:00:00:00:00:00']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowEthernetPauseSrcCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowEthernetPauseSrcCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowEthernetPauseSrc) Reset() {
	*x = PatternFlowEthernetPauseSrc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseSrc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseSrc) ProtoMessage() {}

func (x *PatternFlowEthernetPauseSrc) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseSrc.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseSrc) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{383}
}

func (x *PatternFlowEthernetPauseSrc) GetChoice() PatternFlowEthernetPauseSrc_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowEthernetPauseSrc_Choice_unspecified
}

func (x *PatternFlowEthernetPauseSrc) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowEthernetPauseSrc) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowEthernetPauseSrc) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowEthernetPauseSrc) GetIncrement() *PatternFlowEthernetPauseSrcCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowEthernetPauseSrc) GetDecrement() *PatternFlowEthernetPauseSrcCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowEthernetPauseEtherTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 34824
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowEthernetPauseEtherTypeCounter) Reset() {
	*x = PatternFlowEthernetPauseEtherTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseEtherTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseEtherTypeCounter) ProtoMessage() {}

func (x *PatternFlowEthernetPauseEtherTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseEtherTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseEtherTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{384}
}

func (x *PatternFlowEthernetPauseEtherTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowEthernetPauseEtherTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowEthernetPauseEtherTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Ethernet type
type PatternFlowEthernetPauseEtherType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowEthernetPauseEtherType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowEthernetPauseEtherType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 34824
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [34824]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowEthernetPauseEtherTypeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowEthernetPauseEtherTypeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowEthernetPauseEtherType) Reset() {
	*x = PatternFlowEthernetPauseEtherType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseEtherType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseEtherType) ProtoMessage() {}

func (x *PatternFlowEthernetPauseEtherType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseEtherType.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseEtherType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{385}
}

func (x *PatternFlowEthernetPauseEtherType) GetChoice() PatternFlowEthernetPauseEtherType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowEthernetPauseEtherType_Choice_unspecified
}

func (x *PatternFlowEthernetPauseEtherType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowEthernetPauseEtherType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowEthernetPauseEtherType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowEthernetPauseEtherType) GetIncrement() *PatternFlowEthernetPauseEtherTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowEthernetPauseEtherType) GetDecrement() *PatternFlowEthernetPauseEtherTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowEthernetPauseControlOpCodeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 1
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowEthernetPauseControlOpCodeCounter) Reset() {
	*x = PatternFlowEthernetPauseControlOpCodeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseControlOpCodeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseControlOpCodeCounter) ProtoMessage() {}

func (x *PatternFlowEthernetPauseControlOpCodeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseControlOpCodeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseControlOpCodeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{386}
}

func (x *PatternFlowEthernetPauseControlOpCodeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowEthernetPauseControlOpCodeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowEthernetPauseControlOpCodeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Control operation code
type PatternFlowEthernetPauseControlOpCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowEthernetPauseControlOpCode_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowEthernetPauseControlOpCode_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 1
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [1]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowEthernetPauseControlOpCodeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowEthernetPauseControlOpCodeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowEthernetPauseControlOpCode) Reset() {
	*x = PatternFlowEthernetPauseControlOpCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseControlOpCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseControlOpCode) ProtoMessage() {}

func (x *PatternFlowEthernetPauseControlOpCode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseControlOpCode.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseControlOpCode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{387}
}

func (x *PatternFlowEthernetPauseControlOpCode) GetChoice() PatternFlowEthernetPauseControlOpCode_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowEthernetPauseControlOpCode_Choice_unspecified
}

func (x *PatternFlowEthernetPauseControlOpCode) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowEthernetPauseControlOpCode) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowEthernetPauseControlOpCode) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowEthernetPauseControlOpCode) GetIncrement() *PatternFlowEthernetPauseControlOpCodeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowEthernetPauseControlOpCode) GetDecrement() *PatternFlowEthernetPauseControlOpCodeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowEthernetPauseTimeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowEthernetPauseTimeCounter) Reset() {
	*x = PatternFlowEthernetPauseTimeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseTimeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseTimeCounter) ProtoMessage() {}

func (x *PatternFlowEthernetPauseTimeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseTimeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseTimeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{388}
}

func (x *PatternFlowEthernetPauseTimeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowEthernetPauseTimeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowEthernetPauseTimeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Time
type PatternFlowEthernetPauseTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowEthernetPauseTime_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowEthernetPauseTime_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowEthernetPauseTimeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowEthernetPauseTimeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowEthernetPauseTime) Reset() {
	*x = PatternFlowEthernetPauseTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseTime) ProtoMessage() {}

func (x *PatternFlowEthernetPauseTime) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseTime.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseTime) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{389}
}

func (x *PatternFlowEthernetPauseTime) GetChoice() PatternFlowEthernetPauseTime_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowEthernetPauseTime_Choice_unspecified
}

func (x *PatternFlowEthernetPauseTime) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowEthernetPauseTime) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowEthernetPauseTime) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowEthernetPauseTime) GetIncrement() *PatternFlowEthernetPauseTimeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowEthernetPauseTime) GetDecrement() *PatternFlowEthernetPauseTimeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpSrcPortCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpSrcPortCounter) Reset() {
	*x = PatternFlowTcpSrcPortCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpSrcPortCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpSrcPortCounter) ProtoMessage() {}

func (x *PatternFlowTcpSrcPortCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpSrcPortCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpSrcPortCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{390}
}

func (x *PatternFlowTcpSrcPortCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpSrcPortCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpSrcPortCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Source port
type PatternFlowTcpSrcPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpSrcPort_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpSrcPort_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpSrcPortCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpSrcPortCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpSrcPort) Reset() {
	*x = PatternFlowTcpSrcPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpSrcPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpSrcPort) ProtoMessage() {}

func (x *PatternFlowTcpSrcPort) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpSrcPort.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpSrcPort) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{391}
}

func (x *PatternFlowTcpSrcPort) GetChoice() PatternFlowTcpSrcPort_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpSrcPort_Choice_unspecified
}

func (x *PatternFlowTcpSrcPort) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpSrcPort) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpSrcPort) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpSrcPort) GetIncrement() *PatternFlowTcpSrcPortCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpSrcPort) GetDecrement() *PatternFlowTcpSrcPortCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpDstPortCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpDstPortCounter) Reset() {
	*x = PatternFlowTcpDstPortCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpDstPortCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpDstPortCounter) ProtoMessage() {}

func (x *PatternFlowTcpDstPortCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpDstPortCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpDstPortCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{392}
}

func (x *PatternFlowTcpDstPortCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpDstPortCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpDstPortCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Destination port
type PatternFlowTcpDstPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpDstPort_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpDstPort_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpDstPortCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpDstPortCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpDstPort) Reset() {
	*x = PatternFlowTcpDstPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpDstPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpDstPort) ProtoMessage() {}

func (x *PatternFlowTcpDstPort) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpDstPort.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpDstPort) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{393}
}

func (x *PatternFlowTcpDstPort) GetChoice() PatternFlowTcpDstPort_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpDstPort_Choice_unspecified
}

func (x *PatternFlowTcpDstPort) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpDstPort) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpDstPort) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpDstPort) GetIncrement() *PatternFlowTcpDstPortCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpDstPort) GetDecrement() *PatternFlowTcpDstPortCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpSeqNumCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int64 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int64 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpSeqNumCounter) Reset() {
	*x = PatternFlowTcpSeqNumCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpSeqNumCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpSeqNumCounter) ProtoMessage() {}

func (x *PatternFlowTcpSeqNumCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpSeqNumCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpSeqNumCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{394}
}

func (x *PatternFlowTcpSeqNumCounter) GetStart() int64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpSeqNumCounter) GetStep() int64 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpSeqNumCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Sequence number
type PatternFlowTcpSeqNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpSeqNum_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpSeqNum_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int64 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int64 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpSeqNumCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpSeqNumCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpSeqNum) Reset() {
	*x = PatternFlowTcpSeqNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpSeqNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpSeqNum) ProtoMessage() {}

func (x *PatternFlowTcpSeqNum) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpSeqNum.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpSeqNum) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{395}
}

func (x *PatternFlowTcpSeqNum) GetChoice() PatternFlowTcpSeqNum_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpSeqNum_Choice_unspecified
}

func (x *PatternFlowTcpSeqNum) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpSeqNum) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpSeqNum) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpSeqNum) GetIncrement() *PatternFlowTcpSeqNumCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpSeqNum) GetDecrement() *PatternFlowTcpSeqNumCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpAckNumCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int64 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int64 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpAckNumCounter) Reset() {
	*x = PatternFlowTcpAckNumCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpAckNumCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpAckNumCounter) ProtoMessage() {}

func (x *PatternFlowTcpAckNumCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpAckNumCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpAckNumCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{396}
}

func (x *PatternFlowTcpAckNumCounter) GetStart() int64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpAckNumCounter) GetStep() int64 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpAckNumCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Acknowledgement number
type PatternFlowTcpAckNum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpAckNum_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpAckNum_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int64 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int64 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpAckNumCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpAckNumCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpAckNum) Reset() {
	*x = PatternFlowTcpAckNum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpAckNum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpAckNum) ProtoMessage() {}

func (x *PatternFlowTcpAckNum) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpAckNum.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpAckNum) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{397}
}

func (x *PatternFlowTcpAckNum) GetChoice() PatternFlowTcpAckNum_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpAckNum_Choice_unspecified
}

func (x *PatternFlowTcpAckNum) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpAckNum) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpAckNum) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpAckNum) GetIncrement() *PatternFlowTcpAckNumCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpAckNum) GetDecrement() *PatternFlowTcpAckNumCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpDataOffsetCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpDataOffsetCounter) Reset() {
	*x = PatternFlowTcpDataOffsetCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpDataOffsetCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpDataOffsetCounter) ProtoMessage() {}

func (x *PatternFlowTcpDataOffsetCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpDataOffsetCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpDataOffsetCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{398}
}

func (x *PatternFlowTcpDataOffsetCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpDataOffsetCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpDataOffsetCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// The number of 32 bit words in the TCP header. This indicates where the data begins.
type PatternFlowTcpDataOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpDataOffset_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpDataOffset_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpDataOffsetCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpDataOffsetCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpDataOffset) Reset() {
	*x = PatternFlowTcpDataOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpDataOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpDataOffset) ProtoMessage() {}

func (x *PatternFlowTcpDataOffset) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpDataOffset.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpDataOffset) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{399}
}

func (x *PatternFlowTcpDataOffset) GetChoice() PatternFlowTcpDataOffset_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpDataOffset_Choice_unspecified
}

func (x *PatternFlowTcpDataOffset) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpDataOffset) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpDataOffset) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpDataOffset) GetIncrement() *PatternFlowTcpDataOffsetCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpDataOffset) GetDecrement() *PatternFlowTcpDataOffsetCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpEcnNsCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpEcnNsCounter) Reset() {
	*x = PatternFlowTcpEcnNsCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpEcnNsCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpEcnNsCounter) ProtoMessage() {}

func (x *PatternFlowTcpEcnNsCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpEcnNsCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpEcnNsCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{400}
}

func (x *PatternFlowTcpEcnNsCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpEcnNsCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpEcnNsCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Explicit congestion notification, concealment protection.
type PatternFlowTcpEcnNs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpEcnNs_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpEcnNs_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpEcnNsCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpEcnNsCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpEcnNs) Reset() {
	*x = PatternFlowTcpEcnNs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpEcnNs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpEcnNs) ProtoMessage() {}

func (x *PatternFlowTcpEcnNs) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpEcnNs.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpEcnNs) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{401}
}

func (x *PatternFlowTcpEcnNs) GetChoice() PatternFlowTcpEcnNs_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpEcnNs_Choice_unspecified
}

func (x *PatternFlowTcpEcnNs) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpEcnNs) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpEcnNs) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpEcnNs) GetIncrement() *PatternFlowTcpEcnNsCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpEcnNs) GetDecrement() *PatternFlowTcpEcnNsCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpEcnCwrCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpEcnCwrCounter) Reset() {
	*x = PatternFlowTcpEcnCwrCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpEcnCwrCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpEcnCwrCounter) ProtoMessage() {}

func (x *PatternFlowTcpEcnCwrCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpEcnCwrCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpEcnCwrCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{402}
}

func (x *PatternFlowTcpEcnCwrCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpEcnCwrCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpEcnCwrCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Explicit congestion notification, congestion window reduced.
type PatternFlowTcpEcnCwr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpEcnCwr_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpEcnCwr_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpEcnCwrCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpEcnCwrCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpEcnCwr) Reset() {
	*x = PatternFlowTcpEcnCwr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpEcnCwr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpEcnCwr) ProtoMessage() {}

func (x *PatternFlowTcpEcnCwr) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpEcnCwr.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpEcnCwr) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{403}
}

func (x *PatternFlowTcpEcnCwr) GetChoice() PatternFlowTcpEcnCwr_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpEcnCwr_Choice_unspecified
}

func (x *PatternFlowTcpEcnCwr) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpEcnCwr) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpEcnCwr) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpEcnCwr) GetIncrement() *PatternFlowTcpEcnCwrCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpEcnCwr) GetDecrement() *PatternFlowTcpEcnCwrCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpEcnEchoCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpEcnEchoCounter) Reset() {
	*x = PatternFlowTcpEcnEchoCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpEcnEchoCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpEcnEchoCounter) ProtoMessage() {}

func (x *PatternFlowTcpEcnEchoCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpEcnEchoCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpEcnEchoCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{404}
}

func (x *PatternFlowTcpEcnEchoCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpEcnEchoCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpEcnEchoCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Explicit congestion notification, echo. 1 indicates the peer is ecn capable. 0 indicates
// that a packet with ipv4.ecn = 11 in the ip header was  received during normal transmission.
type PatternFlowTcpEcnEcho struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpEcnEcho_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpEcnEcho_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpEcnEchoCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpEcnEchoCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpEcnEcho) Reset() {
	*x = PatternFlowTcpEcnEcho{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpEcnEcho) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpEcnEcho) ProtoMessage() {}

func (x *PatternFlowTcpEcnEcho) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpEcnEcho.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpEcnEcho) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{405}
}

func (x *PatternFlowTcpEcnEcho) GetChoice() PatternFlowTcpEcnEcho_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpEcnEcho_Choice_unspecified
}

func (x *PatternFlowTcpEcnEcho) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpEcnEcho) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpEcnEcho) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpEcnEcho) GetIncrement() *PatternFlowTcpEcnEchoCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpEcnEcho) GetDecrement() *PatternFlowTcpEcnEchoCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpCtlUrgCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpCtlUrgCounter) Reset() {
	*x = PatternFlowTcpCtlUrgCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlUrgCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlUrgCounter) ProtoMessage() {}

func (x *PatternFlowTcpCtlUrgCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlUrgCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlUrgCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{406}
}

func (x *PatternFlowTcpCtlUrgCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpCtlUrgCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpCtlUrgCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// A value of 1 indicates that the urgent pointer field is significant.
type PatternFlowTcpCtlUrg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpCtlUrg_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpCtlUrg_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpCtlUrgCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpCtlUrgCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpCtlUrg) Reset() {
	*x = PatternFlowTcpCtlUrg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlUrg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlUrg) ProtoMessage() {}

func (x *PatternFlowTcpCtlUrg) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlUrg.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlUrg) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{407}
}

func (x *PatternFlowTcpCtlUrg) GetChoice() PatternFlowTcpCtlUrg_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpCtlUrg_Choice_unspecified
}

func (x *PatternFlowTcpCtlUrg) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpCtlUrg) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpCtlUrg) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpCtlUrg) GetIncrement() *PatternFlowTcpCtlUrgCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpCtlUrg) GetDecrement() *PatternFlowTcpCtlUrgCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpCtlAckCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpCtlAckCounter) Reset() {
	*x = PatternFlowTcpCtlAckCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlAckCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlAckCounter) ProtoMessage() {}

func (x *PatternFlowTcpCtlAckCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlAckCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlAckCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{408}
}

func (x *PatternFlowTcpCtlAckCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpCtlAckCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpCtlAckCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// A value of 1 indicates that the ackknowledgment field is significant.
type PatternFlowTcpCtlAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpCtlAck_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpCtlAck_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpCtlAckCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpCtlAckCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpCtlAck) Reset() {
	*x = PatternFlowTcpCtlAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlAck) ProtoMessage() {}

func (x *PatternFlowTcpCtlAck) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlAck.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlAck) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{409}
}

func (x *PatternFlowTcpCtlAck) GetChoice() PatternFlowTcpCtlAck_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpCtlAck_Choice_unspecified
}

func (x *PatternFlowTcpCtlAck) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpCtlAck) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpCtlAck) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpCtlAck) GetIncrement() *PatternFlowTcpCtlAckCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpCtlAck) GetDecrement() *PatternFlowTcpCtlAckCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpCtlPshCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpCtlPshCounter) Reset() {
	*x = PatternFlowTcpCtlPshCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlPshCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlPshCounter) ProtoMessage() {}

func (x *PatternFlowTcpCtlPshCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlPshCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlPshCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{410}
}

func (x *PatternFlowTcpCtlPshCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpCtlPshCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpCtlPshCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Asks to push the buffered data to the receiving application.
type PatternFlowTcpCtlPsh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpCtlPsh_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpCtlPsh_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpCtlPshCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpCtlPshCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpCtlPsh) Reset() {
	*x = PatternFlowTcpCtlPsh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlPsh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlPsh) ProtoMessage() {}

func (x *PatternFlowTcpCtlPsh) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlPsh.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlPsh) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{411}
}

func (x *PatternFlowTcpCtlPsh) GetChoice() PatternFlowTcpCtlPsh_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpCtlPsh_Choice_unspecified
}

func (x *PatternFlowTcpCtlPsh) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpCtlPsh) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpCtlPsh) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpCtlPsh) GetIncrement() *PatternFlowTcpCtlPshCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpCtlPsh) GetDecrement() *PatternFlowTcpCtlPshCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpCtlRstCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpCtlRstCounter) Reset() {
	*x = PatternFlowTcpCtlRstCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlRstCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlRstCounter) ProtoMessage() {}

func (x *PatternFlowTcpCtlRstCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlRstCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlRstCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{412}
}

func (x *PatternFlowTcpCtlRstCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpCtlRstCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpCtlRstCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Reset the connection.
type PatternFlowTcpCtlRst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpCtlRst_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpCtlRst_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpCtlRstCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpCtlRstCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpCtlRst) Reset() {
	*x = PatternFlowTcpCtlRst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlRst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlRst) ProtoMessage() {}

func (x *PatternFlowTcpCtlRst) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlRst.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlRst) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{413}
}

func (x *PatternFlowTcpCtlRst) GetChoice() PatternFlowTcpCtlRst_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpCtlRst_Choice_unspecified
}

func (x *PatternFlowTcpCtlRst) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpCtlRst) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpCtlRst) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpCtlRst) GetIncrement() *PatternFlowTcpCtlRstCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpCtlRst) GetDecrement() *PatternFlowTcpCtlRstCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpCtlSynCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpCtlSynCounter) Reset() {
	*x = PatternFlowTcpCtlSynCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlSynCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlSynCounter) ProtoMessage() {}

func (x *PatternFlowTcpCtlSynCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlSynCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlSynCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{414}
}

func (x *PatternFlowTcpCtlSynCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpCtlSynCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpCtlSynCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Synchronize sequenece numbers.
type PatternFlowTcpCtlSyn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpCtlSyn_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpCtlSyn_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpCtlSynCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpCtlSynCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpCtlSyn) Reset() {
	*x = PatternFlowTcpCtlSyn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlSyn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlSyn) ProtoMessage() {}

func (x *PatternFlowTcpCtlSyn) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlSyn.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlSyn) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{415}
}

func (x *PatternFlowTcpCtlSyn) GetChoice() PatternFlowTcpCtlSyn_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpCtlSyn_Choice_unspecified
}

func (x *PatternFlowTcpCtlSyn) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpCtlSyn) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpCtlSyn) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpCtlSyn) GetIncrement() *PatternFlowTcpCtlSynCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpCtlSyn) GetDecrement() *PatternFlowTcpCtlSynCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpCtlFinCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpCtlFinCounter) Reset() {
	*x = PatternFlowTcpCtlFinCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlFinCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlFinCounter) ProtoMessage() {}

func (x *PatternFlowTcpCtlFinCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlFinCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlFinCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{416}
}

func (x *PatternFlowTcpCtlFinCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpCtlFinCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpCtlFinCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Last packet from the sender.
type PatternFlowTcpCtlFin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpCtlFin_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpCtlFin_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpCtlFinCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpCtlFinCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpCtlFin) Reset() {
	*x = PatternFlowTcpCtlFin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlFin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlFin) ProtoMessage() {}

func (x *PatternFlowTcpCtlFin) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlFin.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlFin) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{417}
}

func (x *PatternFlowTcpCtlFin) GetChoice() PatternFlowTcpCtlFin_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpCtlFin_Choice_unspecified
}

func (x *PatternFlowTcpCtlFin) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpCtlFin) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpCtlFin) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpCtlFin) GetIncrement() *PatternFlowTcpCtlFinCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpCtlFin) GetDecrement() *PatternFlowTcpCtlFinCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowTcpWindowCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowTcpWindowCounter) Reset() {
	*x = PatternFlowTcpWindowCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpWindowCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpWindowCounter) ProtoMessage() {}

func (x *PatternFlowTcpWindowCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpWindowCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpWindowCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{418}
}

func (x *PatternFlowTcpWindowCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowTcpWindowCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowTcpWindowCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Tcp connection window.
type PatternFlowTcpWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowTcpWindow_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowTcpWindow_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowTcpWindowCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowTcpWindowCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowTcpWindow) Reset() {
	*x = PatternFlowTcpWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpWindow) ProtoMessage() {}

func (x *PatternFlowTcpWindow) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpWindow.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpWindow) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{419}
}

func (x *PatternFlowTcpWindow) GetChoice() PatternFlowTcpWindow_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowTcpWindow_Choice_unspecified
}

func (x *PatternFlowTcpWindow) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowTcpWindow) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowTcpWindow) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowTcpWindow) GetIncrement() *PatternFlowTcpWindowCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowTcpWindow) GetDecrement() *PatternFlowTcpWindowCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowUdpSrcPortCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowUdpSrcPortCounter) Reset() {
	*x = PatternFlowUdpSrcPortCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpSrcPortCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpSrcPortCounter) ProtoMessage() {}

func (x *PatternFlowUdpSrcPortCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpSrcPortCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpSrcPortCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{420}
}

func (x *PatternFlowUdpSrcPortCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowUdpSrcPortCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowUdpSrcPortCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Source port
type PatternFlowUdpSrcPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowUdpSrcPort_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowUdpSrcPort_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowUdpSrcPortCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowUdpSrcPortCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowUdpSrcPort) Reset() {
	*x = PatternFlowUdpSrcPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpSrcPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpSrcPort) ProtoMessage() {}

func (x *PatternFlowUdpSrcPort) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpSrcPort.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpSrcPort) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{421}
}

func (x *PatternFlowUdpSrcPort) GetChoice() PatternFlowUdpSrcPort_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowUdpSrcPort_Choice_unspecified
}

func (x *PatternFlowUdpSrcPort) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowUdpSrcPort) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowUdpSrcPort) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowUdpSrcPort) GetIncrement() *PatternFlowUdpSrcPortCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowUdpSrcPort) GetDecrement() *PatternFlowUdpSrcPortCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowUdpDstPortCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowUdpDstPortCounter) Reset() {
	*x = PatternFlowUdpDstPortCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpDstPortCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpDstPortCounter) ProtoMessage() {}

func (x *PatternFlowUdpDstPortCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpDstPortCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpDstPortCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{422}
}

func (x *PatternFlowUdpDstPortCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowUdpDstPortCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowUdpDstPortCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Destination port
type PatternFlowUdpDstPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowUdpDstPort_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowUdpDstPort_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowUdpDstPortCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowUdpDstPortCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowUdpDstPort) Reset() {
	*x = PatternFlowUdpDstPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpDstPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpDstPort) ProtoMessage() {}

func (x *PatternFlowUdpDstPort) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpDstPort.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpDstPort) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{423}
}

func (x *PatternFlowUdpDstPort) GetChoice() PatternFlowUdpDstPort_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowUdpDstPort_Choice_unspecified
}

func (x *PatternFlowUdpDstPort) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowUdpDstPort) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowUdpDstPort) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowUdpDstPort) GetIncrement() *PatternFlowUdpDstPortCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowUdpDstPort) GetDecrement() *PatternFlowUdpDstPortCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowUdpLengthCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowUdpLengthCounter) Reset() {
	*x = PatternFlowUdpLengthCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpLengthCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpLengthCounter) ProtoMessage() {}

func (x *PatternFlowUdpLengthCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpLengthCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpLengthCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{424}
}

func (x *PatternFlowUdpLengthCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowUdpLengthCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowUdpLengthCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Length
type PatternFlowUdpLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowUdpLength_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowUdpLength_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowUdpLengthCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowUdpLengthCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowUdpLength) Reset() {
	*x = PatternFlowUdpLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpLength) ProtoMessage() {}

func (x *PatternFlowUdpLength) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpLength.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpLength) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{425}
}

func (x *PatternFlowUdpLength) GetChoice() PatternFlowUdpLength_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowUdpLength_Choice_unspecified
}

func (x *PatternFlowUdpLength) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowUdpLength) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowUdpLength) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowUdpLength) GetIncrement() *PatternFlowUdpLengthCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowUdpLength) GetDecrement() *PatternFlowUdpLengthCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// UDP checksum
type PatternFlowUdpChecksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of checksum
	// default = Choice.Enum.generated
	Choice *PatternFlowUdpChecksum_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowUdpChecksum_Choice_Enum,oneof" json:"choice,omitempty"`
	// A system generated checksum value
	// default = Generated.Enum.good
	Generated *PatternFlowUdpChecksum_Generated_Enum `protobuf:"varint,2,opt,name=generated,proto3,enum=otg.PatternFlowUdpChecksum_Generated_Enum,oneof" json:"generated,omitempty"`
	// A custom checksum value
	Custom *int32 `protobuf:"varint,3,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (x *PatternFlowUdpChecksum) Reset() {
	*x = PatternFlowUdpChecksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpChecksum) ProtoMessage() {}

func (x *PatternFlowUdpChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpChecksum.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpChecksum) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{426}
}

func (x *PatternFlowUdpChecksum) GetChoice() PatternFlowUdpChecksum_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowUdpChecksum_Choice_unspecified
}

func (x *PatternFlowUdpChecksum) GetGenerated() PatternFlowUdpChecksum_Generated_Enum {
	if x != nil && x.Generated != nil {
		return *x.Generated
	}
	return PatternFlowUdpChecksum_Generated_unspecified
}

func (x *PatternFlowUdpChecksum) GetCustom() int32 {
	if x != nil && x.Custom != nil {
		return *x.Custom
	}
	return 0
}

// integer counter pattern
type PatternFlowGreChecksumPresentCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGreChecksumPresentCounter) Reset() {
	*x = PatternFlowGreChecksumPresentCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreChecksumPresentCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreChecksumPresentCounter) ProtoMessage() {}

func (x *PatternFlowGreChecksumPresentCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreChecksumPresentCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGreChecksumPresentCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{427}
}

func (x *PatternFlowGreChecksumPresentCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGreChecksumPresentCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGreChecksumPresentCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Checksum present bit
type PatternFlowGreChecksumPresent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGreChecksumPresent_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGreChecksumPresent_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGreChecksumPresentCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGreChecksumPresentCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGreChecksumPresent) Reset() {
	*x = PatternFlowGreChecksumPresent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreChecksumPresent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreChecksumPresent) ProtoMessage() {}

func (x *PatternFlowGreChecksumPresent) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreChecksumPresent.ProtoReflect.Descriptor instead.
func (*PatternFlowGreChecksumPresent) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{428}
}

func (x *PatternFlowGreChecksumPresent) GetChoice() PatternFlowGreChecksumPresent_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGreChecksumPresent_Choice_unspecified
}

func (x *PatternFlowGreChecksumPresent) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGreChecksumPresent) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGreChecksumPresent) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGreChecksumPresent) GetIncrement() *PatternFlowGreChecksumPresentCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGreChecksumPresent) GetDecrement() *PatternFlowGreChecksumPresentCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGreReserved0Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGreReserved0Counter) Reset() {
	*x = PatternFlowGreReserved0Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreReserved0Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreReserved0Counter) ProtoMessage() {}

func (x *PatternFlowGreReserved0Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreReserved0Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowGreReserved0Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{429}
}

func (x *PatternFlowGreReserved0Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGreReserved0Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGreReserved0Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Reserved bits
type PatternFlowGreReserved0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGreReserved0_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGreReserved0_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGreReserved0Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGreReserved0Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGreReserved0) Reset() {
	*x = PatternFlowGreReserved0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreReserved0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreReserved0) ProtoMessage() {}

func (x *PatternFlowGreReserved0) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreReserved0.ProtoReflect.Descriptor instead.
func (*PatternFlowGreReserved0) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{430}
}

func (x *PatternFlowGreReserved0) GetChoice() PatternFlowGreReserved0_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGreReserved0_Choice_unspecified
}

func (x *PatternFlowGreReserved0) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGreReserved0) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGreReserved0) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGreReserved0) GetIncrement() *PatternFlowGreReserved0Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGreReserved0) GetDecrement() *PatternFlowGreReserved0Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGreVersionCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGreVersionCounter) Reset() {
	*x = PatternFlowGreVersionCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreVersionCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreVersionCounter) ProtoMessage() {}

func (x *PatternFlowGreVersionCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreVersionCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGreVersionCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{431}
}

func (x *PatternFlowGreVersionCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGreVersionCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGreVersionCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// GRE version number
type PatternFlowGreVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGreVersion_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGreVersion_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGreVersionCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGreVersionCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGreVersion) Reset() {
	*x = PatternFlowGreVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreVersion) ProtoMessage() {}

func (x *PatternFlowGreVersion) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreVersion.ProtoReflect.Descriptor instead.
func (*PatternFlowGreVersion) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{432}
}

func (x *PatternFlowGreVersion) GetChoice() PatternFlowGreVersion_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGreVersion_Choice_unspecified
}

func (x *PatternFlowGreVersion) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGreVersion) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGreVersion) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGreVersion) GetIncrement() *PatternFlowGreVersionCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGreVersion) GetDecrement() *PatternFlowGreVersionCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGreProtocolCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 2048
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGreProtocolCounter) Reset() {
	*x = PatternFlowGreProtocolCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreProtocolCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreProtocolCounter) ProtoMessage() {}

func (x *PatternFlowGreProtocolCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreProtocolCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGreProtocolCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{433}
}

func (x *PatternFlowGreProtocolCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGreProtocolCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGreProtocolCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Protocol type of encapsulated payload
type PatternFlowGreProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGreProtocol_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGreProtocol_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 2048
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [2048]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGreProtocolCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGreProtocolCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGreProtocol) Reset() {
	*x = PatternFlowGreProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreProtocol) ProtoMessage() {}

func (x *PatternFlowGreProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreProtocol.ProtoReflect.Descriptor instead.
func (*PatternFlowGreProtocol) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{434}
}

func (x *PatternFlowGreProtocol) GetChoice() PatternFlowGreProtocol_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGreProtocol_Choice_unspecified
}

func (x *PatternFlowGreProtocol) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGreProtocol) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGreProtocol) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGreProtocol) GetIncrement() *PatternFlowGreProtocolCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGreProtocol) GetDecrement() *PatternFlowGreProtocolCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// Optional checksum of GRE header and payload. Only present if the checksum_present
// bit is set.
type PatternFlowGreChecksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of checksum
	// default = Choice.Enum.generated
	Choice *PatternFlowGreChecksum_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGreChecksum_Choice_Enum,oneof" json:"choice,omitempty"`
	// A system generated checksum value
	// default = Generated.Enum.good
	Generated *PatternFlowGreChecksum_Generated_Enum `protobuf:"varint,2,opt,name=generated,proto3,enum=otg.PatternFlowGreChecksum_Generated_Enum,oneof" json:"generated,omitempty"`
	// A custom checksum value
	Custom *int32 `protobuf:"varint,3,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (x *PatternFlowGreChecksum) Reset() {
	*x = PatternFlowGreChecksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreChecksum) ProtoMessage() {}

func (x *PatternFlowGreChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreChecksum.ProtoReflect.Descriptor instead.
func (*PatternFlowGreChecksum) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{435}
}

func (x *PatternFlowGreChecksum) GetChoice() PatternFlowGreChecksum_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGreChecksum_Choice_unspecified
}

func (x *PatternFlowGreChecksum) GetGenerated() PatternFlowGreChecksum_Generated_Enum {
	if x != nil && x.Generated != nil {
		return *x.Generated
	}
	return PatternFlowGreChecksum_Generated_unspecified
}

func (x *PatternFlowGreChecksum) GetCustom() int32 {
	if x != nil && x.Custom != nil {
		return *x.Custom
	}
	return 0
}

// integer counter pattern
type PatternFlowGreReserved1Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGreReserved1Counter) Reset() {
	*x = PatternFlowGreReserved1Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreReserved1Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreReserved1Counter) ProtoMessage() {}

func (x *PatternFlowGreReserved1Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreReserved1Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowGreReserved1Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{436}
}

func (x *PatternFlowGreReserved1Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGreReserved1Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGreReserved1Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Optional reserved field. Only present if the checksum_present bit is set.
type PatternFlowGreReserved1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGreReserved1_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGreReserved1_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGreReserved1Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGreReserved1Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGreReserved1) Reset() {
	*x = PatternFlowGreReserved1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreReserved1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreReserved1) ProtoMessage() {}

func (x *PatternFlowGreReserved1) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreReserved1.ProtoReflect.Descriptor instead.
func (*PatternFlowGreReserved1) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{437}
}

func (x *PatternFlowGreReserved1) GetChoice() PatternFlowGreReserved1_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGreReserved1_Choice_unspecified
}

func (x *PatternFlowGreReserved1) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGreReserved1) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGreReserved1) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGreReserved1) GetIncrement() *PatternFlowGreReserved1Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGreReserved1) GetDecrement() *PatternFlowGreReserved1Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1VersionCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 1
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1VersionCounter) Reset() {
	*x = PatternFlowGtpv1VersionCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1VersionCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1VersionCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1VersionCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1VersionCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1VersionCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{438}
}

func (x *PatternFlowGtpv1VersionCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1VersionCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1VersionCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// GTPv1 version
type PatternFlowGtpv1Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1Version_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1Version_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 1
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [1]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1VersionCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1VersionCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1Version) Reset() {
	*x = PatternFlowGtpv1Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1Version) ProtoMessage() {}

func (x *PatternFlowGtpv1Version) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1Version.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1Version) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{439}
}

func (x *PatternFlowGtpv1Version) GetChoice() PatternFlowGtpv1Version_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1Version_Choice_unspecified
}

func (x *PatternFlowGtpv1Version) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1Version) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1Version) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1Version) GetIncrement() *PatternFlowGtpv1VersionCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1Version) GetDecrement() *PatternFlowGtpv1VersionCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1ProtocolTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 1
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1ProtocolTypeCounter) Reset() {
	*x = PatternFlowGtpv1ProtocolTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1ProtocolTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1ProtocolTypeCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1ProtocolTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1ProtocolTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1ProtocolTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{440}
}

func (x *PatternFlowGtpv1ProtocolTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1ProtocolTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1ProtocolTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Protocol type, GTP is 1, GTP' is 0
type PatternFlowGtpv1ProtocolType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1ProtocolType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1ProtocolType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 1
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [1]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1ProtocolTypeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1ProtocolTypeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1ProtocolType) Reset() {
	*x = PatternFlowGtpv1ProtocolType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1ProtocolType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1ProtocolType) ProtoMessage() {}

func (x *PatternFlowGtpv1ProtocolType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1ProtocolType.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1ProtocolType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{441}
}

func (x *PatternFlowGtpv1ProtocolType) GetChoice() PatternFlowGtpv1ProtocolType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1ProtocolType_Choice_unspecified
}

func (x *PatternFlowGtpv1ProtocolType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1ProtocolType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1ProtocolType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1ProtocolType) GetIncrement() *PatternFlowGtpv1ProtocolTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1ProtocolType) GetDecrement() *PatternFlowGtpv1ProtocolTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1ReservedCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1ReservedCounter) Reset() {
	*x = PatternFlowGtpv1ReservedCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1ReservedCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1ReservedCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1ReservedCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1ReservedCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1ReservedCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{442}
}

func (x *PatternFlowGtpv1ReservedCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1ReservedCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1ReservedCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Reserved field
type PatternFlowGtpv1Reserved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1Reserved_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1Reserved_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1ReservedCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1ReservedCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1Reserved) Reset() {
	*x = PatternFlowGtpv1Reserved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1Reserved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1Reserved) ProtoMessage() {}

func (x *PatternFlowGtpv1Reserved) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1Reserved.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1Reserved) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{443}
}

func (x *PatternFlowGtpv1Reserved) GetChoice() PatternFlowGtpv1Reserved_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1Reserved_Choice_unspecified
}

func (x *PatternFlowGtpv1Reserved) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1Reserved) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1Reserved) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1Reserved) GetIncrement() *PatternFlowGtpv1ReservedCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1Reserved) GetDecrement() *PatternFlowGtpv1ReservedCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1EFlagCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1EFlagCounter) Reset() {
	*x = PatternFlowGtpv1EFlagCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1EFlagCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1EFlagCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1EFlagCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1EFlagCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1EFlagCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{444}
}

func (x *PatternFlowGtpv1EFlagCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1EFlagCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1EFlagCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Extension header field present
type PatternFlowGtpv1EFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1EFlag_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1EFlag_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1EFlagCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1EFlagCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1EFlag) Reset() {
	*x = PatternFlowGtpv1EFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1EFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1EFlag) ProtoMessage() {}

func (x *PatternFlowGtpv1EFlag) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1EFlag.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1EFlag) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{445}
}

func (x *PatternFlowGtpv1EFlag) GetChoice() PatternFlowGtpv1EFlag_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1EFlag_Choice_unspecified
}

func (x *PatternFlowGtpv1EFlag) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1EFlag) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1EFlag) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1EFlag) GetIncrement() *PatternFlowGtpv1EFlagCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1EFlag) GetDecrement() *PatternFlowGtpv1EFlagCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1SFlagCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1SFlagCounter) Reset() {
	*x = PatternFlowGtpv1SFlagCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1SFlagCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1SFlagCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1SFlagCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1SFlagCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1SFlagCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{446}
}

func (x *PatternFlowGtpv1SFlagCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1SFlagCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1SFlagCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Sequence number field present
type PatternFlowGtpv1SFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1SFlag_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1SFlag_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1SFlagCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1SFlagCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1SFlag) Reset() {
	*x = PatternFlowGtpv1SFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1SFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1SFlag) ProtoMessage() {}

func (x *PatternFlowGtpv1SFlag) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1SFlag.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1SFlag) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{447}
}

func (x *PatternFlowGtpv1SFlag) GetChoice() PatternFlowGtpv1SFlag_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1SFlag_Choice_unspecified
}

func (x *PatternFlowGtpv1SFlag) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1SFlag) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1SFlag) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1SFlag) GetIncrement() *PatternFlowGtpv1SFlagCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1SFlag) GetDecrement() *PatternFlowGtpv1SFlagCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1PnFlagCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1PnFlagCounter) Reset() {
	*x = PatternFlowGtpv1PnFlagCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1PnFlagCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1PnFlagCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1PnFlagCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1PnFlagCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1PnFlagCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{448}
}

func (x *PatternFlowGtpv1PnFlagCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1PnFlagCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1PnFlagCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// N-PDU field present
type PatternFlowGtpv1PnFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1PnFlag_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1PnFlag_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1PnFlagCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1PnFlagCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1PnFlag) Reset() {
	*x = PatternFlowGtpv1PnFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1PnFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1PnFlag) ProtoMessage() {}

func (x *PatternFlowGtpv1PnFlag) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1PnFlag.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1PnFlag) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{449}
}

func (x *PatternFlowGtpv1PnFlag) GetChoice() PatternFlowGtpv1PnFlag_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1PnFlag_Choice_unspecified
}

func (x *PatternFlowGtpv1PnFlag) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1PnFlag) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1PnFlag) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1PnFlag) GetIncrement() *PatternFlowGtpv1PnFlagCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1PnFlag) GetDecrement() *PatternFlowGtpv1PnFlagCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1MessageTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1MessageTypeCounter) Reset() {
	*x = PatternFlowGtpv1MessageTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1MessageTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1MessageTypeCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1MessageTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1MessageTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1MessageTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{450}
}

func (x *PatternFlowGtpv1MessageTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1MessageTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1MessageTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// The type of GTP message Different types of messages are defined in 3GPP TS 29.060
// section 7.1
type PatternFlowGtpv1MessageType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1MessageType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1MessageType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1MessageTypeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1MessageTypeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1MessageType) Reset() {
	*x = PatternFlowGtpv1MessageType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1MessageType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1MessageType) ProtoMessage() {}

func (x *PatternFlowGtpv1MessageType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1MessageType.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1MessageType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{451}
}

func (x *PatternFlowGtpv1MessageType) GetChoice() PatternFlowGtpv1MessageType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1MessageType_Choice_unspecified
}

func (x *PatternFlowGtpv1MessageType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1MessageType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1MessageType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1MessageType) GetIncrement() *PatternFlowGtpv1MessageTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1MessageType) GetDecrement() *PatternFlowGtpv1MessageTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1MessageLengthCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1MessageLengthCounter) Reset() {
	*x = PatternFlowGtpv1MessageLengthCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1MessageLengthCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1MessageLengthCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1MessageLengthCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1MessageLengthCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1MessageLengthCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{452}
}

func (x *PatternFlowGtpv1MessageLengthCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1MessageLengthCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1MessageLengthCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// The length of the payload (the bytes following the mandatory 8-byte GTP header) in
// bytes that includes any optional fields
type PatternFlowGtpv1MessageLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1MessageLength_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1MessageLength_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1MessageLengthCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1MessageLengthCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1MessageLength) Reset() {
	*x = PatternFlowGtpv1MessageLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1MessageLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1MessageLength) ProtoMessage() {}

func (x *PatternFlowGtpv1MessageLength) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1MessageLength.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1MessageLength) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{453}
}

func (x *PatternFlowGtpv1MessageLength) GetChoice() PatternFlowGtpv1MessageLength_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1MessageLength_Choice_unspecified
}

func (x *PatternFlowGtpv1MessageLength) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1MessageLength) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1MessageLength) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1MessageLength) GetIncrement() *PatternFlowGtpv1MessageLengthCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1MessageLength) GetDecrement() *PatternFlowGtpv1MessageLengthCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1TeidCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int64 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int64 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1TeidCounter) Reset() {
	*x = PatternFlowGtpv1TeidCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1TeidCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1TeidCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1TeidCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1TeidCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1TeidCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{454}
}

func (x *PatternFlowGtpv1TeidCounter) GetStart() int64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1TeidCounter) GetStep() int64 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1TeidCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Tunnel endpoint identifier (TEID) used to multiplex connections in the same GTP tunnel
type PatternFlowGtpv1Teid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1Teid_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1Teid_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int64 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int64 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1TeidCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1TeidCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1Teid) Reset() {
	*x = PatternFlowGtpv1Teid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1Teid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1Teid) ProtoMessage() {}

func (x *PatternFlowGtpv1Teid) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1Teid.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1Teid) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{455}
}

func (x *PatternFlowGtpv1Teid) GetChoice() PatternFlowGtpv1Teid_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1Teid_Choice_unspecified
}

func (x *PatternFlowGtpv1Teid) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1Teid) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1Teid) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1Teid) GetIncrement() *PatternFlowGtpv1TeidCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1Teid) GetDecrement() *PatternFlowGtpv1TeidCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1SquenceNumberCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1SquenceNumberCounter) Reset() {
	*x = PatternFlowGtpv1SquenceNumberCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1SquenceNumberCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1SquenceNumberCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1SquenceNumberCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1SquenceNumberCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1SquenceNumberCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{456}
}

func (x *PatternFlowGtpv1SquenceNumberCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1SquenceNumberCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1SquenceNumberCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Sequence number. Exists if any of the e_flag, s_flag, or pn_flag bits are on.  Must
// be interpreted only if the s_flag bit is on.
type PatternFlowGtpv1SquenceNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1SquenceNumber_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1SquenceNumber_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1SquenceNumberCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1SquenceNumberCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1SquenceNumber) Reset() {
	*x = PatternFlowGtpv1SquenceNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1SquenceNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1SquenceNumber) ProtoMessage() {}

func (x *PatternFlowGtpv1SquenceNumber) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1SquenceNumber.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1SquenceNumber) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{457}
}

func (x *PatternFlowGtpv1SquenceNumber) GetChoice() PatternFlowGtpv1SquenceNumber_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1SquenceNumber_Choice_unspecified
}

func (x *PatternFlowGtpv1SquenceNumber) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1SquenceNumber) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1SquenceNumber) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1SquenceNumber) GetIncrement() *PatternFlowGtpv1SquenceNumberCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1SquenceNumber) GetDecrement() *PatternFlowGtpv1SquenceNumberCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1NPduNumberCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1NPduNumberCounter) Reset() {
	*x = PatternFlowGtpv1NPduNumberCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1NPduNumberCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1NPduNumberCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1NPduNumberCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1NPduNumberCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1NPduNumberCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{458}
}

func (x *PatternFlowGtpv1NPduNumberCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1NPduNumberCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1NPduNumberCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// N-PDU number. Exists if any of the e_flag, s_flag, or pn_flag bits are on.  Must
// be interpreted only if the pn_flag bit is on.
type PatternFlowGtpv1NPduNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1NPduNumber_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1NPduNumber_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1NPduNumberCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1NPduNumberCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1NPduNumber) Reset() {
	*x = PatternFlowGtpv1NPduNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1NPduNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1NPduNumber) ProtoMessage() {}

func (x *PatternFlowGtpv1NPduNumber) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1NPduNumber.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1NPduNumber) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{459}
}

func (x *PatternFlowGtpv1NPduNumber) GetChoice() PatternFlowGtpv1NPduNumber_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1NPduNumber_Choice_unspecified
}

func (x *PatternFlowGtpv1NPduNumber) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1NPduNumber) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1NPduNumber) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1NPduNumber) GetIncrement() *PatternFlowGtpv1NPduNumberCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1NPduNumber) GetDecrement() *PatternFlowGtpv1NPduNumberCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv1NextExtensionHeaderTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv1NextExtensionHeaderTypeCounter) Reset() {
	*x = PatternFlowGtpv1NextExtensionHeaderTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1NextExtensionHeaderTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1NextExtensionHeaderTypeCounter) ProtoMessage() {}

func (x *PatternFlowGtpv1NextExtensionHeaderTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1NextExtensionHeaderTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1NextExtensionHeaderTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{460}
}

func (x *PatternFlowGtpv1NextExtensionHeaderTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv1NextExtensionHeaderTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv1NextExtensionHeaderTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Next extension header. Exists if any of the e_flag, s_flag, or pn_flag bits are on.
// Must be interpreted only if the e_flag bit is on.
type PatternFlowGtpv1NextExtensionHeaderType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv1NextExtensionHeaderTypeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv1NextExtensionHeaderTypeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv1NextExtensionHeaderType) Reset() {
	*x = PatternFlowGtpv1NextExtensionHeaderType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1NextExtensionHeaderType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1NextExtensionHeaderType) ProtoMessage() {}

func (x *PatternFlowGtpv1NextExtensionHeaderType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1NextExtensionHeaderType.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1NextExtensionHeaderType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{461}
}

func (x *PatternFlowGtpv1NextExtensionHeaderType) GetChoice() PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv1NextExtensionHeaderType_Choice_unspecified
}

func (x *PatternFlowGtpv1NextExtensionHeaderType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv1NextExtensionHeaderType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv1NextExtensionHeaderType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv1NextExtensionHeaderType) GetIncrement() *PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv1NextExtensionHeaderType) GetDecrement() *PatternFlowGtpv1NextExtensionHeaderTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpExtensionExtensionLengthCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpExtensionExtensionLengthCounter) Reset() {
	*x = PatternFlowGtpExtensionExtensionLengthCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpExtensionExtensionLengthCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpExtensionExtensionLengthCounter) ProtoMessage() {}

func (x *PatternFlowGtpExtensionExtensionLengthCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpExtensionExtensionLengthCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpExtensionExtensionLengthCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{462}
}

func (x *PatternFlowGtpExtensionExtensionLengthCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpExtensionExtensionLengthCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpExtensionExtensionLengthCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// This field states the length of this extension header,  including the length, the
// contents, and the next extension header field, in 4-octet units, so the length of
// the extension must  always be a multiple of 4.
type PatternFlowGtpExtensionExtensionLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpExtensionExtensionLength_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpExtensionExtensionLength_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpExtensionExtensionLengthCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpExtensionExtensionLengthCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpExtensionExtensionLength) Reset() {
	*x = PatternFlowGtpExtensionExtensionLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpExtensionExtensionLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpExtensionExtensionLength) ProtoMessage() {}

func (x *PatternFlowGtpExtensionExtensionLength) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpExtensionExtensionLength.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpExtensionExtensionLength) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{463}
}

func (x *PatternFlowGtpExtensionExtensionLength) GetChoice() PatternFlowGtpExtensionExtensionLength_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpExtensionExtensionLength_Choice_unspecified
}

func (x *PatternFlowGtpExtensionExtensionLength) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpExtensionExtensionLength) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpExtensionExtensionLength) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpExtensionExtensionLength) GetIncrement() *PatternFlowGtpExtensionExtensionLengthCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpExtensionExtensionLength) GetDecrement() *PatternFlowGtpExtensionExtensionLengthCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpExtensionContentsCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int64 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int64 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpExtensionContentsCounter) Reset() {
	*x = PatternFlowGtpExtensionContentsCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpExtensionContentsCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpExtensionContentsCounter) ProtoMessage() {}

func (x *PatternFlowGtpExtensionContentsCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpExtensionContentsCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpExtensionContentsCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{464}
}

func (x *PatternFlowGtpExtensionContentsCounter) GetStart() int64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpExtensionContentsCounter) GetStep() int64 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpExtensionContentsCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// The extension header contents
type PatternFlowGtpExtensionContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpExtensionContents_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpExtensionContents_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int64 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int64 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpExtensionContentsCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpExtensionContentsCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpExtensionContents) Reset() {
	*x = PatternFlowGtpExtensionContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpExtensionContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpExtensionContents) ProtoMessage() {}

func (x *PatternFlowGtpExtensionContents) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpExtensionContents.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpExtensionContents) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{465}
}

func (x *PatternFlowGtpExtensionContents) GetChoice() PatternFlowGtpExtensionContents_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpExtensionContents_Choice_unspecified
}

func (x *PatternFlowGtpExtensionContents) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpExtensionContents) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpExtensionContents) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpExtensionContents) GetIncrement() *PatternFlowGtpExtensionContentsCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpExtensionContents) GetDecrement() *PatternFlowGtpExtensionContentsCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpExtensionNextExtensionHeaderCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpExtensionNextExtensionHeaderCounter) Reset() {
	*x = PatternFlowGtpExtensionNextExtensionHeaderCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpExtensionNextExtensionHeaderCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpExtensionNextExtensionHeaderCounter) ProtoMessage() {}

func (x *PatternFlowGtpExtensionNextExtensionHeaderCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpExtensionNextExtensionHeaderCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpExtensionNextExtensionHeaderCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{466}
}

func (x *PatternFlowGtpExtensionNextExtensionHeaderCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpExtensionNextExtensionHeaderCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpExtensionNextExtensionHeaderCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// It states the type of the next extension, or 0 if no next  extension exists.  This
// permits chaining several next extension headers.
type PatternFlowGtpExtensionNextExtensionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpExtensionNextExtensionHeaderCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpExtensionNextExtensionHeaderCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpExtensionNextExtensionHeader) Reset() {
	*x = PatternFlowGtpExtensionNextExtensionHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpExtensionNextExtensionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpExtensionNextExtensionHeader) ProtoMessage() {}

func (x *PatternFlowGtpExtensionNextExtensionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpExtensionNextExtensionHeader.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpExtensionNextExtensionHeader) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{467}
}

func (x *PatternFlowGtpExtensionNextExtensionHeader) GetChoice() PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpExtensionNextExtensionHeader_Choice_unspecified
}

func (x *PatternFlowGtpExtensionNextExtensionHeader) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpExtensionNextExtensionHeader) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpExtensionNextExtensionHeader) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpExtensionNextExtensionHeader) GetIncrement() *PatternFlowGtpExtensionNextExtensionHeaderCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpExtensionNextExtensionHeader) GetDecrement() *PatternFlowGtpExtensionNextExtensionHeaderCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv2VersionCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 2
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv2VersionCounter) Reset() {
	*x = PatternFlowGtpv2VersionCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2VersionCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2VersionCounter) ProtoMessage() {}

func (x *PatternFlowGtpv2VersionCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2VersionCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2VersionCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{468}
}

func (x *PatternFlowGtpv2VersionCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv2VersionCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv2VersionCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Version number
type PatternFlowGtpv2Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv2Version_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv2Version_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 2
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [2]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv2VersionCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv2VersionCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv2Version) Reset() {
	*x = PatternFlowGtpv2Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2Version) ProtoMessage() {}

func (x *PatternFlowGtpv2Version) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2Version.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2Version) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{469}
}

func (x *PatternFlowGtpv2Version) GetChoice() PatternFlowGtpv2Version_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv2Version_Choice_unspecified
}

func (x *PatternFlowGtpv2Version) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv2Version) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv2Version) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv2Version) GetIncrement() *PatternFlowGtpv2VersionCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv2Version) GetDecrement() *PatternFlowGtpv2VersionCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv2PiggybackingFlagCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv2PiggybackingFlagCounter) Reset() {
	*x = PatternFlowGtpv2PiggybackingFlagCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2PiggybackingFlagCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2PiggybackingFlagCounter) ProtoMessage() {}

func (x *PatternFlowGtpv2PiggybackingFlagCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2PiggybackingFlagCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2PiggybackingFlagCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{470}
}

func (x *PatternFlowGtpv2PiggybackingFlagCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv2PiggybackingFlagCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv2PiggybackingFlagCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// If piggybacking_flag is set to 1 then another GTP-C message with its own header shall
// be present at the end of the current message
type PatternFlowGtpv2PiggybackingFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv2PiggybackingFlag_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv2PiggybackingFlag_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv2PiggybackingFlagCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv2PiggybackingFlagCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv2PiggybackingFlag) Reset() {
	*x = PatternFlowGtpv2PiggybackingFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2PiggybackingFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2PiggybackingFlag) ProtoMessage() {}

func (x *PatternFlowGtpv2PiggybackingFlag) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2PiggybackingFlag.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2PiggybackingFlag) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{471}
}

func (x *PatternFlowGtpv2PiggybackingFlag) GetChoice() PatternFlowGtpv2PiggybackingFlag_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv2PiggybackingFlag_Choice_unspecified
}

func (x *PatternFlowGtpv2PiggybackingFlag) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv2PiggybackingFlag) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv2PiggybackingFlag) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv2PiggybackingFlag) GetIncrement() *PatternFlowGtpv2PiggybackingFlagCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv2PiggybackingFlag) GetDecrement() *PatternFlowGtpv2PiggybackingFlagCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv2TeidFlagCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv2TeidFlagCounter) Reset() {
	*x = PatternFlowGtpv2TeidFlagCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2TeidFlagCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2TeidFlagCounter) ProtoMessage() {}

func (x *PatternFlowGtpv2TeidFlagCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2TeidFlagCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2TeidFlagCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{472}
}

func (x *PatternFlowGtpv2TeidFlagCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv2TeidFlagCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv2TeidFlagCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// If teid_flag is set to 1 then the TEID field will be present  between the message
// length and the sequence number. All messages except Echo and Echo reply require TEID
// to be present
type PatternFlowGtpv2TeidFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv2TeidFlag_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv2TeidFlag_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv2TeidFlagCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv2TeidFlagCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv2TeidFlag) Reset() {
	*x = PatternFlowGtpv2TeidFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2TeidFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2TeidFlag) ProtoMessage() {}

func (x *PatternFlowGtpv2TeidFlag) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2TeidFlag.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2TeidFlag) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{473}
}

func (x *PatternFlowGtpv2TeidFlag) GetChoice() PatternFlowGtpv2TeidFlag_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv2TeidFlag_Choice_unspecified
}

func (x *PatternFlowGtpv2TeidFlag) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv2TeidFlag) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv2TeidFlag) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv2TeidFlag) GetIncrement() *PatternFlowGtpv2TeidFlagCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv2TeidFlag) GetDecrement() *PatternFlowGtpv2TeidFlagCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv2Spare1Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv2Spare1Counter) Reset() {
	*x = PatternFlowGtpv2Spare1Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2Spare1Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2Spare1Counter) ProtoMessage() {}

func (x *PatternFlowGtpv2Spare1Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2Spare1Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2Spare1Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{474}
}

func (x *PatternFlowGtpv2Spare1Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv2Spare1Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv2Spare1Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// A 3-bit reserved field (must be 0).
type PatternFlowGtpv2Spare1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv2Spare1_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv2Spare1_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv2Spare1Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv2Spare1Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv2Spare1) Reset() {
	*x = PatternFlowGtpv2Spare1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2Spare1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2Spare1) ProtoMessage() {}

func (x *PatternFlowGtpv2Spare1) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2Spare1.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2Spare1) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{475}
}

func (x *PatternFlowGtpv2Spare1) GetChoice() PatternFlowGtpv2Spare1_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv2Spare1_Choice_unspecified
}

func (x *PatternFlowGtpv2Spare1) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv2Spare1) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv2Spare1) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv2Spare1) GetIncrement() *PatternFlowGtpv2Spare1Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv2Spare1) GetDecrement() *PatternFlowGtpv2Spare1Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv2MessageTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv2MessageTypeCounter) Reset() {
	*x = PatternFlowGtpv2MessageTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2MessageTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2MessageTypeCounter) ProtoMessage() {}

func (x *PatternFlowGtpv2MessageTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2MessageTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2MessageTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{476}
}

func (x *PatternFlowGtpv2MessageTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv2MessageTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv2MessageTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// An 8-bit field that indicates the type of GTP message. Different types of messages
// are defined in 3GPP TS 29.060 section 7.1
type PatternFlowGtpv2MessageType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv2MessageType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv2MessageType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv2MessageTypeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv2MessageTypeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv2MessageType) Reset() {
	*x = PatternFlowGtpv2MessageType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2MessageType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2MessageType) ProtoMessage() {}

func (x *PatternFlowGtpv2MessageType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2MessageType.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2MessageType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{477}
}

func (x *PatternFlowGtpv2MessageType) GetChoice() PatternFlowGtpv2MessageType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv2MessageType_Choice_unspecified
}

func (x *PatternFlowGtpv2MessageType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv2MessageType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv2MessageType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv2MessageType) GetIncrement() *PatternFlowGtpv2MessageTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv2MessageType) GetDecrement() *PatternFlowGtpv2MessageTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv2MessageLengthCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv2MessageLengthCounter) Reset() {
	*x = PatternFlowGtpv2MessageLengthCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2MessageLengthCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2MessageLengthCounter) ProtoMessage() {}

func (x *PatternFlowGtpv2MessageLengthCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2MessageLengthCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2MessageLengthCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{478}
}

func (x *PatternFlowGtpv2MessageLengthCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv2MessageLengthCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv2MessageLengthCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// A 16-bit field that indicates the length of the payload in bytes, excluding the mandatory
// GTP-c header (first 4 bytes). Includes the TEID and sequence_number if they are present.
type PatternFlowGtpv2MessageLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv2MessageLength_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv2MessageLength_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv2MessageLengthCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv2MessageLengthCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv2MessageLength) Reset() {
	*x = PatternFlowGtpv2MessageLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2MessageLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2MessageLength) ProtoMessage() {}

func (x *PatternFlowGtpv2MessageLength) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2MessageLength.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2MessageLength) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{479}
}

func (x *PatternFlowGtpv2MessageLength) GetChoice() PatternFlowGtpv2MessageLength_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv2MessageLength_Choice_unspecified
}

func (x *PatternFlowGtpv2MessageLength) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv2MessageLength) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv2MessageLength) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv2MessageLength) GetIncrement() *PatternFlowGtpv2MessageLengthCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv2MessageLength) GetDecrement() *PatternFlowGtpv2MessageLengthCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv2TeidCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int64 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int64 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv2TeidCounter) Reset() {
	*x = PatternFlowGtpv2TeidCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2TeidCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2TeidCounter) ProtoMessage() {}

func (x *PatternFlowGtpv2TeidCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2TeidCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2TeidCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{480}
}

func (x *PatternFlowGtpv2TeidCounter) GetStart() int64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv2TeidCounter) GetStep() int64 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv2TeidCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Tunnel endpoint identifier. A 32-bit (4-octet) field used to multiplex different
// connections in the same GTP tunnel. Is present only if the teid_flag is set.
type PatternFlowGtpv2Teid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv2Teid_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv2Teid_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int64 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int64 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv2TeidCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv2TeidCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv2Teid) Reset() {
	*x = PatternFlowGtpv2Teid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2Teid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2Teid) ProtoMessage() {}

func (x *PatternFlowGtpv2Teid) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2Teid.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2Teid) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{481}
}

func (x *PatternFlowGtpv2Teid) GetChoice() PatternFlowGtpv2Teid_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv2Teid_Choice_unspecified
}

func (x *PatternFlowGtpv2Teid) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv2Teid) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv2Teid) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv2Teid) GetIncrement() *PatternFlowGtpv2TeidCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv2Teid) GetDecrement() *PatternFlowGtpv2TeidCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv2SequenceNumberCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv2SequenceNumberCounter) Reset() {
	*x = PatternFlowGtpv2SequenceNumberCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2SequenceNumberCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2SequenceNumberCounter) ProtoMessage() {}

func (x *PatternFlowGtpv2SequenceNumberCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2SequenceNumberCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2SequenceNumberCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{482}
}

func (x *PatternFlowGtpv2SequenceNumberCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv2SequenceNumberCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv2SequenceNumberCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// The sequence number
type PatternFlowGtpv2SequenceNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv2SequenceNumber_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv2SequenceNumber_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv2SequenceNumberCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv2SequenceNumberCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv2SequenceNumber) Reset() {
	*x = PatternFlowGtpv2SequenceNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2SequenceNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2SequenceNumber) ProtoMessage() {}

func (x *PatternFlowGtpv2SequenceNumber) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2SequenceNumber.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2SequenceNumber) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{483}
}

func (x *PatternFlowGtpv2SequenceNumber) GetChoice() PatternFlowGtpv2SequenceNumber_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv2SequenceNumber_Choice_unspecified
}

func (x *PatternFlowGtpv2SequenceNumber) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv2SequenceNumber) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv2SequenceNumber) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv2SequenceNumber) GetIncrement() *PatternFlowGtpv2SequenceNumberCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv2SequenceNumber) GetDecrement() *PatternFlowGtpv2SequenceNumberCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowGtpv2Spare2Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowGtpv2Spare2Counter) Reset() {
	*x = PatternFlowGtpv2Spare2Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2Spare2Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2Spare2Counter) ProtoMessage() {}

func (x *PatternFlowGtpv2Spare2Counter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2Spare2Counter.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2Spare2Counter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{484}
}

func (x *PatternFlowGtpv2Spare2Counter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowGtpv2Spare2Counter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowGtpv2Spare2Counter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Reserved field
type PatternFlowGtpv2Spare2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowGtpv2Spare2_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowGtpv2Spare2_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowGtpv2Spare2Counter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowGtpv2Spare2Counter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowGtpv2Spare2) Reset() {
	*x = PatternFlowGtpv2Spare2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2Spare2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2Spare2) ProtoMessage() {}

func (x *PatternFlowGtpv2Spare2) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2Spare2.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2Spare2) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{485}
}

func (x *PatternFlowGtpv2Spare2) GetChoice() PatternFlowGtpv2Spare2_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowGtpv2Spare2_Choice_unspecified
}

func (x *PatternFlowGtpv2Spare2) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowGtpv2Spare2) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowGtpv2Spare2) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowGtpv2Spare2) GetIncrement() *PatternFlowGtpv2Spare2Counter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowGtpv2Spare2) GetDecrement() *PatternFlowGtpv2Spare2Counter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowArpHardwareTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 1
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowArpHardwareTypeCounter) Reset() {
	*x = PatternFlowArpHardwareTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpHardwareTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpHardwareTypeCounter) ProtoMessage() {}

func (x *PatternFlowArpHardwareTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpHardwareTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowArpHardwareTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{486}
}

func (x *PatternFlowArpHardwareTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowArpHardwareTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowArpHardwareTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Network link protocol type
type PatternFlowArpHardwareType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowArpHardwareType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowArpHardwareType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 1
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [1]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowArpHardwareTypeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowArpHardwareTypeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowArpHardwareType) Reset() {
	*x = PatternFlowArpHardwareType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpHardwareType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpHardwareType) ProtoMessage() {}

func (x *PatternFlowArpHardwareType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpHardwareType.ProtoReflect.Descriptor instead.
func (*PatternFlowArpHardwareType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{487}
}

func (x *PatternFlowArpHardwareType) GetChoice() PatternFlowArpHardwareType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowArpHardwareType_Choice_unspecified
}

func (x *PatternFlowArpHardwareType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowArpHardwareType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowArpHardwareType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowArpHardwareType) GetIncrement() *PatternFlowArpHardwareTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowArpHardwareType) GetDecrement() *PatternFlowArpHardwareTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowArpProtocolTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 2048
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowArpProtocolTypeCounter) Reset() {
	*x = PatternFlowArpProtocolTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpProtocolTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpProtocolTypeCounter) ProtoMessage() {}

func (x *PatternFlowArpProtocolTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpProtocolTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowArpProtocolTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{488}
}

func (x *PatternFlowArpProtocolTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowArpProtocolTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowArpProtocolTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// The internetwork protocol for which the ARP request is intended
type PatternFlowArpProtocolType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowArpProtocolType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowArpProtocolType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 2048
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [2048]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowArpProtocolTypeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowArpProtocolTypeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowArpProtocolType) Reset() {
	*x = PatternFlowArpProtocolType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpProtocolType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpProtocolType) ProtoMessage() {}

func (x *PatternFlowArpProtocolType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpProtocolType.ProtoReflect.Descriptor instead.
func (*PatternFlowArpProtocolType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{489}
}

func (x *PatternFlowArpProtocolType) GetChoice() PatternFlowArpProtocolType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowArpProtocolType_Choice_unspecified
}

func (x *PatternFlowArpProtocolType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowArpProtocolType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowArpProtocolType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowArpProtocolType) GetIncrement() *PatternFlowArpProtocolTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowArpProtocolType) GetDecrement() *PatternFlowArpProtocolTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowArpHardwareLengthCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 6
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowArpHardwareLengthCounter) Reset() {
	*x = PatternFlowArpHardwareLengthCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpHardwareLengthCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpHardwareLengthCounter) ProtoMessage() {}

func (x *PatternFlowArpHardwareLengthCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpHardwareLengthCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowArpHardwareLengthCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{490}
}

func (x *PatternFlowArpHardwareLengthCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowArpHardwareLengthCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowArpHardwareLengthCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Length (in octets) of a hardware address
type PatternFlowArpHardwareLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowArpHardwareLength_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowArpHardwareLength_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 6
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [6]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowArpHardwareLengthCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowArpHardwareLengthCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowArpHardwareLength) Reset() {
	*x = PatternFlowArpHardwareLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpHardwareLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpHardwareLength) ProtoMessage() {}

func (x *PatternFlowArpHardwareLength) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpHardwareLength.ProtoReflect.Descriptor instead.
func (*PatternFlowArpHardwareLength) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{491}
}

func (x *PatternFlowArpHardwareLength) GetChoice() PatternFlowArpHardwareLength_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowArpHardwareLength_Choice_unspecified
}

func (x *PatternFlowArpHardwareLength) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowArpHardwareLength) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowArpHardwareLength) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowArpHardwareLength) GetIncrement() *PatternFlowArpHardwareLengthCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowArpHardwareLength) GetDecrement() *PatternFlowArpHardwareLengthCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowArpProtocolLengthCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 4
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowArpProtocolLengthCounter) Reset() {
	*x = PatternFlowArpProtocolLengthCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpProtocolLengthCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpProtocolLengthCounter) ProtoMessage() {}

func (x *PatternFlowArpProtocolLengthCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpProtocolLengthCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowArpProtocolLengthCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{492}
}

func (x *PatternFlowArpProtocolLengthCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowArpProtocolLengthCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowArpProtocolLengthCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Length (in octets) of internetwork addresses
type PatternFlowArpProtocolLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowArpProtocolLength_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowArpProtocolLength_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 4
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [4]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowArpProtocolLengthCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowArpProtocolLengthCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowArpProtocolLength) Reset() {
	*x = PatternFlowArpProtocolLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpProtocolLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpProtocolLength) ProtoMessage() {}

func (x *PatternFlowArpProtocolLength) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpProtocolLength.ProtoReflect.Descriptor instead.
func (*PatternFlowArpProtocolLength) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{493}
}

func (x *PatternFlowArpProtocolLength) GetChoice() PatternFlowArpProtocolLength_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowArpProtocolLength_Choice_unspecified
}

func (x *PatternFlowArpProtocolLength) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowArpProtocolLength) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowArpProtocolLength) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowArpProtocolLength) GetIncrement() *PatternFlowArpProtocolLengthCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowArpProtocolLength) GetDecrement() *PatternFlowArpProtocolLengthCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowArpOperationCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 1
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowArpOperationCounter) Reset() {
	*x = PatternFlowArpOperationCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpOperationCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpOperationCounter) ProtoMessage() {}

func (x *PatternFlowArpOperationCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpOperationCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowArpOperationCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{494}
}

func (x *PatternFlowArpOperationCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowArpOperationCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowArpOperationCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// The operation that the sender is performing
type PatternFlowArpOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowArpOperation_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowArpOperation_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 1
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [1]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowArpOperationCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowArpOperationCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowArpOperation) Reset() {
	*x = PatternFlowArpOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpOperation) ProtoMessage() {}

func (x *PatternFlowArpOperation) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpOperation.ProtoReflect.Descriptor instead.
func (*PatternFlowArpOperation) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{495}
}

func (x *PatternFlowArpOperation) GetChoice() PatternFlowArpOperation_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowArpOperation_Choice_unspecified
}

func (x *PatternFlowArpOperation) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowArpOperation) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowArpOperation) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowArpOperation) GetIncrement() *PatternFlowArpOperationCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowArpOperation) GetDecrement() *PatternFlowArpOperationCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// mac counter pattern
type PatternFlowArpSenderHardwareAddrCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 00:00:00:00:00:00
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:01
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowArpSenderHardwareAddrCounter) Reset() {
	*x = PatternFlowArpSenderHardwareAddrCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpSenderHardwareAddrCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpSenderHardwareAddrCounter) ProtoMessage() {}

func (x *PatternFlowArpSenderHardwareAddrCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpSenderHardwareAddrCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowArpSenderHardwareAddrCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{496}
}

func (x *PatternFlowArpSenderHardwareAddrCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowArpSenderHardwareAddrCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowArpSenderHardwareAddrCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Media address of the sender
type PatternFlowArpSenderHardwareAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowArpSenderHardwareAddr_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowArpSenderHardwareAddr_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:00
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['00:00:00:00:00:00']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowArpSenderHardwareAddrCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowArpSenderHardwareAddrCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowArpSenderHardwareAddr) Reset() {
	*x = PatternFlowArpSenderHardwareAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpSenderHardwareAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpSenderHardwareAddr) ProtoMessage() {}

func (x *PatternFlowArpSenderHardwareAddr) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpSenderHardwareAddr.ProtoReflect.Descriptor instead.
func (*PatternFlowArpSenderHardwareAddr) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{497}
}

func (x *PatternFlowArpSenderHardwareAddr) GetChoice() PatternFlowArpSenderHardwareAddr_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowArpSenderHardwareAddr_Choice_unspecified
}

func (x *PatternFlowArpSenderHardwareAddr) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowArpSenderHardwareAddr) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowArpSenderHardwareAddr) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowArpSenderHardwareAddr) GetIncrement() *PatternFlowArpSenderHardwareAddrCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowArpSenderHardwareAddr) GetDecrement() *PatternFlowArpSenderHardwareAddrCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// ipv4 counter pattern
type PatternFlowArpSenderProtocolAddrCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0.0.0.0
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 0.0.0.1
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowArpSenderProtocolAddrCounter) Reset() {
	*x = PatternFlowArpSenderProtocolAddrCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpSenderProtocolAddrCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpSenderProtocolAddrCounter) ProtoMessage() {}

func (x *PatternFlowArpSenderProtocolAddrCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpSenderProtocolAddrCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowArpSenderProtocolAddrCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{498}
}

func (x *PatternFlowArpSenderProtocolAddrCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowArpSenderProtocolAddrCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowArpSenderProtocolAddrCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Internetwork address of the sender
type PatternFlowArpSenderProtocolAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowArpSenderProtocolAddr_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowArpSenderProtocolAddr_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0.0.0.0
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['0.0.0.0']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowArpSenderProtocolAddrCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowArpSenderProtocolAddrCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowArpSenderProtocolAddr) Reset() {
	*x = PatternFlowArpSenderProtocolAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpSenderProtocolAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpSenderProtocolAddr) ProtoMessage() {}

func (x *PatternFlowArpSenderProtocolAddr) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpSenderProtocolAddr.ProtoReflect.Descriptor instead.
func (*PatternFlowArpSenderProtocolAddr) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{499}
}

func (x *PatternFlowArpSenderProtocolAddr) GetChoice() PatternFlowArpSenderProtocolAddr_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowArpSenderProtocolAddr_Choice_unspecified
}

func (x *PatternFlowArpSenderProtocolAddr) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowArpSenderProtocolAddr) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowArpSenderProtocolAddr) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowArpSenderProtocolAddr) GetIncrement() *PatternFlowArpSenderProtocolAddrCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowArpSenderProtocolAddr) GetDecrement() *PatternFlowArpSenderProtocolAddrCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// mac counter pattern
type PatternFlowArpTargetHardwareAddrCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 00:00:00:00:00:00
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:01
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowArpTargetHardwareAddrCounter) Reset() {
	*x = PatternFlowArpTargetHardwareAddrCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpTargetHardwareAddrCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpTargetHardwareAddrCounter) ProtoMessage() {}

func (x *PatternFlowArpTargetHardwareAddrCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpTargetHardwareAddrCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowArpTargetHardwareAddrCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{500}
}

func (x *PatternFlowArpTargetHardwareAddrCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowArpTargetHardwareAddrCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowArpTargetHardwareAddrCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Media address of the target
type PatternFlowArpTargetHardwareAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowArpTargetHardwareAddr_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowArpTargetHardwareAddr_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 00:00:00:00:00:00
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['00:00:00:00:00:00']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowArpTargetHardwareAddrCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowArpTargetHardwareAddrCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowArpTargetHardwareAddr) Reset() {
	*x = PatternFlowArpTargetHardwareAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpTargetHardwareAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpTargetHardwareAddr) ProtoMessage() {}

func (x *PatternFlowArpTargetHardwareAddr) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpTargetHardwareAddr.ProtoReflect.Descriptor instead.
func (*PatternFlowArpTargetHardwareAddr) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{501}
}

func (x *PatternFlowArpTargetHardwareAddr) GetChoice() PatternFlowArpTargetHardwareAddr_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowArpTargetHardwareAddr_Choice_unspecified
}

func (x *PatternFlowArpTargetHardwareAddr) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowArpTargetHardwareAddr) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowArpTargetHardwareAddr) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowArpTargetHardwareAddr) GetIncrement() *PatternFlowArpTargetHardwareAddrCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowArpTargetHardwareAddr) GetDecrement() *PatternFlowArpTargetHardwareAddrCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// ipv4 counter pattern
type PatternFlowArpTargetProtocolAddrCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0.0.0.0
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 0.0.0.1
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowArpTargetProtocolAddrCounter) Reset() {
	*x = PatternFlowArpTargetProtocolAddrCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpTargetProtocolAddrCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpTargetProtocolAddrCounter) ProtoMessage() {}

func (x *PatternFlowArpTargetProtocolAddrCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpTargetProtocolAddrCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowArpTargetProtocolAddrCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{502}
}

func (x *PatternFlowArpTargetProtocolAddrCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowArpTargetProtocolAddrCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowArpTargetProtocolAddrCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Internetwork address of the target
type PatternFlowArpTargetProtocolAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowArpTargetProtocolAddr_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowArpTargetProtocolAddr_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0.0.0.0
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['0.0.0.0']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowArpTargetProtocolAddrCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowArpTargetProtocolAddrCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowArpTargetProtocolAddr) Reset() {
	*x = PatternFlowArpTargetProtocolAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpTargetProtocolAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpTargetProtocolAddr) ProtoMessage() {}

func (x *PatternFlowArpTargetProtocolAddr) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpTargetProtocolAddr.ProtoReflect.Descriptor instead.
func (*PatternFlowArpTargetProtocolAddr) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{503}
}

func (x *PatternFlowArpTargetProtocolAddr) GetChoice() PatternFlowArpTargetProtocolAddr_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowArpTargetProtocolAddr_Choice_unspecified
}

func (x *PatternFlowArpTargetProtocolAddr) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowArpTargetProtocolAddr) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowArpTargetProtocolAddr) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowArpTargetProtocolAddr) GetIncrement() *PatternFlowArpTargetProtocolAddrCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowArpTargetProtocolAddr) GetDecrement() *PatternFlowArpTargetProtocolAddrCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIcmpEchoTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 8
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIcmpEchoTypeCounter) Reset() {
	*x = PatternFlowIcmpEchoTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoTypeCounter) ProtoMessage() {}

func (x *PatternFlowIcmpEchoTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{504}
}

func (x *PatternFlowIcmpEchoTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIcmpEchoTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIcmpEchoTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// The type of ICMP echo packet
type PatternFlowIcmpEchoType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIcmpEchoType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpEchoType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 8
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [8]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIcmpEchoTypeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIcmpEchoTypeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIcmpEchoType) Reset() {
	*x = PatternFlowIcmpEchoType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoType) ProtoMessage() {}

func (x *PatternFlowIcmpEchoType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoType.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{505}
}

func (x *PatternFlowIcmpEchoType) GetChoice() PatternFlowIcmpEchoType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpEchoType_Choice_unspecified
}

func (x *PatternFlowIcmpEchoType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIcmpEchoType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIcmpEchoType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIcmpEchoType) GetIncrement() *PatternFlowIcmpEchoTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIcmpEchoType) GetDecrement() *PatternFlowIcmpEchoTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIcmpEchoCodeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIcmpEchoCodeCounter) Reset() {
	*x = PatternFlowIcmpEchoCodeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoCodeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoCodeCounter) ProtoMessage() {}

func (x *PatternFlowIcmpEchoCodeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoCodeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoCodeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{506}
}

func (x *PatternFlowIcmpEchoCodeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIcmpEchoCodeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIcmpEchoCodeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// The ICMP subtype.  The default code for ICMP echo request and reply is 0.
type PatternFlowIcmpEchoCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIcmpEchoCode_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpEchoCode_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIcmpEchoCodeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIcmpEchoCodeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIcmpEchoCode) Reset() {
	*x = PatternFlowIcmpEchoCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoCode) ProtoMessage() {}

func (x *PatternFlowIcmpEchoCode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoCode.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoCode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{507}
}

func (x *PatternFlowIcmpEchoCode) GetChoice() PatternFlowIcmpEchoCode_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpEchoCode_Choice_unspecified
}

func (x *PatternFlowIcmpEchoCode) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIcmpEchoCode) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIcmpEchoCode) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIcmpEchoCode) GetIncrement() *PatternFlowIcmpEchoCodeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIcmpEchoCode) GetDecrement() *PatternFlowIcmpEchoCodeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// ICMP checksum
type PatternFlowIcmpEchoChecksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of checksum
	// default = Choice.Enum.generated
	Choice *PatternFlowIcmpEchoChecksum_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpEchoChecksum_Choice_Enum,oneof" json:"choice,omitempty"`
	// A system generated checksum value
	// default = Generated.Enum.good
	Generated *PatternFlowIcmpEchoChecksum_Generated_Enum `protobuf:"varint,2,opt,name=generated,proto3,enum=otg.PatternFlowIcmpEchoChecksum_Generated_Enum,oneof" json:"generated,omitempty"`
	// A custom checksum value
	Custom *int32 `protobuf:"varint,3,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (x *PatternFlowIcmpEchoChecksum) Reset() {
	*x = PatternFlowIcmpEchoChecksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoChecksum) ProtoMessage() {}

func (x *PatternFlowIcmpEchoChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoChecksum.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoChecksum) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{508}
}

func (x *PatternFlowIcmpEchoChecksum) GetChoice() PatternFlowIcmpEchoChecksum_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpEchoChecksum_Choice_unspecified
}

func (x *PatternFlowIcmpEchoChecksum) GetGenerated() PatternFlowIcmpEchoChecksum_Generated_Enum {
	if x != nil && x.Generated != nil {
		return *x.Generated
	}
	return PatternFlowIcmpEchoChecksum_Generated_unspecified
}

func (x *PatternFlowIcmpEchoChecksum) GetCustom() int32 {
	if x != nil && x.Custom != nil {
		return *x.Custom
	}
	return 0
}

// integer counter pattern
type PatternFlowIcmpEchoIdentifierCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIcmpEchoIdentifierCounter) Reset() {
	*x = PatternFlowIcmpEchoIdentifierCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoIdentifierCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoIdentifierCounter) ProtoMessage() {}

func (x *PatternFlowIcmpEchoIdentifierCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoIdentifierCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoIdentifierCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{509}
}

func (x *PatternFlowIcmpEchoIdentifierCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIcmpEchoIdentifierCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIcmpEchoIdentifierCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// ICMP identifier
type PatternFlowIcmpEchoIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIcmpEchoIdentifier_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpEchoIdentifier_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIcmpEchoIdentifierCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIcmpEchoIdentifierCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIcmpEchoIdentifier) Reset() {
	*x = PatternFlowIcmpEchoIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoIdentifier) ProtoMessage() {}

func (x *PatternFlowIcmpEchoIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoIdentifier.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoIdentifier) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{510}
}

func (x *PatternFlowIcmpEchoIdentifier) GetChoice() PatternFlowIcmpEchoIdentifier_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpEchoIdentifier_Choice_unspecified
}

func (x *PatternFlowIcmpEchoIdentifier) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIcmpEchoIdentifier) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIcmpEchoIdentifier) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIcmpEchoIdentifier) GetIncrement() *PatternFlowIcmpEchoIdentifierCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIcmpEchoIdentifier) GetDecrement() *PatternFlowIcmpEchoIdentifierCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIcmpEchoSequenceNumberCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIcmpEchoSequenceNumberCounter) Reset() {
	*x = PatternFlowIcmpEchoSequenceNumberCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoSequenceNumberCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoSequenceNumberCounter) ProtoMessage() {}

func (x *PatternFlowIcmpEchoSequenceNumberCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoSequenceNumberCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoSequenceNumberCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{511}
}

func (x *PatternFlowIcmpEchoSequenceNumberCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIcmpEchoSequenceNumberCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIcmpEchoSequenceNumberCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// ICMP sequence number
type PatternFlowIcmpEchoSequenceNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIcmpEchoSequenceNumber_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpEchoSequenceNumber_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIcmpEchoSequenceNumberCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIcmpEchoSequenceNumberCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIcmpEchoSequenceNumber) Reset() {
	*x = PatternFlowIcmpEchoSequenceNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoSequenceNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoSequenceNumber) ProtoMessage() {}

func (x *PatternFlowIcmpEchoSequenceNumber) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoSequenceNumber.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoSequenceNumber) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{512}
}

func (x *PatternFlowIcmpEchoSequenceNumber) GetChoice() PatternFlowIcmpEchoSequenceNumber_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpEchoSequenceNumber_Choice_unspecified
}

func (x *PatternFlowIcmpEchoSequenceNumber) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIcmpEchoSequenceNumber) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIcmpEchoSequenceNumber) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIcmpEchoSequenceNumber) GetIncrement() *PatternFlowIcmpEchoSequenceNumberCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIcmpEchoSequenceNumber) GetDecrement() *PatternFlowIcmpEchoSequenceNumberCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// ICMP checksum
type PatternFlowIcmpCommonChecksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of checksum
	// default = Choice.Enum.generated
	Choice *PatternFlowIcmpCommonChecksum_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpCommonChecksum_Choice_Enum,oneof" json:"choice,omitempty"`
	// A system generated checksum value
	// default = Generated.Enum.good
	Generated *PatternFlowIcmpCommonChecksum_Generated_Enum `protobuf:"varint,2,opt,name=generated,proto3,enum=otg.PatternFlowIcmpCommonChecksum_Generated_Enum,oneof" json:"generated,omitempty"`
	// A custom checksum value
	Custom *int32 `protobuf:"varint,3,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (x *PatternFlowIcmpCommonChecksum) Reset() {
	*x = PatternFlowIcmpCommonChecksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpCommonChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpCommonChecksum) ProtoMessage() {}

func (x *PatternFlowIcmpCommonChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpCommonChecksum.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpCommonChecksum) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{513}
}

func (x *PatternFlowIcmpCommonChecksum) GetChoice() PatternFlowIcmpCommonChecksum_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpCommonChecksum_Choice_unspecified
}

func (x *PatternFlowIcmpCommonChecksum) GetGenerated() PatternFlowIcmpCommonChecksum_Generated_Enum {
	if x != nil && x.Generated != nil {
		return *x.Generated
	}
	return PatternFlowIcmpCommonChecksum_Generated_unspecified
}

func (x *PatternFlowIcmpCommonChecksum) GetCustom() int32 {
	if x != nil && x.Custom != nil {
		return *x.Custom
	}
	return 0
}

// integer counter pattern
type PatternFlowIcmpNextFieldsIdentifierCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIcmpNextFieldsIdentifierCounter) Reset() {
	*x = PatternFlowIcmpNextFieldsIdentifierCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpNextFieldsIdentifierCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpNextFieldsIdentifierCounter) ProtoMessage() {}

func (x *PatternFlowIcmpNextFieldsIdentifierCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpNextFieldsIdentifierCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpNextFieldsIdentifierCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{514}
}

func (x *PatternFlowIcmpNextFieldsIdentifierCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIcmpNextFieldsIdentifierCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIcmpNextFieldsIdentifierCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// ICMP identifier
type PatternFlowIcmpNextFieldsIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIcmpNextFieldsIdentifier_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpNextFieldsIdentifier_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIcmpNextFieldsIdentifierCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIcmpNextFieldsIdentifierCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIcmpNextFieldsIdentifier) Reset() {
	*x = PatternFlowIcmpNextFieldsIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpNextFieldsIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpNextFieldsIdentifier) ProtoMessage() {}

func (x *PatternFlowIcmpNextFieldsIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpNextFieldsIdentifier.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpNextFieldsIdentifier) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{515}
}

func (x *PatternFlowIcmpNextFieldsIdentifier) GetChoice() PatternFlowIcmpNextFieldsIdentifier_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpNextFieldsIdentifier_Choice_unspecified
}

func (x *PatternFlowIcmpNextFieldsIdentifier) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIcmpNextFieldsIdentifier) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIcmpNextFieldsIdentifier) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIcmpNextFieldsIdentifier) GetIncrement() *PatternFlowIcmpNextFieldsIdentifierCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIcmpNextFieldsIdentifier) GetDecrement() *PatternFlowIcmpNextFieldsIdentifierCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIcmpNextFieldsSequenceNumberCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIcmpNextFieldsSequenceNumberCounter) Reset() {
	*x = PatternFlowIcmpNextFieldsSequenceNumberCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpNextFieldsSequenceNumberCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpNextFieldsSequenceNumberCounter) ProtoMessage() {}

func (x *PatternFlowIcmpNextFieldsSequenceNumberCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpNextFieldsSequenceNumberCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpNextFieldsSequenceNumberCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{516}
}

func (x *PatternFlowIcmpNextFieldsSequenceNumberCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIcmpNextFieldsSequenceNumberCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIcmpNextFieldsSequenceNumberCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// ICMP sequence number
type PatternFlowIcmpNextFieldsSequenceNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIcmpNextFieldsSequenceNumberCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIcmpNextFieldsSequenceNumberCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIcmpNextFieldsSequenceNumber) Reset() {
	*x = PatternFlowIcmpNextFieldsSequenceNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpNextFieldsSequenceNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpNextFieldsSequenceNumber) ProtoMessage() {}

func (x *PatternFlowIcmpNextFieldsSequenceNumber) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpNextFieldsSequenceNumber.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpNextFieldsSequenceNumber) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{517}
}

func (x *PatternFlowIcmpNextFieldsSequenceNumber) GetChoice() PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpNextFieldsSequenceNumber_Choice_unspecified
}

func (x *PatternFlowIcmpNextFieldsSequenceNumber) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIcmpNextFieldsSequenceNumber) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIcmpNextFieldsSequenceNumber) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIcmpNextFieldsSequenceNumber) GetIncrement() *PatternFlowIcmpNextFieldsSequenceNumberCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIcmpNextFieldsSequenceNumber) GetDecrement() *PatternFlowIcmpNextFieldsSequenceNumberCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIcmpv6EchoTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 128
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIcmpv6EchoTypeCounter) Reset() {
	*x = PatternFlowIcmpv6EchoTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoTypeCounter) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{518}
}

func (x *PatternFlowIcmpv6EchoTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// ICMPv6 echo type
type PatternFlowIcmpv6EchoType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIcmpv6EchoType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpv6EchoType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 128
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [128]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIcmpv6EchoTypeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIcmpv6EchoTypeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIcmpv6EchoType) Reset() {
	*x = PatternFlowIcmpv6EchoType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoType) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoType.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{519}
}

func (x *PatternFlowIcmpv6EchoType) GetChoice() PatternFlowIcmpv6EchoType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpv6EchoType_Choice_unspecified
}

func (x *PatternFlowIcmpv6EchoType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIcmpv6EchoType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIcmpv6EchoType) GetIncrement() *PatternFlowIcmpv6EchoTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIcmpv6EchoType) GetDecrement() *PatternFlowIcmpv6EchoTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIcmpv6EchoCodeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIcmpv6EchoCodeCounter) Reset() {
	*x = PatternFlowIcmpv6EchoCodeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoCodeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoCodeCounter) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoCodeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoCodeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoCodeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{520}
}

func (x *PatternFlowIcmpv6EchoCodeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoCodeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoCodeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// ICMPv6 echo sub type
type PatternFlowIcmpv6EchoCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIcmpv6EchoCode_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpv6EchoCode_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIcmpv6EchoCodeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIcmpv6EchoCodeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIcmpv6EchoCode) Reset() {
	*x = PatternFlowIcmpv6EchoCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoCode) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoCode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoCode.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoCode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{521}
}

func (x *PatternFlowIcmpv6EchoCode) GetChoice() PatternFlowIcmpv6EchoCode_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpv6EchoCode_Choice_unspecified
}

func (x *PatternFlowIcmpv6EchoCode) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoCode) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIcmpv6EchoCode) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIcmpv6EchoCode) GetIncrement() *PatternFlowIcmpv6EchoCodeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIcmpv6EchoCode) GetDecrement() *PatternFlowIcmpv6EchoCodeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIcmpv6EchoIdentifierCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIcmpv6EchoIdentifierCounter) Reset() {
	*x = PatternFlowIcmpv6EchoIdentifierCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoIdentifierCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoIdentifierCounter) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoIdentifierCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoIdentifierCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoIdentifierCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{522}
}

func (x *PatternFlowIcmpv6EchoIdentifierCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoIdentifierCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoIdentifierCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// ICMPv6 echo identifier
type PatternFlowIcmpv6EchoIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIcmpv6EchoIdentifier_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpv6EchoIdentifier_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIcmpv6EchoIdentifierCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIcmpv6EchoIdentifierCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIcmpv6EchoIdentifier) Reset() {
	*x = PatternFlowIcmpv6EchoIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoIdentifier) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoIdentifier.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoIdentifier) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{523}
}

func (x *PatternFlowIcmpv6EchoIdentifier) GetChoice() PatternFlowIcmpv6EchoIdentifier_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpv6EchoIdentifier_Choice_unspecified
}

func (x *PatternFlowIcmpv6EchoIdentifier) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoIdentifier) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIcmpv6EchoIdentifier) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIcmpv6EchoIdentifier) GetIncrement() *PatternFlowIcmpv6EchoIdentifierCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIcmpv6EchoIdentifier) GetDecrement() *PatternFlowIcmpv6EchoIdentifierCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIcmpv6EchoSequenceNumberCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIcmpv6EchoSequenceNumberCounter) Reset() {
	*x = PatternFlowIcmpv6EchoSequenceNumberCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoSequenceNumberCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoSequenceNumberCounter) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoSequenceNumberCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoSequenceNumberCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoSequenceNumberCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{524}
}

func (x *PatternFlowIcmpv6EchoSequenceNumberCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoSequenceNumberCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoSequenceNumberCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// ICMPv6 echo sequence number
type PatternFlowIcmpv6EchoSequenceNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIcmpv6EchoSequenceNumberCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIcmpv6EchoSequenceNumberCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIcmpv6EchoSequenceNumber) Reset() {
	*x = PatternFlowIcmpv6EchoSequenceNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoSequenceNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoSequenceNumber) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoSequenceNumber) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoSequenceNumber.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoSequenceNumber) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{525}
}

func (x *PatternFlowIcmpv6EchoSequenceNumber) GetChoice() PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpv6EchoSequenceNumber_Choice_unspecified
}

func (x *PatternFlowIcmpv6EchoSequenceNumber) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIcmpv6EchoSequenceNumber) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIcmpv6EchoSequenceNumber) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIcmpv6EchoSequenceNumber) GetIncrement() *PatternFlowIcmpv6EchoSequenceNumberCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIcmpv6EchoSequenceNumber) GetDecrement() *PatternFlowIcmpv6EchoSequenceNumberCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// ICMPv6 checksum
type PatternFlowIcmpv6EchoChecksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of checksum
	// default = Choice.Enum.generated
	Choice *PatternFlowIcmpv6EchoChecksum_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpv6EchoChecksum_Choice_Enum,oneof" json:"choice,omitempty"`
	// A system generated checksum value
	// default = Generated.Enum.good
	Generated *PatternFlowIcmpv6EchoChecksum_Generated_Enum `protobuf:"varint,2,opt,name=generated,proto3,enum=otg.PatternFlowIcmpv6EchoChecksum_Generated_Enum,oneof" json:"generated,omitempty"`
	// A custom checksum value
	Custom *int32 `protobuf:"varint,3,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (x *PatternFlowIcmpv6EchoChecksum) Reset() {
	*x = PatternFlowIcmpv6EchoChecksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoChecksum) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoChecksum.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoChecksum) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{526}
}

func (x *PatternFlowIcmpv6EchoChecksum) GetChoice() PatternFlowIcmpv6EchoChecksum_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpv6EchoChecksum_Choice_unspecified
}

func (x *PatternFlowIcmpv6EchoChecksum) GetGenerated() PatternFlowIcmpv6EchoChecksum_Generated_Enum {
	if x != nil && x.Generated != nil {
		return *x.Generated
	}
	return PatternFlowIcmpv6EchoChecksum_Generated_unspecified
}

func (x *PatternFlowIcmpv6EchoChecksum) GetCustom() int32 {
	if x != nil && x.Custom != nil {
		return *x.Custom
	}
	return 0
}

// ICMPv6 checksum
type PatternFlowIcmpv6CommonChecksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of checksum
	// default = Choice.Enum.generated
	Choice *PatternFlowIcmpv6CommonChecksum_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIcmpv6CommonChecksum_Choice_Enum,oneof" json:"choice,omitempty"`
	// A system generated checksum value
	// default = Generated.Enum.good
	Generated *PatternFlowIcmpv6CommonChecksum_Generated_Enum `protobuf:"varint,2,opt,name=generated,proto3,enum=otg.PatternFlowIcmpv6CommonChecksum_Generated_Enum,oneof" json:"generated,omitempty"`
	// A custom checksum value
	Custom *int32 `protobuf:"varint,3,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (x *PatternFlowIcmpv6CommonChecksum) Reset() {
	*x = PatternFlowIcmpv6CommonChecksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6CommonChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6CommonChecksum) ProtoMessage() {}

func (x *PatternFlowIcmpv6CommonChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6CommonChecksum.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6CommonChecksum) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{527}
}

func (x *PatternFlowIcmpv6CommonChecksum) GetChoice() PatternFlowIcmpv6CommonChecksum_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIcmpv6CommonChecksum_Choice_unspecified
}

func (x *PatternFlowIcmpv6CommonChecksum) GetGenerated() PatternFlowIcmpv6CommonChecksum_Generated_Enum {
	if x != nil && x.Generated != nil {
		return *x.Generated
	}
	return PatternFlowIcmpv6CommonChecksum_Generated_unspecified
}

func (x *PatternFlowIcmpv6CommonChecksum) GetCustom() int32 {
	if x != nil && x.Custom != nil {
		return *x.Custom
	}
	return 0
}

// integer counter pattern
type PatternFlowPppAddressCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 255
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPppAddressCounter) Reset() {
	*x = PatternFlowPppAddressCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPppAddressCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPppAddressCounter) ProtoMessage() {}

func (x *PatternFlowPppAddressCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPppAddressCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowPppAddressCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{528}
}

func (x *PatternFlowPppAddressCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPppAddressCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPppAddressCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// PPP address
type PatternFlowPppAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPppAddress_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPppAddress_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 255
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [255]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPppAddressCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPppAddressCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPppAddress) Reset() {
	*x = PatternFlowPppAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPppAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPppAddress) ProtoMessage() {}

func (x *PatternFlowPppAddress) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPppAddress.ProtoReflect.Descriptor instead.
func (*PatternFlowPppAddress) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{529}
}

func (x *PatternFlowPppAddress) GetChoice() PatternFlowPppAddress_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPppAddress_Choice_unspecified
}

func (x *PatternFlowPppAddress) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPppAddress) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPppAddress) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPppAddress) GetIncrement() *PatternFlowPppAddressCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPppAddress) GetDecrement() *PatternFlowPppAddressCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPppControlCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 3
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPppControlCounter) Reset() {
	*x = PatternFlowPppControlCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPppControlCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPppControlCounter) ProtoMessage() {}

func (x *PatternFlowPppControlCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPppControlCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowPppControlCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{530}
}

func (x *PatternFlowPppControlCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPppControlCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPppControlCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// PPP control
type PatternFlowPppControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowPppControl_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPppControl_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 3
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [3]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPppControlCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPppControlCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPppControl) Reset() {
	*x = PatternFlowPppControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPppControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPppControl) ProtoMessage() {}

func (x *PatternFlowPppControl) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPppControl.ProtoReflect.Descriptor instead.
func (*PatternFlowPppControl) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{531}
}

func (x *PatternFlowPppControl) GetChoice() PatternFlowPppControl_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPppControl_Choice_unspecified
}

func (x *PatternFlowPppControl) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPppControl) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPppControl) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPppControl) GetIncrement() *PatternFlowPppControlCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPppControl) GetDecrement() *PatternFlowPppControlCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowPppProtocolTypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 33
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowPppProtocolTypeCounter) Reset() {
	*x = PatternFlowPppProtocolTypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPppProtocolTypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPppProtocolTypeCounter) ProtoMessage() {}

func (x *PatternFlowPppProtocolTypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPppProtocolTypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowPppProtocolTypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{532}
}

func (x *PatternFlowPppProtocolTypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowPppProtocolTypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowPppProtocolTypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// PPP protocol type
type PatternFlowPppProtocolType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.auto
	Choice *PatternFlowPppProtocolType_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowPppProtocolType_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 33
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [33]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// The OTG implementation can provide a system generated
	// value for this property. If the OTG is unable to generate a value
	// the default value must be used.
	// default = 33
	Auto *int32 `protobuf:"varint,4,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,5,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowPppProtocolTypeCounter `protobuf:"bytes,6,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowPppProtocolTypeCounter `protobuf:"bytes,7,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowPppProtocolType) Reset() {
	*x = PatternFlowPppProtocolType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPppProtocolType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPppProtocolType) ProtoMessage() {}

func (x *PatternFlowPppProtocolType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPppProtocolType.ProtoReflect.Descriptor instead.
func (*PatternFlowPppProtocolType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{533}
}

func (x *PatternFlowPppProtocolType) GetChoice() PatternFlowPppProtocolType_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowPppProtocolType_Choice_unspecified
}

func (x *PatternFlowPppProtocolType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowPppProtocolType) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowPppProtocolType) GetAuto() int32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return 0
}

func (x *PatternFlowPppProtocolType) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowPppProtocolType) GetIncrement() *PatternFlowPppProtocolTypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowPppProtocolType) GetDecrement() *PatternFlowPppProtocolTypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIgmpv1VersionCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 1
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIgmpv1VersionCounter) Reset() {
	*x = PatternFlowIgmpv1VersionCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1VersionCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1VersionCounter) ProtoMessage() {}

func (x *PatternFlowIgmpv1VersionCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1VersionCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1VersionCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{534}
}

func (x *PatternFlowIgmpv1VersionCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIgmpv1VersionCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIgmpv1VersionCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Version number
type PatternFlowIgmpv1Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIgmpv1Version_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIgmpv1Version_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 1
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [1]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIgmpv1VersionCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIgmpv1VersionCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIgmpv1Version) Reset() {
	*x = PatternFlowIgmpv1Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1Version) ProtoMessage() {}

func (x *PatternFlowIgmpv1Version) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1Version.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1Version) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{535}
}

func (x *PatternFlowIgmpv1Version) GetChoice() PatternFlowIgmpv1Version_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIgmpv1Version_Choice_unspecified
}

func (x *PatternFlowIgmpv1Version) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIgmpv1Version) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIgmpv1Version) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIgmpv1Version) GetIncrement() *PatternFlowIgmpv1VersionCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIgmpv1Version) GetDecrement() *PatternFlowIgmpv1VersionCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIgmpv1TypeCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 1
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIgmpv1TypeCounter) Reset() {
	*x = PatternFlowIgmpv1TypeCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1TypeCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1TypeCounter) ProtoMessage() {}

func (x *PatternFlowIgmpv1TypeCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1TypeCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1TypeCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{536}
}

func (x *PatternFlowIgmpv1TypeCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIgmpv1TypeCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIgmpv1TypeCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Type of message
type PatternFlowIgmpv1Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIgmpv1Type_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIgmpv1Type_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 1
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [1]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIgmpv1TypeCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIgmpv1TypeCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIgmpv1Type) Reset() {
	*x = PatternFlowIgmpv1Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1Type) ProtoMessage() {}

func (x *PatternFlowIgmpv1Type) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1Type.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1Type) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{537}
}

func (x *PatternFlowIgmpv1Type) GetChoice() PatternFlowIgmpv1Type_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIgmpv1Type_Choice_unspecified
}

func (x *PatternFlowIgmpv1Type) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIgmpv1Type) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIgmpv1Type) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIgmpv1Type) GetIncrement() *PatternFlowIgmpv1TypeCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIgmpv1Type) GetDecrement() *PatternFlowIgmpv1TypeCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowIgmpv1UnusedCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIgmpv1UnusedCounter) Reset() {
	*x = PatternFlowIgmpv1UnusedCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1UnusedCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1UnusedCounter) ProtoMessage() {}

func (x *PatternFlowIgmpv1UnusedCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1UnusedCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1UnusedCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{538}
}

func (x *PatternFlowIgmpv1UnusedCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowIgmpv1UnusedCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowIgmpv1UnusedCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Unused
type PatternFlowIgmpv1Unused struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIgmpv1Unused_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIgmpv1Unused_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIgmpv1UnusedCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIgmpv1UnusedCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIgmpv1Unused) Reset() {
	*x = PatternFlowIgmpv1Unused{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1Unused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1Unused) ProtoMessage() {}

func (x *PatternFlowIgmpv1Unused) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1Unused.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1Unused) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{539}
}

func (x *PatternFlowIgmpv1Unused) GetChoice() PatternFlowIgmpv1Unused_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIgmpv1Unused_Choice_unspecified
}

func (x *PatternFlowIgmpv1Unused) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowIgmpv1Unused) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIgmpv1Unused) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIgmpv1Unused) GetIncrement() *PatternFlowIgmpv1UnusedCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIgmpv1Unused) GetDecrement() *PatternFlowIgmpv1UnusedCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// Checksum
type PatternFlowIgmpv1Checksum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of checksum
	// default = Choice.Enum.generated
	Choice *PatternFlowIgmpv1Checksum_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIgmpv1Checksum_Choice_Enum,oneof" json:"choice,omitempty"`
	// A system generated checksum value
	// default = Generated.Enum.good
	Generated *PatternFlowIgmpv1Checksum_Generated_Enum `protobuf:"varint,2,opt,name=generated,proto3,enum=otg.PatternFlowIgmpv1Checksum_Generated_Enum,oneof" json:"generated,omitempty"`
	// A custom checksum value
	Custom *int32 `protobuf:"varint,3,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
}

func (x *PatternFlowIgmpv1Checksum) Reset() {
	*x = PatternFlowIgmpv1Checksum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1Checksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1Checksum) ProtoMessage() {}

func (x *PatternFlowIgmpv1Checksum) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1Checksum.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1Checksum) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{540}
}

func (x *PatternFlowIgmpv1Checksum) GetChoice() PatternFlowIgmpv1Checksum_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIgmpv1Checksum_Choice_unspecified
}

func (x *PatternFlowIgmpv1Checksum) GetGenerated() PatternFlowIgmpv1Checksum_Generated_Enum {
	if x != nil && x.Generated != nil {
		return *x.Generated
	}
	return PatternFlowIgmpv1Checksum_Generated_unspecified
}

func (x *PatternFlowIgmpv1Checksum) GetCustom() int32 {
	if x != nil && x.Custom != nil {
		return *x.Custom
	}
	return 0
}

// ipv4 counter pattern
type PatternFlowIgmpv1GroupAddressCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0.0.0.0
	Start *string `protobuf:"bytes,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 0.0.0.1
	Step *string `protobuf:"bytes,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowIgmpv1GroupAddressCounter) Reset() {
	*x = PatternFlowIgmpv1GroupAddressCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1GroupAddressCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1GroupAddressCounter) ProtoMessage() {}

func (x *PatternFlowIgmpv1GroupAddressCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1GroupAddressCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1GroupAddressCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{541}
}

func (x *PatternFlowIgmpv1GroupAddressCounter) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *PatternFlowIgmpv1GroupAddressCounter) GetStep() string {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ""
}

func (x *PatternFlowIgmpv1GroupAddressCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Group address
type PatternFlowIgmpv1GroupAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowIgmpv1GroupAddress_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowIgmpv1GroupAddress_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0.0.0.0
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = ['0.0.0.0']
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowIgmpv1GroupAddressCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowIgmpv1GroupAddressCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowIgmpv1GroupAddress) Reset() {
	*x = PatternFlowIgmpv1GroupAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1GroupAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1GroupAddress) ProtoMessage() {}

func (x *PatternFlowIgmpv1GroupAddress) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1GroupAddress.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1GroupAddress) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{542}
}

func (x *PatternFlowIgmpv1GroupAddress) GetChoice() PatternFlowIgmpv1GroupAddress_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowIgmpv1GroupAddress_Choice_unspecified
}

func (x *PatternFlowIgmpv1GroupAddress) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *PatternFlowIgmpv1GroupAddress) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowIgmpv1GroupAddress) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowIgmpv1GroupAddress) GetIncrement() *PatternFlowIgmpv1GroupAddressCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowIgmpv1GroupAddress) GetDecrement() *PatternFlowIgmpv1GroupAddressCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowMplsLabelCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 16
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowMplsLabelCounter) Reset() {
	*x = PatternFlowMplsLabelCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsLabelCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsLabelCounter) ProtoMessage() {}

func (x *PatternFlowMplsLabelCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsLabelCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsLabelCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{543}
}

func (x *PatternFlowMplsLabelCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowMplsLabelCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowMplsLabelCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Label of routers
type PatternFlowMplsLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.auto
	Choice *PatternFlowMplsLabel_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowMplsLabel_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 16
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [16]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// The OTG implementation can provide a system generated
	// value for this property. If the OTG is unable to generate a value
	// the default value must be used.
	// default = 16
	Auto *int32 `protobuf:"varint,4,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,5,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowMplsLabelCounter `protobuf:"bytes,6,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowMplsLabelCounter `protobuf:"bytes,7,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowMplsLabel) Reset() {
	*x = PatternFlowMplsLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsLabel) ProtoMessage() {}

func (x *PatternFlowMplsLabel) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsLabel.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsLabel) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{544}
}

func (x *PatternFlowMplsLabel) GetChoice() PatternFlowMplsLabel_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowMplsLabel_Choice_unspecified
}

func (x *PatternFlowMplsLabel) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowMplsLabel) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowMplsLabel) GetAuto() int32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return 0
}

func (x *PatternFlowMplsLabel) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowMplsLabel) GetIncrement() *PatternFlowMplsLabelCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowMplsLabel) GetDecrement() *PatternFlowMplsLabelCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowMplsTrafficClassCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 0
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowMplsTrafficClassCounter) Reset() {
	*x = PatternFlowMplsTrafficClassCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsTrafficClassCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsTrafficClassCounter) ProtoMessage() {}

func (x *PatternFlowMplsTrafficClassCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsTrafficClassCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsTrafficClassCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{545}
}

func (x *PatternFlowMplsTrafficClassCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowMplsTrafficClassCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowMplsTrafficClassCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Traffic class
type PatternFlowMplsTrafficClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowMplsTrafficClass_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowMplsTrafficClass_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 0
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [0]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowMplsTrafficClassCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowMplsTrafficClassCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowMplsTrafficClass) Reset() {
	*x = PatternFlowMplsTrafficClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsTrafficClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsTrafficClass) ProtoMessage() {}

func (x *PatternFlowMplsTrafficClass) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsTrafficClass.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsTrafficClass) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{546}
}

func (x *PatternFlowMplsTrafficClass) GetChoice() PatternFlowMplsTrafficClass_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowMplsTrafficClass_Choice_unspecified
}

func (x *PatternFlowMplsTrafficClass) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowMplsTrafficClass) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowMplsTrafficClass) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowMplsTrafficClass) GetIncrement() *PatternFlowMplsTrafficClassCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowMplsTrafficClass) GetDecrement() *PatternFlowMplsTrafficClassCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowMplsBottomOfStackCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 1
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowMplsBottomOfStackCounter) Reset() {
	*x = PatternFlowMplsBottomOfStackCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsBottomOfStackCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsBottomOfStackCounter) ProtoMessage() {}

func (x *PatternFlowMplsBottomOfStackCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsBottomOfStackCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsBottomOfStackCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{547}
}

func (x *PatternFlowMplsBottomOfStackCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowMplsBottomOfStackCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowMplsBottomOfStackCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Bottom of stack
type PatternFlowMplsBottomOfStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.auto
	Choice *PatternFlowMplsBottomOfStack_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowMplsBottomOfStack_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 1
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [1]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// The OTG implementation can provide a system generated
	// value for this property. If the OTG is unable to generate a value
	// the default value must be used.
	// default = 1
	Auto *int32 `protobuf:"varint,4,opt,name=auto,proto3,oneof" json:"auto,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,5,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowMplsBottomOfStackCounter `protobuf:"bytes,6,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowMplsBottomOfStackCounter `protobuf:"bytes,7,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowMplsBottomOfStack) Reset() {
	*x = PatternFlowMplsBottomOfStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsBottomOfStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsBottomOfStack) ProtoMessage() {}

func (x *PatternFlowMplsBottomOfStack) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsBottomOfStack.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsBottomOfStack) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{548}
}

func (x *PatternFlowMplsBottomOfStack) GetChoice() PatternFlowMplsBottomOfStack_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowMplsBottomOfStack_Choice_unspecified
}

func (x *PatternFlowMplsBottomOfStack) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowMplsBottomOfStack) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowMplsBottomOfStack) GetAuto() int32 {
	if x != nil && x.Auto != nil {
		return *x.Auto
	}
	return 0
}

func (x *PatternFlowMplsBottomOfStack) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowMplsBottomOfStack) GetIncrement() *PatternFlowMplsBottomOfStackCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowMplsBottomOfStack) GetDecrement() *PatternFlowMplsBottomOfStackCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// integer counter pattern
type PatternFlowMplsTimeToLiveCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = 64
	Start *int32 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// Description missing in models
	// default = 1
	Step *int32 `protobuf:"varint,2,opt,name=step,proto3,oneof" json:"step,omitempty"`
	// Description missing in models
	// default = 1
	Count *int32 `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
}

func (x *PatternFlowMplsTimeToLiveCounter) Reset() {
	*x = PatternFlowMplsTimeToLiveCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsTimeToLiveCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsTimeToLiveCounter) ProtoMessage() {}

func (x *PatternFlowMplsTimeToLiveCounter) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsTimeToLiveCounter.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsTimeToLiveCounter) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{549}
}

func (x *PatternFlowMplsTimeToLiveCounter) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *PatternFlowMplsTimeToLiveCounter) GetStep() int32 {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return 0
}

func (x *PatternFlowMplsTimeToLiveCounter) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Time to live
type PatternFlowMplsTimeToLive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description missing in models
	// default = Choice.Enum.value
	Choice *PatternFlowMplsTimeToLive_Choice_Enum `protobuf:"varint,1,opt,name=choice,proto3,enum=otg.PatternFlowMplsTimeToLive_Choice_Enum,oneof" json:"choice,omitempty"`
	// Description missing in models
	// default = 64
	Value *int32 `protobuf:"varint,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// Description missing in models
	// default = [64]
	Values []int32 `protobuf:"varint,3,rep,packed,name=values,proto3" json:"values,omitempty"`
	// A unique name is used to indicate to the system that the field may extend the metric
	// row key and create an aggregate metric row for every unique value. To have metric
	// group columns appear in the flow metric rows the flow metric request allows for the
	// metric_group value to be specified as part of the request.
	MetricGroup *string `protobuf:"bytes,4,opt,name=metric_group,json=metricGroup,proto3,oneof" json:"metric_group,omitempty"`
	// Description missing in models
	Increment *PatternFlowMplsTimeToLiveCounter `protobuf:"bytes,5,opt,name=increment,proto3,oneof" json:"increment,omitempty"`
	// Description missing in models
	Decrement *PatternFlowMplsTimeToLiveCounter `protobuf:"bytes,6,opt,name=decrement,proto3,oneof" json:"decrement,omitempty"`
}

func (x *PatternFlowMplsTimeToLive) Reset() {
	*x = PatternFlowMplsTimeToLive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsTimeToLive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsTimeToLive) ProtoMessage() {}

func (x *PatternFlowMplsTimeToLive) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsTimeToLive.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsTimeToLive) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{550}
}

func (x *PatternFlowMplsTimeToLive) GetChoice() PatternFlowMplsTimeToLive_Choice_Enum {
	if x != nil && x.Choice != nil {
		return *x.Choice
	}
	return PatternFlowMplsTimeToLive_Choice_unspecified
}

func (x *PatternFlowMplsTimeToLive) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *PatternFlowMplsTimeToLive) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *PatternFlowMplsTimeToLive) GetMetricGroup() string {
	if x != nil && x.MetricGroup != nil {
		return *x.MetricGroup
	}
	return ""
}

func (x *PatternFlowMplsTimeToLive) GetIncrement() *PatternFlowMplsTimeToLiveCounter {
	if x != nil {
		return x.Increment
	}
	return nil
}

func (x *PatternFlowMplsTimeToLive) GetDecrement() *PatternFlowMplsTimeToLiveCounter {
	if x != nil {
		return x.Decrement
	}
	return nil
}

// Version details
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of API specification
	// default =
	ApiSpecVersion *string `protobuf:"bytes,1,opt,name=api_spec_version,json=apiSpecVersion,proto3,oneof" json:"api_spec_version,omitempty"`
	// Version of SDK generated from API specification
	// default =
	SdkVersion *string `protobuf:"bytes,2,opt,name=sdk_version,json=sdkVersion,proto3,oneof" json:"sdk_version,omitempty"`
	// Version of application consuming or serving the API
	// default =
	AppVersion *string `protobuf:"bytes,3,opt,name=app_version,json=appVersion,proto3,oneof" json:"app_version,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{551}
}

func (x *Version) GetApiSpecVersion() string {
	if x != nil && x.ApiSpecVersion != nil {
		return *x.ApiSpecVersion
	}
	return ""
}

func (x *Version) GetSdkVersion() string {
	if x != nil && x.SdkVersion != nil {
		return *x.SdkVersion
	}
	return ""
}

func (x *Version) GetAppVersion() string {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return ""
}

// The request has succeeded with no application content but the server
// may return a list of detailed warnings.
type Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseWarning *ResponseWarning `protobuf:"bytes,1,opt,name=response_warning,json=responseWarning,proto3" json:"response_warning,omitempty"`
}

func (x *Success) Reset() {
	*x = Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Success) ProtoMessage() {}

func (x *Success) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Success.ProtoReflect.Descriptor instead.
func (*Success) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{552}
}

func (x *Success) GetResponseWarning() *ResponseWarning {
	if x != nil {
		return x.ResponseWarning
	}
	return nil
}

// This indicates that the server cannot or will not process the request
// due to something that is perceived to be a client error.
// Additional details are in the errors.
type BadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseError *ResponseError `protobuf:"bytes,1,opt,name=response_error,json=responseError,proto3" json:"response_error,omitempty"`
}

func (x *BadRequest) Reset() {
	*x = BadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadRequest) ProtoMessage() {}

func (x *BadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadRequest.ProtoReflect.Descriptor instead.
func (*BadRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{553}
}

func (x *BadRequest) GetResponseError() *ResponseError {
	if x != nil {
		return x.ResponseError
	}
	return nil
}

// This indicates that the server encountered an unexpected condition that
// prevented it from fulfilling the request.
// Additional details are in the errors.
type InternalServerError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseError *ResponseError `protobuf:"bytes,1,opt,name=response_error,json=responseError,proto3" json:"response_error,omitempty"`
}

func (x *InternalServerError) Reset() {
	*x = InternalServerError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalServerError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalServerError) ProtoMessage() {}

func (x *InternalServerError) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalServerError.ProtoReflect.Descriptor instead.
func (*InternalServerError) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{554}
}

func (x *InternalServerError) GetResponseError() *ResponseError {
	if x != nil {
		return x.ResponseError
	}
	return nil
}

type SetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SetConfigRequest) Reset() {
	*x = SetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigRequest) ProtoMessage() {}

func (x *SetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigRequest.ProtoReflect.Descriptor instead.
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{555}
}

func (x *SetConfigRequest) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type SetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *ResponseWarning `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError   `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError   `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *SetConfigResponse) Reset() {
	*x = SetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigResponse) ProtoMessage() {}

func (x *SetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigResponse.ProtoReflect.Descriptor instead.
func (*SetConfigResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{556}
}

func (x *SetConfigResponse) GetStatusCode_200() *ResponseWarning {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *SetConfigResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *SetConfigResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *Config        `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{557}
}

func (x *GetConfigResponse) GetStatusCode_200() *Config {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *GetConfigResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *GetConfigResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type SetTransmitStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransmitState *TransmitState `protobuf:"bytes,1,opt,name=transmit_state,json=transmitState,proto3" json:"transmit_state,omitempty"`
}

func (x *SetTransmitStateRequest) Reset() {
	*x = SetTransmitStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTransmitStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTransmitStateRequest) ProtoMessage() {}

func (x *SetTransmitStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTransmitStateRequest.ProtoReflect.Descriptor instead.
func (*SetTransmitStateRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{558}
}

func (x *SetTransmitStateRequest) GetTransmitState() *TransmitState {
	if x != nil {
		return x.TransmitState
	}
	return nil
}

type SetTransmitStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *ResponseWarning `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError   `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError   `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *SetTransmitStateResponse) Reset() {
	*x = SetTransmitStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTransmitStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTransmitStateResponse) ProtoMessage() {}

func (x *SetTransmitStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTransmitStateResponse.ProtoReflect.Descriptor instead.
func (*SetTransmitStateResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{559}
}

func (x *SetTransmitStateResponse) GetStatusCode_200() *ResponseWarning {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *SetTransmitStateResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *SetTransmitStateResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type SetLinkStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkState *LinkState `protobuf:"bytes,1,opt,name=link_state,json=linkState,proto3" json:"link_state,omitempty"`
}

func (x *SetLinkStateRequest) Reset() {
	*x = SetLinkStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLinkStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLinkStateRequest) ProtoMessage() {}

func (x *SetLinkStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLinkStateRequest.ProtoReflect.Descriptor instead.
func (*SetLinkStateRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{560}
}

func (x *SetLinkStateRequest) GetLinkState() *LinkState {
	if x != nil {
		return x.LinkState
	}
	return nil
}

type SetLinkStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *ResponseWarning `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError   `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError   `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *SetLinkStateResponse) Reset() {
	*x = SetLinkStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[561]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLinkStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLinkStateResponse) ProtoMessage() {}

func (x *SetLinkStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[561]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLinkStateResponse.ProtoReflect.Descriptor instead.
func (*SetLinkStateResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{561}
}

func (x *SetLinkStateResponse) GetStatusCode_200() *ResponseWarning {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *SetLinkStateResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *SetLinkStateResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type SetCaptureStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureState *CaptureState `protobuf:"bytes,1,opt,name=capture_state,json=captureState,proto3" json:"capture_state,omitempty"`
}

func (x *SetCaptureStateRequest) Reset() {
	*x = SetCaptureStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCaptureStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCaptureStateRequest) ProtoMessage() {}

func (x *SetCaptureStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCaptureStateRequest.ProtoReflect.Descriptor instead.
func (*SetCaptureStateRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{562}
}

func (x *SetCaptureStateRequest) GetCaptureState() *CaptureState {
	if x != nil {
		return x.CaptureState
	}
	return nil
}

type SetCaptureStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *ResponseWarning `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError   `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError   `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *SetCaptureStateResponse) Reset() {
	*x = SetCaptureStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[563]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCaptureStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCaptureStateResponse) ProtoMessage() {}

func (x *SetCaptureStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[563]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCaptureStateResponse.ProtoReflect.Descriptor instead.
func (*SetCaptureStateResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{563}
}

func (x *SetCaptureStateResponse) GetStatusCode_200() *ResponseWarning {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *SetCaptureStateResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *SetCaptureStateResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type UpdateFlowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowsUpdate *FlowsUpdate `protobuf:"bytes,1,opt,name=flows_update,json=flowsUpdate,proto3" json:"flows_update,omitempty"`
}

func (x *UpdateFlowsRequest) Reset() {
	*x = UpdateFlowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[564]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowsRequest) ProtoMessage() {}

func (x *UpdateFlowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[564]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowsRequest.ProtoReflect.Descriptor instead.
func (*UpdateFlowsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{564}
}

func (x *UpdateFlowsRequest) GetFlowsUpdate() *FlowsUpdate {
	if x != nil {
		return x.FlowsUpdate
	}
	return nil
}

type UpdateFlowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *Config        `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *UpdateFlowsResponse) Reset() {
	*x = UpdateFlowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowsResponse) ProtoMessage() {}

func (x *UpdateFlowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowsResponse.ProtoReflect.Descriptor instead.
func (*UpdateFlowsResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{565}
}

func (x *UpdateFlowsResponse) GetStatusCode_200() *Config {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *UpdateFlowsResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *UpdateFlowsResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type SetRouteStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteState *RouteState `protobuf:"bytes,1,opt,name=route_state,json=routeState,proto3" json:"route_state,omitempty"`
}

func (x *SetRouteStateRequest) Reset() {
	*x = SetRouteStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRouteStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRouteStateRequest) ProtoMessage() {}

func (x *SetRouteStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRouteStateRequest.ProtoReflect.Descriptor instead.
func (*SetRouteStateRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{566}
}

func (x *SetRouteStateRequest) GetRouteState() *RouteState {
	if x != nil {
		return x.RouteState
	}
	return nil
}

type SetRouteStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *ResponseWarning `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError   `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError   `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *SetRouteStateResponse) Reset() {
	*x = SetRouteStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[567]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRouteStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRouteStateResponse) ProtoMessage() {}

func (x *SetRouteStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[567]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRouteStateResponse.ProtoReflect.Descriptor instead.
func (*SetRouteStateResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{567}
}

func (x *SetRouteStateResponse) GetStatusCode_200() *ResponseWarning {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *SetRouteStateResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *SetRouteStateResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type SendPingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingRequest *PingRequest `protobuf:"bytes,1,opt,name=ping_request,json=pingRequest,proto3" json:"ping_request,omitempty"`
}

func (x *SendPingRequest) Reset() {
	*x = SendPingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[568]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPingRequest) ProtoMessage() {}

func (x *SendPingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[568]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPingRequest.ProtoReflect.Descriptor instead.
func (*SendPingRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{568}
}

func (x *SendPingRequest) GetPingRequest() *PingRequest {
	if x != nil {
		return x.PingRequest
	}
	return nil
}

type SendPingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *PingResponse  `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *SendPingResponse) Reset() {
	*x = SendPingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[569]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPingResponse) ProtoMessage() {}

func (x *SendPingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[569]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPingResponse.ProtoReflect.Descriptor instead.
func (*SendPingResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{569}
}

func (x *SendPingResponse) GetStatusCode_200() *PingResponse {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *SendPingResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *SendPingResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type SetProtocolStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolState *ProtocolState `protobuf:"bytes,1,opt,name=protocol_state,json=protocolState,proto3" json:"protocol_state,omitempty"`
}

func (x *SetProtocolStateRequest) Reset() {
	*x = SetProtocolStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[570]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProtocolStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProtocolStateRequest) ProtoMessage() {}

func (x *SetProtocolStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[570]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProtocolStateRequest.ProtoReflect.Descriptor instead.
func (*SetProtocolStateRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{570}
}

func (x *SetProtocolStateRequest) GetProtocolState() *ProtocolState {
	if x != nil {
		return x.ProtocolState
	}
	return nil
}

type SetProtocolStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *ResponseWarning `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError   `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError   `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *SetProtocolStateResponse) Reset() {
	*x = SetProtocolStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[571]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProtocolStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProtocolStateResponse) ProtoMessage() {}

func (x *SetProtocolStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[571]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProtocolStateResponse.ProtoReflect.Descriptor instead.
func (*SetProtocolStateResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{571}
}

func (x *SetProtocolStateResponse) GetStatusCode_200() *ResponseWarning {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *SetProtocolStateResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *SetProtocolStateResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type SetDeviceStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceState *DeviceState `protobuf:"bytes,1,opt,name=device_state,json=deviceState,proto3" json:"device_state,omitempty"`
}

func (x *SetDeviceStateRequest) Reset() {
	*x = SetDeviceStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[572]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceStateRequest) ProtoMessage() {}

func (x *SetDeviceStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[572]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceStateRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceStateRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{572}
}

func (x *SetDeviceStateRequest) GetDeviceState() *DeviceState {
	if x != nil {
		return x.DeviceState
	}
	return nil
}

type SetDeviceStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *ResponseWarning `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError   `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError   `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *SetDeviceStateResponse) Reset() {
	*x = SetDeviceStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[573]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceStateResponse) ProtoMessage() {}

func (x *SetDeviceStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[573]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceStateResponse.ProtoReflect.Descriptor instead.
func (*SetDeviceStateResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{573}
}

func (x *SetDeviceStateResponse) GetStatusCode_200() *ResponseWarning {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *SetDeviceStateResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *SetDeviceStateResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type GetMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsRequest *MetricsRequest `protobuf:"bytes,1,opt,name=metrics_request,json=metricsRequest,proto3" json:"metrics_request,omitempty"`
}

func (x *GetMetricsRequest) Reset() {
	*x = GetMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[574]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsRequest) ProtoMessage() {}

func (x *GetMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[574]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetMetricsRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{574}
}

func (x *GetMetricsRequest) GetMetricsRequest() *MetricsRequest {
	if x != nil {
		return x.MetricsRequest
	}
	return nil
}

type GetMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *MetricsResponse `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError   `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError   `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *GetMetricsResponse) Reset() {
	*x = GetMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[575]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsResponse) ProtoMessage() {}

func (x *GetMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[575]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetMetricsResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{575}
}

func (x *GetMetricsResponse) GetStatusCode_200() *MetricsResponse {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *GetMetricsResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *GetMetricsResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type GetStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatesRequest *StatesRequest `protobuf:"bytes,1,opt,name=states_request,json=statesRequest,proto3" json:"states_request,omitempty"`
}

func (x *GetStatesRequest) Reset() {
	*x = GetStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[576]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatesRequest) ProtoMessage() {}

func (x *GetStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[576]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatesRequest.ProtoReflect.Descriptor instead.
func (*GetStatesRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{576}
}

func (x *GetStatesRequest) GetStatesRequest() *StatesRequest {
	if x != nil {
		return x.StatesRequest
	}
	return nil
}

type GetStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *StatesResponse `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError  `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError  `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *GetStatesResponse) Reset() {
	*x = GetStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[577]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatesResponse) ProtoMessage() {}

func (x *GetStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[577]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatesResponse.ProtoReflect.Descriptor instead.
func (*GetStatesResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{577}
}

func (x *GetStatesResponse) GetStatusCode_200() *StatesResponse {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *GetStatesResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *GetStatesResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type GetCaptureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureRequest *CaptureRequest `protobuf:"bytes,1,opt,name=capture_request,json=captureRequest,proto3" json:"capture_request,omitempty"`
}

func (x *GetCaptureRequest) Reset() {
	*x = GetCaptureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[578]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCaptureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCaptureRequest) ProtoMessage() {}

func (x *GetCaptureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[578]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCaptureRequest.ProtoReflect.Descriptor instead.
func (*GetCaptureRequest) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{578}
}

func (x *GetCaptureRequest) GetCaptureRequest() *CaptureRequest {
	if x != nil {
		return x.CaptureRequest
	}
	return nil
}

type GetCaptureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 []byte         `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *GetCaptureResponse) Reset() {
	*x = GetCaptureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[579]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCaptureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCaptureResponse) ProtoMessage() {}

func (x *GetCaptureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[579]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCaptureResponse.ProtoReflect.Descriptor instead.
func (*GetCaptureResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{579}
}

func (x *GetCaptureResponse) GetStatusCode_200() []byte {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *GetCaptureResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *GetCaptureResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode_200 *Version       `protobuf:"bytes,1,opt,name=status_code_200,json=statusCode200,proto3,oneof" json:"status_code_200,omitempty"`
	StatusCode_400 *ResponseError `protobuf:"bytes,2,opt,name=status_code_400,json=statusCode400,proto3,oneof" json:"status_code_400,omitempty"`
	StatusCode_500 *ResponseError `protobuf:"bytes,3,opt,name=status_code_500,json=statusCode500,proto3,oneof" json:"status_code_500,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[580]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[580]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{580}
}

func (x *GetVersionResponse) GetStatusCode_200() *Version {
	if x != nil {
		return x.StatusCode_200
	}
	return nil
}

func (x *GetVersionResponse) GetStatusCode_400() *ResponseError {
	if x != nil {
		return x.StatusCode_400
	}
	return nil
}

func (x *GetVersionResponse) GetStatusCode_500() *ResponseError {
	if x != nil {
		return x.StatusCode_500
	}
	return nil
}

type LagProtocol_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LagProtocol_Choice) Reset() {
	*x = LagProtocol_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[581]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagProtocol_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagProtocol_Choice) ProtoMessage() {}

func (x *LagProtocol_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[581]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagProtocol_Choice.ProtoReflect.Descriptor instead.
func (*LagProtocol_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{6, 0}
}

type LagPortLacp_ActorActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LagPortLacp_ActorActivity) Reset() {
	*x = LagPortLacp_ActorActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[582]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagPortLacp_ActorActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagPortLacp_ActorActivity) ProtoMessage() {}

func (x *LagPortLacp_ActorActivity) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[582]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagPortLacp_ActorActivity.ProtoReflect.Descriptor instead.
func (*LagPortLacp_ActorActivity) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{9, 0}
}

type EthernetConnection_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EthernetConnection_Choice) Reset() {
	*x = EthernetConnection_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[583]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetConnection_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetConnection_Choice) ProtoMessage() {}

func (x *EthernetConnection_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[583]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetConnection_Choice.ProtoReflect.Descriptor instead.
func (*EthernetConnection_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{12, 0}
}

type DeviceVlan_Tpid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceVlan_Tpid) Reset() {
	*x = DeviceVlan_Tpid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[584]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceVlan_Tpid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceVlan_Tpid) ProtoMessage() {}

func (x *DeviceVlan_Tpid) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[584]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceVlan_Tpid.ProtoReflect.Descriptor instead.
func (*DeviceVlan_Tpid) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{13, 0}
}

type DeviceIpv4GatewayMAC_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceIpv4GatewayMAC_Choice) Reset() {
	*x = DeviceIpv4GatewayMAC_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[585]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIpv4GatewayMAC_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIpv4GatewayMAC_Choice) ProtoMessage() {}

func (x *DeviceIpv4GatewayMAC_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[585]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIpv4GatewayMAC_Choice.ProtoReflect.Descriptor instead.
func (*DeviceIpv4GatewayMAC_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{16, 0}
}

type DeviceIpv6GatewayMAC_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceIpv6GatewayMAC_Choice) Reset() {
	*x = DeviceIpv6GatewayMAC_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[586]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIpv6GatewayMAC_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIpv6GatewayMAC_Choice) ProtoMessage() {}

func (x *DeviceIpv6GatewayMAC_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[586]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIpv6GatewayMAC_Choice.ProtoReflect.Descriptor instead.
func (*DeviceIpv6GatewayMAC_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{19, 0}
}

type Layer1_Speed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Layer1_Speed) Reset() {
	*x = Layer1_Speed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[587]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer1_Speed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer1_Speed) ProtoMessage() {}

func (x *Layer1_Speed) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[587]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer1_Speed.ProtoReflect.Descriptor instead.
func (*Layer1_Speed) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{20, 0}
}

type Layer1_Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Layer1_Media) Reset() {
	*x = Layer1_Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[588]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer1_Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer1_Media) ProtoMessage() {}

func (x *Layer1_Media) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[588]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer1_Media.ProtoReflect.Descriptor instead.
func (*Layer1_Media) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{20, 1}
}

type Layer1FlowControl_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Layer1FlowControl_Choice) Reset() {
	*x = Layer1FlowControl_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[589]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer1FlowControl_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer1FlowControl_Choice) ProtoMessage() {}

func (x *Layer1FlowControl_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[589]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer1FlowControl_Choice.ProtoReflect.Descriptor instead.
func (*Layer1FlowControl_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{22, 0}
}

type Capture_Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Capture_Format) Reset() {
	*x = Capture_Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[590]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capture_Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capture_Format) ProtoMessage() {}

func (x *Capture_Format) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[590]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capture_Format.ProtoReflect.Descriptor instead.
func (*Capture_Format) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{25, 0}
}

type CaptureFilter_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CaptureFilter_Choice) Reset() {
	*x = CaptureFilter_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[591]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureFilter_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureFilter_Choice) ProtoMessage() {}

func (x *CaptureFilter_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[591]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureFilter_Choice.ProtoReflect.Descriptor instead.
func (*CaptureFilter_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{26, 0}
}

type IsisInterface_NetworkType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisInterface_NetworkType) Reset() {
	*x = IsisInterface_NetworkType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[592]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisInterface_NetworkType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisInterface_NetworkType) ProtoMessage() {}

func (x *IsisInterface_NetworkType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[592]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisInterface_NetworkType.ProtoReflect.Descriptor instead.
func (*IsisInterface_NetworkType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{37, 0}
}

type IsisInterface_LevelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisInterface_LevelType) Reset() {
	*x = IsisInterface_LevelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[593]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisInterface_LevelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisInterface_LevelType) ProtoMessage() {}

func (x *IsisInterface_LevelType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[593]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisInterface_LevelType.ProtoReflect.Descriptor instead.
func (*IsisInterface_LevelType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{37, 1}
}

type IsisInterfaceAuthentication_AuthType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisInterfaceAuthentication_AuthType) Reset() {
	*x = IsisInterfaceAuthentication_AuthType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[594]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisInterfaceAuthentication_AuthType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisInterfaceAuthentication_AuthType) ProtoMessage() {}

func (x *IsisInterfaceAuthentication_AuthType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[594]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisInterfaceAuthentication_AuthType.ProtoReflect.Descriptor instead.
func (*IsisInterfaceAuthentication_AuthType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{42, 0}
}

type IsisAuthenticationBase_AuthType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisAuthenticationBase_AuthType) Reset() {
	*x = IsisAuthenticationBase_AuthType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[595]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisAuthenticationBase_AuthType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisAuthenticationBase_AuthType) ProtoMessage() {}

func (x *IsisAuthenticationBase_AuthType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[595]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisAuthenticationBase_AuthType.ProtoReflect.Descriptor instead.
func (*IsisAuthenticationBase_AuthType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{48, 0}
}

type IsisV4RouteRange_OriginType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisV4RouteRange_OriginType) Reset() {
	*x = IsisV4RouteRange_OriginType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[596]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisV4RouteRange_OriginType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisV4RouteRange_OriginType) ProtoMessage() {}

func (x *IsisV4RouteRange_OriginType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[596]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisV4RouteRange_OriginType.ProtoReflect.Descriptor instead.
func (*IsisV4RouteRange_OriginType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{49, 0}
}

type IsisV4RouteRange_RedistributionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisV4RouteRange_RedistributionType) Reset() {
	*x = IsisV4RouteRange_RedistributionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[597]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisV4RouteRange_RedistributionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisV4RouteRange_RedistributionType) ProtoMessage() {}

func (x *IsisV4RouteRange_RedistributionType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[597]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisV4RouteRange_RedistributionType.ProtoReflect.Descriptor instead.
func (*IsisV4RouteRange_RedistributionType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{49, 1}
}

type IsisV6RouteRange_OriginType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisV6RouteRange_OriginType) Reset() {
	*x = IsisV6RouteRange_OriginType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[598]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisV6RouteRange_OriginType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisV6RouteRange_OriginType) ProtoMessage() {}

func (x *IsisV6RouteRange_OriginType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[598]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisV6RouteRange_OriginType.ProtoReflect.Descriptor instead.
func (*IsisV6RouteRange_OriginType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{53, 0}
}

type IsisV6RouteRange_RedistributionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisV6RouteRange_RedistributionType) Reset() {
	*x = IsisV6RouteRange_RedistributionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[599]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisV6RouteRange_RedistributionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisV6RouteRange_RedistributionType) ProtoMessage() {}

func (x *IsisV6RouteRange_RedistributionType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[599]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisV6RouteRange_RedistributionType.ProtoReflect.Descriptor instead.
func (*IsisV6RouteRange_RedistributionType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{53, 1}
}

type BgpV4Peer_AsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV4Peer_AsType) Reset() {
	*x = BgpV4Peer_AsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[600]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4Peer_AsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4Peer_AsType) ProtoMessage() {}

func (x *BgpV4Peer_AsType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[600]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4Peer_AsType.ProtoReflect.Descriptor instead.
func (*BgpV4Peer_AsType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{55, 0}
}

type BgpV4Peer_AsNumberWidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV4Peer_AsNumberWidth) Reset() {
	*x = BgpV4Peer_AsNumberWidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[601]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4Peer_AsNumberWidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4Peer_AsNumberWidth) ProtoMessage() {}

func (x *BgpV4Peer_AsNumberWidth) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[601]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4Peer_AsNumberWidth.ProtoReflect.Descriptor instead.
func (*BgpV4Peer_AsNumberWidth) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{55, 1}
}

type BgpV4EthernetSegment_ActiveMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV4EthernetSegment_ActiveMode) Reset() {
	*x = BgpV4EthernetSegment_ActiveMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[602]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4EthernetSegment_ActiveMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4EthernetSegment_ActiveMode) ProtoMessage() {}

func (x *BgpV4EthernetSegment_ActiveMode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[602]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4EthernetSegment_ActiveMode.ProtoReflect.Descriptor instead.
func (*BgpV4EthernetSegment_ActiveMode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{57, 0}
}

type BgpRouteAdvanced_Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRouteAdvanced_Origin) Reset() {
	*x = BgpRouteAdvanced_Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[603]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteAdvanced_Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteAdvanced_Origin) ProtoMessage() {}

func (x *BgpRouteAdvanced_Origin) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[603]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteAdvanced_Origin.ProtoReflect.Descriptor instead.
func (*BgpRouteAdvanced_Origin) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{59, 0}
}

type BgpCommunity_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpCommunity_Type) Reset() {
	*x = BgpCommunity_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[604]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpCommunity_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpCommunity_Type) ProtoMessage() {}

func (x *BgpCommunity_Type) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[604]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpCommunity_Type.ProtoReflect.Descriptor instead.
func (*BgpCommunity_Type) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{60, 0}
}

type BgpExtCommunity_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpExtCommunity_Type) Reset() {
	*x = BgpExtCommunity_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[605]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpExtCommunity_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpExtCommunity_Type) ProtoMessage() {}

func (x *BgpExtCommunity_Type) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[605]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpExtCommunity_Type.ProtoReflect.Descriptor instead.
func (*BgpExtCommunity_Type) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{61, 0}
}

type BgpExtCommunity_Subtype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpExtCommunity_Subtype) Reset() {
	*x = BgpExtCommunity_Subtype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[606]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpExtCommunity_Subtype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpExtCommunity_Subtype) ProtoMessage() {}

func (x *BgpExtCommunity_Subtype) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[606]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpExtCommunity_Subtype.ProtoReflect.Descriptor instead.
func (*BgpExtCommunity_Subtype) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{61, 1}
}

type BgpAsPath_AsSetMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpAsPath_AsSetMode) Reset() {
	*x = BgpAsPath_AsSetMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[607]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpAsPath_AsSetMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAsPath_AsSetMode) ProtoMessage() {}

func (x *BgpAsPath_AsSetMode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[607]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAsPath_AsSetMode.ProtoReflect.Descriptor instead.
func (*BgpAsPath_AsSetMode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{62, 0}
}

type BgpAsPathSegment_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpAsPathSegment_Type) Reset() {
	*x = BgpAsPathSegment_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[608]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpAsPathSegment_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAsPathSegment_Type) ProtoMessage() {}

func (x *BgpAsPathSegment_Type) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[608]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAsPathSegment_Type.ProtoReflect.Descriptor instead.
func (*BgpAsPathSegment_Type) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{63, 0}
}

type BgpV4EvpnEvis_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV4EvpnEvis_Choice) Reset() {
	*x = BgpV4EvpnEvis_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[609]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4EvpnEvis_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4EvpnEvis_Choice) ProtoMessage() {}

func (x *BgpV4EvpnEvis_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[609]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4EvpnEvis_Choice.ProtoReflect.Descriptor instead.
func (*BgpV4EvpnEvis_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{64, 0}
}

type BgpV4EviVxlan_ReplicationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV4EviVxlan_ReplicationType) Reset() {
	*x = BgpV4EviVxlan_ReplicationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[610]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4EviVxlan_ReplicationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4EviVxlan_ReplicationType) ProtoMessage() {}

func (x *BgpV4EviVxlan_ReplicationType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[610]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4EviVxlan_ReplicationType.ProtoReflect.Descriptor instead.
func (*BgpV4EviVxlan_ReplicationType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{65, 0}
}

type BgpRouteDistinguisher_RdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRouteDistinguisher_RdType) Reset() {
	*x = BgpRouteDistinguisher_RdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[611]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteDistinguisher_RdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteDistinguisher_RdType) ProtoMessage() {}

func (x *BgpRouteDistinguisher_RdType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[611]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteDistinguisher_RdType.ProtoReflect.Descriptor instead.
func (*BgpRouteDistinguisher_RdType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{68, 0}
}

type BgpRouteTarget_RtType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpRouteTarget_RtType) Reset() {
	*x = BgpRouteTarget_RtType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[612]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpRouteTarget_RtType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteTarget_RtType) ProtoMessage() {}

func (x *BgpRouteTarget_RtType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[612]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteTarget_RtType.ProtoReflect.Descriptor instead.
func (*BgpRouteTarget_RtType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{69, 0}
}

type BgpV4RouteRange_NextHopMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV4RouteRange_NextHopMode) Reset() {
	*x = BgpV4RouteRange_NextHopMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[613]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4RouteRange_NextHopMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4RouteRange_NextHopMode) ProtoMessage() {}

func (x *BgpV4RouteRange_NextHopMode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[613]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4RouteRange_NextHopMode.ProtoReflect.Descriptor instead.
func (*BgpV4RouteRange_NextHopMode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{73, 0}
}

type BgpV4RouteRange_NextHopAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV4RouteRange_NextHopAddressType) Reset() {
	*x = BgpV4RouteRange_NextHopAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[614]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV4RouteRange_NextHopAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV4RouteRange_NextHopAddressType) ProtoMessage() {}

func (x *BgpV4RouteRange_NextHopAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[614]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV4RouteRange_NextHopAddressType.ProtoReflect.Descriptor instead.
func (*BgpV4RouteRange_NextHopAddressType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{73, 1}
}

type BgpV6RouteRange_NextHopMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV6RouteRange_NextHopMode) Reset() {
	*x = BgpV6RouteRange_NextHopMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[615]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6RouteRange_NextHopMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6RouteRange_NextHopMode) ProtoMessage() {}

func (x *BgpV6RouteRange_NextHopMode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[615]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6RouteRange_NextHopMode.ProtoReflect.Descriptor instead.
func (*BgpV6RouteRange_NextHopMode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{75, 0}
}

type BgpV6RouteRange_NextHopAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV6RouteRange_NextHopAddressType) Reset() {
	*x = BgpV6RouteRange_NextHopAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[616]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6RouteRange_NextHopAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6RouteRange_NextHopAddressType) ProtoMessage() {}

func (x *BgpV6RouteRange_NextHopAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[616]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6RouteRange_NextHopAddressType.ProtoReflect.Descriptor instead.
func (*BgpV6RouteRange_NextHopAddressType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{75, 1}
}

type BgpSrteV4Policy_NextHopMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpSrteV4Policy_NextHopMode) Reset() {
	*x = BgpSrteV4Policy_NextHopMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[617]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteV4Policy_NextHopMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteV4Policy_NextHopMode) ProtoMessage() {}

func (x *BgpSrteV4Policy_NextHopMode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[617]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteV4Policy_NextHopMode.ProtoReflect.Descriptor instead.
func (*BgpSrteV4Policy_NextHopMode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{76, 0}
}

type BgpSrteV4Policy_NextHopAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpSrteV4Policy_NextHopAddressType) Reset() {
	*x = BgpSrteV4Policy_NextHopAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[618]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteV4Policy_NextHopAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteV4Policy_NextHopAddressType) ProtoMessage() {}

func (x *BgpSrteV4Policy_NextHopAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[618]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteV4Policy_NextHopAddressType.ProtoReflect.Descriptor instead.
func (*BgpSrteV4Policy_NextHopAddressType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{76, 1}
}

type BgpSrteRemoteEndpointSubTlv_AddressFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpSrteRemoteEndpointSubTlv_AddressFamily) Reset() {
	*x = BgpSrteRemoteEndpointSubTlv_AddressFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[619]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteRemoteEndpointSubTlv_AddressFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteRemoteEndpointSubTlv_AddressFamily) ProtoMessage() {}

func (x *BgpSrteRemoteEndpointSubTlv_AddressFamily) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[619]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteRemoteEndpointSubTlv_AddressFamily.ProtoReflect.Descriptor instead.
func (*BgpSrteRemoteEndpointSubTlv_AddressFamily) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{78, 0}
}

type BgpSrteBindingSubTlv_BindingSidType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpSrteBindingSubTlv_BindingSidType) Reset() {
	*x = BgpSrteBindingSubTlv_BindingSidType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[620]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteBindingSubTlv_BindingSidType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteBindingSubTlv_BindingSidType) ProtoMessage() {}

func (x *BgpSrteBindingSubTlv_BindingSidType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[620]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteBindingSubTlv_BindingSidType.ProtoReflect.Descriptor instead.
func (*BgpSrteBindingSubTlv_BindingSidType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{80, 0}
}

type BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy) Reset() {
	*x = BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[621]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy) ProtoMessage() {}

func (x *BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[621]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy.ProtoReflect.Descriptor instead.
func (*BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{84, 0}
}

type BgpSrteSegment_SegmentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpSrteSegment_SegmentType) Reset() {
	*x = BgpSrteSegment_SegmentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[622]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteSegment_SegmentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteSegment_SegmentType) ProtoMessage() {}

func (x *BgpSrteSegment_SegmentType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[622]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteSegment_SegmentType.ProtoReflect.Descriptor instead.
func (*BgpSrteSegment_SegmentType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{86, 0}
}

type BgpSrteV6Policy_NextHopMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpSrteV6Policy_NextHopMode) Reset() {
	*x = BgpSrteV6Policy_NextHopMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[623]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteV6Policy_NextHopMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteV6Policy_NextHopMode) ProtoMessage() {}

func (x *BgpSrteV6Policy_NextHopMode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[623]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteV6Policy_NextHopMode.ProtoReflect.Descriptor instead.
func (*BgpSrteV6Policy_NextHopMode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{100, 0}
}

type BgpSrteV6Policy_NextHopAddressType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpSrteV6Policy_NextHopAddressType) Reset() {
	*x = BgpSrteV6Policy_NextHopAddressType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[624]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpSrteV6Policy_NextHopAddressType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSrteV6Policy_NextHopAddressType) ProtoMessage() {}

func (x *BgpSrteV6Policy_NextHopAddressType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[624]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSrteV6Policy_NextHopAddressType.ProtoReflect.Descriptor instead.
func (*BgpSrteV6Policy_NextHopAddressType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{100, 1}
}

type BgpV6Peer_AsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV6Peer_AsType) Reset() {
	*x = BgpV6Peer_AsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[625]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6Peer_AsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6Peer_AsType) ProtoMessage() {}

func (x *BgpV6Peer_AsType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[625]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6Peer_AsType.ProtoReflect.Descriptor instead.
func (*BgpV6Peer_AsType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{102, 0}
}

type BgpV6Peer_AsNumberWidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV6Peer_AsNumberWidth) Reset() {
	*x = BgpV6Peer_AsNumberWidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[626]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6Peer_AsNumberWidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6Peer_AsNumberWidth) ProtoMessage() {}

func (x *BgpV6Peer_AsNumberWidth) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[626]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6Peer_AsNumberWidth.ProtoReflect.Descriptor instead.
func (*BgpV6Peer_AsNumberWidth) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{102, 1}
}

type BgpV6EthernetSegment_ActiveMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV6EthernetSegment_ActiveMode) Reset() {
	*x = BgpV6EthernetSegment_ActiveMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[627]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6EthernetSegment_ActiveMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6EthernetSegment_ActiveMode) ProtoMessage() {}

func (x *BgpV6EthernetSegment_ActiveMode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[627]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6EthernetSegment_ActiveMode.ProtoReflect.Descriptor instead.
func (*BgpV6EthernetSegment_ActiveMode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{105, 0}
}

type BgpV6EvpnEvis_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV6EvpnEvis_Choice) Reset() {
	*x = BgpV6EvpnEvis_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[628]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6EvpnEvis_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6EvpnEvis_Choice) ProtoMessage() {}

func (x *BgpV6EvpnEvis_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[628]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6EvpnEvis_Choice.ProtoReflect.Descriptor instead.
func (*BgpV6EvpnEvis_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{106, 0}
}

type BgpV6EviVxlan_ReplicationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpV6EviVxlan_ReplicationType) Reset() {
	*x = BgpV6EviVxlan_ReplicationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[629]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpV6EviVxlan_ReplicationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpV6EviVxlan_ReplicationType) ProtoMessage() {}

func (x *BgpV6EviVxlan_ReplicationType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[629]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpV6EviVxlan_ReplicationType.ProtoReflect.Descriptor instead.
func (*BgpV6EviVxlan_ReplicationType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{107, 0}
}

type VxlanV4TunnelDestinationIPMode_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VxlanV4TunnelDestinationIPMode_Choice) Reset() {
	*x = VxlanV4TunnelDestinationIPMode_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[630]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV4TunnelDestinationIPMode_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV4TunnelDestinationIPMode_Choice) ProtoMessage() {}

func (x *VxlanV4TunnelDestinationIPMode_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[630]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV4TunnelDestinationIPMode_Choice.ProtoReflect.Descriptor instead.
func (*VxlanV4TunnelDestinationIPMode_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{112, 0}
}

type VxlanV6TunnelDestinationIPMode_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VxlanV6TunnelDestinationIPMode_Choice) Reset() {
	*x = VxlanV6TunnelDestinationIPMode_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[631]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VxlanV6TunnelDestinationIPMode_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VxlanV6TunnelDestinationIPMode_Choice) ProtoMessage() {}

func (x *VxlanV6TunnelDestinationIPMode_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[631]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VxlanV6TunnelDestinationIPMode_Choice.ProtoReflect.Descriptor instead.
func (*VxlanV6TunnelDestinationIPMode_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{113, 0}
}

type RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle) Reset() {
	*x = RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[632]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle) ProtoMessage() {}

func (x *RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[632]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle.ProtoReflect.Descriptor instead.
func (*RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{124, 0}
}

type RsvpEro_PrependNeighborIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RsvpEro_PrependNeighborIp) Reset() {
	*x = RsvpEro_PrependNeighborIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[633]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpEro_PrependNeighborIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpEro_PrependNeighborIp) ProtoMessage() {}

func (x *RsvpEro_PrependNeighborIp) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[633]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpEro_PrependNeighborIp.ProtoReflect.Descriptor instead.
func (*RsvpEro_PrependNeighborIp) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{130, 0}
}

type RsvpEroSubobject_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RsvpEroSubobject_Type) Reset() {
	*x = RsvpEroSubobject_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[634]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpEroSubobject_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpEroSubobject_Type) ProtoMessage() {}

func (x *RsvpEroSubobject_Type) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[634]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpEroSubobject_Type.ProtoReflect.Descriptor instead.
func (*RsvpEroSubobject_Type) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{131, 0}
}

type RsvpEroSubobject_HopType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RsvpEroSubobject_HopType) Reset() {
	*x = RsvpEroSubobject_HopType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[635]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpEroSubobject_HopType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpEroSubobject_HopType) ProtoMessage() {}

func (x *RsvpEroSubobject_HopType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[635]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpEroSubobject_HopType.ProtoReflect.Descriptor instead.
func (*RsvpEroSubobject_HopType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{131, 1}
}

type FlowTxRx_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowTxRx_Choice) Reset() {
	*x = FlowTxRx_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[636]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowTxRx_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTxRx_Choice) ProtoMessage() {}

func (x *FlowTxRx_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[636]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTxRx_Choice.ProtoReflect.Descriptor instead.
func (*FlowTxRx_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{133, 0}
}

type FlowRouter_Mode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowRouter_Mode) Reset() {
	*x = FlowRouter_Mode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[637]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowRouter_Mode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRouter_Mode) ProtoMessage() {}

func (x *FlowRouter_Mode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[637]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRouter_Mode.ProtoReflect.Descriptor instead.
func (*FlowRouter_Mode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{135, 0}
}

type FlowHeader_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowHeader_Choice) Reset() {
	*x = FlowHeader_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[638]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowHeader_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowHeader_Choice) ProtoMessage() {}

func (x *FlowHeader_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[638]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowHeader_Choice.ProtoReflect.Descriptor instead.
func (*FlowHeader_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{136, 0}
}

type FlowIpv4Priority_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowIpv4Priority_Choice) Reset() {
	*x = FlowIpv4Priority_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[639]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIpv4Priority_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIpv4Priority_Choice) ProtoMessage() {}

func (x *FlowIpv4Priority_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[639]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIpv4Priority_Choice.ProtoReflect.Descriptor instead.
func (*FlowIpv4Priority_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{142, 0}
}

type FlowIcmp_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowIcmp_Choice) Reset() {
	*x = FlowIcmp_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[640]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIcmp_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIcmp_Choice) ProtoMessage() {}

func (x *FlowIcmp_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[640]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIcmp_Choice.ProtoReflect.Descriptor instead.
func (*FlowIcmp_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{155, 0}
}

type FlowIcmpv6_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowIcmpv6_Choice) Reset() {
	*x = FlowIcmpv6_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[641]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowIcmpv6_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowIcmpv6_Choice) ProtoMessage() {}

func (x *FlowIcmpv6_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[641]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowIcmpv6_Choice.ProtoReflect.Descriptor instead.
func (*FlowIcmpv6_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{157, 0}
}

type FlowSize_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowSize_Choice) Reset() {
	*x = FlowSize_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[642]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSize_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSize_Choice) ProtoMessage() {}

func (x *FlowSize_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[642]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSize_Choice.ProtoReflect.Descriptor instead.
func (*FlowSize_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{162, 0}
}

type FlowRate_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowRate_Choice) Reset() {
	*x = FlowRate_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[643]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowRate_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowRate_Choice) ProtoMessage() {}

func (x *FlowRate_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[643]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowRate_Choice.ProtoReflect.Descriptor instead.
func (*FlowRate_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{165, 0}
}

type FlowDuration_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowDuration_Choice) Reset() {
	*x = FlowDuration_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[644]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowDuration_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowDuration_Choice) ProtoMessage() {}

func (x *FlowDuration_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[644]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowDuration_Choice.ProtoReflect.Descriptor instead.
func (*FlowDuration_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{166, 0}
}

type FlowDelay_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowDelay_Choice) Reset() {
	*x = FlowDelay_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[645]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowDelay_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowDelay_Choice) ProtoMessage() {}

func (x *FlowDelay_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[645]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowDelay_Choice.ProtoReflect.Descriptor instead.
func (*FlowDelay_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{168, 0}
}

type FlowDurationInterBurstGap_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowDurationInterBurstGap_Choice) Reset() {
	*x = FlowDurationInterBurstGap_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[646]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowDurationInterBurstGap_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowDurationInterBurstGap_Choice) ProtoMessage() {}

func (x *FlowDurationInterBurstGap_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[646]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowDurationInterBurstGap_Choice.ProtoReflect.Descriptor instead.
func (*FlowDurationInterBurstGap_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{172, 0}
}

type FlowLatencyMetrics_Mode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowLatencyMetrics_Mode) Reset() {
	*x = FlowLatencyMetrics_Mode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[647]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowLatencyMetrics_Mode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowLatencyMetrics_Mode) ProtoMessage() {}

func (x *FlowLatencyMetrics_Mode) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[647]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowLatencyMetrics_Mode.ProtoReflect.Descriptor instead.
func (*FlowLatencyMetrics_Mode) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{174, 0}
}

type EventRequest_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventRequest_Type) Reset() {
	*x = EventRequest_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[648]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRequest_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRequest_Type) ProtoMessage() {}

func (x *EventRequest_Type) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[648]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRequest_Type.ProtoReflect.Descriptor instead.
func (*EventRequest_Type) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{179, 0}
}

type LldpConnection_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LldpConnection_Choice) Reset() {
	*x = LldpConnection_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[649]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpConnection_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpConnection_Choice) ProtoMessage() {}

func (x *LldpConnection_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[649]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpConnection_Choice.ProtoReflect.Descriptor instead.
func (*LldpConnection_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{182, 0}
}

type LldpChassisId_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LldpChassisId_Choice) Reset() {
	*x = LldpChassisId_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[650]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpChassisId_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpChassisId_Choice) ProtoMessage() {}

func (x *LldpChassisId_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[650]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpChassisId_Choice.ProtoReflect.Descriptor instead.
func (*LldpChassisId_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{183, 0}
}

type LldpPortId_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LldpPortId_Choice) Reset() {
	*x = LldpPortId_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[651]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpPortId_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpPortId_Choice) ProtoMessage() {}

func (x *LldpPortId_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[651]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpPortId_Choice.ProtoReflect.Descriptor instead.
func (*LldpPortId_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{184, 0}
}

type LldpChassisMacSubType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LldpChassisMacSubType_Choice) Reset() {
	*x = LldpChassisMacSubType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[652]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpChassisMacSubType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpChassisMacSubType_Choice) ProtoMessage() {}

func (x *LldpChassisMacSubType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[652]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpChassisMacSubType_Choice.ProtoReflect.Descriptor instead.
func (*LldpChassisMacSubType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{185, 0}
}

type LldpPortInterfaceNameSubType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LldpPortInterfaceNameSubType_Choice) Reset() {
	*x = LldpPortInterfaceNameSubType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[653]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpPortInterfaceNameSubType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpPortInterfaceNameSubType_Choice) ProtoMessage() {}

func (x *LldpPortInterfaceNameSubType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[653]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpPortInterfaceNameSubType_Choice.ProtoReflect.Descriptor instead.
func (*LldpPortInterfaceNameSubType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{186, 0}
}

type LldpSystemName_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LldpSystemName_Choice) Reset() {
	*x = LldpSystemName_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[654]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpSystemName_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpSystemName_Choice) ProtoMessage() {}

func (x *LldpSystemName_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[654]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpSystemName_Choice.ProtoReflect.Descriptor instead.
func (*LldpSystemName_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{187, 0}
}

type LinkState_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkState_State) Reset() {
	*x = LinkState_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[655]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkState_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkState_State) ProtoMessage() {}

func (x *LinkState_State) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[655]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkState_State.ProtoReflect.Descriptor instead.
func (*LinkState_State) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{190, 0}
}

type TransmitState_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransmitState_State) Reset() {
	*x = TransmitState_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[656]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitState_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitState_State) ProtoMessage() {}

func (x *TransmitState_State) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[656]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitState_State.ProtoReflect.Descriptor instead.
func (*TransmitState_State) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{191, 0}
}

type CaptureState_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CaptureState_State) Reset() {
	*x = CaptureState_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[657]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureState_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureState_State) ProtoMessage() {}

func (x *CaptureState_State) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[657]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureState_State.ProtoReflect.Descriptor instead.
func (*CaptureState_State) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{192, 0}
}

type FlowsUpdate_PropertyNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowsUpdate_PropertyNames) Reset() {
	*x = FlowsUpdate_PropertyNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[658]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowsUpdate_PropertyNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowsUpdate_PropertyNames) ProtoMessage() {}

func (x *FlowsUpdate_PropertyNames) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[658]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowsUpdate_PropertyNames.ProtoReflect.Descriptor instead.
func (*FlowsUpdate_PropertyNames) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{193, 0}
}

type RouteState_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RouteState_State) Reset() {
	*x = RouteState_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[659]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteState_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteState_State) ProtoMessage() {}

func (x *RouteState_State) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[659]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteState_State.ProtoReflect.Descriptor instead.
func (*RouteState_State) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{194, 0}
}

type ProtocolState_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProtocolState_State) Reset() {
	*x = ProtocolState_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[660]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolState_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolState_State) ProtoMessage() {}

func (x *ProtocolState_State) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[660]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolState_State.ProtoReflect.Descriptor instead.
func (*ProtocolState_State) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{196, 0}
}

type DeviceState_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceState_Choice) Reset() {
	*x = DeviceState_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[661]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceState_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceState_Choice) ProtoMessage() {}

func (x *DeviceState_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[661]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceState_Choice.ProtoReflect.Descriptor instead.
func (*DeviceState_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{197, 0}
}

type Ping_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ping_Choice) Reset() {
	*x = Ping_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[662]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping_Choice) ProtoMessage() {}

func (x *Ping_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[662]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping_Choice.ProtoReflect.Descriptor instead.
func (*Ping_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{198, 0}
}

type Response_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response_Result) Reset() {
	*x = Response_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[663]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_Result) ProtoMessage() {}

func (x *Response_Result) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[663]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_Result.ProtoReflect.Descriptor instead.
func (*Response_Result) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{202, 0}
}

type LacpMemberState_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LacpMemberState_State) Reset() {
	*x = LacpMemberState_State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[664]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LacpMemberState_State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpMemberState_State) ProtoMessage() {}

func (x *LacpMemberState_State) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[664]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpMemberState_State.ProtoReflect.Descriptor instead.
func (*LacpMemberState_State) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{203, 0}
}

type MetricsRequest_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricsRequest_Choice) Reset() {
	*x = MetricsRequest_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[665]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsRequest_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest_Choice) ProtoMessage() {}

func (x *MetricsRequest_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[665]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest_Choice.ProtoReflect.Descriptor instead.
func (*MetricsRequest_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{204, 0}
}

type MetricsResponse_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricsResponse_Choice) Reset() {
	*x = MetricsResponse_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[666]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponse_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse_Choice) ProtoMessage() {}

func (x *MetricsResponse_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[666]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse_Choice.ProtoReflect.Descriptor instead.
func (*MetricsResponse_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{205, 0}
}

type PortMetricsRequest_ColumnNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PortMetricsRequest_ColumnNames) Reset() {
	*x = PortMetricsRequest_ColumnNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[667]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortMetricsRequest_ColumnNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMetricsRequest_ColumnNames) ProtoMessage() {}

func (x *PortMetricsRequest_ColumnNames) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[667]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMetricsRequest_ColumnNames.ProtoReflect.Descriptor instead.
func (*PortMetricsRequest_ColumnNames) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{206, 0}
}

type PortMetric_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PortMetric_Link) Reset() {
	*x = PortMetric_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[668]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortMetric_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMetric_Link) ProtoMessage() {}

func (x *PortMetric_Link) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[668]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMetric_Link.ProtoReflect.Descriptor instead.
func (*PortMetric_Link) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{207, 0}
}

type PortMetric_Capture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PortMetric_Capture) Reset() {
	*x = PortMetric_Capture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[669]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortMetric_Capture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMetric_Capture) ProtoMessage() {}

func (x *PortMetric_Capture) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[669]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMetric_Capture.ProtoReflect.Descriptor instead.
func (*PortMetric_Capture) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{207, 1}
}

type PortMetric_Transmit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PortMetric_Transmit) Reset() {
	*x = PortMetric_Transmit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[670]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortMetric_Transmit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortMetric_Transmit) ProtoMessage() {}

func (x *PortMetric_Transmit) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[670]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortMetric_Transmit.ProtoReflect.Descriptor instead.
func (*PortMetric_Transmit) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{207, 2}
}

type FlowMetricsRequest_MetricNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowMetricsRequest_MetricNames) Reset() {
	*x = FlowMetricsRequest_MetricNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[671]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMetricsRequest_MetricNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMetricsRequest_MetricNames) ProtoMessage() {}

func (x *FlowMetricsRequest_MetricNames) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[671]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMetricsRequest_MetricNames.ProtoReflect.Descriptor instead.
func (*FlowMetricsRequest_MetricNames) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{208, 0}
}

type FlowMetricGroupRequest_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowMetricGroupRequest_Choice) Reset() {
	*x = FlowMetricGroupRequest_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[672]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMetricGroupRequest_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMetricGroupRequest_Choice) ProtoMessage() {}

func (x *FlowMetricGroupRequest_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[672]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMetricGroupRequest_Choice.ProtoReflect.Descriptor instead.
func (*FlowMetricGroupRequest_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{209, 0}
}

type FlowMetric_Transmit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlowMetric_Transmit) Reset() {
	*x = FlowMetric_Transmit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[673]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowMetric_Transmit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowMetric_Transmit) ProtoMessage() {}

func (x *FlowMetric_Transmit) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[673]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowMetric_Transmit.ProtoReflect.Descriptor instead.
func (*FlowMetric_Transmit) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{210, 0}
}

type Bgpv4MetricsRequest_ColumnNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgpv4MetricsRequest_ColumnNames) Reset() {
	*x = Bgpv4MetricsRequest_ColumnNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[674]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgpv4MetricsRequest_ColumnNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgpv4MetricsRequest_ColumnNames) ProtoMessage() {}

func (x *Bgpv4MetricsRequest_ColumnNames) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[674]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgpv4MetricsRequest_ColumnNames.ProtoReflect.Descriptor instead.
func (*Bgpv4MetricsRequest_ColumnNames) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{214, 0}
}

type Bgpv4Metric_SessionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgpv4Metric_SessionState) Reset() {
	*x = Bgpv4Metric_SessionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[675]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgpv4Metric_SessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgpv4Metric_SessionState) ProtoMessage() {}

func (x *Bgpv4Metric_SessionState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[675]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgpv4Metric_SessionState.ProtoReflect.Descriptor instead.
func (*Bgpv4Metric_SessionState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{215, 0}
}

type Bgpv4Metric_FsmState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgpv4Metric_FsmState) Reset() {
	*x = Bgpv4Metric_FsmState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[676]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgpv4Metric_FsmState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgpv4Metric_FsmState) ProtoMessage() {}

func (x *Bgpv4Metric_FsmState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[676]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgpv4Metric_FsmState.ProtoReflect.Descriptor instead.
func (*Bgpv4Metric_FsmState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{215, 1}
}

type Bgpv6MetricsRequest_ColumnNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgpv6MetricsRequest_ColumnNames) Reset() {
	*x = Bgpv6MetricsRequest_ColumnNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[677]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgpv6MetricsRequest_ColumnNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgpv6MetricsRequest_ColumnNames) ProtoMessage() {}

func (x *Bgpv6MetricsRequest_ColumnNames) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[677]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgpv6MetricsRequest_ColumnNames.ProtoReflect.Descriptor instead.
func (*Bgpv6MetricsRequest_ColumnNames) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{216, 0}
}

type Bgpv6Metric_SessionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgpv6Metric_SessionState) Reset() {
	*x = Bgpv6Metric_SessionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[678]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgpv6Metric_SessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgpv6Metric_SessionState) ProtoMessage() {}

func (x *Bgpv6Metric_SessionState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[678]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgpv6Metric_SessionState.ProtoReflect.Descriptor instead.
func (*Bgpv6Metric_SessionState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{217, 0}
}

type Bgpv6Metric_FsmState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Bgpv6Metric_FsmState) Reset() {
	*x = Bgpv6Metric_FsmState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[679]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgpv6Metric_FsmState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgpv6Metric_FsmState) ProtoMessage() {}

func (x *Bgpv6Metric_FsmState) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[679]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgpv6Metric_FsmState.ProtoReflect.Descriptor instead.
func (*Bgpv6Metric_FsmState) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{217, 1}
}

type IsisMetricsRequest_ColumnNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisMetricsRequest_ColumnNames) Reset() {
	*x = IsisMetricsRequest_ColumnNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[680]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisMetricsRequest_ColumnNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisMetricsRequest_ColumnNames) ProtoMessage() {}

func (x *IsisMetricsRequest_ColumnNames) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[680]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisMetricsRequest_ColumnNames.ProtoReflect.Descriptor instead.
func (*IsisMetricsRequest_ColumnNames) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{218, 0}
}

type LagMetricsRequest_ColumnNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LagMetricsRequest_ColumnNames) Reset() {
	*x = LagMetricsRequest_ColumnNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[681]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagMetricsRequest_ColumnNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagMetricsRequest_ColumnNames) ProtoMessage() {}

func (x *LagMetricsRequest_ColumnNames) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[681]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagMetricsRequest_ColumnNames.ProtoReflect.Descriptor instead.
func (*LagMetricsRequest_ColumnNames) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{220, 0}
}

type LagMetric_OperStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LagMetric_OperStatus) Reset() {
	*x = LagMetric_OperStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[682]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagMetric_OperStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagMetric_OperStatus) ProtoMessage() {}

func (x *LagMetric_OperStatus) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[682]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagMetric_OperStatus.ProtoReflect.Descriptor instead.
func (*LagMetric_OperStatus) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{221, 0}
}

type LacpMetricsRequest_ColumnNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LacpMetricsRequest_ColumnNames) Reset() {
	*x = LacpMetricsRequest_ColumnNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[683]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LacpMetricsRequest_ColumnNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpMetricsRequest_ColumnNames) ProtoMessage() {}

func (x *LacpMetricsRequest_ColumnNames) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[683]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpMetricsRequest_ColumnNames.ProtoReflect.Descriptor instead.
func (*LacpMetricsRequest_ColumnNames) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{222, 0}
}

type LacpMetric_Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LacpMetric_Activity) Reset() {
	*x = LacpMetric_Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[684]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LacpMetric_Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpMetric_Activity) ProtoMessage() {}

func (x *LacpMetric_Activity) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[684]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpMetric_Activity.ProtoReflect.Descriptor instead.
func (*LacpMetric_Activity) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{223, 0}
}

type LacpMetric_Timeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LacpMetric_Timeout) Reset() {
	*x = LacpMetric_Timeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[685]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LacpMetric_Timeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpMetric_Timeout) ProtoMessage() {}

func (x *LacpMetric_Timeout) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[685]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpMetric_Timeout.ProtoReflect.Descriptor instead.
func (*LacpMetric_Timeout) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{223, 1}
}

type LacpMetric_Synchronization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LacpMetric_Synchronization) Reset() {
	*x = LacpMetric_Synchronization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[686]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LacpMetric_Synchronization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LacpMetric_Synchronization) ProtoMessage() {}

func (x *LacpMetric_Synchronization) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[686]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LacpMetric_Synchronization.ProtoReflect.Descriptor instead.
func (*LacpMetric_Synchronization) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{223, 2}
}

type LldpMetricsRequest_ColumnNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LldpMetricsRequest_ColumnNames) Reset() {
	*x = LldpMetricsRequest_ColumnNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[687]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpMetricsRequest_ColumnNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpMetricsRequest_ColumnNames) ProtoMessage() {}

func (x *LldpMetricsRequest_ColumnNames) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[687]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpMetricsRequest_ColumnNames.ProtoReflect.Descriptor instead.
func (*LldpMetricsRequest_ColumnNames) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{224, 0}
}

type RsvpMetricsRequest_ColumnNames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RsvpMetricsRequest_ColumnNames) Reset() {
	*x = RsvpMetricsRequest_ColumnNames{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[688]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpMetricsRequest_ColumnNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpMetricsRequest_ColumnNames) ProtoMessage() {}

func (x *RsvpMetricsRequest_ColumnNames) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[688]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpMetricsRequest_ColumnNames.ProtoReflect.Descriptor instead.
func (*RsvpMetricsRequest_ColumnNames) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{226, 0}
}

type StatesRequest_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatesRequest_Choice) Reset() {
	*x = StatesRequest_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[689]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatesRequest_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatesRequest_Choice) ProtoMessage() {}

func (x *StatesRequest_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[689]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatesRequest_Choice.ProtoReflect.Descriptor instead.
func (*StatesRequest_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{228, 0}
}

type StatesResponse_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatesResponse_Choice) Reset() {
	*x = StatesResponse_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[690]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatesResponse_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatesResponse_Choice) ProtoMessage() {}

func (x *StatesResponse_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[690]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatesResponse_Choice.ProtoReflect.Descriptor instead.
func (*StatesResponse_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{229, 0}
}

type BgpPrefixStateRequest_PrefixFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpPrefixStateRequest_PrefixFilters) Reset() {
	*x = BgpPrefixStateRequest_PrefixFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[691]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPrefixStateRequest_PrefixFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixStateRequest_PrefixFilters) ProtoMessage() {}

func (x *BgpPrefixStateRequest_PrefixFilters) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[691]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixStateRequest_PrefixFilters.ProtoReflect.Descriptor instead.
func (*BgpPrefixStateRequest_PrefixFilters) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{234, 0}
}

type BgpPrefixIpv4UnicastFilter_Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpPrefixIpv4UnicastFilter_Origin) Reset() {
	*x = BgpPrefixIpv4UnicastFilter_Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[692]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPrefixIpv4UnicastFilter_Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixIpv4UnicastFilter_Origin) ProtoMessage() {}

func (x *BgpPrefixIpv4UnicastFilter_Origin) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[692]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixIpv4UnicastFilter_Origin.ProtoReflect.Descriptor instead.
func (*BgpPrefixIpv4UnicastFilter_Origin) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{235, 0}
}

type BgpPrefixIpv6UnicastFilter_Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpPrefixIpv6UnicastFilter_Origin) Reset() {
	*x = BgpPrefixIpv6UnicastFilter_Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[693]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPrefixIpv6UnicastFilter_Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixIpv6UnicastFilter_Origin) ProtoMessage() {}

func (x *BgpPrefixIpv6UnicastFilter_Origin) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[693]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixIpv6UnicastFilter_Origin.ProtoReflect.Descriptor instead.
func (*BgpPrefixIpv6UnicastFilter_Origin) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{236, 0}
}

type BgpPrefixIpv4UnicastState_Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpPrefixIpv4UnicastState_Origin) Reset() {
	*x = BgpPrefixIpv4UnicastState_Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[694]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPrefixIpv4UnicastState_Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixIpv4UnicastState_Origin) ProtoMessage() {}

func (x *BgpPrefixIpv4UnicastState_Origin) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[694]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixIpv4UnicastState_Origin.ProtoReflect.Descriptor instead.
func (*BgpPrefixIpv4UnicastState_Origin) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{238, 0}
}

type BgpPrefixIpv6UnicastState_Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BgpPrefixIpv6UnicastState_Origin) Reset() {
	*x = BgpPrefixIpv6UnicastState_Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[695]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPrefixIpv6UnicastState_Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixIpv6UnicastState_Origin) ProtoMessage() {}

func (x *BgpPrefixIpv6UnicastState_Origin) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[695]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixIpv6UnicastState_Origin.ProtoReflect.Descriptor instead.
func (*BgpPrefixIpv6UnicastState_Origin) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{239, 0}
}

type ResultBgpCommunity_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResultBgpCommunity_Type) Reset() {
	*x = ResultBgpCommunity_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[696]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultBgpCommunity_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultBgpCommunity_Type) ProtoMessage() {}

func (x *ResultBgpCommunity_Type) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[696]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultBgpCommunity_Type.ProtoReflect.Descriptor instead.
func (*ResultBgpCommunity_Type) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{240, 0}
}

type ResultBgpAsPathSegment_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResultBgpAsPathSegment_Type) Reset() {
	*x = ResultBgpAsPathSegment_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[697]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultBgpAsPathSegment_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultBgpAsPathSegment_Type) ProtoMessage() {}

func (x *ResultBgpAsPathSegment_Type) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[697]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultBgpAsPathSegment_Type.ProtoReflect.Descriptor instead.
func (*ResultBgpAsPathSegment_Type) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{242, 0}
}

type IsisLspState_PduType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisLspState_PduType) Reset() {
	*x = IsisLspState_PduType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[698]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspState_PduType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspState_PduType) ProtoMessage() {}

func (x *IsisLspState_PduType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[698]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspState_PduType.ProtoReflect.Descriptor instead.
func (*IsisLspState_PduType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{245, 0}
}

type IsisLspV4Prefix_RedistributionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisLspV4Prefix_RedistributionType) Reset() {
	*x = IsisLspV4Prefix_RedistributionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[699]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspV4Prefix_RedistributionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspV4Prefix_RedistributionType) ProtoMessage() {}

func (x *IsisLspV4Prefix_RedistributionType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[699]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspV4Prefix_RedistributionType.ProtoReflect.Descriptor instead.
func (*IsisLspV4Prefix_RedistributionType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{254, 0}
}

type IsisLspV4Prefix_OriginType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisLspV4Prefix_OriginType) Reset() {
	*x = IsisLspV4Prefix_OriginType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[700]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspV4Prefix_OriginType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspV4Prefix_OriginType) ProtoMessage() {}

func (x *IsisLspV4Prefix_OriginType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[700]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspV4Prefix_OriginType.ProtoReflect.Descriptor instead.
func (*IsisLspV4Prefix_OriginType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{254, 1}
}

type IsisLspExtendedV4Prefix_RedistributionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisLspExtendedV4Prefix_RedistributionType) Reset() {
	*x = IsisLspExtendedV4Prefix_RedistributionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[701]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspExtendedV4Prefix_RedistributionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspExtendedV4Prefix_RedistributionType) ProtoMessage() {}

func (x *IsisLspExtendedV4Prefix_RedistributionType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[701]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspExtendedV4Prefix_RedistributionType.ProtoReflect.Descriptor instead.
func (*IsisLspExtendedV4Prefix_RedistributionType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{256, 0}
}

type IsisLspV6Prefix_RedistributionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisLspV6Prefix_RedistributionType) Reset() {
	*x = IsisLspV6Prefix_RedistributionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[702]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspV6Prefix_RedistributionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspV6Prefix_RedistributionType) ProtoMessage() {}

func (x *IsisLspV6Prefix_RedistributionType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[702]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspV6Prefix_RedistributionType.ProtoReflect.Descriptor instead.
func (*IsisLspV6Prefix_RedistributionType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{258, 0}
}

type IsisLspV6Prefix_OriginType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsisLspV6Prefix_OriginType) Reset() {
	*x = IsisLspV6Prefix_OriginType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[703]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsisLspV6Prefix_OriginType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsisLspV6Prefix_OriginType) ProtoMessage() {}

func (x *IsisLspV6Prefix_OriginType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[703]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsisLspV6Prefix_OriginType.ProtoReflect.Descriptor instead.
func (*IsisLspV6Prefix_OriginType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{258, 1}
}

type LldpNeighborsState_ChassisIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LldpNeighborsState_ChassisIdType) Reset() {
	*x = LldpNeighborsState_ChassisIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[704]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighborsState_ChassisIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighborsState_ChassisIdType) ProtoMessage() {}

func (x *LldpNeighborsState_ChassisIdType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[704]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighborsState_ChassisIdType.ProtoReflect.Descriptor instead.
func (*LldpNeighborsState_ChassisIdType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{261, 0}
}

type LldpNeighborsState_PortIdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LldpNeighborsState_PortIdType) Reset() {
	*x = LldpNeighborsState_PortIdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[705]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpNeighborsState_PortIdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpNeighborsState_PortIdType) ProtoMessage() {}

func (x *LldpNeighborsState_PortIdType) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[705]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpNeighborsState_PortIdType.ProtoReflect.Descriptor instead.
func (*LldpNeighborsState_PortIdType) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{261, 1}
}

type LldpCapabilityState_CapabilityName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LldpCapabilityState_CapabilityName) Reset() {
	*x = LldpCapabilityState_CapabilityName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[706]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LldpCapabilityState_CapabilityName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LldpCapabilityState_CapabilityName) ProtoMessage() {}

func (x *LldpCapabilityState_CapabilityName) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[706]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LldpCapabilityState_CapabilityName.ProtoReflect.Descriptor instead.
func (*LldpCapabilityState_CapabilityName) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{263, 0}
}

type RsvpLspState_SessionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RsvpLspState_SessionStatus) Reset() {
	*x = RsvpLspState_SessionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[707]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspState_SessionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspState_SessionStatus) ProtoMessage() {}

func (x *RsvpLspState_SessionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[707]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspState_SessionStatus.ProtoReflect.Descriptor instead.
func (*RsvpLspState_SessionStatus) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{267, 0}
}

type RsvpLspState_LastFlapReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RsvpLspState_LastFlapReason) Reset() {
	*x = RsvpLspState_LastFlapReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[708]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspState_LastFlapReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspState_LastFlapReason) ProtoMessage() {}

func (x *RsvpLspState_LastFlapReason) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[708]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspState_LastFlapReason.ProtoReflect.Descriptor instead.
func (*RsvpLspState_LastFlapReason) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{267, 1}
}

type RsvpLspIpv4Ero_Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RsvpLspIpv4Ero_Type) Reset() {
	*x = RsvpLspIpv4Ero_Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[709]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsvpLspIpv4Ero_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsvpLspIpv4Ero_Type) ProtoMessage() {}

func (x *RsvpLspIpv4Ero_Type) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[709]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsvpLspIpv4Ero_Type.ProtoReflect.Descriptor instead.
func (*RsvpLspIpv4Ero_Type) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{269, 0}
}

type PatternFlowEthernetDst_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowEthernetDst_Choice) Reset() {
	*x = PatternFlowEthernetDst_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[710]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetDst_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetDst_Choice) ProtoMessage() {}

func (x *PatternFlowEthernetDst_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[710]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetDst_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetDst_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{272, 0}
}

type PatternFlowEthernetSrc_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowEthernetSrc_Choice) Reset() {
	*x = PatternFlowEthernetSrc_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[711]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetSrc_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetSrc_Choice) ProtoMessage() {}

func (x *PatternFlowEthernetSrc_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[711]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetSrc_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetSrc_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{274, 0}
}

type PatternFlowEthernetEtherType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowEthernetEtherType_Choice) Reset() {
	*x = PatternFlowEthernetEtherType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[712]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetEtherType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetEtherType_Choice) ProtoMessage() {}

func (x *PatternFlowEthernetEtherType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[712]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetEtherType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetEtherType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{276, 0}
}

type PatternFlowEthernetPfcQueue_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowEthernetPfcQueue_Choice) Reset() {
	*x = PatternFlowEthernetPfcQueue_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[713]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPfcQueue_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPfcQueue_Choice) ProtoMessage() {}

func (x *PatternFlowEthernetPfcQueue_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[713]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPfcQueue_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPfcQueue_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{278, 0}
}

type PatternFlowVlanPriority_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowVlanPriority_Choice) Reset() {
	*x = PatternFlowVlanPriority_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[714]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanPriority_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanPriority_Choice) ProtoMessage() {}

func (x *PatternFlowVlanPriority_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[714]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanPriority_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanPriority_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{280, 0}
}

type PatternFlowVlanCfi_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowVlanCfi_Choice) Reset() {
	*x = PatternFlowVlanCfi_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[715]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanCfi_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanCfi_Choice) ProtoMessage() {}

func (x *PatternFlowVlanCfi_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[715]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanCfi_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanCfi_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{282, 0}
}

type PatternFlowVlanId_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowVlanId_Choice) Reset() {
	*x = PatternFlowVlanId_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[716]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanId_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanId_Choice) ProtoMessage() {}

func (x *PatternFlowVlanId_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[716]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanId_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanId_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{284, 0}
}

type PatternFlowVlanTpid_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowVlanTpid_Choice) Reset() {
	*x = PatternFlowVlanTpid_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[717]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVlanTpid_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVlanTpid_Choice) ProtoMessage() {}

func (x *PatternFlowVlanTpid_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[717]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVlanTpid_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowVlanTpid_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{286, 0}
}

type PatternFlowVxlanFlags_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowVxlanFlags_Choice) Reset() {
	*x = PatternFlowVxlanFlags_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[718]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanFlags_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanFlags_Choice) ProtoMessage() {}

func (x *PatternFlowVxlanFlags_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[718]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanFlags_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanFlags_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{288, 0}
}

type PatternFlowVxlanReserved0_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowVxlanReserved0_Choice) Reset() {
	*x = PatternFlowVxlanReserved0_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[719]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanReserved0_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanReserved0_Choice) ProtoMessage() {}

func (x *PatternFlowVxlanReserved0_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[719]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanReserved0_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanReserved0_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{290, 0}
}

type PatternFlowVxlanVni_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowVxlanVni_Choice) Reset() {
	*x = PatternFlowVxlanVni_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[720]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanVni_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanVni_Choice) ProtoMessage() {}

func (x *PatternFlowVxlanVni_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[720]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanVni_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanVni_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{292, 0}
}

type PatternFlowVxlanReserved1_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowVxlanReserved1_Choice) Reset() {
	*x = PatternFlowVxlanReserved1_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[721]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowVxlanReserved1_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowVxlanReserved1_Choice) ProtoMessage() {}

func (x *PatternFlowVxlanReserved1_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[721]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowVxlanReserved1_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowVxlanReserved1_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{294, 0}
}

type PatternFlowIpv4Version_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4Version_Choice) Reset() {
	*x = PatternFlowIpv4Version_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[722]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Version_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Version_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4Version_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[722]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Version_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Version_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{296, 0}
}

type PatternFlowIpv4HeaderLength_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4HeaderLength_Choice) Reset() {
	*x = PatternFlowIpv4HeaderLength_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[723]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4HeaderLength_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4HeaderLength_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4HeaderLength_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[723]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4HeaderLength_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4HeaderLength_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{298, 0}
}

type PatternFlowIpv4TotalLength_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4TotalLength_Choice) Reset() {
	*x = PatternFlowIpv4TotalLength_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[724]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TotalLength_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TotalLength_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4TotalLength_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[724]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TotalLength_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TotalLength_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{300, 0}
}

type PatternFlowIpv4Identification_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4Identification_Choice) Reset() {
	*x = PatternFlowIpv4Identification_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[725]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Identification_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Identification_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4Identification_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[725]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Identification_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Identification_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{302, 0}
}

type PatternFlowIpv4Reserved_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4Reserved_Choice) Reset() {
	*x = PatternFlowIpv4Reserved_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[726]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Reserved_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Reserved_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4Reserved_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[726]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Reserved_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Reserved_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{304, 0}
}

type PatternFlowIpv4DontFragment_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4DontFragment_Choice) Reset() {
	*x = PatternFlowIpv4DontFragment_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[727]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4DontFragment_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4DontFragment_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4DontFragment_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[727]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4DontFragment_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4DontFragment_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{306, 0}
}

type PatternFlowIpv4MoreFragments_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4MoreFragments_Choice) Reset() {
	*x = PatternFlowIpv4MoreFragments_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[728]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4MoreFragments_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4MoreFragments_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4MoreFragments_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[728]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4MoreFragments_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4MoreFragments_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{308, 0}
}

type PatternFlowIpv4FragmentOffset_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4FragmentOffset_Choice) Reset() {
	*x = PatternFlowIpv4FragmentOffset_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[729]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4FragmentOffset_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4FragmentOffset_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4FragmentOffset_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[729]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4FragmentOffset_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4FragmentOffset_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{310, 0}
}

type PatternFlowIpv4TimeToLive_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4TimeToLive_Choice) Reset() {
	*x = PatternFlowIpv4TimeToLive_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[730]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TimeToLive_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TimeToLive_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4TimeToLive_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[730]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TimeToLive_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TimeToLive_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{312, 0}
}

type PatternFlowIpv4Protocol_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4Protocol_Choice) Reset() {
	*x = PatternFlowIpv4Protocol_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[731]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Protocol_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Protocol_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4Protocol_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[731]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Protocol_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Protocol_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{314, 0}
}

type PatternFlowIpv4HeaderChecksum_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4HeaderChecksum_Choice) Reset() {
	*x = PatternFlowIpv4HeaderChecksum_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[732]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4HeaderChecksum_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4HeaderChecksum_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4HeaderChecksum_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[732]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4HeaderChecksum_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4HeaderChecksum_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{315, 0}
}

type PatternFlowIpv4HeaderChecksum_Generated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4HeaderChecksum_Generated) Reset() {
	*x = PatternFlowIpv4HeaderChecksum_Generated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[733]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4HeaderChecksum_Generated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4HeaderChecksum_Generated) ProtoMessage() {}

func (x *PatternFlowIpv4HeaderChecksum_Generated) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[733]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4HeaderChecksum_Generated.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4HeaderChecksum_Generated) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{315, 1}
}

type PatternFlowIpv4Src_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4Src_Choice) Reset() {
	*x = PatternFlowIpv4Src_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[734]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Src_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Src_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4Src_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[734]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Src_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Src_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{317, 0}
}

type PatternFlowIpv4Dst_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4Dst_Choice) Reset() {
	*x = PatternFlowIpv4Dst_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[735]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4Dst_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4Dst_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4Dst_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[735]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4Dst_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4Dst_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{319, 0}
}

type PatternFlowIpv4PriorityRaw_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4PriorityRaw_Choice) Reset() {
	*x = PatternFlowIpv4PriorityRaw_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[736]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4PriorityRaw_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4PriorityRaw_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4PriorityRaw_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[736]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4PriorityRaw_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4PriorityRaw_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{321, 0}
}

type PatternFlowIpv4DscpPhb_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4DscpPhb_Choice) Reset() {
	*x = PatternFlowIpv4DscpPhb_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[737]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4DscpPhb_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4DscpPhb_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4DscpPhb_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[737]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4DscpPhb_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4DscpPhb_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{323, 0}
}

type PatternFlowIpv4DscpEcn_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4DscpEcn_Choice) Reset() {
	*x = PatternFlowIpv4DscpEcn_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[738]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4DscpEcn_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4DscpEcn_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4DscpEcn_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[738]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4DscpEcn_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4DscpEcn_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{325, 0}
}

type PatternFlowIpv4TosPrecedence_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4TosPrecedence_Choice) Reset() {
	*x = PatternFlowIpv4TosPrecedence_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[739]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosPrecedence_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosPrecedence_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4TosPrecedence_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[739]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosPrecedence_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosPrecedence_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{327, 0}
}

type PatternFlowIpv4TosDelay_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4TosDelay_Choice) Reset() {
	*x = PatternFlowIpv4TosDelay_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[740]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosDelay_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosDelay_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4TosDelay_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[740]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosDelay_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosDelay_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{329, 0}
}

type PatternFlowIpv4TosThroughput_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4TosThroughput_Choice) Reset() {
	*x = PatternFlowIpv4TosThroughput_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[741]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosThroughput_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosThroughput_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4TosThroughput_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[741]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosThroughput_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosThroughput_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{331, 0}
}

type PatternFlowIpv4TosReliability_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4TosReliability_Choice) Reset() {
	*x = PatternFlowIpv4TosReliability_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[742]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosReliability_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosReliability_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4TosReliability_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[742]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosReliability_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosReliability_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{333, 0}
}

type PatternFlowIpv4TosMonetary_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4TosMonetary_Choice) Reset() {
	*x = PatternFlowIpv4TosMonetary_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[743]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosMonetary_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosMonetary_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4TosMonetary_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[743]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosMonetary_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosMonetary_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{335, 0}
}

type PatternFlowIpv4TosUnused_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv4TosUnused_Choice) Reset() {
	*x = PatternFlowIpv4TosUnused_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[744]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv4TosUnused_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv4TosUnused_Choice) ProtoMessage() {}

func (x *PatternFlowIpv4TosUnused_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[744]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv4TosUnused_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv4TosUnused_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{337, 0}
}

type PatternFlowIpv6Version_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv6Version_Choice) Reset() {
	*x = PatternFlowIpv6Version_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[745]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6Version_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6Version_Choice) ProtoMessage() {}

func (x *PatternFlowIpv6Version_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[745]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6Version_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6Version_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{339, 0}
}

type PatternFlowIpv6TrafficClass_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv6TrafficClass_Choice) Reset() {
	*x = PatternFlowIpv6TrafficClass_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[746]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6TrafficClass_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6TrafficClass_Choice) ProtoMessage() {}

func (x *PatternFlowIpv6TrafficClass_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[746]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6TrafficClass_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6TrafficClass_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{341, 0}
}

type PatternFlowIpv6FlowLabel_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv6FlowLabel_Choice) Reset() {
	*x = PatternFlowIpv6FlowLabel_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[747]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6FlowLabel_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6FlowLabel_Choice) ProtoMessage() {}

func (x *PatternFlowIpv6FlowLabel_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[747]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6FlowLabel_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6FlowLabel_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{343, 0}
}

type PatternFlowIpv6PayloadLength_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv6PayloadLength_Choice) Reset() {
	*x = PatternFlowIpv6PayloadLength_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[748]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6PayloadLength_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6PayloadLength_Choice) ProtoMessage() {}

func (x *PatternFlowIpv6PayloadLength_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[748]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6PayloadLength_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6PayloadLength_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{345, 0}
}

type PatternFlowIpv6NextHeader_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv6NextHeader_Choice) Reset() {
	*x = PatternFlowIpv6NextHeader_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[749]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6NextHeader_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6NextHeader_Choice) ProtoMessage() {}

func (x *PatternFlowIpv6NextHeader_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[749]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6NextHeader_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6NextHeader_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{347, 0}
}

type PatternFlowIpv6HopLimit_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv6HopLimit_Choice) Reset() {
	*x = PatternFlowIpv6HopLimit_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[750]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6HopLimit_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6HopLimit_Choice) ProtoMessage() {}

func (x *PatternFlowIpv6HopLimit_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[750]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6HopLimit_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6HopLimit_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{349, 0}
}

type PatternFlowIpv6Src_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv6Src_Choice) Reset() {
	*x = PatternFlowIpv6Src_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[751]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6Src_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6Src_Choice) ProtoMessage() {}

func (x *PatternFlowIpv6Src_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[751]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6Src_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6Src_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{351, 0}
}

type PatternFlowIpv6Dst_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIpv6Dst_Choice) Reset() {
	*x = PatternFlowIpv6Dst_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[752]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIpv6Dst_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIpv6Dst_Choice) ProtoMessage() {}

func (x *PatternFlowIpv6Dst_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[752]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIpv6Dst_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIpv6Dst_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{353, 0}
}

type PatternFlowPfcPauseDst_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPauseDst_Choice) Reset() {
	*x = PatternFlowPfcPauseDst_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[753]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseDst_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseDst_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPauseDst_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[753]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseDst_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseDst_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{355, 0}
}

type PatternFlowPfcPauseSrc_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPauseSrc_Choice) Reset() {
	*x = PatternFlowPfcPauseSrc_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[754]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseSrc_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseSrc_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPauseSrc_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[754]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseSrc_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseSrc_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{357, 0}
}

type PatternFlowPfcPauseEtherType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPauseEtherType_Choice) Reset() {
	*x = PatternFlowPfcPauseEtherType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[755]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseEtherType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseEtherType_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPauseEtherType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[755]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseEtherType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseEtherType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{359, 0}
}

type PatternFlowPfcPauseControlOpCode_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPauseControlOpCode_Choice) Reset() {
	*x = PatternFlowPfcPauseControlOpCode_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[756]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseControlOpCode_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseControlOpCode_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPauseControlOpCode_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[756]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseControlOpCode_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseControlOpCode_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{361, 0}
}

type PatternFlowPfcPauseClassEnableVector_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPauseClassEnableVector_Choice) Reset() {
	*x = PatternFlowPfcPauseClassEnableVector_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[757]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPauseClassEnableVector_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPauseClassEnableVector_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPauseClassEnableVector_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[757]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPauseClassEnableVector_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPauseClassEnableVector_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{363, 0}
}

type PatternFlowPfcPausePauseClass0_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPausePauseClass0_Choice) Reset() {
	*x = PatternFlowPfcPausePauseClass0_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[758]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass0_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass0_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass0_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[758]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass0_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass0_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{365, 0}
}

type PatternFlowPfcPausePauseClass1_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPausePauseClass1_Choice) Reset() {
	*x = PatternFlowPfcPausePauseClass1_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[759]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass1_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass1_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass1_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[759]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass1_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass1_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{367, 0}
}

type PatternFlowPfcPausePauseClass2_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPausePauseClass2_Choice) Reset() {
	*x = PatternFlowPfcPausePauseClass2_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[760]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass2_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass2_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass2_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[760]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass2_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass2_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{369, 0}
}

type PatternFlowPfcPausePauseClass3_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPausePauseClass3_Choice) Reset() {
	*x = PatternFlowPfcPausePauseClass3_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[761]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass3_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass3_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass3_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[761]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass3_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass3_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{371, 0}
}

type PatternFlowPfcPausePauseClass4_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPausePauseClass4_Choice) Reset() {
	*x = PatternFlowPfcPausePauseClass4_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[762]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass4_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass4_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass4_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[762]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass4_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass4_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{373, 0}
}

type PatternFlowPfcPausePauseClass5_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPausePauseClass5_Choice) Reset() {
	*x = PatternFlowPfcPausePauseClass5_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[763]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass5_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass5_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass5_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[763]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass5_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass5_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{375, 0}
}

type PatternFlowPfcPausePauseClass6_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPausePauseClass6_Choice) Reset() {
	*x = PatternFlowPfcPausePauseClass6_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[764]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass6_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass6_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass6_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[764]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass6_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass6_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{377, 0}
}

type PatternFlowPfcPausePauseClass7_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPfcPausePauseClass7_Choice) Reset() {
	*x = PatternFlowPfcPausePauseClass7_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[765]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPfcPausePauseClass7_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPfcPausePauseClass7_Choice) ProtoMessage() {}

func (x *PatternFlowPfcPausePauseClass7_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[765]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPfcPausePauseClass7_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPfcPausePauseClass7_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{379, 0}
}

type PatternFlowEthernetPauseDst_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowEthernetPauseDst_Choice) Reset() {
	*x = PatternFlowEthernetPauseDst_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[766]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseDst_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseDst_Choice) ProtoMessage() {}

func (x *PatternFlowEthernetPauseDst_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[766]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseDst_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseDst_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{381, 0}
}

type PatternFlowEthernetPauseSrc_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowEthernetPauseSrc_Choice) Reset() {
	*x = PatternFlowEthernetPauseSrc_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[767]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseSrc_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseSrc_Choice) ProtoMessage() {}

func (x *PatternFlowEthernetPauseSrc_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[767]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseSrc_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseSrc_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{383, 0}
}

type PatternFlowEthernetPauseEtherType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowEthernetPauseEtherType_Choice) Reset() {
	*x = PatternFlowEthernetPauseEtherType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[768]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseEtherType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseEtherType_Choice) ProtoMessage() {}

func (x *PatternFlowEthernetPauseEtherType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[768]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseEtherType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseEtherType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{385, 0}
}

type PatternFlowEthernetPauseControlOpCode_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowEthernetPauseControlOpCode_Choice) Reset() {
	*x = PatternFlowEthernetPauseControlOpCode_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[769]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseControlOpCode_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseControlOpCode_Choice) ProtoMessage() {}

func (x *PatternFlowEthernetPauseControlOpCode_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[769]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseControlOpCode_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseControlOpCode_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{387, 0}
}

type PatternFlowEthernetPauseTime_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowEthernetPauseTime_Choice) Reset() {
	*x = PatternFlowEthernetPauseTime_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[770]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowEthernetPauseTime_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowEthernetPauseTime_Choice) ProtoMessage() {}

func (x *PatternFlowEthernetPauseTime_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[770]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowEthernetPauseTime_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowEthernetPauseTime_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{389, 0}
}

type PatternFlowTcpSrcPort_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpSrcPort_Choice) Reset() {
	*x = PatternFlowTcpSrcPort_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[771]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpSrcPort_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpSrcPort_Choice) ProtoMessage() {}

func (x *PatternFlowTcpSrcPort_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[771]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpSrcPort_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpSrcPort_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{391, 0}
}

type PatternFlowTcpDstPort_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpDstPort_Choice) Reset() {
	*x = PatternFlowTcpDstPort_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[772]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpDstPort_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpDstPort_Choice) ProtoMessage() {}

func (x *PatternFlowTcpDstPort_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[772]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpDstPort_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpDstPort_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{393, 0}
}

type PatternFlowTcpSeqNum_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpSeqNum_Choice) Reset() {
	*x = PatternFlowTcpSeqNum_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[773]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpSeqNum_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpSeqNum_Choice) ProtoMessage() {}

func (x *PatternFlowTcpSeqNum_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[773]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpSeqNum_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpSeqNum_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{395, 0}
}

type PatternFlowTcpAckNum_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpAckNum_Choice) Reset() {
	*x = PatternFlowTcpAckNum_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[774]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpAckNum_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpAckNum_Choice) ProtoMessage() {}

func (x *PatternFlowTcpAckNum_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[774]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpAckNum_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpAckNum_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{397, 0}
}

type PatternFlowTcpDataOffset_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpDataOffset_Choice) Reset() {
	*x = PatternFlowTcpDataOffset_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[775]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpDataOffset_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpDataOffset_Choice) ProtoMessage() {}

func (x *PatternFlowTcpDataOffset_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[775]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpDataOffset_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpDataOffset_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{399, 0}
}

type PatternFlowTcpEcnNs_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpEcnNs_Choice) Reset() {
	*x = PatternFlowTcpEcnNs_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[776]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpEcnNs_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpEcnNs_Choice) ProtoMessage() {}

func (x *PatternFlowTcpEcnNs_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[776]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpEcnNs_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpEcnNs_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{401, 0}
}

type PatternFlowTcpEcnCwr_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpEcnCwr_Choice) Reset() {
	*x = PatternFlowTcpEcnCwr_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[777]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpEcnCwr_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpEcnCwr_Choice) ProtoMessage() {}

func (x *PatternFlowTcpEcnCwr_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[777]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpEcnCwr_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpEcnCwr_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{403, 0}
}

type PatternFlowTcpEcnEcho_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpEcnEcho_Choice) Reset() {
	*x = PatternFlowTcpEcnEcho_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[778]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpEcnEcho_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpEcnEcho_Choice) ProtoMessage() {}

func (x *PatternFlowTcpEcnEcho_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[778]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpEcnEcho_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpEcnEcho_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{405, 0}
}

type PatternFlowTcpCtlUrg_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpCtlUrg_Choice) Reset() {
	*x = PatternFlowTcpCtlUrg_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[779]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlUrg_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlUrg_Choice) ProtoMessage() {}

func (x *PatternFlowTcpCtlUrg_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[779]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlUrg_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlUrg_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{407, 0}
}

type PatternFlowTcpCtlAck_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpCtlAck_Choice) Reset() {
	*x = PatternFlowTcpCtlAck_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[780]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlAck_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlAck_Choice) ProtoMessage() {}

func (x *PatternFlowTcpCtlAck_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[780]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlAck_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlAck_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{409, 0}
}

type PatternFlowTcpCtlPsh_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpCtlPsh_Choice) Reset() {
	*x = PatternFlowTcpCtlPsh_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[781]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlPsh_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlPsh_Choice) ProtoMessage() {}

func (x *PatternFlowTcpCtlPsh_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[781]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlPsh_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlPsh_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{411, 0}
}

type PatternFlowTcpCtlRst_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpCtlRst_Choice) Reset() {
	*x = PatternFlowTcpCtlRst_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[782]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlRst_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlRst_Choice) ProtoMessage() {}

func (x *PatternFlowTcpCtlRst_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[782]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlRst_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlRst_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{413, 0}
}

type PatternFlowTcpCtlSyn_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpCtlSyn_Choice) Reset() {
	*x = PatternFlowTcpCtlSyn_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[783]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlSyn_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlSyn_Choice) ProtoMessage() {}

func (x *PatternFlowTcpCtlSyn_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[783]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlSyn_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlSyn_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{415, 0}
}

type PatternFlowTcpCtlFin_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpCtlFin_Choice) Reset() {
	*x = PatternFlowTcpCtlFin_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[784]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpCtlFin_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpCtlFin_Choice) ProtoMessage() {}

func (x *PatternFlowTcpCtlFin_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[784]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpCtlFin_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpCtlFin_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{417, 0}
}

type PatternFlowTcpWindow_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowTcpWindow_Choice) Reset() {
	*x = PatternFlowTcpWindow_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[785]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowTcpWindow_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowTcpWindow_Choice) ProtoMessage() {}

func (x *PatternFlowTcpWindow_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[785]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowTcpWindow_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowTcpWindow_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{419, 0}
}

type PatternFlowUdpSrcPort_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowUdpSrcPort_Choice) Reset() {
	*x = PatternFlowUdpSrcPort_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[786]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpSrcPort_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpSrcPort_Choice) ProtoMessage() {}

func (x *PatternFlowUdpSrcPort_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[786]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpSrcPort_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpSrcPort_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{421, 0}
}

type PatternFlowUdpDstPort_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowUdpDstPort_Choice) Reset() {
	*x = PatternFlowUdpDstPort_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[787]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpDstPort_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpDstPort_Choice) ProtoMessage() {}

func (x *PatternFlowUdpDstPort_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[787]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpDstPort_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpDstPort_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{423, 0}
}

type PatternFlowUdpLength_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowUdpLength_Choice) Reset() {
	*x = PatternFlowUdpLength_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[788]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpLength_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpLength_Choice) ProtoMessage() {}

func (x *PatternFlowUdpLength_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[788]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpLength_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpLength_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{425, 0}
}

type PatternFlowUdpChecksum_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowUdpChecksum_Choice) Reset() {
	*x = PatternFlowUdpChecksum_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[789]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpChecksum_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpChecksum_Choice) ProtoMessage() {}

func (x *PatternFlowUdpChecksum_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[789]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpChecksum_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpChecksum_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{426, 0}
}

type PatternFlowUdpChecksum_Generated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowUdpChecksum_Generated) Reset() {
	*x = PatternFlowUdpChecksum_Generated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[790]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowUdpChecksum_Generated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowUdpChecksum_Generated) ProtoMessage() {}

func (x *PatternFlowUdpChecksum_Generated) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[790]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowUdpChecksum_Generated.ProtoReflect.Descriptor instead.
func (*PatternFlowUdpChecksum_Generated) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{426, 1}
}

type PatternFlowGreChecksumPresent_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGreChecksumPresent_Choice) Reset() {
	*x = PatternFlowGreChecksumPresent_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[791]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreChecksumPresent_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreChecksumPresent_Choice) ProtoMessage() {}

func (x *PatternFlowGreChecksumPresent_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[791]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreChecksumPresent_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGreChecksumPresent_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{428, 0}
}

type PatternFlowGreReserved0_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGreReserved0_Choice) Reset() {
	*x = PatternFlowGreReserved0_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[792]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreReserved0_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreReserved0_Choice) ProtoMessage() {}

func (x *PatternFlowGreReserved0_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[792]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreReserved0_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGreReserved0_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{430, 0}
}

type PatternFlowGreVersion_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGreVersion_Choice) Reset() {
	*x = PatternFlowGreVersion_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[793]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreVersion_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreVersion_Choice) ProtoMessage() {}

func (x *PatternFlowGreVersion_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[793]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreVersion_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGreVersion_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{432, 0}
}

type PatternFlowGreProtocol_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGreProtocol_Choice) Reset() {
	*x = PatternFlowGreProtocol_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[794]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreProtocol_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreProtocol_Choice) ProtoMessage() {}

func (x *PatternFlowGreProtocol_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[794]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreProtocol_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGreProtocol_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{434, 0}
}

type PatternFlowGreChecksum_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGreChecksum_Choice) Reset() {
	*x = PatternFlowGreChecksum_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[795]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreChecksum_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreChecksum_Choice) ProtoMessage() {}

func (x *PatternFlowGreChecksum_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[795]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreChecksum_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGreChecksum_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{435, 0}
}

type PatternFlowGreChecksum_Generated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGreChecksum_Generated) Reset() {
	*x = PatternFlowGreChecksum_Generated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[796]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreChecksum_Generated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreChecksum_Generated) ProtoMessage() {}

func (x *PatternFlowGreChecksum_Generated) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[796]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreChecksum_Generated.ProtoReflect.Descriptor instead.
func (*PatternFlowGreChecksum_Generated) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{435, 1}
}

type PatternFlowGreReserved1_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGreReserved1_Choice) Reset() {
	*x = PatternFlowGreReserved1_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[797]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGreReserved1_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGreReserved1_Choice) ProtoMessage() {}

func (x *PatternFlowGreReserved1_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[797]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGreReserved1_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGreReserved1_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{437, 0}
}

type PatternFlowGtpv1Version_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1Version_Choice) Reset() {
	*x = PatternFlowGtpv1Version_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[798]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1Version_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1Version_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1Version_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[798]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1Version_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1Version_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{439, 0}
}

type PatternFlowGtpv1ProtocolType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1ProtocolType_Choice) Reset() {
	*x = PatternFlowGtpv1ProtocolType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[799]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1ProtocolType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1ProtocolType_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1ProtocolType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[799]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1ProtocolType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1ProtocolType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{441, 0}
}

type PatternFlowGtpv1Reserved_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1Reserved_Choice) Reset() {
	*x = PatternFlowGtpv1Reserved_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[800]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1Reserved_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1Reserved_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1Reserved_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[800]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1Reserved_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1Reserved_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{443, 0}
}

type PatternFlowGtpv1EFlag_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1EFlag_Choice) Reset() {
	*x = PatternFlowGtpv1EFlag_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[801]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1EFlag_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1EFlag_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1EFlag_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[801]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1EFlag_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1EFlag_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{445, 0}
}

type PatternFlowGtpv1SFlag_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1SFlag_Choice) Reset() {
	*x = PatternFlowGtpv1SFlag_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[802]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1SFlag_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1SFlag_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1SFlag_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[802]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1SFlag_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1SFlag_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{447, 0}
}

type PatternFlowGtpv1PnFlag_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1PnFlag_Choice) Reset() {
	*x = PatternFlowGtpv1PnFlag_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[803]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1PnFlag_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1PnFlag_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1PnFlag_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[803]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1PnFlag_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1PnFlag_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{449, 0}
}

type PatternFlowGtpv1MessageType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1MessageType_Choice) Reset() {
	*x = PatternFlowGtpv1MessageType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[804]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1MessageType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1MessageType_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1MessageType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[804]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1MessageType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1MessageType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{451, 0}
}

type PatternFlowGtpv1MessageLength_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1MessageLength_Choice) Reset() {
	*x = PatternFlowGtpv1MessageLength_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[805]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1MessageLength_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1MessageLength_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1MessageLength_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[805]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1MessageLength_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1MessageLength_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{453, 0}
}

type PatternFlowGtpv1Teid_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1Teid_Choice) Reset() {
	*x = PatternFlowGtpv1Teid_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[806]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1Teid_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1Teid_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1Teid_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[806]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1Teid_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1Teid_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{455, 0}
}

type PatternFlowGtpv1SquenceNumber_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1SquenceNumber_Choice) Reset() {
	*x = PatternFlowGtpv1SquenceNumber_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[807]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1SquenceNumber_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1SquenceNumber_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1SquenceNumber_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[807]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1SquenceNumber_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1SquenceNumber_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{457, 0}
}

type PatternFlowGtpv1NPduNumber_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1NPduNumber_Choice) Reset() {
	*x = PatternFlowGtpv1NPduNumber_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[808]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1NPduNumber_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1NPduNumber_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1NPduNumber_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[808]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1NPduNumber_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1NPduNumber_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{459, 0}
}

type PatternFlowGtpv1NextExtensionHeaderType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv1NextExtensionHeaderType_Choice) Reset() {
	*x = PatternFlowGtpv1NextExtensionHeaderType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[809]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv1NextExtensionHeaderType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv1NextExtensionHeaderType_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv1NextExtensionHeaderType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[809]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv1NextExtensionHeaderType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv1NextExtensionHeaderType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{461, 0}
}

type PatternFlowGtpExtensionExtensionLength_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpExtensionExtensionLength_Choice) Reset() {
	*x = PatternFlowGtpExtensionExtensionLength_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[810]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpExtensionExtensionLength_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpExtensionExtensionLength_Choice) ProtoMessage() {}

func (x *PatternFlowGtpExtensionExtensionLength_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[810]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpExtensionExtensionLength_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpExtensionExtensionLength_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{463, 0}
}

type PatternFlowGtpExtensionContents_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpExtensionContents_Choice) Reset() {
	*x = PatternFlowGtpExtensionContents_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[811]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpExtensionContents_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpExtensionContents_Choice) ProtoMessage() {}

func (x *PatternFlowGtpExtensionContents_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[811]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpExtensionContents_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpExtensionContents_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{465, 0}
}

type PatternFlowGtpExtensionNextExtensionHeader_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpExtensionNextExtensionHeader_Choice) Reset() {
	*x = PatternFlowGtpExtensionNextExtensionHeader_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[812]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpExtensionNextExtensionHeader_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpExtensionNextExtensionHeader_Choice) ProtoMessage() {}

func (x *PatternFlowGtpExtensionNextExtensionHeader_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[812]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpExtensionNextExtensionHeader_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpExtensionNextExtensionHeader_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{467, 0}
}

type PatternFlowGtpv2Version_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv2Version_Choice) Reset() {
	*x = PatternFlowGtpv2Version_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[813]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2Version_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2Version_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv2Version_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[813]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2Version_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2Version_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{469, 0}
}

type PatternFlowGtpv2PiggybackingFlag_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv2PiggybackingFlag_Choice) Reset() {
	*x = PatternFlowGtpv2PiggybackingFlag_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[814]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2PiggybackingFlag_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2PiggybackingFlag_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv2PiggybackingFlag_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[814]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2PiggybackingFlag_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2PiggybackingFlag_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{471, 0}
}

type PatternFlowGtpv2TeidFlag_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv2TeidFlag_Choice) Reset() {
	*x = PatternFlowGtpv2TeidFlag_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[815]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2TeidFlag_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2TeidFlag_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv2TeidFlag_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[815]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2TeidFlag_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2TeidFlag_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{473, 0}
}

type PatternFlowGtpv2Spare1_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv2Spare1_Choice) Reset() {
	*x = PatternFlowGtpv2Spare1_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[816]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2Spare1_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2Spare1_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv2Spare1_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[816]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2Spare1_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2Spare1_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{475, 0}
}

type PatternFlowGtpv2MessageType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv2MessageType_Choice) Reset() {
	*x = PatternFlowGtpv2MessageType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[817]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2MessageType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2MessageType_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv2MessageType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[817]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2MessageType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2MessageType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{477, 0}
}

type PatternFlowGtpv2MessageLength_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv2MessageLength_Choice) Reset() {
	*x = PatternFlowGtpv2MessageLength_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[818]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2MessageLength_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2MessageLength_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv2MessageLength_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[818]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2MessageLength_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2MessageLength_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{479, 0}
}

type PatternFlowGtpv2Teid_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv2Teid_Choice) Reset() {
	*x = PatternFlowGtpv2Teid_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[819]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2Teid_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2Teid_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv2Teid_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[819]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2Teid_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2Teid_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{481, 0}
}

type PatternFlowGtpv2SequenceNumber_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv2SequenceNumber_Choice) Reset() {
	*x = PatternFlowGtpv2SequenceNumber_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[820]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2SequenceNumber_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2SequenceNumber_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv2SequenceNumber_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[820]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2SequenceNumber_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2SequenceNumber_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{483, 0}
}

type PatternFlowGtpv2Spare2_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowGtpv2Spare2_Choice) Reset() {
	*x = PatternFlowGtpv2Spare2_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[821]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowGtpv2Spare2_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowGtpv2Spare2_Choice) ProtoMessage() {}

func (x *PatternFlowGtpv2Spare2_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[821]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowGtpv2Spare2_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowGtpv2Spare2_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{485, 0}
}

type PatternFlowArpHardwareType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowArpHardwareType_Choice) Reset() {
	*x = PatternFlowArpHardwareType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[822]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpHardwareType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpHardwareType_Choice) ProtoMessage() {}

func (x *PatternFlowArpHardwareType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[822]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpHardwareType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowArpHardwareType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{487, 0}
}

type PatternFlowArpProtocolType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowArpProtocolType_Choice) Reset() {
	*x = PatternFlowArpProtocolType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[823]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpProtocolType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpProtocolType_Choice) ProtoMessage() {}

func (x *PatternFlowArpProtocolType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[823]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpProtocolType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowArpProtocolType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{489, 0}
}

type PatternFlowArpHardwareLength_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowArpHardwareLength_Choice) Reset() {
	*x = PatternFlowArpHardwareLength_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[824]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpHardwareLength_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpHardwareLength_Choice) ProtoMessage() {}

func (x *PatternFlowArpHardwareLength_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[824]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpHardwareLength_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowArpHardwareLength_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{491, 0}
}

type PatternFlowArpProtocolLength_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowArpProtocolLength_Choice) Reset() {
	*x = PatternFlowArpProtocolLength_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[825]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpProtocolLength_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpProtocolLength_Choice) ProtoMessage() {}

func (x *PatternFlowArpProtocolLength_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[825]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpProtocolLength_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowArpProtocolLength_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{493, 0}
}

type PatternFlowArpOperation_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowArpOperation_Choice) Reset() {
	*x = PatternFlowArpOperation_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[826]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpOperation_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpOperation_Choice) ProtoMessage() {}

func (x *PatternFlowArpOperation_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[826]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpOperation_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowArpOperation_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{495, 0}
}

type PatternFlowArpSenderHardwareAddr_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowArpSenderHardwareAddr_Choice) Reset() {
	*x = PatternFlowArpSenderHardwareAddr_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[827]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpSenderHardwareAddr_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpSenderHardwareAddr_Choice) ProtoMessage() {}

func (x *PatternFlowArpSenderHardwareAddr_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[827]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpSenderHardwareAddr_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowArpSenderHardwareAddr_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{497, 0}
}

type PatternFlowArpSenderProtocolAddr_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowArpSenderProtocolAddr_Choice) Reset() {
	*x = PatternFlowArpSenderProtocolAddr_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[828]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpSenderProtocolAddr_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpSenderProtocolAddr_Choice) ProtoMessage() {}

func (x *PatternFlowArpSenderProtocolAddr_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[828]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpSenderProtocolAddr_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowArpSenderProtocolAddr_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{499, 0}
}

type PatternFlowArpTargetHardwareAddr_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowArpTargetHardwareAddr_Choice) Reset() {
	*x = PatternFlowArpTargetHardwareAddr_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[829]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpTargetHardwareAddr_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpTargetHardwareAddr_Choice) ProtoMessage() {}

func (x *PatternFlowArpTargetHardwareAddr_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[829]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpTargetHardwareAddr_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowArpTargetHardwareAddr_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{501, 0}
}

type PatternFlowArpTargetProtocolAddr_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowArpTargetProtocolAddr_Choice) Reset() {
	*x = PatternFlowArpTargetProtocolAddr_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[830]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowArpTargetProtocolAddr_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowArpTargetProtocolAddr_Choice) ProtoMessage() {}

func (x *PatternFlowArpTargetProtocolAddr_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[830]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowArpTargetProtocolAddr_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowArpTargetProtocolAddr_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{503, 0}
}

type PatternFlowIcmpEchoType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpEchoType_Choice) Reset() {
	*x = PatternFlowIcmpEchoType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[831]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoType_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpEchoType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[831]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{505, 0}
}

type PatternFlowIcmpEchoCode_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpEchoCode_Choice) Reset() {
	*x = PatternFlowIcmpEchoCode_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[832]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoCode_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoCode_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpEchoCode_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[832]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoCode_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoCode_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{507, 0}
}

type PatternFlowIcmpEchoChecksum_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpEchoChecksum_Choice) Reset() {
	*x = PatternFlowIcmpEchoChecksum_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[833]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoChecksum_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoChecksum_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpEchoChecksum_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[833]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoChecksum_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoChecksum_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{508, 0}
}

type PatternFlowIcmpEchoChecksum_Generated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpEchoChecksum_Generated) Reset() {
	*x = PatternFlowIcmpEchoChecksum_Generated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[834]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoChecksum_Generated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoChecksum_Generated) ProtoMessage() {}

func (x *PatternFlowIcmpEchoChecksum_Generated) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[834]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoChecksum_Generated.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoChecksum_Generated) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{508, 1}
}

type PatternFlowIcmpEchoIdentifier_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpEchoIdentifier_Choice) Reset() {
	*x = PatternFlowIcmpEchoIdentifier_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[835]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoIdentifier_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoIdentifier_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpEchoIdentifier_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[835]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoIdentifier_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoIdentifier_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{510, 0}
}

type PatternFlowIcmpEchoSequenceNumber_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpEchoSequenceNumber_Choice) Reset() {
	*x = PatternFlowIcmpEchoSequenceNumber_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[836]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpEchoSequenceNumber_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpEchoSequenceNumber_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpEchoSequenceNumber_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[836]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpEchoSequenceNumber_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpEchoSequenceNumber_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{512, 0}
}

type PatternFlowIcmpCommonChecksum_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpCommonChecksum_Choice) Reset() {
	*x = PatternFlowIcmpCommonChecksum_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[837]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpCommonChecksum_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpCommonChecksum_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpCommonChecksum_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[837]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpCommonChecksum_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpCommonChecksum_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{513, 0}
}

type PatternFlowIcmpCommonChecksum_Generated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpCommonChecksum_Generated) Reset() {
	*x = PatternFlowIcmpCommonChecksum_Generated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[838]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpCommonChecksum_Generated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpCommonChecksum_Generated) ProtoMessage() {}

func (x *PatternFlowIcmpCommonChecksum_Generated) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[838]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpCommonChecksum_Generated.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpCommonChecksum_Generated) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{513, 1}
}

type PatternFlowIcmpNextFieldsIdentifier_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpNextFieldsIdentifier_Choice) Reset() {
	*x = PatternFlowIcmpNextFieldsIdentifier_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[839]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpNextFieldsIdentifier_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpNextFieldsIdentifier_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpNextFieldsIdentifier_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[839]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpNextFieldsIdentifier_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpNextFieldsIdentifier_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{515, 0}
}

type PatternFlowIcmpNextFieldsSequenceNumber_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpNextFieldsSequenceNumber_Choice) Reset() {
	*x = PatternFlowIcmpNextFieldsSequenceNumber_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[840]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpNextFieldsSequenceNumber_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpNextFieldsSequenceNumber_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpNextFieldsSequenceNumber_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[840]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpNextFieldsSequenceNumber_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpNextFieldsSequenceNumber_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{517, 0}
}

type PatternFlowIcmpv6EchoType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpv6EchoType_Choice) Reset() {
	*x = PatternFlowIcmpv6EchoType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[841]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoType_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[841]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{519, 0}
}

type PatternFlowIcmpv6EchoCode_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpv6EchoCode_Choice) Reset() {
	*x = PatternFlowIcmpv6EchoCode_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[842]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoCode_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoCode_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoCode_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[842]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoCode_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoCode_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{521, 0}
}

type PatternFlowIcmpv6EchoIdentifier_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpv6EchoIdentifier_Choice) Reset() {
	*x = PatternFlowIcmpv6EchoIdentifier_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[843]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoIdentifier_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoIdentifier_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoIdentifier_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[843]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoIdentifier_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoIdentifier_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{523, 0}
}

type PatternFlowIcmpv6EchoSequenceNumber_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpv6EchoSequenceNumber_Choice) Reset() {
	*x = PatternFlowIcmpv6EchoSequenceNumber_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[844]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoSequenceNumber_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoSequenceNumber_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoSequenceNumber_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[844]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoSequenceNumber_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoSequenceNumber_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{525, 0}
}

type PatternFlowIcmpv6EchoChecksum_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpv6EchoChecksum_Choice) Reset() {
	*x = PatternFlowIcmpv6EchoChecksum_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[845]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoChecksum_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoChecksum_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoChecksum_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[845]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoChecksum_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoChecksum_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{526, 0}
}

type PatternFlowIcmpv6EchoChecksum_Generated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpv6EchoChecksum_Generated) Reset() {
	*x = PatternFlowIcmpv6EchoChecksum_Generated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[846]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6EchoChecksum_Generated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6EchoChecksum_Generated) ProtoMessage() {}

func (x *PatternFlowIcmpv6EchoChecksum_Generated) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[846]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6EchoChecksum_Generated.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6EchoChecksum_Generated) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{526, 1}
}

type PatternFlowIcmpv6CommonChecksum_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpv6CommonChecksum_Choice) Reset() {
	*x = PatternFlowIcmpv6CommonChecksum_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[847]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6CommonChecksum_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6CommonChecksum_Choice) ProtoMessage() {}

func (x *PatternFlowIcmpv6CommonChecksum_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[847]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6CommonChecksum_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6CommonChecksum_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{527, 0}
}

type PatternFlowIcmpv6CommonChecksum_Generated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIcmpv6CommonChecksum_Generated) Reset() {
	*x = PatternFlowIcmpv6CommonChecksum_Generated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[848]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIcmpv6CommonChecksum_Generated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIcmpv6CommonChecksum_Generated) ProtoMessage() {}

func (x *PatternFlowIcmpv6CommonChecksum_Generated) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[848]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIcmpv6CommonChecksum_Generated.ProtoReflect.Descriptor instead.
func (*PatternFlowIcmpv6CommonChecksum_Generated) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{527, 1}
}

type PatternFlowPppAddress_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPppAddress_Choice) Reset() {
	*x = PatternFlowPppAddress_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[849]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPppAddress_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPppAddress_Choice) ProtoMessage() {}

func (x *PatternFlowPppAddress_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[849]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPppAddress_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPppAddress_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{529, 0}
}

type PatternFlowPppControl_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPppControl_Choice) Reset() {
	*x = PatternFlowPppControl_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[850]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPppControl_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPppControl_Choice) ProtoMessage() {}

func (x *PatternFlowPppControl_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[850]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPppControl_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPppControl_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{531, 0}
}

type PatternFlowPppProtocolType_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowPppProtocolType_Choice) Reset() {
	*x = PatternFlowPppProtocolType_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[851]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowPppProtocolType_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowPppProtocolType_Choice) ProtoMessage() {}

func (x *PatternFlowPppProtocolType_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[851]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowPppProtocolType_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowPppProtocolType_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{533, 0}
}

type PatternFlowIgmpv1Version_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIgmpv1Version_Choice) Reset() {
	*x = PatternFlowIgmpv1Version_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[852]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1Version_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1Version_Choice) ProtoMessage() {}

func (x *PatternFlowIgmpv1Version_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[852]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1Version_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1Version_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{535, 0}
}

type PatternFlowIgmpv1Type_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIgmpv1Type_Choice) Reset() {
	*x = PatternFlowIgmpv1Type_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[853]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1Type_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1Type_Choice) ProtoMessage() {}

func (x *PatternFlowIgmpv1Type_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[853]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1Type_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1Type_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{537, 0}
}

type PatternFlowIgmpv1Unused_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIgmpv1Unused_Choice) Reset() {
	*x = PatternFlowIgmpv1Unused_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[854]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1Unused_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1Unused_Choice) ProtoMessage() {}

func (x *PatternFlowIgmpv1Unused_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[854]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1Unused_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1Unused_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{539, 0}
}

type PatternFlowIgmpv1Checksum_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIgmpv1Checksum_Choice) Reset() {
	*x = PatternFlowIgmpv1Checksum_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[855]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1Checksum_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1Checksum_Choice) ProtoMessage() {}

func (x *PatternFlowIgmpv1Checksum_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[855]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1Checksum_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1Checksum_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{540, 0}
}

type PatternFlowIgmpv1Checksum_Generated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIgmpv1Checksum_Generated) Reset() {
	*x = PatternFlowIgmpv1Checksum_Generated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[856]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1Checksum_Generated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1Checksum_Generated) ProtoMessage() {}

func (x *PatternFlowIgmpv1Checksum_Generated) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[856]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1Checksum_Generated.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1Checksum_Generated) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{540, 1}
}

type PatternFlowIgmpv1GroupAddress_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowIgmpv1GroupAddress_Choice) Reset() {
	*x = PatternFlowIgmpv1GroupAddress_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[857]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowIgmpv1GroupAddress_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowIgmpv1GroupAddress_Choice) ProtoMessage() {}

func (x *PatternFlowIgmpv1GroupAddress_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[857]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowIgmpv1GroupAddress_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowIgmpv1GroupAddress_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{542, 0}
}

type PatternFlowMplsLabel_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowMplsLabel_Choice) Reset() {
	*x = PatternFlowMplsLabel_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[858]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsLabel_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsLabel_Choice) ProtoMessage() {}

func (x *PatternFlowMplsLabel_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[858]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsLabel_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsLabel_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{544, 0}
}

type PatternFlowMplsTrafficClass_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowMplsTrafficClass_Choice) Reset() {
	*x = PatternFlowMplsTrafficClass_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[859]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsTrafficClass_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsTrafficClass_Choice) ProtoMessage() {}

func (x *PatternFlowMplsTrafficClass_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[859]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsTrafficClass_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsTrafficClass_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{546, 0}
}

type PatternFlowMplsBottomOfStack_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowMplsBottomOfStack_Choice) Reset() {
	*x = PatternFlowMplsBottomOfStack_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[860]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsBottomOfStack_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsBottomOfStack_Choice) ProtoMessage() {}

func (x *PatternFlowMplsBottomOfStack_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[860]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsBottomOfStack_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsBottomOfStack_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{548, 0}
}

type PatternFlowMplsTimeToLive_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PatternFlowMplsTimeToLive_Choice) Reset() {
	*x = PatternFlowMplsTimeToLive_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_otg_proto_msgTypes[861]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternFlowMplsTimeToLive_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternFlowMplsTimeToLive_Choice) ProtoMessage() {}

func (x *PatternFlowMplsTimeToLive_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_otg_proto_msgTypes[861]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternFlowMplsTimeToLive_Choice.ProtoReflect.Descriptor instead.
func (*PatternFlowMplsTimeToLive_Choice) Descriptor() ([]byte, []int) {
	return file_otg_proto_rawDescGZIP(), []int{550, 0}
}

var File_otg_proto protoreflect.FileDescriptor

var file_otg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6f, 0x74, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6f, 0x74, 0x67,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf0, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x4c, 0x61, 0x67, 0x52, 0x04, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x31, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x12, 0x28,
	0x0a, 0x08, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73,
	0x12, 0x27, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x04,
	0x6c, 0x6c, 0x64, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x52, 0x04, 0x6c, 0x6c, 0x64, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x04, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xad, 0x01, 0x0a, 0x03, 0x4c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c,
	0x61, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x22, 0x8f, 0x01, 0x0a, 0x07, 0x4c, 0x61, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x61,
	0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c,
	0x61, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x63, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61,
	0x63, 0x70, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c,
	0x61, 0x63, 0x70, 0x22, 0x84, 0x02, 0x0a, 0x0b, 0x4c, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x67, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x4c, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x61,
	0x63, 0x70, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x88,
	0x01, 0x01, 0x1a, 0x37, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2d, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x22, 0x3a, 0x0a, 0x11, 0x4c, 0x61,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12,
	0x1a, 0x0a, 0x06, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x0f, 0x4c, 0x61, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x61, 0x63, 0x70, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x13, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x88,
	0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xf1,
	0x03, 0x0a, 0x0b, 0x4c, 0x61, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x63, 0x70, 0x12, 0x2f,
	0x0a, 0x11, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x11,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x4c, 0x61, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x61, 0x63, 0x70, 0x2e, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x02, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x6c, 0x61, 0x63, 0x70, 0x64, 0x75, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x1a,
	0x6c, 0x61, 0x63, 0x70, 0x64, 0x75, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x61, 0x63, 0x70, 0x64, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x63, 0x70, 0x64, 0x75, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x41, 0x0a, 0x0d, 0x41, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x30, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x20, 0x0a,
	0x1e, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x64, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x64, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x15, 0x0a, 0x03, 0x6d,
	0x74, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6c,
	0x61, 0x6e, 0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6d, 0x74, 0x75, 0x22, 0xe9, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x76,
	0x34, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x76, 0x36, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6c, 0x61,
	0x6e, 0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x74,
	0x75, 0x22, 0xc1, 0x02, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x07, 0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x09, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x1a, 0x4e, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x03,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x6c, 0x61, 0x6e, 0x2e, 0x54, 0x70, 0x69, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x56, 0x0a, 0x04, 0x54, 0x70, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x78, 0x38, 0x31, 0x30, 0x30, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x78, 0x38, 0x38, 0x61, 0x38, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x78, 0x39, 0x31,
	0x30, 0x30, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x78, 0x39, 0x32, 0x30, 0x30, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x78, 0x39, 0x33, 0x30, 0x30, 0x10, 0x05, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x70, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x70, 0x76, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x3f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x70, 0x76, 0x34, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x41, 0x43,
	0x48, 0x00, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x61, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x6e, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x70, 0x76, 0x34, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x41, 0x43,
	0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x76,
	0x34, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x41, 0x43, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x36, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0x2c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcd,
	0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x76, 0x36, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x76, 0x36, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x41, 0x43, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x4d, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x6d, 0x61, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x6e,
	0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe4,
	0x01, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x76, 0x36, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x41, 0x43, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x76, 0x36, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d,
	0x41, 0x43, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x1a,
	0x36, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa5, 0x07, 0x0a, 0x06, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x31,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63,
	0x75, 0x6f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x6d, 0x74, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x03, 0x6d, 0x74, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x69, 0x65, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x11, 0x69, 0x65, 0x65, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x41, 0x75, 0x74, 0x6f, 0x4e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x06, 0x52, 0x0f, 0x61, 0x75,
	0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x31, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x07,
	0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x95, 0x02, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x8b,
	0x02, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x31, 0x30, 0x5f, 0x66, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x31, 0x30, 0x5f, 0x68, 0x64, 0x5f, 0x6d, 0x62,
	0x70, 0x73, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x31, 0x30,
	0x30, 0x5f, 0x66, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x68, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x31, 0x5f, 0x67, 0x62,
	0x70, 0x73, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x31, 0x30,
	0x5f, 0x67, 0x62, 0x70, 0x73, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x32, 0x35, 0x5f, 0x67, 0x62, 0x70, 0x73, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x34, 0x30, 0x5f, 0x67, 0x62, 0x70, 0x73, 0x10, 0x08, 0x12, 0x11, 0x0a,
	0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x35, 0x30, 0x5f, 0x67, 0x62, 0x70, 0x73, 0x10, 0x09,
	0x12, 0x12, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x67, 0x62,
	0x70, 0x73, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x32, 0x30,
	0x30, 0x5f, 0x67, 0x62, 0x70, 0x73, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x5f, 0x34, 0x30, 0x30, 0x5f, 0x67, 0x62, 0x70, 0x73, 0x10, 0x0c, 0x1a, 0x42, 0x0a, 0x05,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x39, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x63, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x69,
	0x62, 0x65, 0x72, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x67, 0x6d, 0x69, 0x69, 0x10, 0x03,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63,
	0x75, 0x6f, 0x75, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x74, 0x75, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x69, 0x65, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x89, 0x04,
	0x0a, 0x15, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x31, 0x30, 0x30, 0x30, 0x4d, 0x62, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x66, 0x64,
	0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x12, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x31, 0x30, 0x30, 0x46, 0x64, 0x4d, 0x62, 0x70,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x68, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x12, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x31, 0x30, 0x30, 0x48, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x31, 0x30, 0x5f, 0x66, 0x64, 0x5f,
	0x6d, 0x62, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x11, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x31, 0x30, 0x46, 0x64, 0x4d, 0x62, 0x70, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f,
	0x31, 0x30, 0x5f, 0x68, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x31, 0x30, 0x48,
	0x64, 0x4d, 0x62, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x73, 0x5f, 0x66, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x06, 0x52, 0x05, 0x72, 0x73, 0x46, 0x65, 0x63, 0x88, 0x01, 0x01, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x31, 0x30, 0x30,
	0x30, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x66, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x31,
	0x30, 0x30, 0x5f, 0x68, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x31, 0x30, 0x5f, 0x66, 0x64, 0x5f, 0x6d,
	0x62, 0x70, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x5f, 0x31, 0x30, 0x5f, 0x68, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x73, 0x5f, 0x66, 0x65, 0x63, 0x22, 0x89, 0x03, 0x0a, 0x11, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x31, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x2e, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x65, 0x65, 0x65, 0x5f, 0x38, 0x30, 0x32, 0x5f, 0x31, 0x71, 0x62,
	0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x31, 0x49, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x71, 0x62, 0x62, 0x48,
	0x02, 0x52, 0x0b, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x71, 0x62, 0x62, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x0b, 0x69, 0x65, 0x65, 0x65, 0x5f, 0x38, 0x30, 0x32, 0x5f, 0x33, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x31, 0x49, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x33, 0x78, 0x48, 0x03, 0x52, 0x09,
	0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x33, 0x78, 0x88, 0x01, 0x01, 0x1a, 0x45, 0x0a, 0x06,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x3b, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x69, 0x65, 0x65, 0x65, 0x5f, 0x38, 0x30, 0x32, 0x5f, 0x31, 0x71, 0x62, 0x62,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x65, 0x65, 0x65, 0x5f, 0x38, 0x30, 0x32, 0x5f, 0x33,
	0x78, 0x10, 0x02, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x65, 0x65, 0x65, 0x5f, 0x38, 0x30, 0x32,
	0x5f, 0x31, 0x71, 0x62, 0x62, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x65, 0x65, 0x65, 0x5f, 0x38,
	0x30, 0x32, 0x5f, 0x33, 0x78, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x49,
	0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x33, 0x78, 0x22, 0xeb, 0x03, 0x0a, 0x11, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x31, 0x49, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x71, 0x62, 0x62, 0x12, 0x20,
	0x0a, 0x09, 0x70, 0x66, 0x63, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x70, 0x66, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0b, 0x70, 0x66, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x30, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x70, 0x66, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x30, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x66, 0x63, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09, 0x70, 0x66,
	0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x31, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x66,
	0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x03, 0x52, 0x09, 0x70, 0x66, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0b, 0x70, 0x66, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x33, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x09, 0x70, 0x66, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x33, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x66, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x09, 0x70, 0x66, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x66, 0x63,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06,
	0x52, 0x09, 0x70, 0x66, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x35, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0b, 0x70, 0x66, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x36, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x09, 0x70, 0x66, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x36,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x66, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x37, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x09, 0x70, 0x66, 0x63, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x37, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x66, 0x63,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x30, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x31, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x33, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x34, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x35, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x36, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x37, 0x22, 0xcc, 0x02, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x21, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x02, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x2d, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x63, 0x61, 0x70, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x70, 0x63, 0x61, 0x70, 0x6e, 0x67, 0x10, 0x02, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xce, 0x03, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x01, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x48, 0x02, 0x52,
	0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x04,
	0x76, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x48, 0x03, 0x52, 0x04,
	0x76, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x70, 0x76, 0x34, 0x48, 0x04, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x70,
	0x76, 0x36, 0x48, 0x05, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x88, 0x01, 0x01, 0x1a, 0x59, 0x0a,
	0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4f, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x22, 0xd9, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x62, 0x69, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x22, 0x7d, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x22, 0xfe, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x03, 0x73, 0x72, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48,
	0x01, 0x52, 0x03, 0x64, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x48, 0x02, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x09, 0x70, 0x66, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x03, 0x52, 0x08, 0x70, 0x66, 0x63, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x72, 0x63, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x64, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x56, 0x6c,
	0x61, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x66, 0x69, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x01, 0x52, 0x03, 0x63, 0x66, 0x69, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48,
	0x02, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x03, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x66,
	0x69, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xf6, 0x07, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x70, 0x76, 0x34, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x48, 0x01, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x02, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x04,
	0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x64, 0x6f, 0x6e, 0x74, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x48, 0x06, 0x52, 0x0c, 0x64, 0x6f, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0e, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48,
	0x07, 0x52, 0x0d, 0x6d, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48,
	0x08, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x09, 0x52,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x48, 0x0a, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x0b,
	0x52, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x48, 0x0c, 0x52, 0x03, 0x73, 0x72, 0x63, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x03, 0x64, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x0d, 0x52,
	0x03, 0x64, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x73, 0x72, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x73, 0x74, 0x22, 0xa2,
	0x04, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x70, 0x76, 0x36, 0x12, 0x30,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x48, 0x02, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48,
	0x03, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x04, 0x52, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x09,
	0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x48, 0x05, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x48, 0x06, 0x52, 0x03, 0x73, 0x72, 0x63, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x03, 0x64,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x07, 0x52, 0x03, 0x64,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x72, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x64, 0x73, 0x74, 0x22, 0xa7, 0x03, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31,
	0x0a, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x76, 0x36, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x69, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x69, 0x73, 0x69, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x03, 0x62, 0x67, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x03, 0x62, 0x67, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x48,
	0x02, 0x52, 0x05, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x72, 0x73, 0x76, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x73, 0x76, 0x70, 0x48, 0x03,
	0x52, 0x04, 0x72, 0x73, 0x76, 0x70, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x73,
	0x69, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x62, 0x67, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x22, 0x4f, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x29, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x22, 0xf0,
	0x03, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x69, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x73, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x48, 0x01, 0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x48, 0x02, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73,
	0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x09, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x56,
	0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x76, 0x34, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49,
	0x73, 0x69, 0x73, 0x56, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x08, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x22, 0x4e, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x73, 0x69, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x03,
	0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x69, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x69, 0x64, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x69,
	0x64, 0x22, 0x81, 0x08, 0x0a, 0x0d, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0c, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x02, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0b, 0x6c, 0x31, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x03, 0x52,
	0x0a, 0x6c, 0x31, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x0b, 0x6c, 0x32, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x04, 0x52, 0x0a,
	0x6c, 0x32, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x49, 0x73, 0x69, 0x73, 0x4d, 0x54, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x45, 0x52, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x0e, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x48, 0x06, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x07, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x72, 0x6c, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x72,
	0x6c, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x49, 0x0a, 0x0b,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x02, 0x1a, 0x4d, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x31, 0x5f, 0x32, 0x10, 0x03, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x31, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x32, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x12, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x62, 0x0a, 0x06, 0x49, 0x73, 0x69, 0x73, 0x4d, 0x54, 0x12,
	0x18, 0x0a, 0x05, 0x6d, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x04, 0x6d, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x9c, 0x03, 0x0a, 0x0b, 0x4c, 0x69,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x45, 0x12, 0x36, 0x0a, 0x14, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x56, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x73, 0x48,
	0x04, 0x52, 0x12, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x73, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x74, 0x68, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x62, 0x30, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x70, 0x62, 0x30, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x70, 0x62, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x03,
	0x70, 0x62, 0x31, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x62, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x03, 0x70, 0x62, 0x32, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x70, 0x62, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x03, 0x70, 0x62,
	0x33, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x62, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x04, 0x52, 0x03, 0x70, 0x62, 0x34, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70,
	0x62, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x03, 0x70, 0x62, 0x35, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x62, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x06, 0x52, 0x03, 0x70, 0x62, 0x36, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x62, 0x37,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x03, 0x70, 0x62, 0x37, 0x88, 0x01, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x62, 0x30, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x62, 0x31,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x62, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x62, 0x33,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x62, 0x34, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x62, 0x35,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x62, 0x36, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x62, 0x37,
	0x22, 0xf3, 0x01, 0x0a, 0x1b, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x03, 0x6d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x64,
	0x35, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x3a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x2e, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x6d, 0x64,
	0x35, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10,
	0x02, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x64, 0x35, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xbc, 0x03, 0x0a, 0x15, 0x49, 0x73, 0x69, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f,
	0x6d, 0x74, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x6f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4d, 0x74, 0x75, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x33, 0x77, 0x61, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x33, 0x77, 0x61, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x19, 0x70, 0x32, 0x70, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x15, 0x70, 0x32, 0x70, 0x48, 0x65, 0x6c, 0x6c, 0x6f,
	0x73, 0x54, 0x6f, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x88, 0x01, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x5f, 0x6d, 0x74, 0x75, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x33, 0x77, 0x61, 0x79, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x70, 0x32, 0x70, 0x5f,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x61, 0x63, 0x22, 0xde, 0x03, 0x0a, 0x1b, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0b, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x31, 0x5f, 0x74, 0x6f, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x0d, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x31, 0x54, 0x6f, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x12, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x31,
	0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x0f, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x31, 0x50, 0x6c, 0x75, 0x73, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x08, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x34, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x34, 0x30, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x38, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x07, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x38, 0x30, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x31, 0x5f, 0x74, 0x6f,
	0x5f, 0x31, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x31, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x31, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x34, 0x30, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x38, 0x30, 0x22, 0x93, 0x02, 0x0a, 0x09, 0x49, 0x73, 0x69, 0x73, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x65, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x54, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x77, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x10, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x4c,
	0x73, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xb2, 0x05, 0x0a,
	0x0c, 0x49, 0x73, 0x69, 0x73, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x12, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x41, 0x72, 0x65, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x72, 0x65, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x10, 0x6c, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0e, 0x6c, 0x73, 0x70, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0b, 0x6c, 0x73, 0x70, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0c,
	0x70, 0x73, 0x6e, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x63, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0c, 0x63, 0x73, 0x6e, 0x70, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x06, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4c, 0x73, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x45, 0x0a, 0x1d, 0x6c, 0x73, 0x70, 0x5f, 0x6d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x19, 0x6c, 0x73, 0x70, 0x4d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x73, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6c, 0x73, 0x70, 0x5f,
	0x6d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x69,
	0x74, 0x22, 0xfe, 0x01, 0x0a, 0x12, 0x49, 0x73, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x64, 0x35, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x48, 0x01, 0x52, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x41, 0x75, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x48, 0x02, 0x52, 0x0a,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x5f, 0x6d, 0x64, 0x35, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x22, 0xe9, 0x01, 0x0a, 0x16, 0x49, 0x73, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x61, 0x75, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x3a, 0x0a,
	0x08, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2e, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x02, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x64,
	0x35, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xaf,
	0x05, 0x0a, 0x10, 0x49, 0x73, 0x69, 0x73, 0x56, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x34, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x6c,
	0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0b,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x56, 0x34, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x13, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69,
	0x73, 0x56, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x78, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x05, 0x78, 0x46, 0x6c, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x05, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x06, 0x52, 0x05, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x1a, 0x41, 0x0a, 0x0a, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x02, 0x1a, 0x3f,
	0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x75, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x22, 0x99, 0x01, 0x0a, 0x0e, 0x56, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x22, 0x99, 0x01, 0x0a,
	0x0e, 0x56, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x4d, 0x41, 0x43,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x22, 0xaf, 0x05, 0x0a, 0x10, 0x49, 0x73, 0x69, 0x73, 0x56, 0x36,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x56, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49,
	0x73, 0x69, 0x73, 0x56, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x01, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x63, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x56, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x12,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x41, 0x74, 0x74, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x06, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x05, 0x78, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x05, 0x72, 0x46,
	0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x05, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x88,
	0x01, 0x01, 0x1a, 0x41, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x33, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x10, 0x02, 0x1a, 0x3f, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x78, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x34, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x36, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x22, 0xaf, 0x07, 0x0a, 0x09, 0x42, 0x67, 0x70, 0x56, 0x34, 0x50, 0x65,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56,
	0x34, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x14, 0x65, 0x76, 0x70, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x56, 0x34, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x06, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x73, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x34, 0x50, 0x65, 0x65,
	0x72, 0x2e, 0x41, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x48, 0x01, 0x52, 0x08,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x1a, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x18, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x09, 0x76, 0x34, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x08, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x09,
	0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x10, 0x76, 0x34, 0x5f, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x56, 0x34, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0e, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x3e, 0x0a, 0x10, 0x76, 0x36, 0x5f, 0x73, 0x72, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x56, 0x36, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0e, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x35, 0x0a, 0x06, 0x41, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x62, 0x67, 0x70, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x65, 0x62, 0x67, 0x70, 0x10, 0x02, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0x2a, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x77, 0x6f, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x66, 0x6f, 0x75, 0x72, 0x10, 0x02, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x73, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x56, 0x34, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76,
	0x34, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x34,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x84, 0x05, 0x0a, 0x14,
	0x42, 0x67, 0x70, 0x56, 0x34, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0b, 0x64, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x66, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x66, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x04, 0x65, 0x76, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x34, 0x45, 0x76, 0x70, 0x6e, 0x45, 0x76, 0x69, 0x73, 0x52,
	0x04, 0x65, 0x76, 0x69, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x65, 0x73, 0x69, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x34, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x65, 0x73, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x08, 0x65, 0x73, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x48, 0x04, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0f,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x45,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x61,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x48, 0x05, 0x52, 0x06,
	0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x1a, 0x48, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x73, 0x69, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x65, 0x73, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x5d, 0x0a, 0x1c, 0x42, 0x67, 0x70, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x66, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x22, 0xd1, 0x04, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x1d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x45, 0x78, 0x69, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x45,
	0x78, 0x69, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0d, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x03, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x04, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x43,
	0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x39, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x69, 0x67, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x67,
	0x70, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x03, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x0c, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x08, 0x61, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01,
	0x1a, 0x8e, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x6e, 0x6f, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x6e,
	0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x6c, 0x6c, 0x67, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x6c, 0x6c, 0x67, 0x72, 0x10,
	0x06, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x73, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x8f, 0x04, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x45, 0x78,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x45, 0x78,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x1a, 0xbc, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x5f, 0x32, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x73, 0x5f, 0x34, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x65, 0x76, 0x70,
	0x6e, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x5f, 0x32, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x10, 0x06, 0x1a,
	0x87, 0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7c, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x06, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x09, 0x42, 0x67, 0x70,
	0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x41, 0x73, 0x53, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x61, 0x73,
	0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xbe, 0x01,
	0x0a, 0x09, 0x41, 0x73, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x73,
	0x5f, 0x73, 0x65, 0x71, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x71, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xd3,
	0x01, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x5d, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x71, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x10, 0x04, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x56, 0x34, 0x45, 0x76,
	0x70, 0x6e, 0x45, 0x76, 0x69, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x56, 0x34, 0x45, 0x76, 0x70, 0x6e, 0x45, 0x76, 0x69, 0x73, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x76, 0x69, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x56, 0x34, 0x45, 0x76, 0x69, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x48, 0x01, 0x52, 0x08, 0x65, 0x76,
	0x69, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x30, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x26, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x65, 0x76, 0x69, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x76, 0x69, 0x5f, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x22, 0xed, 0x07, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x56, 0x34, 0x45, 0x76,
	0x69, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x12, 0x4e, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x34, 0x45, 0x76, 0x69,
	0x56, 0x78, 0x6c, 0x61, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x34, 0x45, 0x76, 0x69, 0x56,
	0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x6d, 0x73, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x70, 0x6d, 0x73, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x07, 0x61, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x48, 0x03, 0x52, 0x12,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x13, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x11, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x48, 0x0a, 0x16, 0x6c, 0x33, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x13, 0x6c, 0x33, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x16, 0x6c, 0x33, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x13,
	0x6c, 0x33, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x48, 0x04, 0x52, 0x08,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x3d, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x48, 0x05, 0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x1a, 0x43, 0x0a,
	0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x30, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6d, 0x73, 0x69,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x22, 0xe2, 0x01, 0x0a, 0x1c, 0x42, 0x67, 0x70, 0x56, 0x34, 0x45, 0x76,
	0x69, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0d, 0x63, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x70,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x4d, 0x61, 0x63, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0b, 0x63, 0x6d, 0x61, 0x63, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x54, 0x61, 0x67, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x41,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xb4, 0x05, 0x0a, 0x0e, 0x42, 0x67,
	0x70, 0x43, 0x4d, 0x61, 0x63, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0d,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4d, 0x41, 0x43, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x6c, 0x32, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c,
	0x32, 0x76, 0x6e, 0x69, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x03, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x33, 0x76,
	0x6e, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x05, 0x6c, 0x33, 0x76, 0x6e,
	0x69, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x48, 0x06, 0x52, 0x08, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x0f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x48, 0x07,
	0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x32, 0x76, 0x6e, 0x69, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x33, 0x76, 0x6e, 0x69, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x22, 0xbd, 0x02, 0x0a, 0x15, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x2e, 0x52, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x72, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x64,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x72,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x51, 0x0a, 0x06, 0x52, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x61, 0x73, 0x5f, 0x32, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x61, 0x73, 0x5f, 0x34, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x10, 0x03, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xdb, 0x01, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x52, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x1a, 0x51, 0x0a, 0x06, 0x52, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x32, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x34, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x10, 0x03, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc8,
	0x02, 0x0a, 0x0b, 0x42, 0x67, 0x70, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x31,
	0x0a, 0x12, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x68, 0x6f,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x13, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6d,
	0x64, 0x35, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06,
	0x6d, 0x64, 0x35, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6d, 0x64, 0x35, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x9a, 0x0d, 0x0a, 0x0d, 0x42, 0x67,
	0x70, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0c, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0d, 0x69,
	0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x70, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x04, 0x52, 0x04, 0x76, 0x70, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x06, 0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x76, 0x70, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x07, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x6e, 0x56, 0x70, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x70, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x08, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x70, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x76, 0x70, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x09, 0x52, 0x04, 0x65, 0x76, 0x70, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0a, 0x52, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x12, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x76, 0x70, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x10, 0x69, 0x70,
	0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x76,
	0x70, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34,
	0x4d, 0x70, 0x6c, 0x73, 0x56, 0x70, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6d, 0x64, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x07,
	0x69, 0x70, 0x76, 0x34, 0x4d, 0x64, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x76, 0x70, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x14, 0x69,
	0x70, 0x76, 0x34, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x70, 0x6c, 0x73,
	0x56, 0x70, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x13, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x72, 0x5f, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x0e, 0x69,
	0x70, 0x76, 0x34, 0x53, 0x72, 0x54, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x11, 0x52, 0x12, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x70, 0x6e, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x10, 0x69, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x13, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x4d, 0x70, 0x6c, 0x73, 0x56, 0x70,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x64, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x07, 0x69, 0x70, 0x76, 0x36, 0x4d, 0x64,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x14, 0x69, 0x70, 0x76, 0x36, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x70, 0x6c, 0x73, 0x56, 0x70, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x16, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x11, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x73, 0x72, 0x5f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x17, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x53, 0x72, 0x54,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x12, 0x69, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76,
	0x70, 0x6c, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x76, 0x70,
	0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x76, 0x70, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x76, 0x70, 0x6e, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x76, 0x70, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x76, 0x70, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d,
	0x64, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x73, 0x72, 0x5f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x70, 0x6e,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x76,
	0x70, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x64, 0x74, 0x42,
	0x1a, 0x0a, 0x18, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x73, 0x72, 0x5f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xb7, 0x01, 0x0a, 0x1b, 0x42, 0x67, 0x70, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x49, 0x70,
	0x76, 0x34, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x22, 0x94, 0x07, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x56, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x34,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x56, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12,
	0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49,
	0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x48, 0x04, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x73,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x48, 0x05, 0x52, 0x06, 0x61,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x48, 0x06, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a,
	0x0f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x0b,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x1a, 0x41,
	0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x10,
	0x02, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x36, 0x0a, 0x0a, 0x42, 0x67, 0x70, 0x41, 0x64,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x22,
	0x94, 0x07, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x56, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x36, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56,
	0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x70,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x48, 0x04, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x73, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x48, 0x05, 0x52, 0x06, 0x61, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x48, 0x06, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0f,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x45,
	0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x0b, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x1a, 0x41, 0x0a,
	0x12, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x69, 0x70, 0x76, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x10, 0x02,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xca, 0x08, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x53, 0x72,
	0x74, 0x65, 0x56, 0x34, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x56, 0x34, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72,
	0x74, 0x65, 0x56, 0x34, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x03, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x6e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x70, 0x76,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x48, 0x06, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41,
	0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x48, 0x07, 0x52, 0x07, 0x61, 0x64, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x48, 0x08, 0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x56, 0x34, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x6c, 0x76, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6c, 0x76, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01,
	0x01, 0x1a, 0x40, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x31, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x70, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x10, 0x02, 0x1a, 0x41, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x69, 0x70, 0x76, 0x36, 0x10, 0x02, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0xa6, 0x07, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x56,
	0x34, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6c, 0x76, 0x12, 0x5c, 0x0a, 0x17, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x00, 0x52,
	0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x54, 0x6c, 0x76, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x02,
	0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x88,
	0x01, 0x01, 0x12, 0x4f, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x03, 0x52, 0x10,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76,
	0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x17, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x04, 0x52, 0x14, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x88, 0x01,
	0x01, 0x12, 0x50, 0x0a, 0x13, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x05, 0x52, 0x10,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76,
	0x88, 0x01, 0x01, 0x12, 0x79, 0x0a, 0x22, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x06, 0x52, 0x1d, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53,
	0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x07, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x6c, 0x76, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c,
	0x76, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xf1, 0x02, 0x0a,
	0x1b, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12, 0x20, 0x0a, 0x09,
	0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5f,
	0x0a, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x53, 0x72, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x0d, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x1a,
	0x3c, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x22, 0x2b, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x10, 0x02, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x39, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x9f, 0x03, 0x0a, 0x14,
	0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x62, 0x54, 0x6c, 0x76, 0x12, 0x5c, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x0e, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x6f, 0x75, 0x72, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x66, 0x6f,
	0x75, 0x72, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x53, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x07, 0x69, 0x70, 0x76, 0x36, 0x53, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x06, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x05, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x05, 0x69, 0x46, 0x6c,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x1a, 0x5b, 0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x66, 0x6f, 0x75, 0x72, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x73,
	0x69, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64,
	0x10, 0x03, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x6f, 0x75, 0x72,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x4d, 0x0a,
	0x17, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x5f, 0x0a, 0x1b,
	0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12, 0x2c, 0x0a, 0x0f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x4f, 0x0a,
	0x17, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf0,
	0x02, 0x0a, 0x24, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12, 0x88, 0x01, 0x0a, 0x1a, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x17, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88,
	0x01, 0x01, 0x1a, 0x9d, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4e,
	0x75, 0x6c, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x81,
	0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x6c, 0x70, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x65, 0x6e, 0x6c, 0x70, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x6c,
	0x70, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x6c, 0x70, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x65, 0x6e, 0x6c, 0x70,
	0x10, 0x05, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0xa9, 0x01, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xd0, 0x08,
	0x0a, 0x0e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x47, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x00, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x41, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53,
	0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x01, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x42, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c,
	0x76, 0x48, 0x02, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x43, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x03, 0x52,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x04, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x45, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53,
	0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x05, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x46, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c,
	0x76, 0x48, 0x06, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x47, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x07, 0x52,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x48, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x08, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6a, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53,
	0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x4a, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c,
	0x76, 0x48, 0x0a, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x4b, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0b, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x1a, 0xab,
	0x01, 0x0a, 0x0b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9b,
	0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x61, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x65, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x67, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x68, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6a, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6b, 0x10, 0x0b, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x62, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6a, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x22, 0x96, 0x01, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x72, 0x4d, 0x70,
	0x6c, 0x73, 0x53, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x74, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x02,
	0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x73, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x04, 0x73, 0x42, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x03,
	0x74, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x5f, 0x62, 0x69,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c, 0x22, 0xf5, 0x01, 0x0a, 0x2a, 0x42, 0x67,
	0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x62, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6c,
	0x62, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6e,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x08, 0x6c, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x72, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x09, 0x61, 0x72, 0x67, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x62, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x72, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0xc4, 0x01, 0x0a, 0x19, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12,
	0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x74, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x02, 0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x73, 0x5f,
	0x62, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x04, 0x73, 0x42, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x74, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x5f, 0x62, 0x69, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c, 0x22, 0xed, 0x01, 0x0a, 0x19, 0x42, 0x67, 0x70,
	0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x12, 0x71, 0x0a, 0x1a,
	0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x52,
	0x76, 0x36, 0x53, 0x49, 0x44, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x01, 0x52, 0x17, 0x73, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x73, 0x72,
	0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xf1, 0x01, 0x0a, 0x19, 0x42, 0x67, 0x70,
	0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x72, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x72, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x72, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x69,
	0x64, 0x48, 0x02, 0x52, 0x09, 0x73, 0x72, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x73, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x72, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x22, 0xf1, 0x01, 0x0a,
	0x19, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x73,
	0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x72, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x72, 0x4d, 0x70,
	0x6c, 0x73, 0x53, 0x69, 0x64, 0x48, 0x02, 0x52, 0x09, 0x73, 0x72, 0x4d, 0x70, 0x6c, 0x73, 0x53,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x72, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x73, 0x69, 0x64,
	0x22, 0x82, 0x02, 0x0a, 0x19, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12, 0x19,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x72, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x72, 0x4d, 0x70, 0x6c,
	0x73, 0x53, 0x69, 0x64, 0x48, 0x02, 0x52, 0x09, 0x73, 0x72, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x72, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x73, 0x69, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x19, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74,
	0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62,
	0x54, 0x6c, 0x76, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0b,
	0x73, 0x72, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53,
	0x72, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x69, 0x64, 0x48, 0x01, 0x52, 0x09, 0x73, 0x72, 0x4d, 0x70,
	0x6c, 0x73, 0x53, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x72, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x73,
	0x69, 0x64, 0x22, 0x93, 0x03, 0x0a, 0x19, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76,
	0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x36, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x72, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x72, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x69, 0x64, 0x48,
	0x03, 0x52, 0x09, 0x73, 0x72, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x72, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x19, 0x42, 0x67, 0x70,
	0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x3a, 0x0a, 0x0b, 0x73, 0x72, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72,
	0x74, 0x65, 0x53, 0x72, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x69, 0x64, 0x48, 0x01, 0x52, 0x09, 0x73,
	0x72, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x72, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x73, 0x69, 0x64, 0x22, 0xab, 0x02, 0x0a, 0x19, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74,
	0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62,
	0x54, 0x6c, 0x76, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x70, 0x76, 0x36, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x72,
	0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x73, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x1a, 0x73, 0x72,
	0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x52, 0x76, 0x36,
	0x53, 0x49, 0x44, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x02, 0x52, 0x17, 0x73, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x76, 0x36,
	0x5f, 0x73, 0x69, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69,
	0x64, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x22, 0xbf, 0x04, 0x0a, 0x19, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62, 0x54, 0x6c,
	0x76, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x73, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x70, 0x76, 0x36, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33,
	0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x11, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76,
	0x36, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x08,
	0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x07, 0x73, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x1a,
	0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x52,
	0x76, 0x36, 0x53, 0x49, 0x44, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x05, 0x52, 0x17, 0x73, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72,
	0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72,
	0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f,
	0x73, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x96, 0x03, 0x0a, 0x19, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74,
	0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x62,
	0x54, 0x6c, 0x76, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x73, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x73, 0x72, 0x76, 0x36, 0x53, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x1a, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48, 0x03, 0x52, 0x17, 0x73, 0x72, 0x76,
	0x36, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x42,
	0x1d, 0x0a, 0x1b, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xc9,
	0x08, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x56, 0x36, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4e, 0x0a,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72,
	0x74, 0x65, 0x56, 0x36, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x0b, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a,
	0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x56, 0x36, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x03, 0x52, 0x12, 0x6e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x70, 0x76,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x12, 0x6e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x48, 0x06, 0x52, 0x08,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x48, 0x07,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x07,
	0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x48, 0x08, 0x52,
	0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x65,
	0x78, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65,
	0x56, 0x36, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6c, 0x76, 0x52, 0x0a, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x6c, 0x76, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x40, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x02, 0x1a, 0x41, 0x0a, 0x12, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x2b, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x10, 0x02, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xa6, 0x07, 0x0a, 0x12, 0x42,
	0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x56, 0x36, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6c,
	0x76, 0x12, 0x5c, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x54, 0x6c, 0x76, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x53, 0x72, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48,
	0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x74, 0x6c, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x02, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x54, 0x6c, 0x76, 0x48, 0x03, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x17, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x48, 0x04, 0x52,
	0x14, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53,
	0x75, 0x62, 0x54, 0x6c, 0x76, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x13, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53,
	0x72, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62,
	0x54, 0x6c, 0x76, 0x48, 0x05, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x88, 0x01, 0x01, 0x12, 0x79, 0x0a, 0x22, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x53, 0x72, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4e, 0x75, 0x6c, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x75, 0x62, 0x54, 0x6c,
	0x76, 0x48, 0x06, 0x52, 0x1d, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x75, 0x62, 0x54,
	0x6c, 0x76, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x6c, 0x76, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c,
	0x76, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x8b, 0x08, 0x0a, 0x09, 0x42, 0x67, 0x70, 0x56, 0x36, 0x50, 0x65, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x36, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x16,
	0x65, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x36, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x65, 0x76, 0x70, 0x6e, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x07, 0x61, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x36, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x41,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x61, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x4e, 0x0a, 0x0f, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x56, 0x36, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x0d, 0x61,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x48, 0x02, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x1a, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x04, 0x52, 0x18, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x09, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x34, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x76, 0x34, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x56, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x76, 0x36,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x76, 0x34, 0x5f, 0x73, 0x72, 0x74,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x56, 0x34,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x76, 0x34, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x76, 0x36, 0x5f, 0x73, 0x72, 0x74,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x72, 0x74, 0x65, 0x56, 0x36,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x76, 0x36, 0x53, 0x72, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x35, 0x0a, 0x06, 0x41, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x69, 0x62, 0x67, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x65, 0x62, 0x67, 0x70, 0x10,
	0x02, 0x1a, 0x3b, 0x0a, 0x0d, 0x41, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x22, 0x2a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x74,
	0x77, 0x6f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x6f, 0x75, 0x72, 0x10, 0x02, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x53, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x56, 0x36, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x36, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0x8b, 0x05, 0x0a, 0x13, 0x42, 0x67, 0x70, 0x56, 0x36,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35,
	0x0a, 0x14, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x12,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x56,
	0x70, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x14, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0e, 0x63, 0x6f,
	0x70, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c,
	0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69,
	0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x72, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x64, 0x73, 0x50, 0x65, 0x72, 0x53, 0x72,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05,
	0x52, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52,
	0x10, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x5f, 0x73, 0x72, 0x5f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x53, 0x72, 0x54, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x5f, 0x76, 0x70, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x69, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x72, 0x68, 0x42, 0x23, 0x0a,
	0x21, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x73, 0x72, 0x5f, 0x74, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x84, 0x05, 0x0a, 0x14, 0x42, 0x67, 0x70, 0x56, 0x36, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a,
	0x0b, 0x64, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x66, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x66, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x65, 0x76, 0x69, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x36,
	0x45, 0x76, 0x70, 0x6e, 0x45, 0x76, 0x69, 0x73, 0x52, 0x04, 0x65, 0x76, 0x69, 0x73, 0x12, 0x15,
	0x0a, 0x03, 0x65, 0x73, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x65,
	0x73, 0x69, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x56, 0x36, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x73, 0x69, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x65, 0x73, 0x69,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x48, 0x04, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x41,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x48, 0x05, 0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x1a, 0x48, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x65, 0x73, 0x69, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x73, 0x69, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xcd, 0x01, 0x0a, 0x0d,
	0x42, 0x67, 0x70, 0x56, 0x36, 0x45, 0x76, 0x70, 0x6e, 0x45, 0x76, 0x69, 0x73, 0x12, 0x3b, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x36, 0x45, 0x76, 0x70, 0x6e, 0x45, 0x76, 0x69,
	0x73, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x76,
	0x69, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x36, 0x45, 0x76, 0x69, 0x56, 0x78, 0x6c, 0x61,
	0x6e, 0x48, 0x01, 0x52, 0x08, 0x65, 0x76, 0x69, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01,
	0x1a, 0x30, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x26, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x65, 0x76, 0x69, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x10, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x65, 0x76, 0x69, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x22, 0xed, 0x07, 0x0a, 0x0d,
	0x42, 0x67, 0x70, 0x56, 0x36, 0x45, 0x76, 0x69, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x12, 0x4e, 0x0a,
	0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x56, 0x36, 0x45, 0x76, 0x69, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x10, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x57, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x56, 0x36, 0x45, 0x76, 0x69, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x6d, 0x73, 0x69, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x70, 0x6d,
	0x73, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x64,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x07,
	0x61, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x13, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x48, 0x03, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x13,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x11,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x43, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x16, 0x6c, 0x33, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x13, 0x6c, 0x33, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x48, 0x0a, 0x16, 0x6c, 0x33, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x13, 0x6c, 0x33, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x48, 0x04, 0x52, 0x08, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x48, 0x05, 0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x1a, 0x43, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x6d, 0x73, 0x69, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xe2, 0x01, 0x0a, 0x1c,
	0x42, 0x67, 0x70, 0x56, 0x36, 0x45, 0x76, 0x69, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0d,
	0x63, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x4d, 0x61,
	0x63, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x6d, 0x61, 0x63, 0x49, 0x70,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x54, 0x61, 0x67, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x10, 0x76, 0x6c, 0x61, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x73, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x12,
	0x31, 0x0a, 0x0a, 0x76, 0x34, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56,
	0x34, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x09, 0x76, 0x34, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x76, 0x36, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c,
	0x61, 0x6e, 0x56, 0x36, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x09, 0x76, 0x36, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56,
	0x34, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x34, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50,
	0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x56,
	0x78, 0x6c, 0x61, 0x6e, 0x56, 0x36, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e,
	0x56, 0x36, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x76, 0x6e, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0xee, 0x02, 0x0a, 0x1e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x34, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x34,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x49, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x34, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x48, 0x01, 0x52,
	0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x34, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d,
	0x6f, 0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x48, 0x02, 0x52, 0x09,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x3d, 0x0a, 0x06,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x33, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x22, 0xee, 0x02, 0x0a, 0x1e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x36, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56,
	0x36, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x49, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x36,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x48, 0x01,
	0x52, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x36, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50,
	0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x48, 0x02, 0x52,
	0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x3d, 0x0a,
	0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x33, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x22, 0x6d, 0x0a, 0x25, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x34, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d,
	0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x34, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x56, 0x74, 0x65, 0x70, 0x52, 0x05, 0x76, 0x74, 0x65, 0x70, 0x73,
	0x22, 0x6d, 0x0a, 0x25, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x36, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d, 0x6f,
	0x64, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56,
	0x78, 0x6c, 0x61, 0x6e, 0x56, 0x36, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x56, 0x74, 0x65, 0x70, 0x52, 0x05, 0x76, 0x74, 0x65, 0x70, 0x73, 0x22,
	0xb1, 0x01, 0x0a, 0x36, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x41, 0x72, 0x70, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x6d, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x6d, 0x4d, 0x61, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x6d,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x6d, 0x49, 0x70, 0x76, 0x34, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x6d, 0x5f, 0x6d, 0x61, 0x63,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x6d, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x22, 0xe9, 0x01, 0x0a, 0x29, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x34, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x56, 0x74, 0x65,
	0x70, 0x12, 0x33, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x74, 0x65, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x74, 0x65, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x15, 0x61, 0x72, 0x70, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c, 0x61,
	0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x41,
	0x72, 0x70, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x13, 0x61, 0x72, 0x70, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xe9, 0x01, 0x0a, 0x29, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x36, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d, 0x6f,
	0x64, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x56, 0x74, 0x65, 0x70, 0x12, 0x33, 0x0a,
	0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x56, 0x74, 0x65, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x6f, 0x0a, 0x15, 0x61, 0x72, 0x70, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50,
	0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x41, 0x72, 0x70, 0x53, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x13,
	0x61, 0x72, 0x70, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x76,
	0x74, 0x65, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x54, 0x0a, 0x27, 0x56,
	0x78, 0x6c, 0x61, 0x6e, 0x56, 0x34, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x54, 0x0a, 0x27, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x36, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4d,
	0x6f, 0x64, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x73, 0x76, 0x70, 0x12, 0x3f, 0x0a, 0x0f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x69, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x6c, 0x73, 0x70, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x4c,
	0x73, 0x70, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x11, 0x6c, 0x73, 0x70, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcf, 0x05, 0x0a, 0x11, 0x52, 0x73, 0x76, 0x70, 0x49, 0x70, 0x76,
	0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x70, 0x76, 0x34, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x70, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x45, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x16, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x06, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0d, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x11, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x1b, 0x0a, 0x19,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x52, 0x73, 0x76, 0x70, 0x4c,
	0x73, 0x70, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x14,
	0x70, 0x32, 0x70, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6c, 0x73, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x52, 0x73, 0x76, 0x70, 0x4c, 0x73, 0x70, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x32, 0x50, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70,
	0x76, 0x34, 0x4c, 0x73, 0x70, 0x48, 0x00, 0x52, 0x11, 0x70, 0x32, 0x70, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x73, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a,
	0x15, 0x70, 0x32, 0x70, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x4c, 0x73, 0x70, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x32, 0x50, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x73, 0x70, 0x52, 0x12, 0x70, 0x32, 0x70, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x73, 0x70, 0x73, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x70, 0x32, 0x70, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6c, 0x73, 0x70, 0x73, 0x22, 0xc2, 0x04, 0x0a, 0x24, 0x52, 0x73, 0x76, 0x70, 0x4c, 0x73,
	0x70, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x32,
	0x50, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x4c, 0x73, 0x70, 0x49,
	0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x32, 0x50, 0x45,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76, 0x34, 0x4c, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x02, 0x52, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x5c, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x22, 0x48, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x03, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe8, 0x05, 0x0a, 0x25, 0x52,
	0x73, 0x76, 0x70, 0x4c, 0x73, 0x70, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x50, 0x32, 0x50, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x70, 0x76,
	0x34, 0x4c, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x20, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x73, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x12, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x11, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6c, 0x73, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x4c, 0x73, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6c, 0x73,
	0x70, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x12, 0x6c, 0x73, 0x70, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x06, 0x52, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x05, 0x74, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x54, 0x73, 0x70, 0x65, 0x63, 0x48, 0x07, 0x52,
	0x05, 0x74, 0x73, 0x70, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x08, 0x52, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x52, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x03, 0x65, 0x72, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x45,
	0x72, 0x6f, 0x48, 0x09, 0x52, 0x03, 0x65, 0x72, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c,
	0x73, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6c, 0x73, 0x70,
	0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x73, 0x70, 0x65, 0x63, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x65, 0x72, 0x6f, 0x22, 0xd9, 0x06, 0x0a, 0x14, 0x52, 0x73, 0x76, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03,
	0x52, 0x0f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x15, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0e, 0x73, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x45, 0x0a, 0x1c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x1a, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x15, 0x6e, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x09, 0x52,
	0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x65, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x42, 0x1f, 0x0a, 0x1d,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x52, 0x73, 0x76, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6e, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x41, 0x6e, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x22, 0xf7,
	0x02, 0x0a, 0x09, 0x52, 0x73, 0x76, 0x70, 0x54, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x11,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x0c, 0x70, 0x65, 0x61, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04,
	0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x64,
	0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xce, 0x04, 0x0a, 0x0f, 0x52, 0x73, 0x76,
	0x70, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x0e,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x75, 0x70, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x68, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x68,
	0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6e, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61,
	0x6e, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x41, 0x6e, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x19, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x07, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x17, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x08, 0x52, 0x15, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x79, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x07, 0x52, 0x73,
	0x76, 0x70, 0x45, 0x72, 0x6f, 0x12, 0x58, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x45, 0x72, 0x6f,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x49, 0x70, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x75, 0x62,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x45, 0x72, 0x6f, 0x53, 0x75, 0x62, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x1a, 0x65, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x49, 0x70, 0x22, 0x50, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x73,
	0x65, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x10, 0x03, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0xc0, 0x03, 0x0a, 0x10, 0x52, 0x73, 0x76, 0x70, 0x45, 0x72, 0x6f, 0x53, 0x75, 0x62,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x45,
	0x72, 0x6f, 0x53, 0x75, 0x62, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x08, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76,
	0x70, 0x45, 0x72, 0x6f, 0x53, 0x75, 0x62, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x48, 0x6f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x04, 0x52, 0x07, 0x68, 0x6f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x38, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x30, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x10, 0x02, 0x1a, 0x39, 0x0a, 0x07, 0x48, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2e, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x6c, 0x6f, 0x6f, 0x73, 0x65, 0x10, 0x02, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x22, 0x0a,
	0x05, 0x74, 0x78, 0x5f, 0x72, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x78, 0x52, 0x78, 0x52, 0x04, 0x74, 0x78, 0x52,
	0x78, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x48,
	0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x02, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x48, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xf0,
	0x01, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x78, 0x52, 0x78, 0x12, 0x36, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x78, 0x52, 0x78, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x72, 0x74,
	0x48, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x48, 0x02, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x37, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x2d, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x4d, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xba, 0x01, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0x31, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x65,
	0x73, 0x68, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f,
	0x6e, 0x65, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xc0, 0x0a,
	0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x01, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x48, 0x02, 0x52, 0x08, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x56, 0x6c, 0x61, 0x6e, 0x48, 0x03, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x48,
	0x04, 0x52, 0x05, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x48, 0x05, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36,
	0x48, 0x06, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x70,
	0x66, 0x63, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x48, 0x07, 0x52, 0x08, 0x70, 0x66, 0x63, 0x70, 0x61, 0x75, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x48, 0x08,
	0x52, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x70, 0x61, 0x75, 0x73, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x48, 0x09, 0x52,
	0x03, 0x74, 0x63, 0x70, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x55,
	0x64, 0x70, 0x48, 0x0a, 0x52, 0x03, 0x75, 0x64, 0x70, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x03,
	0x67, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x48, 0x0b, 0x52, 0x03, 0x67, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x05, 0x67, 0x74, 0x70, 0x76, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31,
	0x48, 0x0c, 0x52, 0x05, 0x67, 0x74, 0x70, 0x76, 0x31, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x05,
	0x67, 0x74, 0x70, 0x76, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x48, 0x0d, 0x52, 0x05, 0x67,
	0x74, 0x70, 0x76, 0x32, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x72, 0x70, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x41,
	0x72, 0x70, 0x48, 0x0e, 0x52, 0x03, 0x61, 0x72, 0x70, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04,
	0x69, 0x63, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x48, 0x0f, 0x52, 0x04, 0x69, 0x63, 0x6d,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x63, 0x6d, 0x70, 0x76, 0x36, 0x48, 0x10, 0x52, 0x06, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x03, 0x70, 0x70, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70, 0x48, 0x11, 0x52,
	0x03, 0x70, 0x70, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x67, 0x6d, 0x70, 0x76,
	0x31, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x48, 0x12, 0x52, 0x06, 0x69, 0x67, 0x6d, 0x70,
	0x76, 0x31, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70,
	0x6c, 0x73, 0x48, 0x13, 0x52, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x1a, 0xf5, 0x01,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x76, 0x6c, 0x61, 0x6e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x36, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x66, 0x63, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x10, 0x09, 0x12,
	0x07, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x67, 0x72, 0x65, 0x10,
	0x0b, 0x12, 0x09, 0x0a, 0x05, 0x67, 0x74, 0x70, 0x76, 0x31, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05,
	0x67, 0x74, 0x70, 0x76, 0x32, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x72, 0x70, 0x10, 0x0e,
	0x12, 0x08, 0x0a, 0x04, 0x69, 0x63, 0x6d, 0x70, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x69, 0x63,
	0x6d, 0x70, 0x76, 0x36, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x70, 0x70, 0x10, 0x11, 0x12,
	0x0a, 0x0a, 0x06, 0x69, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x6d,
	0x70, 0x6c, 0x73, 0x10, 0x13, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x66, 0x63, 0x70, 0x61, 0x75, 0x73, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x70, 0x61, 0x75, 0x73, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x74, 0x63, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x64, 0x70, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x67, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x74, 0x70, 0x76, 0x31, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x67, 0x74, 0x70, 0x76, 0x32, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x72, 0x70,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x63,
	0x6d, 0x70, 0x76, 0x36, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x70, 0x70, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x69, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x22, 0x22, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x44, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x64, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x03, 0x73, 0x72, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x53, 0x72, 0x63, 0x48, 0x01, 0x52, 0x03, 0x73, 0x72, 0x63, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a,
	0x0a, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x66, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x50, 0x66, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x03, 0x52, 0x08, 0x70, 0x66, 0x63,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x73, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x72, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x66, 0x63, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c,
	0x61, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x03, 0x63, 0x66, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x56, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69, 0x48, 0x01, 0x52, 0x03, 0x63, 0x66, 0x69, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x48, 0x02, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c,
	0x61, 0x6e, 0x54, 0x70, 0x69, 0x64, 0x48, 0x03, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x63, 0x66, 0x69, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x56,
	0x78, 0x6c, 0x61, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x56, 0x78, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x48, 0x01,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c,
	0x61, 0x6e, 0x56, 0x6e, 0x69, 0x48, 0x02, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x31, 0x48, 0x03, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x76,
	0x6e, 0x69, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31,
	0x22, 0x9f, 0x09, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x12, 0x3a, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x34, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0d, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x48, 0x01, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x48, 0x02,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x48, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x34, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x04, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x48, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0d, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x70, 0x76, 0x34, 0x44, 0x6f, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x06, 0x52, 0x0c, 0x64, 0x6f, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0e, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34,
	0x4d, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x07, 0x52,
	0x0d, 0x6d, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x50, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48, 0x08,
	0x52, 0x0e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x48, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x0a, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x48, 0x0b, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x03, 0x73,
	0x72, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72,
	0x63, 0x48, 0x0c, 0x52, 0x03, 0x73, 0x72, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x03, 0x64,
	0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73,
	0x74, 0x48, 0x0d, 0x52, 0x03, 0x64, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x6f, 0x6e, 0x74,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x6f,
	0x72, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x72, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64,
	0x73, 0x74, 0x22, 0xc2, 0x02, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x61, 0x77, 0x48, 0x01, 0x52, 0x03, 0x72, 0x61, 0x77, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x48, 0x02,
	0x52, 0x03, 0x74, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x63, 0x70, 0x48, 0x03, 0x52, 0x04, 0x64, 0x73, 0x63,
	0x70, 0x88, 0x01, 0x01, 0x1a, 0x3d, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x33,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x73, 0x63,
	0x70, 0x10, 0x03, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x72, 0x61, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x63, 0x70, 0x12, 0x32, 0x0a, 0x03, 0x70, 0x68, 0x62, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x63, 0x70, 0x50,
	0x68, 0x62, 0x48, 0x00, 0x52, 0x03, 0x70, 0x68, 0x62, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x03,
	0x65, 0x63, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44,
	0x73, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x48, 0x01, 0x52, 0x03, 0x65, 0x63, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x68, 0x62, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x63, 0x6e,
	0x22, 0xef, 0x03, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73,
	0x12, 0x46, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x50, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x54, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x48, 0x02, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65, 0x6c,
	0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x48, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x4d,
	0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x48, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x55,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x48, 0x05, 0x52, 0x06, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72,
	0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d,
	0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x6e, 0x75, 0x73,
	0x65, 0x64, 0x22, 0xf8, 0x04, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x12,
	0x3a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x48, 0x02, 0x52, 0x09, 0x66, 0x6c,
	0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x09, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x48, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x48, 0x05, 0x52, 0x08, 0x68, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x36, 0x53, 0x72, 0x63, 0x48, 0x06, 0x52, 0x03, 0x73, 0x72, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x36, 0x44, 0x73, 0x74, 0x48, 0x07, 0x52, 0x03, 0x64, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x73, 0x72, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x73, 0x74, 0x22, 0xbc, 0x09,
	0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x72, 0x63, 0x48, 0x01, 0x52, 0x03,
	0x73, 0x72, 0x63, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52,
	0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x03, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x5e, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x04, 0x52, 0x11, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x30, 0x48, 0x05, 0x52,
	0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x30, 0x88, 0x01, 0x01, 0x12,
	0x4c, 0x0a, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x31,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x31, 0x48, 0x06, 0x52, 0x0b, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x31, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x32, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x48, 0x07, 0x52, 0x0b, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x33, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x33, 0x48, 0x08, 0x52, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x33, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x34, 0x48, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x34, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x35, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x35, 0x48, 0x0a, 0x52, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x35, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x36, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66,
	0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x36, 0x48, 0x0b, 0x52, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x36,
	0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x37, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x37, 0x48,
	0x0c, 0x52, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x37, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x72,
	0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x30, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x31,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x32, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x33, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x34, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x35, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x36, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x37, 0x22, 0xa2, 0x03, 0x0a,
	0x11, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x03, 0x64, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x03, 0x73,
	0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x72, 0x63, 0x48, 0x01, 0x52, 0x03, 0x73, 0x72,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x02, 0x52, 0x09, 0x65, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x57, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x04, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x73, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x73, 0x72, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xaa, 0x08, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x12, 0x3a, 0x0a,
	0x08, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x63, 0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70,
	0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x01, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x53, 0x65, 0x71, 0x4e, 0x75,
	0x6d, 0x48, 0x02, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x07, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x63, 0x70, 0x41, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x48, 0x03, 0x52, 0x06, 0x61, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x48, 0x04, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06,
	0x65, 0x63, 0x6e, 0x5f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63,
	0x70, 0x45, 0x63, 0x6e, 0x4e, 0x73, 0x48, 0x05, 0x52, 0x05, 0x65, 0x63, 0x6e, 0x4e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x65, 0x63, 0x6e, 0x5f, 0x63, 0x77, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x43, 0x77, 0x72, 0x48, 0x06,
	0x52, 0x06, 0x65, 0x63, 0x6e, 0x43, 0x77, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65,
	0x63, 0x6e, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x63, 0x70, 0x45, 0x63, 0x6e, 0x45, 0x63, 0x68, 0x6f, 0x48, 0x07, 0x52, 0x07, 0x65, 0x63, 0x6e,
	0x45, 0x63, 0x68, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x74, 0x6c, 0x5f, 0x75,
	0x72, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c,
	0x55, 0x72, 0x67, 0x48, 0x08, 0x52, 0x06, 0x63, 0x74, 0x6c, 0x55, 0x72, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x07, 0x63, 0x74, 0x6c, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x41, 0x63, 0x6b, 0x48, 0x09, 0x52, 0x06,
	0x63, 0x74, 0x6c, 0x41, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x74, 0x6c,
	0x5f, 0x70, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43,
	0x74, 0x6c, 0x50, 0x73, 0x68, 0x48, 0x0a, 0x52, 0x06, 0x63, 0x74, 0x6c, 0x50, 0x73, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x74, 0x6c, 0x5f, 0x72, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x52, 0x73, 0x74, 0x48, 0x0b,
	0x52, 0x06, 0x63, 0x74, 0x6c, 0x52, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x63,
	0x74, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63,
	0x70, 0x43, 0x74, 0x6c, 0x53, 0x79, 0x6e, 0x48, 0x0c, 0x52, 0x06, 0x63, 0x74, 0x6c, 0x53, 0x79,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x74, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x46, 0x69, 0x6e,
	0x48, 0x0d, 0x52, 0x06, 0x63, 0x74, 0x6c, 0x46, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x63, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x0e, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x63, 0x6e, 0x5f,
	0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x63, 0x77, 0x72, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x74, 0x6c, 0x5f, 0x75, 0x72, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x74, 0x6c, 0x5f,
	0x61, 0x63, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x74, 0x6c, 0x5f, 0x70, 0x73, 0x68, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x74, 0x6c, 0x5f, 0x72, 0x73, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x74, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x74, 0x6c, 0x5f,
	0x66, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0xa9,
	0x02, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x72,
	0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64,
	0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x44, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x48, 0x01, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x02, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64,
	0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x48, 0x03, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xed, 0x03, 0x0a, 0x07, 0x46,
	0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x48, 0x01, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x48, 0x04, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x31, 0x48, 0x05, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31,
	0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x22, 0xd7, 0x08, 0x0a, 0x09, 0x46,
	0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x12, 0x3b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74,
	0x70, 0x76, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x01, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x48, 0x02, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x48, 0x03,
	0x52, 0x05, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x31, 0x53, 0x46, 0x6c, 0x61, 0x67, 0x48, 0x04, 0x52, 0x05, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x50, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x48, 0x05, 0x52, 0x06, 0x70, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x48, 0x07, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x65, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x54, 0x65, 0x69, 0x64,
	0x48, 0x08, 0x52, 0x04, 0x74, 0x65, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0e, 0x73,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x53, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x09, 0x52, 0x0d, 0x73, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x6e,
	0x5f, 0x70, 0x64, 0x75, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4e, 0x50, 0x64, 0x75, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x48, 0x0a, 0x52, 0x0a, 0x6e, 0x50, 0x64, 0x75, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x6e, 0x0a, 0x1a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4e, 0x65,
	0x78, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0b, 0x52, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6e, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x69,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x10, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x01,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x68, 0x0a,
	0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74,
	0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x02, 0x52,
	0x13, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0xfe, 0x05, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x32, 0x12, 0x3b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x57,
	0x0a, 0x11, 0x70, 0x69, 0x67, 0x67, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32,
	0x50, 0x69, 0x67, 0x67, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67,
	0x48, 0x01, 0x52, 0x10, 0x70, 0x69, 0x67, 0x67, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x65, 0x69, 0x64, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x32, 0x54, 0x65, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x48, 0x02, 0x52, 0x08, 0x74, 0x65, 0x69,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x53,
	0x70, 0x61, 0x72, 0x65, 0x31, 0x48, 0x03, 0x52, 0x06, 0x73, 0x70, 0x61, 0x72, 0x65, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x05, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x32, 0x54, 0x65, 0x69, 0x64, 0x48, 0x06, 0x52, 0x04, 0x74, 0x65, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x51, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x07,
	0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x72, 0x65, 0x32, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x53, 0x70, 0x61, 0x72, 0x65, 0x32,
	0x48, 0x08, 0x52, 0x06, 0x73, 0x70, 0x61, 0x72, 0x65, 0x32, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x69,
	0x67, 0x67, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x69, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x65, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x32, 0x22, 0xb8, 0x07, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70,
	0x12, 0x49, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x41, 0x72, 0x70, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x48, 0x02, 0x52, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x41, 0x72, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x48, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x14, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x48, 0x05,
	0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x48, 0x06, 0x52, 0x12,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x48, 0x07, 0x52, 0x12, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x48, 0x08, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x22,
	0xaf, 0x01, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d,
	0x70, 0x45, 0x63, 0x68, 0x6f, 0x48, 0x01, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x88, 0x01, 0x01,
	0x1a, 0x2b, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x21, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x10, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x63, 0x68,
	0x6f, 0x22, 0xa0, 0x03, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63,
	0x68, 0x6f, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68,
	0x6f, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68,
	0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x03, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x04, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d,
	0x70, 0x76, 0x36, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63,
	0x6d, 0x70, 0x76, 0x36, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f,
	0x48, 0x01, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x88, 0x01, 0x01, 0x1a, 0x2b, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x21, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x22, 0xac, 0x03, 0x0a,
	0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x12,
	0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63,
	0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68,
	0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x02, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68,
	0x6f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48,
	0x03, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63,
	0x68, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x48, 0x04, 0x52, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xf4, 0x01, 0x0a, 0x07,
	0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48,
	0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76,
	0x31, 0x12, 0x3c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x67, 0x6d, 0x70, 0x76, 0x31, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x55, 0x6e, 0x75, 0x73,
	0x65, 0x64, 0x48, 0x02, 0x52, 0x06, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x48, 0x03, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x4c, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x04, 0x52, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe4, 0x02,
	0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0f,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x42, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x4f, 0x66, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x48, 0x02, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x4f, 0x66, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69,
	0x76, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x02, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x48, 0x03, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x88, 0x01,
	0x01, 0x1a, 0x47, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x3d, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x10, 0x03, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x22, 0x79, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x22, 0x4e, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6d, 0x61, 0x78, 0x22, 0x88, 0x03, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x03, 0x70, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x03,
	0x62, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x04, 0x6b, 0x62, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52,
	0x04, 0x6d, 0x62, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x67, 0x62, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x04, 0x67, 0x62, 0x70, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x61, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x57, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x70, 0x73,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x70, 0x73, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x6b,
	0x62, 0x70, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x62, 0x70, 0x73, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x67, 0x62, 0x70, 0x73, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x10, 0x06, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x70, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x62, 0x70, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x67, 0x62, 0x70, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0xdd,
	0x03, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x48, 0x02, 0x52, 0x0c, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x75, 0x72, 0x73, 0x74, 0x48, 0x03, 0x52, 0x05,
	0x62, 0x75, 0x72, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x48, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x1a, 0x62, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x58, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x62,
	0x75, 0x72, 0x73, 0x74, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x6f, 0x75, 0x73, 0x10, 0x04, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x22, 0x64,
	0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x12, 0x15, 0x0a, 0x03, 0x67, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x03, 0x67, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x61, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x22, 0xb6, 0x02, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x0b, 0x6e,
	0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x4f, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x45, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x03, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x91, 0x01,
	0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x03, 0x67, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x02, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x67, 0x61, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x78, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x03, 0x67, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x02, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x61, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0xde, 0x01, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x75, 0x72, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x62, 0x75, 0x72, 0x73, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x67, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x03,
	0x67, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x75, 0x72, 0x73, 0x74, 0x47, 0x61, 0x70, 0x48,
	0x03, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x75, 0x72, 0x73, 0x74, 0x47, 0x61, 0x70,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67,
	0x61, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x72,
	0x73, 0x74, 0x5f, 0x67, 0x61, 0x70, 0x22, 0xd6, 0x02, 0x0a, 0x19, 0x46, 0x6c, 0x6f, 0x77, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x75, 0x72, 0x73,
	0x74, 0x47, 0x61, 0x70, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x75, 0x72, 0x73,
	0x74, 0x47, 0x61, 0x70, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x6f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52,
	0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x4f, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0x45, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x10, 0x03, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0xcf, 0x01, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6c, 0x6f, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x04, 0x6c, 0x6f,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x48, 0x03, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x1a, 0x43, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x3b, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x75, 0x74, 0x5f, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x05, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x48,
	0x01, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x11, 0x72, 0x78,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x48, 0x02, 0x52, 0x0f, 0x72, 0x78, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x18, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x03, 0x52, 0x16, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x22, 0x6f,
	0x0a, 0x14, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22,
	0x33, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x45, 0x0a, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x0c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xa9, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa0,
	0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x75, 0x70, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x10, 0x04, 0x12, 0x20, 0x0a,
	0x1c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x62,
	0x6f, 0x76, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x10, 0x05, 0x12,
	0x20, 0x0a, 0x1c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x65, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x10,
	0x06, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xa3, 0x03, 0x0a, 0x04,
	0x4c, 0x6c, 0x64, 0x70, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x50, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x48, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03,
	0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x16, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x1a, 0x30, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x26,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xbd, 0x03, 0x0a, 0x0d, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x68, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x49, 0x64, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f,
	0x0a, 0x13, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x63,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x1a, 0x69, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x5f,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x10, 0x03, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xbe, 0x03, 0x0a, 0x0a, 0x4c, 0x6c, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a,
	0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x02, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x69, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x5f, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x10, 0x03,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xe6, 0x01, 0x0a, 0x15, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x4d, 0x61, 0x63, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x63, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x1a, 0x36, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2c, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x1c, 0x4c, 0x6c,
	0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x36, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x4c, 0x6c, 0x64, 0x70, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x36, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x2c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x32, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x64,
	0x6f, 0x77, 0x6e, 0x10, 0x02, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c, 0x6f,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x4c, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x04, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x35, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x10, 0x02, 0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x1a, 0x3c, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x2b, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x10, 0x02, 0x22,
	0x93, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x3d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x34, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x7b, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x35, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x10, 0x02, 0x22, 0xea, 0x01, 0x0a, 0x0b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x11, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x01, 0x52, 0x0f, 0x6c, 0x61, 0x63, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x38, 0x0a, 0x06,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2e, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x32, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x76,
	0x34, 0x48, 0x01, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04,
	0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x76, 0x36, 0x48, 0x02, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x36, 0x88, 0x01, 0x01, 0x1a, 0x35, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2b,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x22, 0x5e, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67,
	0x49, 0x70, 0x76, 0x34, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x22, 0x5e, 0x0a, 0x08, 0x50, 0x69, 0x6e, 0x67,
	0x49, 0x70, 0x76, 0x36, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x22, 0x3b, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x72, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x31, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x10, 0x02, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x4c, 0x61, 0x63, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61,
	0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x67, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x32, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x29, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x22, 0xee, 0x05, 0x0a, 0x0e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x02, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x05, 0x62, 0x67, 0x70, 0x76, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x76, 0x34, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x03, 0x52, 0x05, 0x62, 0x67, 0x70, 0x76, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x67, 0x70, 0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x76, 0x36, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x04, 0x52, 0x05, 0x62,
	0x67, 0x70, 0x76, 0x36, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x05,
	0x52, 0x04, 0x69, 0x73, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x03, 0x6c, 0x61, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x67,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x06,
	0x52, 0x03, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x61, 0x63, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x63,
	0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x07, 0x52, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x6c,
	0x64, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c,
	0x6c, 0x64, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x08, 0x52, 0x04, 0x6c, 0x6c, 0x64, 0x70, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04,
	0x72, 0x73, 0x76, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x52, 0x73, 0x76, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x09, 0x52, 0x04, 0x72, 0x73, 0x76, 0x70, 0x88, 0x01, 0x01, 0x1a, 0x7c,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x72, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x66,
	0x6c, 0x6f, 0x77, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x67, 0x70, 0x76, 0x34, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x62, 0x67, 0x70, 0x76, 0x36, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x69,
	0x73, 0x69, 0x73, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x6c, 0x61, 0x67, 0x10, 0x06, 0x12, 0x08,
	0x0a, 0x04, 0x6c, 0x61, 0x63, 0x70, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x6c, 0x64, 0x70,
	0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x73, 0x76, 0x70, 0x10, 0x09, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x67,
	0x70, 0x76, 0x34, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x67, 0x70, 0x76, 0x36, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x61, 0x67, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x6c, 0x64, 0x70,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x22, 0xfa, 0x05, 0x0a, 0x0f, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x32, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x62, 0x67, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x76, 0x34, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0c, 0x62,
	0x67, 0x70, 0x76, 0x34, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x0d, 0x62,
	0x67, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x76, 0x36, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x0c, 0x62, 0x67, 0x70, 0x76, 0x36, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49,
	0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x69, 0x73, 0x69, 0x73, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x4c, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x6c, 0x61, 0x67,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x6c, 0x61, 0x63, 0x70, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b,
	0x6c, 0x61, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x6c,
	0x6c, 0x64, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x0b, 0x6c, 0x6c, 0x64, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x32, 0x0a, 0x0c, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x72, 0x73, 0x76, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x1a, 0xc5, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xba,
	0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x62, 0x67, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x62, 0x67, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x6c, 0x64, 0x70, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x72, 0x73, 0x76,
	0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x10, 0x09, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x12, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0xe2, 0x01, 0x0a, 0x0b, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x5f, 0x74, 0x78, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f,
	0x72, 0x78, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x08,
	0x12, 0x12, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72,
	0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x10, 0x0c, 0x22, 0x8b,
	0x07, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x02, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x03, 0x52, 0x07, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x08, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52,
	0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06,
	0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07,
	0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x54, 0x78,
	0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x09, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x54, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x0b, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x78, 0x52, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x0c, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x31, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x29, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a, 0x3c, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x31, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x10, 0x02, 0x1a, 0x3d, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x22, 0x31, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x22, 0xf3, 0x02, 0x0a,
	0x12, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x97, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x10, 0x07,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x16, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x3a, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x30, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10,
	0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xb6, 0x06, 0x0a,
	0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x03, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04,
	0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x05, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x06, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x07, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x54, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x78, 0x52, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0b, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x0c,
	0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x1a, 0x49, 0x0a, 0x08,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x22, 0x3d, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x78, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x5f, 0x74, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72,
	0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x58, 0x0a, 0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xa2, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x01, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6e, 0x73, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x6e, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x02, 0x52, 0x09, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6e,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6e, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x73, 0x22,
	0xf8, 0x03, 0x0a, 0x13, 0x42, 0x67, 0x70, 0x76, 0x34, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x76, 0x34, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x1a, 0xf3, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12,
	0x1c, 0x0a, 0x18, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x06, 0x12, 0x10, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12,
	0x14, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x0b, 0x12, 0x17,
	0x0a, 0x13, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x0d, 0x12,
	0x1a, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x66,
	0x73, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x0f, 0x22, 0xb4, 0x0a, 0x0a, 0x0b, 0x42,
	0x67, 0x70, 0x76, 0x34, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x76, 0x34, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x03, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x04, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52,
	0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x07, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x53,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0e, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x13, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52,
	0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0d, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x16, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x15, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x73, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x42, 0x67, 0x70, 0x76, 0x34, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x46, 0x73, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x0f, 0x52, 0x08, 0x66, 0x73, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x6f, 0x77,
	0x6e, 0x10, 0x02, 0x1a, 0x76, 0x0a, 0x08, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x6a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x65, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x06, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xf8, 0x03, 0x0a, 0x13, 0x42, 0x67, 0x70, 0x76, 0x36, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x76, 0x36, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0xf3, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x6c, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x12, 0x1c, 0x0a, 0x18, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10,
	0x07, 0x12, 0x14, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x0b,
	0x12, 0x17, 0x0a, 0x13, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10,
	0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x0e, 0x12, 0x0d, 0x0a,
	0x09, 0x66, 0x73, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x0f, 0x22, 0xb4, 0x0a, 0x0a,
	0x0b, 0x42, 0x67, 0x70, 0x76, 0x36, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x76, 0x36, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x6c, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x03, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x18, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x06, 0x52, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08,
	0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0a, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52,
	0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0c, 0x52, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x16,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x15,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x73, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x76, 0x36, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x46, 0x73,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x0f, 0x52, 0x08, 0x66,
	0x73, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x64,
	0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a, 0x76, 0x0a, 0x08, 0x46, 0x73, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x6a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x64,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x06, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0xac, 0x06, 0x0a, 0x12, 0x49, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4b, 0x0a,
	0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0xa5, 0x05, 0x0a, 0x0b, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x95, 0x05, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x31, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x70, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x6c, 0x31, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x6c, 0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x6c, 0x31, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10,
	0x04, 0x12, 0x20, 0x0a, 0x1c, 0x6c, 0x31, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x6c, 0x31, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x6c, 0x31, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x07, 0x12, 0x10, 0x0a,
	0x0c, 0x6c, 0x31, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x08, 0x12,
	0x14, 0x0a, 0x10, 0x6c, 0x31, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x31, 0x5f, 0x63, 0x73, 0x6e, 0x70,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x6c, 0x31, 0x5f, 0x63, 0x73,
	0x6e, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x0f, 0x0a,
	0x0b, 0x6c, 0x31, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x0c, 0x12, 0x13,
	0x0a, 0x0f, 0x6c, 0x31, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x75, 0x70, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x6c, 0x32, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10,
	0x6c, 0x32, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x10, 0x10, 0x12, 0x1c, 0x0a, 0x18, 0x6c, 0x32, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x11,
	0x12, 0x20, 0x0a, 0x1c, 0x6c, 0x32, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x10, 0x12, 0x12, 0x21, 0x0a, 0x1d, 0x6c, 0x32, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x6c, 0x32, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c,
	0x6c, 0x32, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x15, 0x12, 0x14,
	0x0a, 0x10, 0x6c, 0x32, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x32, 0x5f, 0x63, 0x73, 0x6e, 0x70, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x6c, 0x32, 0x5f, 0x63, 0x73, 0x6e,
	0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b,
	0x6c, 0x32, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x19, 0x12, 0x13, 0x0a,
	0x0f, 0x6c, 0x32, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x10, 0x1a, 0x22, 0xcc, 0x0f, 0x0a, 0x0a, 0x49, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x31,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x31, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x55, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x31, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x0d, 0x6c, 0x31, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x6c, 0x31, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x15, 0x6c, 0x31, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x1c, 0x6c, 0x31, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x19, 0x6c, 0x31, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1d, 0x6c, 0x31, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c,
	0x6f, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52,
	0x18, 0x6c, 0x31, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x21,
	0x6c, 0x31, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x1c, 0x6c, 0x31, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x31,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x0e, 0x6c, 0x31, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x31, 0x5f,
	0x70, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x08, 0x52, 0x0a, 0x6c, 0x31, 0x50, 0x73, 0x6e, 0x70, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x31, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0e, 0x6c, 0x31,
	0x50, 0x73, 0x6e, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0c, 0x6c, 0x31, 0x5f, 0x63, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a, 0x6c, 0x31, 0x43, 0x73, 0x6e, 0x70, 0x53,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x31, 0x5f, 0x63, 0x73, 0x6e,
	0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0b, 0x52, 0x0e, 0x6c, 0x31, 0x43, 0x73, 0x6e, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x6c, 0x31, 0x5f, 0x6c, 0x73, 0x70, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x09, 0x6c, 0x31,
	0x4c, 0x73, 0x70, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x31,
	0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x0d, 0x6c, 0x31, 0x4c, 0x73, 0x70, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x32, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0e, 0x52, 0x0c, 0x6c, 0x32, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6c, 0x61, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0d, 0x6c,
	0x32, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x18, 0x6c, 0x32, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x10, 0x52, 0x15, 0x6c, 0x32, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x1c, 0x6c, 0x32, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x19, 0x6c, 0x32, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x1d, 0x6c, 0x32, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x18, 0x6c, 0x32,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x21, 0x6c, 0x32, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x1c, 0x6c, 0x32, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x32, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x14, 0x52, 0x0e, 0x6c, 0x32, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x6c, 0x32, 0x5f, 0x70, 0x73, 0x6e,
	0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0a,
	0x6c, 0x32, 0x50, 0x73, 0x6e, 0x70, 0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x10, 0x6c, 0x32, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x0e, 0x6c, 0x32, 0x50, 0x73, 0x6e,
	0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c,
	0x6c, 0x32, 0x5f, 0x63, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x17, 0x52, 0x0a, 0x6c, 0x32, 0x43, 0x73, 0x6e, 0x70, 0x53, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6c, 0x32, 0x5f, 0x63, 0x73, 0x6e, 0x70, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52,
	0x0e, 0x6c, 0x32, 0x43, 0x73, 0x6e, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x6c, 0x32, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x09, 0x6c, 0x32, 0x4c, 0x73, 0x70,
	0x53, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x32, 0x5f, 0x6c, 0x73,
	0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x1a, 0x52, 0x0d, 0x6c, 0x32, 0x4c, 0x73, 0x70, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6c, 0x31, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x70,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x31, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6c, 0x61, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6c, 0x31, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6c, 0x31, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6c, 0x31, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x6c, 0x31, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c,
	0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x31, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x31, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x31, 0x5f, 0x63, 0x73, 0x6e,
	0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x31, 0x5f, 0x63, 0x73,
	0x6e, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6c, 0x31, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x6c, 0x31, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x75, 0x70, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6c, 0x32, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x6c, 0x32, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6c, 0x32, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x6c, 0x32, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6c, 0x32, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x32, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x32, 0x5f, 0x70, 0x73, 0x6e, 0x70, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x32, 0x5f, 0x63,
	0x73, 0x6e, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x32, 0x5f,
	0x63, 0x73, 0x6e, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6c, 0x32, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6c, 0x32, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x22, 0xd4, 0x02, 0x0a, 0x11, 0x4c, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x4c, 0x61, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x1a, 0xd5, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0xc5, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x10, 0x07, 0x12, 0x12,
	0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x10, 0x0a, 0x22, 0xa9, 0x05, 0x0a, 0x09, 0x4c, 0x61, 0x67,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x67, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x55, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x54,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07,
	0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x54, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x08, 0x52, 0x0c, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x78, 0x52, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72,
	0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x37,
	0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x29, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f,
	0x74, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x22, 0xdf, 0x03, 0x0a, 0x12, 0x4c, 0x61, 0x63, 0x70, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x67, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x67, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0xab, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x6c, 0x61, 0x63, 0x70, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x6c, 0x61, 0x63, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x73,
	0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06,
	0x12, 0x10, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x10,
	0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x10,
	0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79,
	0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x10, 0x0e,
	0x12, 0x14, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x10, 0x0f, 0x22, 0xe4, 0x09, 0x0a, 0x0a, 0x4c, 0x61, 0x63, 0x70, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x11, 0x6c, 0x61, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c,
	0x61, 0x63, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0d, 0x6c, 0x61, 0x63, 0x70, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x61, 0x63, 0x70,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x63, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x72, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52,
	0x0c, 0x6c, 0x61, 0x63, 0x70, 0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x05, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x63, 0x70, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x06, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a,
	0x0f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x61, 0x63,
	0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x07, 0x52, 0x0f,
	0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52,
	0x07, 0x6f, 0x70, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x10, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x1a, 0x3c, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x22, 0x30, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x10, 0x02, 0x1a, 0x37, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x2c, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x6f, 0x6e, 0x67, 0x10, 0x02, 0x1a, 0x45, 0x0a, 0x0f, 0x53,
	0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x10, 0x02, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x61, 0x63,
	0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x78, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x74, 0x78,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x61, 0x63, 0x70, 0x5f, 0x72, 0x78, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x22, 0x95, 0x02,
	0x0a, 0x12, 0x4c, 0x6c, 0x64, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6c, 0x64, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x4c, 0x6c, 0x64, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x1a, 0x92, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x78, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x06, 0x22, 0x80, 0x03, 0x0a, 0x0a, 0x4c, 0x6c, 0x64, 0x70, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x54, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0d, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6c,
	0x76, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x05, 0x52, 0x0b, 0x74, 0x6c, 0x76, 0x73, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x6c, 0x76, 0x73, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x0b, 0x74, 0x6c, 0x76, 0x73,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x72,
	0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x74, 0x78, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6c, 0x76, 0x73,
	0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0xdc, 0x05, 0x0a, 0x12, 0x52, 0x73, 0x76,
	0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52,
	0x73, 0x76, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a,
	0xd5, 0x04, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0xc5, 0x04, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x75,
	0x70, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x32,
	0x70, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x75, 0x70, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6c,
	0x73, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x76, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x76, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x74, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x0a, 0x12, 0x11, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x0b,
	0x12, 0x11, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x72,
	0x78, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x76, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x0f, 0x12,
	0x12, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x72,
	0x78, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x5f, 0x74, 0x78, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x72, 0x78, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x73, 0x5f, 0x74, 0x78, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73,
	0x5f, 0x72, 0x78, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x78,
	0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x16, 0x12,
	0x0c, 0x0a, 0x08, 0x6e, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x78, 0x10, 0x17, 0x12, 0x0c, 0x0a,
	0x08, 0x6e, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x72, 0x78, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b, 0x73,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x78, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b,
	0x73, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x78, 0x10, 0x1a, 0x12, 0x0d, 0x0a,
	0x09, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x78, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x78, 0x10, 0x1c, 0x12, 0x20, 0x0a, 0x1c, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x78, 0x10, 0x1d, 0x12, 0x18, 0x0a,
	0x14, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x1e, 0x22, 0xff, 0x0d, 0x0a, 0x0a, 0x52, 0x73, 0x76, 0x70,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x42, 0x0a, 0x1b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x6c,
	0x73, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x18, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x32, 0x70, 0x4c, 0x73, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x32, 0x70, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x32, 0x70, 0x4c, 0x73,
	0x70, 0x73, 0x55, 0x70, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x12, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x32, 0x70,
	0x4c, 0x73, 0x70, 0x73, 0x55, 0x70, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x73, 0x70,
	0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x0c, 0x6c, 0x73, 0x70, 0x46, 0x6c, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68, 0x73, 0x54,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x72, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68, 0x73, 0x52,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x76, 0x73, 0x5f, 0x74, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x07, 0x72, 0x65, 0x73, 0x76, 0x73, 0x54,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x76, 0x73, 0x5f, 0x72, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x76, 0x73, 0x52,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x61,
	0x72, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x74, 0x68, 0x54, 0x65, 0x61, 0x72, 0x73, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x54, 0x65, 0x61, 0x72,
	0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x74,
	0x65, 0x61, 0x72, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x76, 0x54, 0x65, 0x61, 0x72, 0x73, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x72, 0x78,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x76, 0x54, 0x65,
	0x61, 0x72, 0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x54, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0c, 0x70,
	0x61, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x78,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x76, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x76, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x10, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x76, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x5f, 0x74, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x76, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x72, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x12, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x74, 0x78, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x54,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x72,
	0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x08, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x73, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x74,
	0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x06, 0x61, 0x63, 0x6b, 0x73, 0x54,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x72, 0x78, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x16, 0x52, 0x06, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x17, 0x52, 0x07, 0x6e, 0x61, 0x63, 0x6b, 0x73, 0x54, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x72, 0x78, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x18, 0x52, 0x07, 0x6e, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74,
	0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x0a, 0x73, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a, 0x52,
	0x0a, 0x73, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x78, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x1b, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x78, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x1c, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x1c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x78, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1d, 0x52, 0x19, 0x70, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x72, 0x65, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1e, 0x52, 0x13, 0x70, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x32, 0x70, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x75,
	0x70, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x32, 0x70,
	0x5f, 0x6c, 0x73, 0x70, 0x73, 0x5f, 0x75, 0x70, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x73, 0x70,
	0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x74, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x5f, 0x72, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x76, 0x73, 0x5f,
	0x74, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x76, 0x73, 0x5f, 0x72, 0x78, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x74,
	0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x73,
	0x5f, 0x72, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x74, 0x65, 0x61,
	0x72, 0x73, 0x5f, 0x74, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x74,
	0x65, 0x61, 0x72, 0x73, 0x5f, 0x72, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x78, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x78,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x5f, 0x72, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x5f, 0x74, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x73, 0x76, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x5f, 0x72, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73,
	0x5f, 0x74, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x5f, 0x72,
	0x78, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x78, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x72, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x61,
	0x63, 0x6b, 0x73, 0x5f, 0x74, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x61, 0x63, 0x6b, 0x73,
	0x5f, 0x72, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x74, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x72, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x78, 0x42,
	0x1f, 0x0a, 0x1d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x78,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xee, 0x05, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x01, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x76, 0x36, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x02, 0x52, 0x0d, 0x69, 0x70,
	0x76, 0x36, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0c, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x03, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73,
	0x4c, 0x73, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x04, 0x52, 0x08, 0x69, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x0e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c,
	0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x05, 0x52, 0x0d, 0x6c, 0x6c, 0x64, 0x70, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x72,
	0x73, 0x76, 0x70, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x4c, 0x73, 0x70, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x06, 0x52, 0x08, 0x72, 0x73, 0x76,
	0x70, 0x4c, 0x73, 0x70, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x8e, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x6c, 0x73, 0x70, 0x73, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x73,
	0x76, 0x70, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x10, 0x06, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62,
	0x67, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6c,
	0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x22, 0xc2, 0x04, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x34,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x76, 0x36, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x62, 0x67, 0x70, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c,
	0x73, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x69, 0x73, 0x69, 0x73, 0x4c, 0x73,
	0x70, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70,
	0x4c, 0x73, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x73, 0x76, 0x70, 0x4c,
	0x73, 0x70, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x83,
	0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x73, 0x70, 0x73, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x6c, 0x73,
	0x70, 0x73, 0x10, 0x06, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x41, 0x0a, 0x18, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x76, 0x34, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x76, 0x34, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x31, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6c,
	0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x18, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x76, 0x36, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a,
	0x10, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x76, 0x36, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x87, 0x03, 0x0a, 0x15, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67,
	0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x14,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x69, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x4c, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x3b, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x10, 0x02, 0x22, 0xba, 0x02,
	0x0a, 0x1a, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x43, 0x0a, 0x06,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x39, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x69, 0x67, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x67, 0x70, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10,
	0x03, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x22, 0xba, 0x02, 0x0a, 0x1a, 0x42,
	0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01,
	0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06,
	0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x43, 0x0a, 0x06, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x22, 0x39, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x69, 0x67, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x67, 0x70, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x03, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0d,
	0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x15, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42,
	0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xc4, 0x04, 0x0a, 0x19, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x70, 0x76,
	0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x47, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x06, 0x70, 0x61, 0x74,
	0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0b, 0x69, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x48, 0x06, 0x52, 0x06, 0x61, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x1a, 0x43, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x22, 0x39, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x69, 0x67,
	0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x67, 0x70, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x03, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xc4, 0x04, 0x0a, 0x19, 0x42, 0x67, 0x70, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x70,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x42, 0x67, 0x70,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x02, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0d, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x0b, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x73,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x48, 0x06, 0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x1a, 0x43,
	0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0x39, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x69, 0x67, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x67,
	0x70, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x03, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xca, 0x02,
	0x0a, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x61, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x88, 0x01, 0x01, 0x1a, 0x8e, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x01,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x6e, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x6e, 0x6f, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x6e, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x6c, 0x6c, 0x67, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x6c,
	0x6c, 0x67, 0x72, 0x10, 0x06, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x4a, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a,
	0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x67, 0x70, 0x41,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x67, 0x70, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x67, 0x70, 0x41,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x1a, 0x5d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x71, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x61, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x71, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x10, 0x04, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x14, 0x49, 0x73, 0x69, 0x73,
	0x4c, 0x73, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x69,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x0d,
	0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a,
	0x10, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x73, 0x69, 0x73, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x04,
	0x6c, 0x73, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x6c,
	0x73, 0x70, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x04, 0x0a, 0x0c, 0x49, 0x73, 0x69,
	0x73, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x73, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x73, 0x70, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x08, 0x70, 0x64, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x64, 0x75, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x70, 0x64, 0x75, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x11,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x64, 0x75, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x09, 0x70, 0x64, 0x75, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73,
	0x4c, 0x73, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x48, 0x04, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x06, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x54, 0x6c,
	0x76, 0x73, 0x48, 0x06, 0x52, 0x04, 0x74, 0x6c, 0x76, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x3c, 0x0a,
	0x07, 0x50, 0x64, 0x75, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x10, 0x02, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x64, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x64, 0x75, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x6c, 0x76,
	0x73, 0x22, 0xaa, 0x05, 0x0a, 0x0b, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x54, 0x6c, 0x76,
	0x73, 0x12, 0x39, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6c,
	0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49,
	0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0c,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x6c, 0x76, 0x73, 0x12, 0x4f, 0x0a, 0x14,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x6c, 0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x49, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x52, 0x12, 0x69, 0x73, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x73, 0x12, 0x68, 0x0a,
	0x1d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c,
	0x73, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x73, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x52, 0x1a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x73, 0x12, 0x6e, 0x0a, 0x1f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x49, 0x70,
	0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x52, 0x1c, 0x69, 0x70, 0x76, 0x34, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x73, 0x12, 0x6e, 0x0a, 0x1f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x49, 0x70,
	0x76, 0x34, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x52, 0x1c, 0x69, 0x70, 0x76, 0x34, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x73, 0x12, 0x6e, 0x0a, 0x1f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x70, 0x76, 0x34, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x52, 0x1c, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x49, 0x70, 0x76, 0x34, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6c, 0x76,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73,
	0x69, 0x73, 0x4c, 0x73, 0x70, 0x49, 0x70, 0x76, 0x36, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x52, 0x14, 0x69, 0x70, 0x76, 0x36, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x73, 0x22, 0x3f,
	0x0a, 0x0f, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x89, 0x03, 0x0a, 0x0c, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4e, 0x0a, 0x18, 0x49,
	0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x49, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x12, 0x32, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x20, 0x49,
	0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x73,
	0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x12,
	0x32, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x22, 0x41, 0x0a, 0x0f, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x22, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73,
	0x70, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x12, 0x30, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x56, 0x34, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x56,
	0x0a, 0x22, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x49, 0x70, 0x76, 0x34, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x54, 0x6c, 0x76, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69,
	0x73, 0x4c, 0x73, 0x70, 0x56, 0x34, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0xa1, 0x04, 0x0a, 0x0f, 0x49, 0x73, 0x69, 0x73, 0x4c,
	0x73, 0x70, 0x56, 0x34, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x13,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x56, 0x34, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0b,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x56,
	0x34, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x04, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3f, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x29,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x1a, 0x41, 0x0a, 0x0a, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x02, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x22, 0x49, 0x73,
	0x69, 0x73, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x70, 0x76,
	0x34, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76,
	0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x34, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0xe1, 0x03, 0x0a, 0x17, 0x49,
	0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x34,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x56, 0x34, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x03, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x04, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x1a, 0x3f, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e,
	0x10, 0x02, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x4e,
	0x0a, 0x1a, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x49, 0x70, 0x76, 0x36, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6c, 0x76, 0x12, 0x30, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x56, 0x36, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0xf0,
	0x04, 0x0a, 0x0f, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x56, 0x36, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x62, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x56, 0x36, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x03, 0x52, 0x12,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x56, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x04, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x48, 0x05, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x1a, 0x3f, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e,
	0x10, 0x02, 0x1a, 0x41, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x33, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x10, 0x02, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x49, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x06, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x05, 0x78, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05, 0x72, 0x46, 0x6c,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x05, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x22, 0x6a, 0x0a, 0x19, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6c, 0x64, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd9,
	0x0a, 0x0a, 0x12, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6c, 0x64, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x04, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x06, 0x52, 0x03, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x07, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x0a, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x15, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x4c, 0x56,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6c, 0x76,
	0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c,
	0x64, 0x70, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0xae, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x9c, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x10, 0x07,
	0x1a, 0xaa, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x9b, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x10, 0x07, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69,
	0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x4c,
	0x6c, 0x64, 0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x4c, 0x56, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6f, 0x75, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x6f, 0x75, 0x69, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x6f, 0x75, 0x69, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x75, 0x69, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x75, 0x69, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6f, 0x75, 0x69, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x03, 0x0a,
	0x13, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x6c, 0x64, 0x70, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x12, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x1a, 0xe0, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x74, 0x77, 0x6f, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x73, 0x69,
	0x73, 0x5f, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x73, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0x09, 0x12, 0x10,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x10, 0x0a,
	0x12, 0x15, 0x0a, 0x11, 0x77, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0x0b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x42, 0x0a, 0x14, 0x52, 0x73, 0x76, 0x70, 0x4c, 0x73, 0x70, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x73,
	0x76, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x73, 0x76, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x52, 0x73, 0x76, 0x70, 0x4c,
	0x73, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x73, 0x76, 0x70,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x73, 0x76, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x6c, 0x73, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x52, 0x73, 0x76, 0x70, 0x49, 0x50, 0x76, 0x34, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x4c, 0x73, 0x70, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x72, 0x73, 0x76, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xa3, 0x02, 0x0a, 0x10, 0x52, 0x73, 0x76, 0x70, 0x49, 0x50, 0x76, 0x34, 0x4c, 0x73, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x03, 0x6c, 0x73, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x4c,
	0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x02, 0x52, 0x03, 0x6c, 0x73, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x04, 0x72, 0x72, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x4c, 0x73, 0x70, 0x49, 0x70, 0x76,
	0x34, 0x52, 0x72, 0x6f, 0x52, 0x04, 0x72, 0x72, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x65, 0x72,
	0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52,
	0x73, 0x76, 0x70, 0x4c, 0x73, 0x70, 0x49, 0x70, 0x76, 0x34, 0x45, 0x72, 0x6f, 0x52, 0x04, 0x65,
	0x72, 0x6f, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6c, 0x73, 0x70, 0x22, 0x8c, 0x05, 0x0a, 0x0c, 0x52, 0x73, 0x76, 0x70, 0x4c,
	0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x73, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x73, 0x70,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x03, 0x52, 0x07, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x50, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73,
	0x76, 0x70, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x05, 0x52,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x54, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x52, 0x73, 0x76, 0x70, 0x4c, 0x73, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c,
	0x61, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x06, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x70, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x06, 0x75, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3a, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x29, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x10,
	0x02, 0x1a, 0x59, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x70, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x76, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x03, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c,
	0x73, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x69, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x75,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c,
	0x61, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x0e, 0x52, 0x73, 0x76, 0x70, 0x4c, 0x73, 0x70,
	0x49, 0x70, 0x76, 0x34, 0x52, 0x72, 0x6f, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0x85, 0x02, 0x0a, 0x0e, 0x52, 0x73, 0x76, 0x70, 0x4c, 0x73, 0x70, 0x49, 0x70, 0x76,
	0x34, 0x45, 0x72, 0x6f, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x03, 0x61, 0x73, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x73, 0x76,
	0x70, 0x4c, 0x73, 0x70, 0x49, 0x70, 0x76, 0x34, 0x45, 0x72, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x1a, 0x6b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x63, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x36, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x61, 0x73, 0x6e, 0x34, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x10, 0x06, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x73, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x0e, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d, 0x04, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x44, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x44, 0x73, 0x74, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x44,
	0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x05, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x60, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x72,
	0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x72, 0x63, 0x12,
	0x44, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x72, 0x63, 0x2e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x45, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x72, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x04, 0x0a,
	0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x61, 0x75,
	0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x05, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x60, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x56, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x22, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x66, 0x63, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x03, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50,
	0x66, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x50, 0x66, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x66, 0x63, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x66, 0x63, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x8c, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56,
	0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5,
	0x03, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c,
	0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xd1, 0x03, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x56, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e,
	0x43, 0x66, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcd, 0x03,
	0x0a, 0x11, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x88, 0x01,
	0x0a, 0x1a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61,
	0x6e, 0x54, 0x70, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd5, 0x03, 0x0a, 0x13, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x70, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x70, 0x69, 0x64, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x70, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x70, 0x69, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x56, 0x78, 0x6c, 0x61, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x03,
	0x0a, 0x15, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c,
	0x61, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c, 0x61,
	0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01,
	0x0a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xed,
	0x03, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x12, 0x47, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x2e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x30, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56,
	0x78, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x88,
	0x01, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78,
	0x6c, 0x61, 0x6e, 0x56, 0x6e, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x04, 0x0a, 0x13, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x6e,
	0x69, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x6e, 0x69, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c,
	0x61, 0x6e, 0x56, 0x6e, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x56, 0x6e, 0x69, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x05, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x1a, 0x60, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x6f, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01,
	0x0a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xed,
	0x03, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x12, 0x47, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x2e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x56,
	0x78, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8b,
	0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x03, 0x0a,
	0x16, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x34, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x45, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x90, 0x01, 0x0a, 0x22, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x34, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xa1, 0x04, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x05, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x60, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x04, 0x0a, 0x1a, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x05, 0x52, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x60, 0x0a, 0x06,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd,
	0x03, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x34, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c,
	0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x03,
	0x0a, 0x17, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x34, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x34, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x22, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x6f, 0x6e, 0x74, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x03, 0x0a, 0x1b, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x6f, 0x6e, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x6f,
	0x6e, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4a,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x6f, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x70, 0x76, 0x34, 0x44, 0x6f, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x91, 0x01, 0x0a, 0x23, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x34, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf9, 0x03, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x6f, 0x72, 0x65, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x4d, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x92, 0x01, 0x0a, 0x24, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x34, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x4c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xed, 0x03, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x4c, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x34, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x6f, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x91, 0x04, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x05, 0x52, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x60, 0x0a, 0x06,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xfa, 0x02, 0x0a, 0x1d, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x4b, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x34, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x34, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01,
	0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x1a, 0x3c, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x1a, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x67, 0x6f, 0x6f, 0x64, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x61, 0x64,
	0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xd1, 0x03, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x63,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x53, 0x72, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34,
	0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd1,
	0x03, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x44, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x74, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x03, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x61, 0x77, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x61, 0x77, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x34, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x63, 0x70,
	0x50, 0x68, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x63, 0x70, 0x50, 0x68,
	0x62, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x63, 0x70, 0x50, 0x68, 0x62, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x63, 0x70, 0x50,
	0x68, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x44, 0x73, 0x63, 0x70, 0x50, 0x68, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73,
	0x63, 0x70, 0x45, 0x63, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x16, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x63, 0x70,
	0x45, 0x63, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x63, 0x70, 0x45, 0x63, 0x6e,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x63,
	0x70, 0x45, 0x63, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x34, 0x44, 0x73, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a,
	0x23, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34,
	0x54, 0x6f, 0x73, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xf9, 0x03, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x34, 0x54, 0x6f, 0x73, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f,
	0x73, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a,
	0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34,
	0x54, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x17,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54,
	0x6f, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x54, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf9, 0x03, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x54, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f,
	0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x1d, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x52,
	0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34,
	0x54, 0x6f, 0x73, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x52, 0x65,
	0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x4c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x52, 0x65, 0x6c, 0x69,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x4d,
	0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x03, 0x0a, 0x1a, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f,
	0x73, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54,
	0x6f, 0x73, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x49,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x54, 0x6f, 0x73, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8d,
	0x01, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x54, 0x6f, 0x73, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe9,
	0x03, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x34, 0x54, 0x6f, 0x73, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x34, 0x54, 0x6f, 0x73, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x47,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34, 0x54, 0x6f, 0x73, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x34,
	0x54, 0x6f, 0x73, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x16, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x36, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a,
	0x22, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xf5, 0x03, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x70, 0x76, 0x36, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x49, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x70, 0x76, 0x36, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a,
	0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe9, 0x03, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x04, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x36, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x05, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x60, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x8e, 0x01, 0x0a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x99, 0x04, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x47,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x05, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x60, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x6f, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a,
	0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36,
	0x48, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x17,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x48,
	0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x48, 0x6f, 0x70,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70,
	0x76, 0x36, 0x48, 0x6f, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x48, 0x6f, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd1, 0x03,
	0x0a, 0x12, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76,
	0x36, 0x53, 0x72, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x63, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x53, 0x72, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x70, 0x76, 0x36, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd1, 0x03, 0x0a, 0x12,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x44,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x44, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x70, 0x76, 0x36, 0x44, 0x73, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x8b, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x03,
	0x0a, 0x16, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x44, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66,
	0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x45, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xe1, 0x03, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x72, 0x63, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x53, 0x72, 0x63, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53,
	0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf9, 0x03, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x27, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x04, 0x0a, 0x20,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4e, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a,
	0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x2b, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x99, 0x04, 0x0a, 0x24, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66,
	0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x53, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x93, 0x01, 0x0a, 0x25, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x30, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x04, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x30, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x30, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x4d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x30, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x4d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x30, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x25, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x31, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x81, 0x04, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x31, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x25, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x04, 0x0a, 0x1e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x12, 0x4c, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66,
	0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x32, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x01,
	0x0a, 0x25, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x33,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x81, 0x04, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x33, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x33, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x33, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03,
	0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x33, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a,
	0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x25, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x04,
	0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34,
	0x12, 0x4c, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x34, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66,
	0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x34, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x34,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x93, 0x01, 0x0a, 0x25, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x35, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x04, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x35, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x35, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x35, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x35, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x25,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x36, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x81, 0x04, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x36, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x36, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x36, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x36, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x25, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x37, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x04, 0x0a, 0x1e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x37, 0x12, 0x4c,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x66, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x37, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x37, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x66, 0x63, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x37, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x90, 0x01, 0x0a, 0x22, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xf5, 0x03, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x44, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x22, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x03,
	0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x72, 0x63, 0x12, 0x49, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x72, 0x63, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x28, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d,
	0x04, 0x0a, 0x21, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x50, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x50, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9a,
	0x01, 0x0a, 0x2c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x04, 0x0a, 0x25,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x23,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xf9, 0x03, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1c,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x53, 0x72,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x15, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x53, 0x72, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70,
	0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x44, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x43, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x63, 0x70, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x44, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xd9, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x63, 0x70, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x53,
	0x65, 0x71, 0x4e, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63,
	0x70, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03,
	0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01,
	0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70,
	0x41, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x14, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x41, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x41, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x41, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x41, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe9, 0x03, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03,
	0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x4e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd5, 0x03, 0x0a,
	0x13, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x45,
	0x63, 0x6e, 0x4e, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x4e, 0x73, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x4e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x45, 0x63,
	0x6e, 0x4e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x43, 0x77, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xd9, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x43, 0x77, 0x72, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x45, 0x63,
	0x6e, 0x43, 0x77, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70,
	0x45, 0x63, 0x6e, 0x43, 0x77, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x43, 0x77, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a,
	0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x45,
	0x63, 0x6e, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x15, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x45,
	0x63, 0x68, 0x6f, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x45, 0x63, 0x68, 0x6f, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x45, 0x63, 0x6e, 0x45, 0x63,
	0x68, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63,
	0x70, 0x45, 0x63, 0x6e, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x55,
	0x72, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x55, 0x72, 0x67, 0x12, 0x42,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x55, 0x72, 0x67, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x55, 0x72, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x55, 0x72, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03,
	0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70,
	0x43, 0x74, 0x6c, 0x41, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x41, 0x63,
	0x6b, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c,
	0x41, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x63, 0x70, 0x43, 0x74, 0x6c, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x50,
	0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x50, 0x73, 0x68, 0x12, 0x42,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x50, 0x73, 0x68, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x50, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x50, 0x73, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x52, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03,
	0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70,
	0x43, 0x74, 0x6c, 0x52, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x52, 0x73,
	0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c,
	0x52, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x63, 0x70, 0x43, 0x74, 0x6c, 0x52, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x53,
	0x79, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x53, 0x79, 0x6e, 0x12, 0x42,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x53, 0x79, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x53, 0x79, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x53, 0x79, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x46, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03,
	0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70,
	0x43, 0x74, 0x6c, 0x46, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c, 0x46, 0x69,
	0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x43, 0x74, 0x6c,
	0x46, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x63, 0x70, 0x43, 0x74, 0x6c, 0x46, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x42,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x54, 0x63, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x63, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x63, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x55, 0x64, 0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd,
	0x03, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64,
	0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x53, 0x72, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70,
	0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03,
	0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a,
	0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64,
	0x70, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x15,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x44, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x44, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x55, 0x64, 0x70, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x55, 0x64, 0x70, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x43, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xe5, 0x02, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x44,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x55, 0x64, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x55, 0x64, 0x70, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01,
	0x1a, 0x3c, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x1a, 0x37,
	0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x6f, 0x64, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x62, 0x61, 0x64, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x92, 0x01, 0x0a, 0x24,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xfd, 0x03, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47,
	0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xe5, 0x03, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x12, 0x45, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x30, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a,
	0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x44,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x44, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x45,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe5, 0x02, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x88, 0x01, 0x01, 0x1a, 0x3c, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x32, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10,
	0x02, 0x1a, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2a,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x6f, 0x64, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x61, 0x64, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x8c,
	0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x03,
	0x0a, 0x17, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x31, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47,
	0x74, 0x70, 0x76, 0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a,
	0x23, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xf9, 0x03, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x74, 0x70, 0x76, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70,
	0x76, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a,
	0x1f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x31, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe9, 0x03, 0x0a,
	0x18, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x31, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x45, 0x46, 0x6c,
	0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x43, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x45,
	0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x53, 0x46, 0x6c, 0x61, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x53, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x43, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74,
	0x70, 0x76, 0x31, 0x53, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x53, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x53, 0x46, 0x6c, 0x61,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x50, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xe1, 0x03, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x74, 0x70, 0x76, 0x31, 0x50, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x44, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70,
	0x76, 0x31, 0x50, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x50, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x50, 0x6e, 0x46,
	0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x22, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x03, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74,
	0x70, 0x76, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x92, 0x01, 0x0a, 0x24, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47,
	0x74, 0x70, 0x76, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4c,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x54, 0x65, 0x69, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xd9, 0x03, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x74, 0x70, 0x76, 0x31, 0x54, 0x65, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31,
	0x54, 0x65, 0x69, 0x64, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70,
	0x76, 0x31, 0x54, 0x65, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x54, 0x65, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a,
	0x24, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x31, 0x53, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xfd, 0x03, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x53, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x53, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x74, 0x70, 0x76, 0x31, 0x53, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74,
	0x70, 0x76, 0x31, 0x53, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4e, 0x50, 0x64, 0x75, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xf1, 0x03, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4e, 0x50, 0x64, 0x75, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4e, 0x50, 0x64, 0x75, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x31, 0x4e, 0x50, 0x64, 0x75, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4e, 0x50, 0x64, 0x75,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a,
	0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4e, 0x65, 0x78, 0x74,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x04, 0x0a, 0x27, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4e, 0x65, 0x78, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4e, 0x65,
	0x78, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x76, 0x31, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9b,
	0x01, 0x0a, 0x2d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74,
	0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x04, 0x0a,
	0x26, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x54, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x55, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x94, 0x01, 0x0a, 0x26, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x74, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85, 0x04, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x9f, 0x01, 0x0a, 0x31, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47,
	0x74, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb1, 0x04, 0x0a, 0x2a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x58, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65,
	0x78, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x59, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47,
	0x74, 0x70, 0x76, 0x32, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a,
	0x27, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x32, 0x50, 0x69, 0x67, 0x67, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x04, 0x0a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x50, 0x69, 0x67, 0x67, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x4e, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32,
	0x50, 0x69, 0x67, 0x67, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x50, 0x69,
	0x67, 0x67, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x50,
	0x69, 0x67, 0x67, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x8d, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x74, 0x70, 0x76, 0x32, 0x54, 0x65, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xe9, 0x03, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x74, 0x70, 0x76, 0x32, 0x54, 0x65, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x46, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47,
	0x74, 0x70, 0x76, 0x32, 0x54, 0x65, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x2e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x54, 0x65, 0x69, 0x64, 0x46, 0x6c,
	0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74,
	0x70, 0x76, 0x32, 0x54, 0x65, 0x69, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x01, 0x0a,
	0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x32, 0x53, 0x70, 0x61, 0x72, 0x65, 0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x16, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x53,
	0x70, 0x61, 0x72, 0x65, 0x31, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x53, 0x70, 0x61, 0x72,
	0x65, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32,
	0x53, 0x70, 0x61, 0x72, 0x65, 0x31, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x53, 0x70, 0x61, 0x72, 0x65, 0x31, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90,
	0x01, 0x0a, 0x22, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74,
	0x70, 0x76, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xf5, 0x03, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd,
	0x03, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74,
	0x70, 0x76, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70,
	0x76, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89,
	0x01, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74,
	0x70, 0x76, 0x32, 0x54, 0x65, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x14, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x54,
	0x65, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x54, 0x65, 0x69, 0x64, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x54, 0x65, 0x69, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x32, 0x54, 0x65, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x25, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x04, 0x0a,
	0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x32, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x4c, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70,
	0x76, 0x32, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76,
	0x32, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x47, 0x74, 0x70, 0x76, 0x32, 0x53, 0x70, 0x61, 0x72, 0x65, 0x32, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe1,
	0x03, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74,
	0x70, 0x76, 0x32, 0x53, 0x70, 0x61, 0x72, 0x65, 0x32, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32,
	0x53, 0x70, 0x61, 0x72, 0x65, 0x32, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47,
	0x74, 0x70, 0x76, 0x32, 0x53, 0x70, 0x61, 0x72, 0x65, 0x32, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x45, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x74, 0x70, 0x76, 0x32, 0x53, 0x70, 0x61, 0x72, 0x65,
	0x32, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x41, 0x72, 0x70, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x03, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x21, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x03, 0x0a, 0x1a, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x49,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91,
	0x01, 0x0a, 0x23, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72,
	0x70, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xf9, 0x03, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x41, 0x72, 0x70, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41,
	0x72, 0x70, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91,
	0x01, 0x0a, 0x23, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xf9, 0x03, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x41, 0x72, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41,
	0x72, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c,
	0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c,
	0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72,
	0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x03,
	0x0a, 0x17, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x41, 0x72, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x27, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x04,
	0x0a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x4e, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03,
	0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a,
	0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x27, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x89, 0x04, 0x0a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x4e, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x4f, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x95, 0x01,
	0x0a, 0x27, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x04, 0x0a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x4e, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x95, 0x01, 0x0a, 0x27, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x41, 0x72, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x04, 0x0a, 0x20, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x70, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x4e,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x41, 0x72, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x72,
	0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x41,
	0x72, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x45, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a,
	0x1e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70,
	0x45, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x17,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45,
	0x63, 0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68,
	0x6f, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63,
	0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xf4, 0x02, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52,
	0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x01, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x1a,
	0x3c, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x1a, 0x37, 0x0a,
	0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x04, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x6f, 0x64, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x62, 0x61, 0x64, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63,
	0x68, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xfd, 0x03, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63,
	0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70,
	0x45, 0x63, 0x68, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x96, 0x01, 0x0a, 0x28, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d, 0x04, 0x0a, 0x21, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4f,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x63, 0x6d, 0x70, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xfa, 0x02, 0x0a, 0x1d, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52,
	0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x1a, 0x3c, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x1a, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x67, 0x6f, 0x6f, 0x64, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x61, 0x64, 0x10,
	0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x98, 0x01, 0x0a, 0x2a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x95, 0x04, 0x0a, 0x23, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x63, 0x6d, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x65,
	0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x4e,
	0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x63, 0x6d, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x65, 0x78, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x04, 0x0a, 0x27, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x65,
	0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x8e, 0x01, 0x0a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xed, 0x03, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x8e, 0x01, 0x0a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xed, 0x03, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x47, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63,
	0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x94, 0x01, 0x0a, 0x26, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85, 0x04, 0x0a, 0x1f, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63,
	0x68, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63,
	0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76,
	0x36, 0x45, 0x63, 0x68, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76,
	0x36, 0x45, 0x63, 0x68, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x98, 0x01, 0x0a, 0x2a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95, 0x04, 0x0a, 0x23,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76,
	0x36, 0x45, 0x63, 0x68, 0x6f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36,
	0x45, 0x63, 0x68, 0x6f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10,
	0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xfa, 0x02, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68,
	0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x54, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x45, 0x63, 0x68,
	0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x88, 0x01, 0x01, 0x1a, 0x3c, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x32, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x10, 0x02, 0x1a, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x2a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x6f,
	0x64, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x61, 0x64, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x22, 0x80, 0x03, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x12, 0x4d, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x09, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x1a, 0x3c, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x1a, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x67, 0x6f, 0x6f, 0x64, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x61, 0x64, 0x10, 0x02, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xdd, 0x03, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x70, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x70, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x03,
	0x0a, 0x15, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8f, 0x01,
	0x0a, 0x21, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x9d, 0x04, 0x0a, 0x1a, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50,
	0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x50, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x61,
	0x75, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x61, 0x75, 0x74,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x50, 0x70, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x70, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x48, 0x05, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x1a, 0x60, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x8d, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x67, 0x6d, 0x70, 0x76, 0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xe9, 0x03, 0x0a, 0x18, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x67, 0x6d, 0x70, 0x76, 0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67,
	0x6d, 0x70, 0x76, 0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x47, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d,
	0x70, 0x76, 0x31, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1c,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76,
	0x31, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x15, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d,
	0x70, 0x76, 0x31, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x55, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x17, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x55, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x55, 0x6e, 0x75, 0x73, 0x65,
	0x64, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31,
	0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xee, 0x02, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x67, 0x6d, 0x70, 0x76, 0x31, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x47, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x67, 0x6d, 0x70, 0x76, 0x31, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76,
	0x31, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x01, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x88, 0x01, 0x01, 0x1a, 0x3c, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22,
	0x32, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x10, 0x02, 0x1a, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x2a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x6f, 0x6f,
	0x64, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x61, 0x64, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x22, 0x92, 0x01, 0x0a, 0x24, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x1d, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x4c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x49, 0x67, 0x6d, 0x70, 0x76, 0x31, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x85, 0x04, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x05, 0x52, 0x09,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x60, 0x0a, 0x06,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x56, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x22, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf5, 0x03, 0x0a,
	0x1b, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70,
	0x6c, 0x73, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03,
	0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a,
	0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46,
	0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4f, 0x66,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x04, 0x0a, 0x1c, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x42, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x4f, 0x66, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x42,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4f, 0x66, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70,
	0x6c, 0x73, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4f, 0x66, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x42,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4f, 0x66, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x05, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x1a, 0x60, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x56, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x8e, 0x01, 0x0a, 0x20, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x4d, 0x70, 0x6c, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xed, 0x03, 0x0a, 0x19, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12,
	0x47, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f,
	0x77, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x03, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x46, 0x6c,
	0x6f, 0x77, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x04, 0x52, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x56, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x22, 0x4c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xb9, 0x01, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x10, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x53, 0x70,
	0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x47, 0x0a, 0x0a, 0x42, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x50, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x37, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x94, 0x02,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x35, 0x30, 0x30, 0x22, 0x8b, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30,
	0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x34,
	0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35,
	0x30, 0x30, 0x22, 0x54, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x18, 0x53, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x32, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34,
	0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x22, 0x44, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x97, 0x02, 0x0a,
	0x14, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x32, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34,
	0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x22, 0x50, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x17, 0x53, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30,
	0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x35, 0x30, 0x30, 0x22, 0x49, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0c, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x8d, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30,
	0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30,
	0x22, 0x48, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x15, 0x53,
	0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x32, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30,
	0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x35, 0x30, 0x30, 0x22, 0x46, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x90, 0x02,
	0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30,
	0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30,
	0x22, 0x54, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x32, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x35, 0x30, 0x30, 0x22, 0x4c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x02,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88,
	0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x22, 0x51,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x95, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30,
	0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x22, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0x30, 0x30, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x34, 0x30, 0x30, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x02,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x35, 0x30, 0x30, 0x88,
	0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x22, 0x51,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xff, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x35, 0x30, 0x30, 0x22, 0x8d, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32,
	0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x34, 0x30, 0x30, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x35, 0x30, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x35, 0x30, 0x30, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x32, 0x30, 0x30, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x35, 0x30, 0x30, 0x32, 0xbe, 0x07, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x12,
	0x3a, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x53, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x17, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6f, 0x74, 0x67,
	0x2e, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x6f, 0x74, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x2e, 0x6f, 0x74, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6f,
	0x74, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x6f, 0x74,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x6f, 0x74, 0x67, 0x3b, 0x6f, 0x74,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_otg_proto_rawDescOnce sync.Once
	file_otg_proto_rawDescData = file_otg_proto_rawDesc
)

func file_otg_proto_rawDescGZIP() []byte {
	file_otg_proto_rawDescOnce.Do(func() {
		file_otg_proto_rawDescData = protoimpl.X.CompressGZIP(file_otg_proto_rawDescData)
	})
	return file_otg_proto_rawDescData
}

var file_otg_proto_enumTypes = make([]protoimpl.EnumInfo, 281)
var file_otg_proto_msgTypes = make([]protoimpl.MessageInfo, 862)
var file_otg_proto_goTypes = []interface{}{
	(LagProtocol_Choice_Enum)(0),                                           // 0: otg.LagProtocol.Choice.Enum
	(LagPortLacp_ActorActivity_Enum)(0),                                    // 1: otg.LagPortLacp.ActorActivity.Enum
	(EthernetConnection_Choice_Enum)(0),                                    // 2: otg.EthernetConnection.Choice.Enum
	(DeviceVlan_Tpid_Enum)(0),                                              // 3: otg.DeviceVlan.Tpid.Enum
	(DeviceIpv4GatewayMAC_Choice_Enum)(0),                                  // 4: otg.DeviceIpv4GatewayMAC.Choice.Enum
	(DeviceIpv6GatewayMAC_Choice_Enum)(0),                                  // 5: otg.DeviceIpv6GatewayMAC.Choice.Enum
	(Layer1_Speed_Enum)(0),                                                 // 6: otg.Layer1.Speed.Enum
	(Layer1_Media_Enum)(0),                                                 // 7: otg.Layer1.Media.Enum
	(Layer1FlowControl_Choice_Enum)(0),                                     // 8: otg.Layer1FlowControl.Choice.Enum
	(Capture_Format_Enum)(0),                                               // 9: otg.Capture.Format.Enum
	(CaptureFilter_Choice_Enum)(0),                                         // 10: otg.CaptureFilter.Choice.Enum
	(IsisInterface_NetworkType_Enum)(0),                                    // 11: otg.IsisInterface.NetworkType.Enum
	(IsisInterface_LevelType_Enum)(0),                                      // 12: otg.IsisInterface.LevelType.Enum
	(IsisInterfaceAuthentication_AuthType_Enum)(0),                         // 13: otg.IsisInterfaceAuthentication.AuthType.Enum
	(IsisAuthenticationBase_AuthType_Enum)(0),                              // 14: otg.IsisAuthenticationBase.AuthType.Enum
	(IsisV4RouteRange_OriginType_Enum)(0),                                  // 15: otg.IsisV4RouteRange.OriginType.Enum
	(IsisV4RouteRange_RedistributionType_Enum)(0),                          // 16: otg.IsisV4RouteRange.RedistributionType.Enum
	(IsisV6RouteRange_OriginType_Enum)(0),                                  // 17: otg.IsisV6RouteRange.OriginType.Enum
	(IsisV6RouteRange_RedistributionType_Enum)(0),                          // 18: otg.IsisV6RouteRange.RedistributionType.Enum
	(BgpV4Peer_AsType_Enum)(0),                                             // 19: otg.BgpV4Peer.AsType.Enum
	(BgpV4Peer_AsNumberWidth_Enum)(0),                                      // 20: otg.BgpV4Peer.AsNumberWidth.Enum
	(BgpV4EthernetSegment_ActiveMode_Enum)(0),                              // 21: otg.BgpV4EthernetSegment.ActiveMode.Enum
	(BgpRouteAdvanced_Origin_Enum)(0),                                      // 22: otg.BgpRouteAdvanced.Origin.Enum
	(BgpCommunity_Type_Enum)(0),                                            // 23: otg.BgpCommunity.Type.Enum
	(BgpExtCommunity_Type_Enum)(0),                                         // 24: otg.BgpExtCommunity.Type.Enum
	(BgpExtCommunity_Subtype_Enum)(0),                                      // 25: otg.BgpExtCommunity.Subtype.Enum
	(BgpAsPath_AsSetMode_Enum)(0),                                          // 26: otg.BgpAsPath.AsSetMode.Enum
	(BgpAsPathSegment_Type_Enum)(0),                                        // 27: otg.BgpAsPathSegment.Type.Enum
	(BgpV4EvpnEvis_Choice_Enum)(0),                                         // 28: otg.BgpV4EvpnEvis.Choice.Enum
	(BgpV4EviVxlan_ReplicationType_Enum)(0),                                // 29: otg.BgpV4EviVxlan.ReplicationType.Enum
	(BgpRouteDistinguisher_RdType_Enum)(0),                                 // 30: otg.BgpRouteDistinguisher.RdType.Enum
	(BgpRouteTarget_RtType_Enum)(0),                                        // 31: otg.BgpRouteTarget.RtType.Enum
	(BgpV4RouteRange_NextHopMode_Enum)(0),                                  // 32: otg.BgpV4RouteRange.NextHopMode.Enum
	(BgpV4RouteRange_NextHopAddressType_Enum)(0),                           // 33: otg.BgpV4RouteRange.NextHopAddressType.Enum
	(BgpV6RouteRange_NextHopMode_Enum)(0),                                  // 34: otg.BgpV6RouteRange.NextHopMode.Enum
	(BgpV6RouteRange_NextHopAddressType_Enum)(0),                           // 35: otg.BgpV6RouteRange.NextHopAddressType.Enum
	(BgpSrteV4Policy_NextHopMode_Enum)(0),                                  // 36: otg.BgpSrteV4Policy.NextHopMode.Enum
	(BgpSrteV4Policy_NextHopAddressType_Enum)(0),                           // 37: otg.BgpSrteV4Policy.NextHopAddressType.Enum
	(BgpSrteRemoteEndpointSubTlv_AddressFamily_Enum)(0),                    // 38: otg.BgpSrteRemoteEndpointSubTlv.AddressFamily.Enum
	(BgpSrteBindingSubTlv_BindingSidType_Enum)(0),                          // 39: otg.BgpSrteBindingSubTlv.BindingSidType.Enum
	(BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy_Enum)(0), // 40: otg.BgpSrteExplicitNullLabelPolicySubTlv.ExplicitNullLabelPolicy.Enum
	(BgpSrteSegment_SegmentType_Enum)(0),                                   // 41: otg.BgpSrteSegment.SegmentType.Enum
	(BgpSrteV6Policy_NextHopMode_Enum)(0),                                  // 42: otg.BgpSrteV6Policy.NextHopMode.Enum
	(BgpSrteV6Policy_NextHopAddressType_Enum)(0),                           // 43: otg.BgpSrteV6Policy.NextHopAddressType.Enum
	(BgpV6Peer_AsType_Enum)(0),                                             // 44: otg.BgpV6Peer.AsType.Enum
	(BgpV6Peer_AsNumberWidth_Enum)(0),                                      // 45: otg.BgpV6Peer.AsNumberWidth.Enum
	(BgpV6EthernetSegment_ActiveMode_Enum)(0),                              // 46: otg.BgpV6EthernetSegment.ActiveMode.Enum
	(BgpV6EvpnEvis_Choice_Enum)(0),                                         // 47: otg.BgpV6EvpnEvis.Choice.Enum
	(BgpV6EviVxlan_ReplicationType_Enum)(0),                                // 48: otg.BgpV6EviVxlan.ReplicationType.Enum
	(VxlanV4TunnelDestinationIPMode_Choice_Enum)(0),                        // 49: otg.VxlanV4TunnelDestinationIPMode.Choice.Enum
	(VxlanV6TunnelDestinationIPMode_Choice_Enum)(0),                        // 50: otg.VxlanV6TunnelDestinationIPMode.Choice.Enum
	(RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle_Enum)(0),        // 51: otg.RsvpLspIpv4InterfaceP2PEgressIpv4Lsp.ReservationStyle.Enum
	(RsvpEro_PrependNeighborIp_Enum)(0),                                    // 52: otg.RsvpEro.PrependNeighborIp.Enum
	(RsvpEroSubobject_Type_Enum)(0),                                        // 53: otg.RsvpEroSubobject.Type.Enum
	(RsvpEroSubobject_HopType_Enum)(0),                                     // 54: otg.RsvpEroSubobject.HopType.Enum
	(FlowTxRx_Choice_Enum)(0),                                              // 55: otg.FlowTxRx.Choice.Enum
	(FlowRouter_Mode_Enum)(0),                                              // 56: otg.FlowRouter.Mode.Enum
	(FlowHeader_Choice_Enum)(0),                                            // 57: otg.FlowHeader.Choice.Enum
	(FlowIpv4Priority_Choice_Enum)(0),                                      // 58: otg.FlowIpv4Priority.Choice.Enum
	(FlowIcmp_Choice_Enum)(0),                                              // 59: otg.FlowIcmp.Choice.Enum
	(FlowIcmpv6_Choice_Enum)(0),                                            // 60: otg.FlowIcmpv6.Choice.Enum
	(FlowSize_Choice_Enum)(0),                                              // 61: otg.FlowSize.Choice.Enum
	(FlowRate_Choice_Enum)(0),                                              // 62: otg.FlowRate.Choice.Enum
	(FlowDuration_Choice_Enum)(0),                                          // 63: otg.FlowDuration.Choice.Enum
	(FlowDelay_Choice_Enum)(0),                                             // 64: otg.FlowDelay.Choice.Enum
	(FlowDurationInterBurstGap_Choice_Enum)(0),                             // 65: otg.FlowDurationInterBurstGap.Choice.Enum
	(FlowLatencyMetrics_Mode_Enum)(0),                                      // 66: otg.FlowLatencyMetrics.Mode.Enum
	(EventRequest_Type_Enum)(0),                                            // 67: otg.EventRequest.Type.Enum
	(LldpConnection_Choice_Enum)(0),                                        // 68: otg.LldpConnection.Choice.Enum
	(LldpChassisId_Choice_Enum)(0),                                         // 69: otg.LldpChassisId.Choice.Enum
	(LldpPortId_Choice_Enum)(0),                                            // 70: otg.LldpPortId.Choice.Enum
	(LldpChassisMacSubType_Choice_Enum)(0),                                 // 71: otg.LldpChassisMacSubType.Choice.Enum
	(LldpPortInterfaceNameSubType_Choice_Enum)(0),                          // 72: otg.LldpPortInterfaceNameSubType.Choice.Enum
	(LldpSystemName_Choice_Enum)(0),                                        // 73: otg.LldpSystemName.Choice.Enum
	(LinkState_State_Enum)(0),                                              // 74: otg.LinkState.State.Enum
	(TransmitState_State_Enum)(0),                                          // 75: otg.TransmitState.State.Enum
	(CaptureState_State_Enum)(0),                                           // 76: otg.CaptureState.State.Enum
	(FlowsUpdate_PropertyNames_Enum)(0),                                    // 77: otg.FlowsUpdate.PropertyNames.Enum
	(RouteState_State_Enum)(0),                                             // 78: otg.RouteState.State.Enum
	(ProtocolState_State_Enum)(0),                                          // 79: otg.ProtocolState.State.Enum
	(DeviceState_Choice_Enum)(0),                                           // 80: otg.DeviceState.Choice.Enum
	(Ping_Choice_Enum)(0),                                                  // 81: otg.Ping.Choice.Enum
	(Response_Result_Enum)(0),                                              // 82: otg.Response.Result.Enum
	(LacpMemberState_State_Enum)(0),                                        // 83: otg.LacpMemberState.State.Enum
	(MetricsRequest_Choice_Enum)(0),                                        // 84: otg.MetricsRequest.Choice.Enum
	(MetricsResponse_Choice_Enum)(0),                                       // 85: otg.MetricsResponse.Choice.Enum
	(PortMetricsRequest_ColumnNames_Enum)(0),                               // 86: otg.PortMetricsRequest.ColumnNames.Enum
	(PortMetric_Link_Enum)(0),                                              // 87: otg.PortMetric.Link.Enum
	(PortMetric_Capture_Enum)(0),                                           // 88: otg.PortMetric.Capture.Enum
	(PortMetric_Transmit_Enum)(0),                                          // 89: otg.PortMetric.Transmit.Enum
	(FlowMetricsRequest_MetricNames_Enum)(0),                               // 90: otg.FlowMetricsRequest.MetricNames.Enum
	(FlowMetricGroupRequest_Choice_Enum)(0),                                // 91: otg.FlowMetricGroupRequest.Choice.Enum
	(FlowMetric_Transmit_Enum)(0),                                          // 92: otg.FlowMetric.Transmit.Enum
	(Bgpv4MetricsRequest_ColumnNames_Enum)(0),                              // 93: otg.Bgpv4MetricsRequest.ColumnNames.Enum
	(Bgpv4Metric_SessionState_Enum)(0),                                     // 94: otg.Bgpv4Metric.SessionState.Enum
	(Bgpv4Metric_FsmState_Enum)(0),                                         // 95: otg.Bgpv4Metric.FsmState.Enum
	(Bgpv6MetricsRequest_ColumnNames_Enum)(0),                              // 96: otg.Bgpv6MetricsRequest.ColumnNames.Enum
	(Bgpv6Metric_SessionState_Enum)(0),                                     // 97: otg.Bgpv6Metric.SessionState.Enum
	(Bgpv6Metric_FsmState_Enum)(0),                                         // 98: otg.Bgpv6Metric.FsmState.Enum
	(IsisMetricsRequest_ColumnNames_Enum)(0),                               // 99: otg.IsisMetricsRequest.ColumnNames.Enum
	(LagMetricsRequest_ColumnNames_Enum)(0),                                // 100: otg.LagMetricsRequest.ColumnNames.Enum
	(LagMetric_OperStatus_Enum)(0),                                         // 101: otg.LagMetric.OperStatus.Enum
	(LacpMetricsRequest_ColumnNames_Enum)(0),                               // 102: otg.LacpMetricsRequest.ColumnNames.Enum
	(LacpMetric_Activity_Enum)(0),                                          // 103: otg.LacpMetric.Activity.Enum
	(LacpMetric_Timeout_Enum)(0),                                           // 104: otg.LacpMetric.Timeout.Enum
	(LacpMetric_Synchronization_Enum)(0),                                   // 105: otg.LacpMetric.Synchronization.Enum
	(LldpMetricsRequest_ColumnNames_Enum)(0),                               // 106: otg.LldpMetricsRequest.ColumnNames.Enum
	(RsvpMetricsRequest_ColumnNames_Enum)(0),                               // 107: otg.RsvpMetricsRequest.ColumnNames.Enum
	(StatesRequest_Choice_Enum)(0),                                         // 108: otg.StatesRequest.Choice.Enum
	(StatesResponse_Choice_Enum)(0),                                        // 109: otg.StatesResponse.Choice.Enum
	(BgpPrefixStateRequest_PrefixFilters_Enum)(0),                          // 110: otg.BgpPrefixStateRequest.PrefixFilters.Enum
	(BgpPrefixIpv4UnicastFilter_Origin_Enum)(0),                            // 111: otg.BgpPrefixIpv4UnicastFilter.Origin.Enum
	(BgpPrefixIpv6UnicastFilter_Origin_Enum)(0),                            // 112: otg.BgpPrefixIpv6UnicastFilter.Origin.Enum
	(BgpPrefixIpv4UnicastState_Origin_Enum)(0),                             // 113: otg.BgpPrefixIpv4UnicastState.Origin.Enum
	(BgpPrefixIpv6UnicastState_Origin_Enum)(0),                             // 114: otg.BgpPrefixIpv6UnicastState.Origin.Enum
	(ResultBgpCommunity_Type_Enum)(0),                                      // 115: otg.ResultBgpCommunity.Type.Enum
	(ResultBgpAsPathSegment_Type_Enum)(0),                                  // 116: otg.ResultBgpAsPathSegment.Type.Enum
	(IsisLspState_PduType_Enum)(0),                                         // 117: otg.IsisLspState.PduType.Enum
	(IsisLspV4Prefix_RedistributionType_Enum)(0),                           // 118: otg.IsisLspV4Prefix.RedistributionType.Enum
	(IsisLspV4Prefix_OriginType_Enum)(0),                                   // 119: otg.IsisLspV4Prefix.OriginType.Enum
	(IsisLspExtendedV4Prefix_RedistributionType_Enum)(0),                   // 120: otg.IsisLspExtendedV4Prefix.RedistributionType.Enum
	(IsisLspV6Prefix_RedistributionType_Enum)(0),                           // 121: otg.IsisLspV6Prefix.RedistributionType.Enum
	(IsisLspV6Prefix_OriginType_Enum)(0),                                   // 122: otg.IsisLspV6Prefix.OriginType.Enum
	(LldpNeighborsState_ChassisIdType_Enum)(0),                             // 123: otg.LldpNeighborsState.ChassisIdType.Enum
	(LldpNeighborsState_PortIdType_Enum)(0),                                // 124: otg.LldpNeighborsState.PortIdType.Enum
	(LldpCapabilityState_CapabilityName_Enum)(0),                           // 125: otg.LldpCapabilityState.CapabilityName.Enum
	(RsvpLspState_SessionStatus_Enum)(0),                                   // 126: otg.RsvpLspState.SessionStatus.Enum
	(RsvpLspState_LastFlapReason_Enum)(0),                                  // 127: otg.RsvpLspState.LastFlapReason.Enum
	(RsvpLspIpv4Ero_Type_Enum)(0),                                          // 128: otg.RsvpLspIpv4Ero.Type.Enum
	(PatternFlowEthernetDst_Choice_Enum)(0),                                // 129: otg.PatternFlowEthernetDst.Choice.Enum
	(PatternFlowEthernetSrc_Choice_Enum)(0),                                // 130: otg.PatternFlowEthernetSrc.Choice.Enum
	(PatternFlowEthernetEtherType_Choice_Enum)(0),                          // 131: otg.PatternFlowEthernetEtherType.Choice.Enum
	(PatternFlowEthernetPfcQueue_Choice_Enum)(0),                           // 132: otg.PatternFlowEthernetPfcQueue.Choice.Enum
	(PatternFlowVlanPriority_Choice_Enum)(0),                               // 133: otg.PatternFlowVlanPriority.Choice.Enum
	(PatternFlowVlanCfi_Choice_Enum)(0),                                    // 134: otg.PatternFlowVlanCfi.Choice.Enum
	(PatternFlowVlanId_Choice_Enum)(0),                                     // 135: otg.PatternFlowVlanId.Choice.Enum
	(PatternFlowVlanTpid_Choice_Enum)(0),                                   // 136: otg.PatternFlowVlanTpid.Choice.Enum
	(PatternFlowVxlanFlags_Choice_Enum)(0),                                 // 137: otg.PatternFlowVxlanFlags.Choice.Enum
	(PatternFlowVxlanReserved0_Choice_Enum)(0),                             // 138: otg.PatternFlowVxlanReserved0.Choice.Enum
	(PatternFlowVxlanVni_Choice_Enum)(0),                                   // 139: otg.PatternFlowVxlanVni.Choice.Enum
	(PatternFlowVxlanReserved1_Choice_Enum)(0),                             // 140: otg.PatternFlowVxlanReserved1.Choice.Enum
	(PatternFlowIpv4Version_Choice_Enum)(0),                                // 141: otg.PatternFlowIpv4Version.Choice.Enum
	(PatternFlowIpv4HeaderLength_Choice_Enum)(0),                           // 142: otg.PatternFlowIpv4HeaderLength.Choice.Enum
	(PatternFlowIpv4TotalLength_Choice_Enum)(0),                            // 143: otg.PatternFlowIpv4TotalLength.Choice.Enum
	(PatternFlowIpv4Identification_Choice_Enum)(0),                         // 144: otg.PatternFlowIpv4Identification.Choice.Enum
	(PatternFlowIpv4Reserved_Choice_Enum)(0),                               // 145: otg.PatternFlowIpv4Reserved.Choice.Enum
	(PatternFlowIpv4DontFragment_Choice_Enum)(0),                           // 146: otg.PatternFlowIpv4DontFragment.Choice.Enum
	(PatternFlowIpv4MoreFragments_Choice_Enum)(0),                          // 147: otg.PatternFlowIpv4MoreFragments.Choice.Enum
	(PatternFlowIpv4FragmentOffset_Choice_Enum)(0),                         // 148: otg.PatternFlowIpv4FragmentOffset.Choice.Enum
	(PatternFlowIpv4TimeToLive_Choice_Enum)(0),                             // 149: otg.PatternFlowIpv4TimeToLive.Choice.Enum
	(PatternFlowIpv4Protocol_Choice_Enum)(0),                               // 150: otg.PatternFlowIpv4Protocol.Choice.Enum
	(PatternFlowIpv4HeaderChecksum_Choice_Enum)(0),                         // 151: otg.PatternFlowIpv4HeaderChecksum.Choice.Enum
	(PatternFlowIpv4HeaderChecksum_Generated_Enum)(0),                      // 152: otg.PatternFlowIpv4HeaderChecksum.Generated.Enum
	(PatternFlowIpv4Src_Choice_Enum)(0),                                    // 153: otg.PatternFlowIpv4Src.Choice.Enum
	(PatternFlowIpv4Dst_Choice_Enum)(0),                                    // 154: otg.PatternFlowIpv4Dst.Choice.Enum
	(PatternFlowIpv4PriorityRaw_Choice_Enum)(0),                            // 155: otg.PatternFlowIpv4PriorityRaw.Choice.Enum
	(PatternFlowIpv4DscpPhb_Choice_Enum)(0),                                // 156: otg.PatternFlowIpv4DscpPhb.Choice.Enum
	(PatternFlowIpv4DscpEcn_Choice_Enum)(0),                                // 157: otg.PatternFlowIpv4DscpEcn.Choice.Enum
	(PatternFlowIpv4TosPrecedence_Choice_Enum)(0),                          // 158: otg.PatternFlowIpv4TosPrecedence.Choice.Enum
	(PatternFlowIpv4TosDelay_Choice_Enum)(0),                               // 159: otg.PatternFlowIpv4TosDelay.Choice.Enum
	(PatternFlowIpv4TosThroughput_Choice_Enum)(0),                          // 160: otg.PatternFlowIpv4TosThroughput.Choice.Enum
	(PatternFlowIpv4TosReliability_Choice_Enum)(0),                         // 161: otg.PatternFlowIpv4TosReliability.Choice.Enum
	(PatternFlowIpv4TosMonetary_Choice_Enum)(0),                            // 162: otg.PatternFlowIpv4TosMonetary.Choice.Enum
	(PatternFlowIpv4TosUnused_Choice_Enum)(0),                              // 163: otg.PatternFlowIpv4TosUnused.Choice.Enum
	(PatternFlowIpv6Version_Choice_Enum)(0),                                // 164: otg.PatternFlowIpv6Version.Choice.Enum
	(PatternFlowIpv6TrafficClass_Choice_Enum)(0),                           // 165: otg.PatternFlowIpv6TrafficClass.Choice.Enum
	(PatternFlowIpv6FlowLabel_Choice_Enum)(0),                              // 166: otg.PatternFlowIpv6FlowLabel.Choice.Enum
	(PatternFlowIpv6PayloadLength_Choice_Enum)(0),                          // 167: otg.PatternFlowIpv6PayloadLength.Choice.Enum
	(PatternFlowIpv6NextHeader_Choice_Enum)(0),                             // 168: otg.PatternFlowIpv6NextHeader.Choice.Enum
	(PatternFlowIpv6HopLimit_Choice_Enum)(0),                               // 169: otg.PatternFlowIpv6HopLimit.Choice.Enum
	(PatternFlowIpv6Src_Choice_Enum)(0),                                    // 170: otg.PatternFlowIpv6Src.Choice.Enum
	(PatternFlowIpv6Dst_Choice_Enum)(0),                                    // 171: otg.PatternFlowIpv6Dst.Choice.Enum
	(PatternFlowPfcPauseDst_Choice_Enum)(0),                                // 172: otg.PatternFlowPfcPauseDst.Choice.Enum
	(PatternFlowPfcPauseSrc_Choice_Enum)(0),                                // 173: otg.PatternFlowPfcPauseSrc.Choice.Enum
	(PatternFlowPfcPauseEtherType_Choice_Enum)(0),                          // 174: otg.PatternFlowPfcPauseEtherType.Choice.Enum
	(PatternFlowPfcPauseControlOpCode_Choice_Enum)(0),                      // 175: otg.PatternFlowPfcPauseControlOpCode.Choice.Enum
	(PatternFlowPfcPauseClassEnableVector_Choice_Enum)(0),                  // 176: otg.PatternFlowPfcPauseClassEnableVector.Choice.Enum
	(PatternFlowPfcPausePauseClass0_Choice_Enum)(0),                        // 177: otg.PatternFlowPfcPausePauseClass0.Choice.Enum
	(PatternFlowPfcPausePauseClass1_Choice_Enum)(0),                        // 178: otg.PatternFlowPfcPausePauseClass1.Choice.Enum
	(PatternFlowPfcPausePauseClass2_Choice_Enum)(0),                        // 179: otg.PatternFlowPfcPausePauseClass2.Choice.Enum
	(PatternFlowPfcPausePauseClass3_Choice_Enum)(0),                        // 180: otg.PatternFlowPfcPausePauseClass3.Choice.Enum
	(PatternFlowPfcPausePauseClass4_Choice_Enum)(0),                        // 181: otg.PatternFlowPfcPausePauseClass4.Choice.Enum
	(PatternFlowPfcPausePauseClass5_Choice_Enum)(0),                        // 182: otg.PatternFlowPfcPausePauseClass5.Choice.Enum
	(PatternFlowPfcPausePauseClass6_Choice_Enum)(0),                        // 183: otg.PatternFlowPfcPausePauseClass6.Choice.Enum
	(PatternFlowPfcPausePauseClass7_Choice_Enum)(0),                        // 184: otg.PatternFlowPfcPausePauseClass7.Choice.Enum
	(PatternFlowEthernetPauseDst_Choice_Enum)(0),                           // 185: otg.PatternFlowEthernetPauseDst.Choice.Enum
	(PatternFlowEthernetPauseSrc_Choice_Enum)(0),                           // 186: otg.PatternFlowEthernetPauseSrc.Choice.Enum
	(PatternFlowEthernetPauseEtherType_Choice_Enum)(0),                     // 187: otg.PatternFlowEthernetPauseEtherType.Choice.Enum
	(PatternFlowEthernetPauseControlOpCode_Choice_Enum)(0),                 // 188: otg.PatternFlowEthernetPauseControlOpCode.Choice.Enum
	(PatternFlowEthernetPauseTime_Choice_Enum)(0),                          // 189: otg.PatternFlowEthernetPauseTime.Choice.Enum
	(PatternFlowTcpSrcPort_Choice_Enum)(0),                                 // 190: otg.PatternFlowTcpSrcPort.Choice.Enum
	(PatternFlowTcpDstPort_Choice_Enum)(0),                                 // 191: otg.PatternFlowTcpDstPort.Choice.Enum
	(PatternFlowTcpSeqNum_Choice_Enum)(0),                                  // 192: otg.PatternFlowTcpSeqNum.Choice.Enum
	(PatternFlowTcpAckNum_Choice_Enum)(0),                                  // 193: otg.PatternFlowTcpAckNum.Choice.Enum
	(PatternFlowTcpDataOffset_Choice_Enum)(0),                              // 194: otg.PatternFlowTcpDataOffset.Choice.Enum
	(PatternFlowTcpEcnNs_Choice_Enum)(0),                                   // 195: otg.PatternFlowTcpEcnNs.Choice.Enum
	(PatternFlowTcpEcnCwr_Choice_Enum)(0),                                  // 196: otg.PatternFlowTcpEcnCwr.Choice.Enum
	(PatternFlowTcpEcnEcho_Choice_Enum)(0),                                 // 197: otg.PatternFlowTcpEcnEcho.Choice.Enum
	(PatternFlowTcpCtlUrg_Choice_Enum)(0),                                  // 198: otg.PatternFlowTcpCtlUrg.Choice.Enum
	(PatternFlowTcpCtlAck_Choice_Enum)(0),                                  // 199: otg.PatternFlowTcpCtlAck.Choice.Enum
	(PatternFlowTcpCtlPsh_Choice_Enum)(0),                                  // 200: otg.PatternFlowTcpCtlPsh.Choice.Enum
	(PatternFlowTcpCtlRst_Choice_Enum)(0),                                  // 201: otg.PatternFlowTcpCtlRst.Choice.Enum
	(PatternFlowTcpCtlSyn_Choice_Enum)(0),                                  // 202: otg.PatternFlowTcpCtlSyn.Choice.Enum
	(PatternFlowTcpCtlFin_Choice_Enum)(0),                                  // 203: otg.PatternFlowTcpCtlFin.Choice.Enum
	(PatternFlowTcpWindow_Choice_Enum)(0),                                  // 204: otg.PatternFlowTcpWindow.Choice.Enum
	(PatternFlowUdpSrcPort_Choice_Enum)(0),                                 // 205: otg.PatternFlowUdpSrcPort.Choice.Enum
	(PatternFlowUdpDstPort_Choice_Enum)(0),                                 // 206: otg.PatternFlowUdpDstPort.Choice.Enum
	(PatternFlowUdpLength_Choice_Enum)(0),                                  // 207: otg.PatternFlowUdpLength.Choice.Enum
	(PatternFlowUdpChecksum_Choice_Enum)(0),                                // 208: otg.PatternFlowUdpChecksum.Choice.Enum
	(PatternFlowUdpChecksum_Generated_Enum)(0),                             // 209: otg.PatternFlowUdpChecksum.Generated.Enum
	(PatternFlowGreChecksumPresent_Choice_Enum)(0),                         // 210: otg.PatternFlowGreChecksumPresent.Choice.Enum
	(PatternFlowGreReserved0_Choice_Enum)(0),                               // 211: otg.PatternFlowGreReserved0.Choice.Enum
	(PatternFlowGreVersion_Choice_Enum)(0),                                 // 212: otg.PatternFlowGreVersion.Choice.Enum
	(PatternFlowGreProtocol_Choice_Enum)(0),                                // 213: otg.PatternFlowGreProtocol.Choice.Enum
	(PatternFlowGreChecksum_Choice_Enum)(0),                                // 214: otg.PatternFlowGreChecksum.Choice.Enum
	(PatternFlowGreChecksum_Generated_Enum)(0),                             // 215: otg.PatternFlowGreChecksum.Generated.Enum
	(PatternFlowGreReserved1_Choice_Enum)(0),                               // 216: otg.PatternFlowGreReserved1.Choice.Enum
	(PatternFlowGtpv1Version_Choice_Enum)(0),                               // 217: otg.PatternFlowGtpv1Version.Choice.Enum
	(PatternFlowGtpv1ProtocolType_Choice_Enum)(0),                          // 218: otg.PatternFlowGtpv1ProtocolType.Choice.Enum
	(PatternFlowGtpv1Reserved_Choice_Enum)(0),                              // 219: otg.PatternFlowGtpv1Reserved.Choice.Enum
	(PatternFlowGtpv1EFlag_Choice_Enum)(0),                                 // 220: otg.PatternFlowGtpv1EFlag.Choice.Enum
	(PatternFlowGtpv1SFlag_Choice_Enum)(0),                                 // 221: otg.PatternFlowGtpv1SFlag.Choice.Enum
	(PatternFlowGtpv1PnFlag_Choice_Enum)(0),                                // 222: otg.PatternFlowGtpv1PnFlag.Choice.Enum
	(PatternFlowGtpv1MessageType_Choice_Enum)(0),                           // 223: otg.PatternFlowGtpv1MessageType.Choice.Enum
	(PatternFlowGtpv1MessageLength_Choice_Enum)(0),                         // 224: otg.PatternFlowGtpv1MessageLength.Choice.Enum
	(PatternFlowGtpv1Teid_Choice_Enum)(0),                                  // 225: otg.PatternFlowGtpv1Teid.Choice.Enum
	(PatternFlowGtpv1SquenceNumber_Choice_Enum)(0),                         // 226: otg.PatternFlowGtpv1SquenceNumber.Choice.Enum
	(PatternFlowGtpv1NPduNumber_Choice_Enum)(0),                            // 227: otg.PatternFlowGtpv1NPduNumber.Choice.Enum
	(PatternFlowGtpv1NextExtensionHeaderType_Choice_Enum)(0),               // 228: otg.PatternFlowGtpv1NextExtensionHeaderType.Choice.Enum
	(PatternFlowGtpExtensionExtensionLength_Choice_Enum)(0),                // 229: otg.PatternFlowGtpExtensionExtensionLength.Choice.Enum
	(PatternFlowGtpExtensionContents_Choice_Enum)(0),                       // 230: otg.PatternFlowGtpExtensionContents.Choice.Enum
	(PatternFlowGtpExtensionNextExtensionHeader_Choice_Enum)(0),            // 231: otg.PatternFlowGtpExtensionNextExtensionHeader.Choice.Enum
	(PatternFlowGtpv2Version_Choice_Enum)(0),                               // 232: otg.PatternFlowGtpv2Version.Choice.Enum
	(PatternFlowGtpv2PiggybackingFlag_Choice_Enum)(0),                      // 233: otg.PatternFlowGtpv2PiggybackingFlag.Choice.Enum
	(PatternFlowGtpv2TeidFlag_Choice_Enum)(0),                              // 234: otg.PatternFlowGtpv2TeidFlag.Choice.Enum
	(PatternFlowGtpv2Spare1_Choice_Enum)(0),                                // 235: otg.PatternFlowGtpv2Spare1.Choice.Enum
	(PatternFlowGtpv2MessageType_Choice_Enum)(0),                           // 236: otg.PatternFlowGtpv2MessageType.Choice.Enum
	(PatternFlowGtpv2MessageLength_Choice_Enum)(0),                         // 237: otg.PatternFlowGtpv2MessageLength.Choice.Enum
	(PatternFlowGtpv2Teid_Choice_Enum)(0),                                  // 238: otg.PatternFlowGtpv2Teid.Choice.Enum
	(PatternFlowGtpv2SequenceNumber_Choice_Enum)(0),                        // 239: otg.PatternFlowGtpv2SequenceNumber.Choice.Enum
	(PatternFlowGtpv2Spare2_Choice_Enum)(0),                                // 240: otg.PatternFlowGtpv2Spare2.Choice.Enum
	(PatternFlowArpHardwareType_Choice_Enum)(0),                            // 241: otg.PatternFlowArpHardwareType.Choice.Enum
	(PatternFlowArpProtocolType_Choice_Enum)(0),                            // 242: otg.PatternFlowArpProtocolType.Choice.Enum
	(PatternFlowArpHardwareLength_Choice_Enum)(0),                          // 243: otg.PatternFlowArpHardwareLength.Choice.Enum
	(PatternFlowArpProtocolLength_Choice_Enum)(0),                          // 244: otg.PatternFlowArpProtocolLength.Choice.Enum
	(PatternFlowArpOperation_Choice_Enum)(0),                               // 245: otg.PatternFlowArpOperation.Choice.Enum
	(PatternFlowArpSenderHardwareAddr_Choice_Enum)(0),                      // 246: otg.PatternFlowArpSenderHardwareAddr.Choice.Enum
	(PatternFlowArpSenderProtocolAddr_Choice_Enum)(0),                      // 247: otg.PatternFlowArpSenderProtocolAddr.Choice.Enum
	(PatternFlowArpTargetHardwareAddr_Choice_Enum)(0),                      // 248: otg.PatternFlowArpTargetHardwareAddr.Choice.Enum
	(PatternFlowArpTargetProtocolAddr_Choice_Enum)(0),                      // 249: otg.PatternFlowArpTargetProtocolAddr.Choice.Enum
	(PatternFlowIcmpEchoType_Choice_Enum)(0),                               // 250: otg.PatternFlowIcmpEchoType.Choice.Enum
	(PatternFlowIcmpEchoCode_Choice_Enum)(0),                               // 251: otg.PatternFlowIcmpEchoCode.Choice.Enum
	(PatternFlowIcmpEchoChecksum_Choice_Enum)(0),                           // 252: otg.PatternFlowIcmpEchoChecksum.Choice.Enum
	(PatternFlowIcmpEchoChecksum_Generated_Enum)(0),                        // 253: otg.PatternFlowIcmpEchoChecksum.Generated.Enum
	(PatternFlowIcmpEchoIdentifier_Choice_Enum)(0),                         // 254: otg.PatternFlowIcmpEchoIdentifier.Choice.Enum
	(PatternFlowIcmpEchoSequenceNumber_Choice_Enum)(0),                     // 255: otg.PatternFlowIcmpEchoSequenceNumber.Choice.Enum
	(PatternFlowIcmpCommonChecksum_Choice_Enum)(0),                         // 256: otg.PatternFlowIcmpCommonChecksum.Choice.Enum
	(PatternFlowIcmpCommonChecksum_Generated_Enum)(0),                      // 257: otg.PatternFlowIcmpCommonChecksum.Generated.Enum
	(PatternFlowIcmpNextFieldsIdentifier_Choice_Enum)(0),                   // 258: otg.PatternFlowIcmpNextFieldsIdentifier.Choice.Enum
	(PatternFlowIcmpNextFieldsSequenceNumber_Choice_Enum)(0),               // 259: otg.PatternFlowIcmpNextFieldsSequenceNumber.Choice.Enum
	(PatternFlowIcmpv6EchoType_Choice_Enum)(0),                             // 260: otg.PatternFlowIcmpv6EchoType.Choice.Enum
	(PatternFlowIcmpv6EchoCode_Choice_Enum)(0),                             // 261: otg.PatternFlowIcmpv6EchoCode.Choice.Enum
	(PatternFlowIcmpv6EchoIdentifier_Choice_Enum)(0),                       // 262: otg.PatternFlowIcmpv6EchoIdentifier.Choice.Enum
	(PatternFlowIcmpv6EchoSequenceNumber_Choice_Enum)(0),                   // 263: otg.PatternFlowIcmpv6EchoSequenceNumber.Choice.Enum
	(PatternFlowIcmpv6EchoChecksum_Choice_Enum)(0),                         // 264: otg.PatternFlowIcmpv6EchoChecksum.Choice.Enum
	(PatternFlowIcmpv6EchoChecksum_Generated_Enum)(0),                      // 265: otg.PatternFlowIcmpv6EchoChecksum.Generated.Enum
	(PatternFlowIcmpv6CommonChecksum_Choice_Enum)(0),                       // 266: otg.PatternFlowIcmpv6CommonChecksum.Choice.Enum
	(PatternFlowIcmpv6CommonChecksum_Generated_Enum)(0),                    // 267: otg.PatternFlowIcmpv6CommonChecksum.Generated.Enum
	(PatternFlowPppAddress_Choice_Enum)(0),                                 // 268: otg.PatternFlowPppAddress.Choice.Enum
	(PatternFlowPppControl_Choice_Enum)(0),                                 // 269: otg.PatternFlowPppControl.Choice.Enum
	(PatternFlowPppProtocolType_Choice_Enum)(0),                            // 270: otg.PatternFlowPppProtocolType.Choice.Enum
	(PatternFlowIgmpv1Version_Choice_Enum)(0),                              // 271: otg.PatternFlowIgmpv1Version.Choice.Enum
	(PatternFlowIgmpv1Type_Choice_Enum)(0),                                 // 272: otg.PatternFlowIgmpv1Type.Choice.Enum
	(PatternFlowIgmpv1Unused_Choice_Enum)(0),                               // 273: otg.PatternFlowIgmpv1Unused.Choice.Enum
	(PatternFlowIgmpv1Checksum_Choice_Enum)(0),                             // 274: otg.PatternFlowIgmpv1Checksum.Choice.Enum
	(PatternFlowIgmpv1Checksum_Generated_Enum)(0),                          // 275: otg.PatternFlowIgmpv1Checksum.Generated.Enum
	(PatternFlowIgmpv1GroupAddress_Choice_Enum)(0),                         // 276: otg.PatternFlowIgmpv1GroupAddress.Choice.Enum
	(PatternFlowMplsLabel_Choice_Enum)(0),                                  // 277: otg.PatternFlowMplsLabel.Choice.Enum
	(PatternFlowMplsTrafficClass_Choice_Enum)(0),                           // 278: otg.PatternFlowMplsTrafficClass.Choice.Enum
	(PatternFlowMplsBottomOfStack_Choice_Enum)(0),                          // 279: otg.PatternFlowMplsBottomOfStack.Choice.Enum
	(PatternFlowMplsTimeToLive_Choice_Enum)(0),                             // 280: otg.PatternFlowMplsTimeToLive.Choice.Enum
	(*Config)(nil),                                     // 281: otg.Config
	(*ConfigOptions)(nil),                              // 282: otg.ConfigOptions
	(*Port)(nil),                                       // 283: otg.Port
	(*PortOptions)(nil),                                // 284: otg.PortOptions
	(*Lag)(nil),                                        // 285: otg.Lag
	(*LagPort)(nil),                                    // 286: otg.LagPort
	(*LagProtocol)(nil),                                // 287: otg.LagProtocol
	(*LagProtocolStatic)(nil),                          // 288: otg.LagProtocolStatic
	(*LagProtocolLacp)(nil),                            // 289: otg.LagProtocolLacp
	(*LagPortLacp)(nil),                                // 290: otg.LagPortLacp
	(*DeviceEthernetBase)(nil),                         // 291: otg.DeviceEthernetBase
	(*DeviceEthernet)(nil),                             // 292: otg.DeviceEthernet
	(*EthernetConnection)(nil),                         // 293: otg.EthernetConnection
	(*DeviceVlan)(nil),                                 // 294: otg.DeviceVlan
	(*DeviceIpv4)(nil),                                 // 295: otg.DeviceIpv4
	(*DeviceIpv4Loopback)(nil),                         // 296: otg.DeviceIpv4Loopback
	(*DeviceIpv4GatewayMAC)(nil),                       // 297: otg.DeviceIpv4GatewayMAC
	(*DeviceIpv6)(nil),                                 // 298: otg.DeviceIpv6
	(*DeviceIpv6Loopback)(nil),                         // 299: otg.DeviceIpv6Loopback
	(*DeviceIpv6GatewayMAC)(nil),                       // 300: otg.DeviceIpv6GatewayMAC
	(*Layer1)(nil),                                     // 301: otg.Layer1
	(*Layer1AutoNegotiation)(nil),                      // 302: otg.Layer1AutoNegotiation
	(*Layer1FlowControl)(nil),                          // 303: otg.Layer1FlowControl
	(*Layer1Ieee8023X)(nil),                            // 304: otg.Layer1Ieee8023x
	(*Layer1Ieee8021Qbb)(nil),                          // 305: otg.Layer1Ieee8021qbb
	(*Capture)(nil),                                    // 306: otg.Capture
	(*CaptureFilter)(nil),                              // 307: otg.CaptureFilter
	(*CaptureCustom)(nil),                              // 308: otg.CaptureCustom
	(*CaptureField)(nil),                               // 309: otg.CaptureField
	(*CaptureEthernet)(nil),                            // 310: otg.CaptureEthernet
	(*CaptureVlan)(nil),                                // 311: otg.CaptureVlan
	(*CaptureIpv4)(nil),                                // 312: otg.CaptureIpv4
	(*CaptureIpv6)(nil),                                // 313: otg.CaptureIpv6
	(*Device)(nil),                                     // 314: otg.Device
	(*ProtocolOptions)(nil),                            // 315: otg.ProtocolOptions
	(*DeviceIsisRouter)(nil),                           // 316: otg.DeviceIsisRouter
	(*DeviceIsisMultiInstance)(nil),                    // 317: otg.DeviceIsisMultiInstance
	(*IsisInterface)(nil),                              // 318: otg.IsisInterface
	(*IsisInterfaceLevel)(nil),                         // 319: otg.IsisInterfaceLevel
	(*IsisMT)(nil),                                     // 320: otg.IsisMT
	(*LinkStateTE)(nil),                                // 321: otg.LinkStateTE
	(*LinkStatepriorityBandwidths)(nil),                // 322: otg.LinkStatepriorityBandwidths
	(*IsisInterfaceAuthentication)(nil),                // 323: otg.IsisInterfaceAuthentication
	(*IsisInterfaceAdvanced)(nil),                      // 324: otg.IsisInterfaceAdvanced
	(*IsisInterfaceLinkProtection)(nil),                // 325: otg.IsisInterfaceLinkProtection
	(*IsisBasic)(nil),                                  // 326: otg.IsisBasic
	(*IsisAdvanced)(nil),                               // 327: otg.IsisAdvanced
	(*IsisAuthentication)(nil),                         // 328: otg.IsisAuthentication
	(*IsisAuthenticationBase)(nil),                     // 329: otg.IsisAuthenticationBase
	(*IsisV4RouteRange)(nil),                           // 330: otg.IsisV4RouteRange
	(*V4RouteAddress)(nil),                             // 331: otg.V4RouteAddress
	(*V6RouteAddress)(nil),                             // 332: otg.V6RouteAddress
	(*MACRouteAddress)(nil),                            // 333: otg.MACRouteAddress
	(*IsisV6RouteRange)(nil),                           // 334: otg.IsisV6RouteRange
	(*DeviceBgpRouter)(nil),                            // 335: otg.DeviceBgpRouter
	(*BgpV4Peer)(nil),                                  // 336: otg.BgpV4Peer
	(*BgpV4Interface)(nil),                             // 337: otg.BgpV4Interface
	(*BgpV4EthernetSegment)(nil),                       // 338: otg.BgpV4EthernetSegment
	(*BgpEthernetSegmentDfElection)(nil),               // 339: otg.BgpEthernetSegmentDfElection
	(*BgpRouteAdvanced)(nil),                           // 340: otg.BgpRouteAdvanced
	(*BgpCommunity)(nil),                               // 341: otg.BgpCommunity
	(*BgpExtCommunity)(nil),                            // 342: otg.BgpExtCommunity
	(*BgpAsPath)(nil),                                  // 343: otg.BgpAsPath
	(*BgpAsPathSegment)(nil),                           // 344: otg.BgpAsPathSegment
	(*BgpV4EvpnEvis)(nil),                              // 345: otg.BgpV4EvpnEvis
	(*BgpV4EviVxlan)(nil),                              // 346: otg.BgpV4EviVxlan
	(*BgpV4EviVxlanBroadcastDomain)(nil),               // 347: otg.BgpV4EviVxlanBroadcastDomain
	(*BgpCMacIpRange)(nil),                             // 348: otg.BgpCMacIpRange
	(*BgpRouteDistinguisher)(nil),                      // 349: otg.BgpRouteDistinguisher
	(*BgpRouteTarget)(nil),                             // 350: otg.BgpRouteTarget
	(*BgpAdvanced)(nil),                                // 351: otg.BgpAdvanced
	(*BgpCapability)(nil),                              // 352: otg.BgpCapability
	(*BgpLearnedInformationFilter)(nil),                // 353: otg.BgpLearnedInformationFilter
	(*BgpV4RouteRange)(nil),                            // 354: otg.BgpV4RouteRange
	(*BgpAddPath)(nil),                                 // 355: otg.BgpAddPath
	(*BgpV6RouteRange)(nil),                            // 356: otg.BgpV6RouteRange
	(*BgpSrteV4Policy)(nil),                            // 357: otg.BgpSrteV4Policy
	(*BgpSrteV4TunnelTlv)(nil),                         // 358: otg.BgpSrteV4TunnelTlv
	(*BgpSrteRemoteEndpointSubTlv)(nil),                // 359: otg.BgpSrteRemoteEndpointSubTlv
	(*BgpSrteColorSubTlv)(nil),                         // 360: otg.BgpSrteColorSubTlv
	(*BgpSrteBindingSubTlv)(nil),                       // 361: otg.BgpSrteBindingSubTlv
	(*BgpSrtePreferenceSubTlv)(nil),                    // 362: otg.BgpSrtePreferenceSubTlv
	(*BgpSrtePolicyPrioritySubTlv)(nil),                // 363: otg.BgpSrtePolicyPrioritySubTlv
	(*BgpSrtePolicyNameSubTlv)(nil),                    // 364: otg.BgpSrtePolicyNameSubTlv
	(*BgpSrteExplicitNullLabelPolicySubTlv)(nil),       // 365: otg.BgpSrteExplicitNullLabelPolicySubTlv
	(*BgpSrteSegmentList)(nil),                         // 366: otg.BgpSrteSegmentList
	(*BgpSrteSegment)(nil),                             // 367: otg.BgpSrteSegment
	(*BgpSrteSrMplsSid)(nil),                           // 368: otg.BgpSrteSrMplsSid
	(*BgpSrteSRv6SIDEndpointBehaviorAndStructure)(nil), // 369: otg.BgpSrteSRv6SIDEndpointBehaviorAndStructure
	(*BgpSrteSegmentATypeSubTlv)(nil),                  // 370: otg.BgpSrteSegmentATypeSubTlv
	(*BgpSrteSegmentBTypeSubTlv)(nil),                  // 371: otg.BgpSrteSegmentBTypeSubTlv
	(*BgpSrteSegmentCTypeSubTlv)(nil),                  // 372: otg.BgpSrteSegmentCTypeSubTlv
	(*BgpSrteSegmentDTypeSubTlv)(nil),                  // 373: otg.BgpSrteSegmentDTypeSubTlv
	(*BgpSrteSegmentETypeSubTlv)(nil),                  // 374: otg.BgpSrteSegmentETypeSubTlv
	(*BgpSrteSegmentFTypeSubTlv)(nil),                  // 375: otg.BgpSrteSegmentFTypeSubTlv
	(*BgpSrteSegmentGTypeSubTlv)(nil),                  // 376: otg.BgpSrteSegmentGTypeSubTlv
	(*BgpSrteSegmentHTypeSubTlv)(nil),                  // 377: otg.BgpSrteSegmentHTypeSubTlv
	(*BgpSrteSegmentITypeSubTlv)(nil),                  // 378: otg.BgpSrteSegmentITypeSubTlv
	(*BgpSrteSegmentJTypeSubTlv)(nil),                  // 379: otg.BgpSrteSegmentJTypeSubTlv
	(*BgpSrteSegmentKTypeSubTlv)(nil),                  // 380: otg.BgpSrteSegmentKTypeSubTlv
	(*BgpSrteV6Policy)(nil),                            // 381: otg.BgpSrteV6Policy
	(*BgpSrteV6TunnelTlv)(nil),                         // 382: otg.BgpSrteV6TunnelTlv
	(*BgpV6Peer)(nil),                                  // 383: otg.BgpV6Peer
	(*BgpV6Interface)(nil),                             // 384: otg.BgpV6Interface
	(*BgpV6SegmentRouting)(nil),                        // 385: otg.BgpV6SegmentRouting
	(*BgpV6EthernetSegment)(nil),                       // 386: otg.BgpV6EthernetSegment
	(*BgpV6EvpnEvis)(nil),                              // 387: otg.BgpV6EvpnEvis
	(*BgpV6EviVxlan)(nil),                              // 388: otg.BgpV6EviVxlan
	(*BgpV6EviVxlanBroadcastDomain)(nil),               // 389: otg.BgpV6EviVxlanBroadcastDomain
	(*DeviceVxlan)(nil),                                // 390: otg.DeviceVxlan
	(*VxlanV4Tunnel)(nil),                              // 391: otg.VxlanV4Tunnel
	(*VxlanV6Tunnel)(nil),                              // 392: otg.VxlanV6Tunnel
	(*VxlanV4TunnelDestinationIPMode)(nil),             // 393: otg.VxlanV4TunnelDestinationIPMode
	(*VxlanV6TunnelDestinationIPMode)(nil),             // 394: otg.VxlanV6TunnelDestinationIPMode
	(*VxlanV4TunnelDestinationIPModeUnicast)(nil),      // 395: otg.VxlanV4TunnelDestinationIPModeUnicast
	(*VxlanV6TunnelDestinationIPModeUnicast)(nil),      // 396: otg.VxlanV6TunnelDestinationIPModeUnicast
	(*VxlanTunnelDestinationIPModeUnicastArpSuppressionCache)(nil), // 397: otg.VxlanTunnelDestinationIPModeUnicastArpSuppressionCache
	(*VxlanV4TunnelDestinationIPModeUnicastVtep)(nil),              // 398: otg.VxlanV4TunnelDestinationIPModeUnicastVtep
	(*VxlanV6TunnelDestinationIPModeUnicastVtep)(nil),              // 399: otg.VxlanV6TunnelDestinationIPModeUnicastVtep
	(*VxlanV4TunnelDestinationIPModeMulticast)(nil),                // 400: otg.VxlanV4TunnelDestinationIPModeMulticast
	(*VxlanV6TunnelDestinationIPModeMulticast)(nil),                // 401: otg.VxlanV6TunnelDestinationIPModeMulticast
	(*DeviceRsvp)(nil),                                                   // 402: otg.DeviceRsvp
	(*RsvpIpv4Interface)(nil),                                            // 403: otg.RsvpIpv4Interface
	(*RsvpLspIpv4Interface)(nil),                                         // 404: otg.RsvpLspIpv4Interface
	(*RsvpLspIpv4InterfaceP2PEgressIpv4Lsp)(nil),                         // 405: otg.RsvpLspIpv4InterfaceP2PEgressIpv4Lsp
	(*RsvpLspIpv4InterfaceP2PIngressIpv4Lsp)(nil),                        // 406: otg.RsvpLspIpv4InterfaceP2PIngressIpv4Lsp
	(*RsvpSessionAttribute)(nil),                                         // 407: otg.RsvpSessionAttribute
	(*RsvpResourceAffinities)(nil),                                       // 408: otg.RsvpResourceAffinities
	(*RsvpTspec)(nil),                                                    // 409: otg.RsvpTspec
	(*RsvpFastReroute)(nil),                                              // 410: otg.RsvpFastReroute
	(*RsvpEro)(nil),                                                      // 411: otg.RsvpEro
	(*RsvpEroSubobject)(nil),                                             // 412: otg.RsvpEroSubobject
	(*Flow)(nil),                                                         // 413: otg.Flow
	(*FlowTxRx)(nil),                                                     // 414: otg.FlowTxRx
	(*FlowPort)(nil),                                                     // 415: otg.FlowPort
	(*FlowRouter)(nil),                                                   // 416: otg.FlowRouter
	(*FlowHeader)(nil),                                                   // 417: otg.FlowHeader
	(*FlowCustom)(nil),                                                   // 418: otg.FlowCustom
	(*FlowEthernet)(nil),                                                 // 419: otg.FlowEthernet
	(*FlowVlan)(nil),                                                     // 420: otg.FlowVlan
	(*FlowVxlan)(nil),                                                    // 421: otg.FlowVxlan
	(*FlowIpv4)(nil),                                                     // 422: otg.FlowIpv4
	(*FlowIpv4Priority)(nil),                                             // 423: otg.FlowIpv4Priority
	(*FlowIpv4Dscp)(nil),                                                 // 424: otg.FlowIpv4Dscp
	(*FlowIpv4Tos)(nil),                                                  // 425: otg.FlowIpv4Tos
	(*FlowIpv6)(nil),                                                     // 426: otg.FlowIpv6
	(*FlowPfcPause)(nil),                                                 // 427: otg.FlowPfcPause
	(*FlowEthernetPause)(nil),                                            // 428: otg.FlowEthernetPause
	(*FlowTcp)(nil),                                                      // 429: otg.FlowTcp
	(*FlowUdp)(nil),                                                      // 430: otg.FlowUdp
	(*FlowGre)(nil),                                                      // 431: otg.FlowGre
	(*FlowGtpv1)(nil),                                                    // 432: otg.FlowGtpv1
	(*FlowGtpExtension)(nil),                                             // 433: otg.FlowGtpExtension
	(*FlowGtpv2)(nil),                                                    // 434: otg.FlowGtpv2
	(*FlowArp)(nil),                                                      // 435: otg.FlowArp
	(*FlowIcmp)(nil),                                                     // 436: otg.FlowIcmp
	(*FlowIcmpEcho)(nil),                                                 // 437: otg.FlowIcmpEcho
	(*FlowIcmpv6)(nil),                                                   // 438: otg.FlowIcmpv6
	(*FlowIcmpv6Echo)(nil),                                               // 439: otg.FlowIcmpv6Echo
	(*FlowPpp)(nil),                                                      // 440: otg.FlowPpp
	(*FlowIgmpv1)(nil),                                                   // 441: otg.FlowIgmpv1
	(*FlowMpls)(nil),                                                     // 442: otg.FlowMpls
	(*FlowSize)(nil),                                                     // 443: otg.FlowSize
	(*FlowSizeIncrement)(nil),                                            // 444: otg.FlowSizeIncrement
	(*FlowSizeRandom)(nil),                                               // 445: otg.FlowSizeRandom
	(*FlowRate)(nil),                                                     // 446: otg.FlowRate
	(*FlowDuration)(nil),                                                 // 447: otg.FlowDuration
	(*FlowContinuous)(nil),                                               // 448: otg.FlowContinuous
	(*FlowDelay)(nil),                                                    // 449: otg.FlowDelay
	(*FlowFixedPackets)(nil),                                             // 450: otg.FlowFixedPackets
	(*FlowFixedSeconds)(nil),                                             // 451: otg.FlowFixedSeconds
	(*FlowBurst)(nil),                                                    // 452: otg.FlowBurst
	(*FlowDurationInterBurstGap)(nil),                                    // 453: otg.FlowDurationInterBurstGap
	(*FlowMetrics)(nil),                                                  // 454: otg.FlowMetrics
	(*FlowLatencyMetrics)(nil),                                           // 455: otg.FlowLatencyMetrics
	(*Event)(nil),                                                        // 456: otg.Event
	(*EventRxRateThreshold)(nil),                                         // 457: otg.EventRxRateThreshold
	(*EventLink)(nil),                                                    // 458: otg.EventLink
	(*EventRouteAdvertiseWithdraw)(nil),                                  // 459: otg.EventRouteAdvertiseWithdraw
	(*EventRequest)(nil),                                                 // 460: otg.EventRequest
	(*EventSubscription)(nil),                                            // 461: otg.EventSubscription
	(*Lldp)(nil),                                                         // 462: otg.Lldp
	(*LldpConnection)(nil),                                               // 463: otg.LldpConnection
	(*LldpChassisId)(nil),                                                // 464: otg.LldpChassisId
	(*LldpPortId)(nil),                                                   // 465: otg.LldpPortId
	(*LldpChassisMacSubType)(nil),                                        // 466: otg.LldpChassisMacSubType
	(*LldpPortInterfaceNameSubType)(nil),                                 // 467: otg.LldpPortInterfaceNameSubType
	(*LldpSystemName)(nil),                                               // 468: otg.LldpSystemName
	(*ResponseError)(nil),                                                // 469: otg.ResponseError
	(*ResponseWarning)(nil),                                              // 470: otg.ResponseWarning
	(*LinkState)(nil),                                                    // 471: otg.LinkState
	(*TransmitState)(nil),                                                // 472: otg.TransmitState
	(*CaptureState)(nil),                                                 // 473: otg.CaptureState
	(*FlowsUpdate)(nil),                                                  // 474: otg.FlowsUpdate
	(*RouteState)(nil),                                                   // 475: otg.RouteState
	(*PingRequest)(nil),                                                  // 476: otg.PingRequest
	(*ProtocolState)(nil),                                                // 477: otg.ProtocolState
	(*DeviceState)(nil),                                                  // 478: otg.DeviceState
	(*Ping)(nil),                                                         // 479: otg.Ping
	(*PingIpv4)(nil),                                                     // 480: otg.PingIpv4
	(*PingIpv6)(nil),                                                     // 481: otg.PingIpv6
	(*PingResponse)(nil),                                                 // 482: otg.PingResponse
	(*Response)(nil),                                                     // 483: otg.Response
	(*LacpMemberState)(nil),                                              // 484: otg.LacpMemberState
	(*MetricsRequest)(nil),                                               // 485: otg.MetricsRequest
	(*MetricsResponse)(nil),                                              // 486: otg.MetricsResponse
	(*PortMetricsRequest)(nil),                                           // 487: otg.PortMetricsRequest
	(*PortMetric)(nil),                                                   // 488: otg.PortMetric
	(*FlowMetricsRequest)(nil),                                           // 489: otg.FlowMetricsRequest
	(*FlowMetricGroupRequest)(nil),                                       // 490: otg.FlowMetricGroupRequest
	(*FlowMetric)(nil),                                                   // 491: otg.FlowMetric
	(*FlowMetricGroup)(nil),                                              // 492: otg.FlowMetricGroup
	(*MetricTimestamp)(nil),                                              // 493: otg.MetricTimestamp
	(*MetricLatency)(nil),                                                // 494: otg.MetricLatency
	(*Bgpv4MetricsRequest)(nil),                                          // 495: otg.Bgpv4MetricsRequest
	(*Bgpv4Metric)(nil),                                                  // 496: otg.Bgpv4Metric
	(*Bgpv6MetricsRequest)(nil),                                          // 497: otg.Bgpv6MetricsRequest
	(*Bgpv6Metric)(nil),                                                  // 498: otg.Bgpv6Metric
	(*IsisMetricsRequest)(nil),                                           // 499: otg.IsisMetricsRequest
	(*IsisMetric)(nil),                                                   // 500: otg.IsisMetric
	(*LagMetricsRequest)(nil),                                            // 501: otg.LagMetricsRequest
	(*LagMetric)(nil),                                                    // 502: otg.LagMetric
	(*LacpMetricsRequest)(nil),                                           // 503: otg.LacpMetricsRequest
	(*LacpMetric)(nil),                                                   // 504: otg.LacpMetric
	(*LldpMetricsRequest)(nil),                                           // 505: otg.LldpMetricsRequest
	(*LldpMetric)(nil),                                                   // 506: otg.LldpMetric
	(*RsvpMetricsRequest)(nil),                                           // 507: otg.RsvpMetricsRequest
	(*RsvpMetric)(nil),                                                   // 508: otg.RsvpMetric
	(*StatesRequest)(nil),                                                // 509: otg.StatesRequest
	(*StatesResponse)(nil),                                               // 510: otg.StatesResponse
	(*Neighborsv4StatesRequest)(nil),                                     // 511: otg.Neighborsv4StatesRequest
	(*Neighborsv4State)(nil),                                             // 512: otg.Neighborsv4State
	(*Neighborsv6StatesRequest)(nil),                                     // 513: otg.Neighborsv6StatesRequest
	(*Neighborsv6State)(nil),                                             // 514: otg.Neighborsv6State
	(*BgpPrefixStateRequest)(nil),                                        // 515: otg.BgpPrefixStateRequest
	(*BgpPrefixIpv4UnicastFilter)(nil),                                   // 516: otg.BgpPrefixIpv4UnicastFilter
	(*BgpPrefixIpv6UnicastFilter)(nil),                                   // 517: otg.BgpPrefixIpv6UnicastFilter
	(*BgpPrefixesState)(nil),                                             // 518: otg.BgpPrefixesState
	(*BgpPrefixIpv4UnicastState)(nil),                                    // 519: otg.BgpPrefixIpv4UnicastState
	(*BgpPrefixIpv6UnicastState)(nil),                                    // 520: otg.BgpPrefixIpv6UnicastState
	(*ResultBgpCommunity)(nil),                                           // 521: otg.ResultBgpCommunity
	(*ResultBgpAsPath)(nil),                                              // 522: otg.ResultBgpAsPath
	(*ResultBgpAsPathSegment)(nil),                                       // 523: otg.ResultBgpAsPathSegment
	(*IsisLspsStateRequest)(nil),                                         // 524: otg.IsisLspsStateRequest
	(*IsisLspsState)(nil),                                                // 525: otg.IsisLspsState
	(*IsisLspState)(nil),                                                 // 526: otg.IsisLspState
	(*IsisLspTlvs)(nil),                                                  // 527: otg.IsisLspTlvs
	(*IsisLspHostname)(nil),                                              // 528: otg.IsisLspHostname
	(*IsisLspFlags)(nil),                                                 // 529: otg.IsisLspFlags
	(*IsisLspIsReachabilityTlv)(nil),                                     // 530: otg.IsisLspIsReachabilityTlv
	(*IsisLspExtendedIsReachabilityTlv)(nil),                             // 531: otg.IsisLspExtendedIsReachabilityTlv
	(*IsisLspneighbor)(nil),                                              // 532: otg.IsisLspneighbor
	(*IsisLspIpv4InternalReachabilityTlv)(nil),                           // 533: otg.IsisLspIpv4InternalReachabilityTlv
	(*IsisLspIpv4ExternalReachabilityTlv)(nil),                           // 534: otg.IsisLspIpv4ExternalReachabilityTlv
	(*IsisLspV4Prefix)(nil),                                              // 535: otg.IsisLspV4Prefix
	(*IsisLspExtendedIpv4ReachabilityTlv)(nil),                           // 536: otg.IsisLspExtendedIpv4ReachabilityTlv
	(*IsisLspExtendedV4Prefix)(nil),                                      // 537: otg.IsisLspExtendedV4Prefix
	(*IsisLspIpv6ReachabilityTlv)(nil),                                   // 538: otg.IsisLspIpv6ReachabilityTlv
	(*IsisLspV6Prefix)(nil),                                              // 539: otg.IsisLspV6Prefix
	(*IsisLspPrefixAttributes)(nil),                                      // 540: otg.IsisLspPrefixAttributes
	(*LldpNeighborsStateRequest)(nil),                                    // 541: otg.LldpNeighborsStateRequest
	(*LldpNeighborsState)(nil),                                           // 542: otg.LldpNeighborsState
	(*LldpCustomTLVState)(nil),                                           // 543: otg.LldpCustomTLVState
	(*LldpCapabilityState)(nil),                                          // 544: otg.LldpCapabilityState
	(*RsvpLspsStateRequest)(nil),                                         // 545: otg.RsvpLspsStateRequest
	(*RsvpLspsState)(nil),                                                // 546: otg.RsvpLspsState
	(*RsvpIPv4LspState)(nil),                                             // 547: otg.RsvpIPv4LspState
	(*RsvpLspState)(nil),                                                 // 548: otg.RsvpLspState
	(*RsvpLspIpv4Rro)(nil),                                               // 549: otg.RsvpLspIpv4Rro
	(*RsvpLspIpv4Ero)(nil),                                               // 550: otg.RsvpLspIpv4Ero
	(*CaptureRequest)(nil),                                               // 551: otg.CaptureRequest
	(*PatternFlowEthernetDstCounter)(nil),                                // 552: otg.PatternFlowEthernetDstCounter
	(*PatternFlowEthernetDst)(nil),                                       // 553: otg.PatternFlowEthernetDst
	(*PatternFlowEthernetSrcCounter)(nil),                                // 554: otg.PatternFlowEthernetSrcCounter
	(*PatternFlowEthernetSrc)(nil),                                       // 555: otg.PatternFlowEthernetSrc
	(*PatternFlowEthernetEtherTypeCounter)(nil),                          // 556: otg.PatternFlowEthernetEtherTypeCounter
	(*PatternFlowEthernetEtherType)(nil),                                 // 557: otg.PatternFlowEthernetEtherType
	(*PatternFlowEthernetPfcQueueCounter)(nil),                           // 558: otg.PatternFlowEthernetPfcQueueCounter
	(*PatternFlowEthernetPfcQueue)(nil),                                  // 559: otg.PatternFlowEthernetPfcQueue
	(*PatternFlowVlanPriorityCounter)(nil),                               // 560: otg.PatternFlowVlanPriorityCounter
	(*PatternFlowVlanPriority)(nil),                                      // 561: otg.PatternFlowVlanPriority
	(*PatternFlowVlanCfiCounter)(nil),                                    // 562: otg.PatternFlowVlanCfiCounter
	(*PatternFlowVlanCfi)(nil),                                           // 563: otg.PatternFlowVlanCfi
	(*PatternFlowVlanIdCounter)(nil),                                     // 564: otg.PatternFlowVlanIdCounter
	(*PatternFlowVlanId)(nil),                                            // 565: otg.PatternFlowVlanId
	(*PatternFlowVlanTpidCounter)(nil),                                   // 566: otg.PatternFlowVlanTpidCounter
	(*PatternFlowVlanTpid)(nil),                                          // 567: otg.PatternFlowVlanTpid
	(*PatternFlowVxlanFlagsCounter)(nil),                                 // 568: otg.PatternFlowVxlanFlagsCounter
	(*PatternFlowVxlanFlags)(nil),                                        // 569: otg.PatternFlowVxlanFlags
	(*PatternFlowVxlanReserved0Counter)(nil),                             // 570: otg.PatternFlowVxlanReserved0Counter
	(*PatternFlowVxlanReserved0)(nil),                                    // 571: otg.PatternFlowVxlanReserved0
	(*PatternFlowVxlanVniCounter)(nil),                                   // 572: otg.PatternFlowVxlanVniCounter
	(*PatternFlowVxlanVni)(nil),                                          // 573: otg.PatternFlowVxlanVni
	(*PatternFlowVxlanReserved1Counter)(nil),                             // 574: otg.PatternFlowVxlanReserved1Counter
	(*PatternFlowVxlanReserved1)(nil),                                    // 575: otg.PatternFlowVxlanReserved1
	(*PatternFlowIpv4VersionCounter)(nil),                                // 576: otg.PatternFlowIpv4VersionCounter
	(*PatternFlowIpv4Version)(nil),                                       // 577: otg.PatternFlowIpv4Version
	(*PatternFlowIpv4HeaderLengthCounter)(nil),                           // 578: otg.PatternFlowIpv4HeaderLengthCounter
	(*PatternFlowIpv4HeaderLength)(nil),                                  // 579: otg.PatternFlowIpv4HeaderLength
	(*PatternFlowIpv4TotalLengthCounter)(nil),                            // 580: otg.PatternFlowIpv4TotalLengthCounter
	(*PatternFlowIpv4TotalLength)(nil),                                   // 581: otg.PatternFlowIpv4TotalLength
	(*PatternFlowIpv4IdentificationCounter)(nil),                         // 582: otg.PatternFlowIpv4IdentificationCounter
	(*PatternFlowIpv4Identification)(nil),                                // 583: otg.PatternFlowIpv4Identification
	(*PatternFlowIpv4ReservedCounter)(nil),                               // 584: otg.PatternFlowIpv4ReservedCounter
	(*PatternFlowIpv4Reserved)(nil),                                      // 585: otg.PatternFlowIpv4Reserved
	(*PatternFlowIpv4DontFragmentCounter)(nil),                           // 586: otg.PatternFlowIpv4DontFragmentCounter
	(*PatternFlowIpv4DontFragment)(nil),                                  // 587: otg.PatternFlowIpv4DontFragment
	(*PatternFlowIpv4MoreFragmentsCounter)(nil),                          // 588: otg.PatternFlowIpv4MoreFragmentsCounter
	(*PatternFlowIpv4MoreFragments)(nil),                                 // 589: otg.PatternFlowIpv4MoreFragments
	(*PatternFlowIpv4FragmentOffsetCounter)(nil),                         // 590: otg.PatternFlowIpv4FragmentOffsetCounter
	(*PatternFlowIpv4FragmentOffset)(nil),                                // 591: otg.PatternFlowIpv4FragmentOffset
	(*PatternFlowIpv4TimeToLiveCounter)(nil),                             // 592: otg.PatternFlowIpv4TimeToLiveCounter
	(*PatternFlowIpv4TimeToLive)(nil),                                    // 593: otg.PatternFlowIpv4TimeToLive
	(*PatternFlowIpv4ProtocolCounter)(nil),                               // 594: otg.PatternFlowIpv4ProtocolCounter
	(*PatternFlowIpv4Protocol)(nil),                                      // 595: otg.PatternFlowIpv4Protocol
	(*PatternFlowIpv4HeaderChecksum)(nil),                                // 596: otg.PatternFlowIpv4HeaderChecksum
	(*PatternFlowIpv4SrcCounter)(nil),                                    // 597: otg.PatternFlowIpv4SrcCounter
	(*PatternFlowIpv4Src)(nil),                                           // 598: otg.PatternFlowIpv4Src
	(*PatternFlowIpv4DstCounter)(nil),                                    // 599: otg.PatternFlowIpv4DstCounter
	(*PatternFlowIpv4Dst)(nil),                                           // 600: otg.PatternFlowIpv4Dst
	(*PatternFlowIpv4PriorityRawCounter)(nil),                            // 601: otg.PatternFlowIpv4PriorityRawCounter
	(*PatternFlowIpv4PriorityRaw)(nil),                                   // 602: otg.PatternFlowIpv4PriorityRaw
	(*PatternFlowIpv4DscpPhbCounter)(nil),                                // 603: otg.PatternFlowIpv4DscpPhbCounter
	(*PatternFlowIpv4DscpPhb)(nil),                                       // 604: otg.PatternFlowIpv4DscpPhb
	(*PatternFlowIpv4DscpEcnCounter)(nil),                                // 605: otg.PatternFlowIpv4DscpEcnCounter
	(*PatternFlowIpv4DscpEcn)(nil),                                       // 606: otg.PatternFlowIpv4DscpEcn
	(*PatternFlowIpv4TosPrecedenceCounter)(nil),                          // 607: otg.PatternFlowIpv4TosPrecedenceCounter
	(*PatternFlowIpv4TosPrecedence)(nil),                                 // 608: otg.PatternFlowIpv4TosPrecedence
	(*PatternFlowIpv4TosDelayCounter)(nil),                               // 609: otg.PatternFlowIpv4TosDelayCounter
	(*PatternFlowIpv4TosDelay)(nil),                                      // 610: otg.PatternFlowIpv4TosDelay
	(*PatternFlowIpv4TosThroughputCounter)(nil),                          // 611: otg.PatternFlowIpv4TosThroughputCounter
	(*PatternFlowIpv4TosThroughput)(nil),                                 // 612: otg.PatternFlowIpv4TosThroughput
	(*PatternFlowIpv4TosReliabilityCounter)(nil),                         // 613: otg.PatternFlowIpv4TosReliabilityCounter
	(*PatternFlowIpv4TosReliability)(nil),                                // 614: otg.PatternFlowIpv4TosReliability
	(*PatternFlowIpv4TosMonetaryCounter)(nil),                            // 615: otg.PatternFlowIpv4TosMonetaryCounter
	(*PatternFlowIpv4TosMonetary)(nil),                                   // 616: otg.PatternFlowIpv4TosMonetary
	(*PatternFlowIpv4TosUnusedCounter)(nil),                              // 617: otg.PatternFlowIpv4TosUnusedCounter
	(*PatternFlowIpv4TosUnused)(nil),                                     // 618: otg.PatternFlowIpv4TosUnused
	(*PatternFlowIpv6VersionCounter)(nil),                                // 619: otg.PatternFlowIpv6VersionCounter
	(*PatternFlowIpv6Version)(nil),                                       // 620: otg.PatternFlowIpv6Version
	(*PatternFlowIpv6TrafficClassCounter)(nil),                           // 621: otg.PatternFlowIpv6TrafficClassCounter
	(*PatternFlowIpv6TrafficClass)(nil),                                  // 622: otg.PatternFlowIpv6TrafficClass
	(*PatternFlowIpv6FlowLabelCounter)(nil),                              // 623: otg.PatternFlowIpv6FlowLabelCounter
	(*PatternFlowIpv6FlowLabel)(nil),                                     // 624: otg.PatternFlowIpv6FlowLabel
	(*PatternFlowIpv6PayloadLengthCounter)(nil),                          // 625: otg.PatternFlowIpv6PayloadLengthCounter
	(*PatternFlowIpv6PayloadLength)(nil),                                 // 626: otg.PatternFlowIpv6PayloadLength
	(*PatternFlowIpv6NextHeaderCounter)(nil),                             // 627: otg.PatternFlowIpv6NextHeaderCounter
	(*PatternFlowIpv6NextHeader)(nil),                                    // 628: otg.PatternFlowIpv6NextHeader
	(*PatternFlowIpv6HopLimitCounter)(nil),                               // 629: otg.PatternFlowIpv6HopLimitCounter
	(*PatternFlowIpv6HopLimit)(nil),                                      // 630: otg.PatternFlowIpv6HopLimit
	(*PatternFlowIpv6SrcCounter)(nil),                                    // 631: otg.PatternFlowIpv6SrcCounter
	(*PatternFlowIpv6Src)(nil),                                           // 632: otg.PatternFlowIpv6Src
	(*PatternFlowIpv6DstCounter)(nil),                                    // 633: otg.PatternFlowIpv6DstCounter
	(*PatternFlowIpv6Dst)(nil),                                           // 634: otg.PatternFlowIpv6Dst
	(*PatternFlowPfcPauseDstCounter)(nil),                                // 635: otg.PatternFlowPfcPauseDstCounter
	(*PatternFlowPfcPauseDst)(nil),                                       // 636: otg.PatternFlowPfcPauseDst
	(*PatternFlowPfcPauseSrcCounter)(nil),                                // 637: otg.PatternFlowPfcPauseSrcCounter
	(*PatternFlowPfcPauseSrc)(nil),                                       // 638: otg.PatternFlowPfcPauseSrc
	(*PatternFlowPfcPauseEtherTypeCounter)(nil),                          // 639: otg.PatternFlowPfcPauseEtherTypeCounter
	(*PatternFlowPfcPauseEtherType)(nil),                                 // 640: otg.PatternFlowPfcPauseEtherType
	(*PatternFlowPfcPauseControlOpCodeCounter)(nil),                      // 641: otg.PatternFlowPfcPauseControlOpCodeCounter
	(*PatternFlowPfcPauseControlOpCode)(nil),                             // 642: otg.PatternFlowPfcPauseControlOpCode
	(*PatternFlowPfcPauseClassEnableVectorCounter)(nil),                  // 643: otg.PatternFlowPfcPauseClassEnableVectorCounter
	(*PatternFlowPfcPauseClassEnableVector)(nil),                         // 644: otg.PatternFlowPfcPauseClassEnableVector
	(*PatternFlowPfcPausePauseClass0Counter)(nil),                        // 645: otg.PatternFlowPfcPausePauseClass0Counter
	(*PatternFlowPfcPausePauseClass0)(nil),                               // 646: otg.PatternFlowPfcPausePauseClass0
	(*PatternFlowPfcPausePauseClass1Counter)(nil),                        // 647: otg.PatternFlowPfcPausePauseClass1Counter
	(*PatternFlowPfcPausePauseClass1)(nil),                               // 648: otg.PatternFlowPfcPausePauseClass1
	(*PatternFlowPfcPausePauseClass2Counter)(nil),                        // 649: otg.PatternFlowPfcPausePauseClass2Counter
	(*PatternFlowPfcPausePauseClass2)(nil),                               // 650: otg.PatternFlowPfcPausePauseClass2
	(*PatternFlowPfcPausePauseClass3Counter)(nil),                        // 651: otg.PatternFlowPfcPausePauseClass3Counter
	(*PatternFlowPfcPausePauseClass3)(nil),                               // 652: otg.PatternFlowPfcPausePauseClass3
	(*PatternFlowPfcPausePauseClass4Counter)(nil),                        // 653: otg.PatternFlowPfcPausePauseClass4Counter
	(*PatternFlowPfcPausePauseClass4)(nil),                               // 654: otg.PatternFlowPfcPausePauseClass4
	(*PatternFlowPfcPausePauseClass5Counter)(nil),                        // 655: otg.PatternFlowPfcPausePauseClass5Counter
	(*PatternFlowPfcPausePauseClass5)(nil),                               // 656: otg.PatternFlowPfcPausePauseClass5
	(*PatternFlowPfcPausePauseClass6Counter)(nil),                        // 657: otg.PatternFlowPfcPausePauseClass6Counter
	(*PatternFlowPfcPausePauseClass6)(nil),                               // 658: otg.PatternFlowPfcPausePauseClass6
	(*PatternFlowPfcPausePauseClass7Counter)(nil),                        // 659: otg.PatternFlowPfcPausePauseClass7Counter
	(*PatternFlowPfcPausePauseClass7)(nil),                               // 660: otg.PatternFlowPfcPausePauseClass7
	(*PatternFlowEthernetPauseDstCounter)(nil),                           // 661: otg.PatternFlowEthernetPauseDstCounter
	(*PatternFlowEthernetPauseDst)(nil),                                  // 662: otg.PatternFlowEthernetPauseDst
	(*PatternFlowEthernetPauseSrcCounter)(nil),                           // 663: otg.PatternFlowEthernetPauseSrcCounter
	(*PatternFlowEthernetPauseSrc)(nil),                                  // 664: otg.PatternFlowEthernetPauseSrc
	(*PatternFlowEthernetPauseEtherTypeCounter)(nil),                     // 665: otg.PatternFlowEthernetPauseEtherTypeCounter
	(*PatternFlowEthernetPauseEtherType)(nil),                            // 666: otg.PatternFlowEthernetPauseEtherType
	(*PatternFlowEthernetPauseControlOpCodeCounter)(nil),                 // 667: otg.PatternFlowEthernetPauseControlOpCodeCounter
	(*PatternFlowEthernetPauseControlOpCode)(nil),                        // 668: otg.PatternFlowEthernetPauseControlOpCode
	(*PatternFlowEthernetPauseTimeCounter)(nil),                          // 669: otg.PatternFlowEthernetPauseTimeCounter
	(*PatternFlowEthernetPauseTime)(nil),                                 // 670: otg.PatternFlowEthernetPauseTime
	(*PatternFlowTcpSrcPortCounter)(nil),                                 // 671: otg.PatternFlowTcpSrcPortCounter
	(*PatternFlowTcpSrcPort)(nil),                                        // 672: otg.PatternFlowTcpSrcPort
	(*PatternFlowTcpDstPortCounter)(nil),                                 // 673: otg.PatternFlowTcpDstPortCounter
	(*PatternFlowTcpDstPort)(nil),                                        // 674: otg.PatternFlowTcpDstPort
	(*PatternFlowTcpSeqNumCounter)(nil),                                  // 675: otg.PatternFlowTcpSeqNumCounter
	(*PatternFlowTcpSeqNum)(nil),                                         // 676: otg.PatternFlowTcpSeqNum
	(*PatternFlowTcpAckNumCounter)(nil),                                  // 677: otg.PatternFlowTcpAckNumCounter
	(*PatternFlowTcpAckNum)(nil),                                         // 678: otg.PatternFlowTcpAckNum
	(*PatternFlowTcpDataOffsetCounter)(nil),                              // 679: otg.PatternFlowTcpDataOffsetCounter
	(*PatternFlowTcpDataOffset)(nil),                                     // 680: otg.PatternFlowTcpDataOffset
	(*PatternFlowTcpEcnNsCounter)(nil),                                   // 681: otg.PatternFlowTcpEcnNsCounter
	(*PatternFlowTcpEcnNs)(nil),                                          // 682: otg.PatternFlowTcpEcnNs
	(*PatternFlowTcpEcnCwrCounter)(nil),                                  // 683: otg.PatternFlowTcpEcnCwrCounter
	(*PatternFlowTcpEcnCwr)(nil),                                         // 684: otg.PatternFlowTcpEcnCwr
	(*PatternFlowTcpEcnEchoCounter)(nil),                                 // 685: otg.PatternFlowTcpEcnEchoCounter
	(*PatternFlowTcpEcnEcho)(nil),                                        // 686: otg.PatternFlowTcpEcnEcho
	(*PatternFlowTcpCtlUrgCounter)(nil),                                  // 687: otg.PatternFlowTcpCtlUrgCounter
	(*PatternFlowTcpCtlUrg)(nil),                                         // 688: otg.PatternFlowTcpCtlUrg
	(*PatternFlowTcpCtlAckCounter)(nil),                                  // 689: otg.PatternFlowTcpCtlAckCounter
	(*PatternFlowTcpCtlAck)(nil),                                         // 690: otg.PatternFlowTcpCtlAck
	(*PatternFlowTcpCtlPshCounter)(nil),                                  // 691: otg.PatternFlowTcpCtlPshCounter
	(*PatternFlowTcpCtlPsh)(nil),                                         // 692: otg.PatternFlowTcpCtlPsh
	(*PatternFlowTcpCtlRstCounter)(nil),                                  // 693: otg.PatternFlowTcpCtlRstCounter
	(*PatternFlowTcpCtlRst)(nil),                                         // 694: otg.PatternFlowTcpCtlRst
	(*PatternFlowTcpCtlSynCounter)(nil),                                  // 695: otg.PatternFlowTcpCtlSynCounter
	(*PatternFlowTcpCtlSyn)(nil),                                         // 696: otg.PatternFlowTcpCtlSyn
	(*PatternFlowTcpCtlFinCounter)(nil),                                  // 697: otg.PatternFlowTcpCtlFinCounter
	(*PatternFlowTcpCtlFin)(nil),                                         // 698: otg.PatternFlowTcpCtlFin
	(*PatternFlowTcpWindowCounter)(nil),                                  // 699: otg.PatternFlowTcpWindowCounter
	(*PatternFlowTcpWindow)(nil),                                         // 700: otg.PatternFlowTcpWindow
	(*PatternFlowUdpSrcPortCounter)(nil),                                 // 701: otg.PatternFlowUdpSrcPortCounter
	(*PatternFlowUdpSrcPort)(nil),                                        // 702: otg.PatternFlowUdpSrcPort
	(*PatternFlowUdpDstPortCounter)(nil),                                 // 703: otg.PatternFlowUdpDstPortCounter
	(*PatternFlowUdpDstPort)(nil),                                        // 704: otg.PatternFlowUdpDstPort
	(*PatternFlowUdpLengthCounter)(nil),                                  // 705: otg.PatternFlowUdpLengthCounter
	(*PatternFlowUdpLength)(nil),                                         // 706: otg.PatternFlowUdpLength
	(*PatternFlowUdpChecksum)(nil),                                       // 707: otg.PatternFlowUdpChecksum
	(*PatternFlowGreChecksumPresentCounter)(nil),                         // 708: otg.PatternFlowGreChecksumPresentCounter
	(*PatternFlowGreChecksumPresent)(nil),                                // 709: otg.PatternFlowGreChecksumPresent
	(*PatternFlowGreReserved0Counter)(nil),                               // 710: otg.PatternFlowGreReserved0Counter
	(*PatternFlowGreReserved0)(nil),                                      // 711: otg.PatternFlowGreReserved0
	(*PatternFlowGreVersionCounter)(nil),                                 // 712: otg.PatternFlowGreVersionCounter
	(*PatternFlowGreVersion)(nil),                                        // 713: otg.PatternFlowGreVersion
	(*PatternFlowGreProtocolCounter)(nil),                                // 714: otg.PatternFlowGreProtocolCounter
	(*PatternFlowGreProtocol)(nil),                                       // 715: otg.PatternFlowGreProtocol
	(*PatternFlowGreChecksum)(nil),                                       // 716: otg.PatternFlowGreChecksum
	(*PatternFlowGreReserved1Counter)(nil),                               // 717: otg.PatternFlowGreReserved1Counter
	(*PatternFlowGreReserved1)(nil),                                      // 718: otg.PatternFlowGreReserved1
	(*PatternFlowGtpv1VersionCounter)(nil),                               // 719: otg.PatternFlowGtpv1VersionCounter
	(*PatternFlowGtpv1Version)(nil),                                      // 720: otg.PatternFlowGtpv1Version
	(*PatternFlowGtpv1ProtocolTypeCounter)(nil),                          // 721: otg.PatternFlowGtpv1ProtocolTypeCounter
	(*PatternFlowGtpv1ProtocolType)(nil),                                 // 722: otg.PatternFlowGtpv1ProtocolType
	(*PatternFlowGtpv1ReservedCounter)(nil),                              // 723: otg.PatternFlowGtpv1ReservedCounter
	(*PatternFlowGtpv1Reserved)(nil),                                     // 724: otg.PatternFlowGtpv1Reserved
	(*PatternFlowGtpv1EFlagCounter)(nil),                                 // 725: otg.PatternFlowGtpv1EFlagCounter
	(*PatternFlowGtpv1EFlag)(nil),                                        // 726: otg.PatternFlowGtpv1EFlag
	(*PatternFlowGtpv1SFlagCounter)(nil),                                 // 727: otg.PatternFlowGtpv1SFlagCounter
	(*PatternFlowGtpv1SFlag)(nil),                                        // 728: otg.PatternFlowGtpv1SFlag
	(*PatternFlowGtpv1PnFlagCounter)(nil),                                // 729: otg.PatternFlowGtpv1PnFlagCounter
	(*PatternFlowGtpv1PnFlag)(nil),                                       // 730: otg.PatternFlowGtpv1PnFlag
	(*PatternFlowGtpv1MessageTypeCounter)(nil),                           // 731: otg.PatternFlowGtpv1MessageTypeCounter
	(*PatternFlowGtpv1MessageType)(nil),                                  // 732: otg.PatternFlowGtpv1MessageType
	(*PatternFlowGtpv1MessageLengthCounter)(nil),                         // 733: otg.PatternFlowGtpv1MessageLengthCounter
	(*PatternFlowGtpv1MessageLength)(nil),                                // 734: otg.PatternFlowGtpv1MessageLength
	(*PatternFlowGtpv1TeidCounter)(nil),                                  // 735: otg.PatternFlowGtpv1TeidCounter
	(*PatternFlowGtpv1Teid)(nil),                                         // 736: otg.PatternFlowGtpv1Teid
	(*PatternFlowGtpv1SquenceNumberCounter)(nil),                         // 737: otg.PatternFlowGtpv1SquenceNumberCounter
	(*PatternFlowGtpv1SquenceNumber)(nil),                                // 738: otg.PatternFlowGtpv1SquenceNumber
	(*PatternFlowGtpv1NPduNumberCounter)(nil),                            // 739: otg.PatternFlowGtpv1NPduNumberCounter
	(*PatternFlowGtpv1NPduNumber)(nil),                                   // 740: otg.PatternFlowGtpv1NPduNumber
	(*PatternFlowGtpv1NextExtensionHeaderTypeCounter)(nil),               // 741: otg.PatternFlowGtpv1NextExtensionHeaderTypeCounter
	(*PatternFlowGtpv1NextExtensionHeaderType)(nil),                      // 742: otg.PatternFlowGtpv1NextExtensionHeaderType
	(*PatternFlowGtpExtensionExtensionLengthCounter)(nil),                // 743: otg.PatternFlowGtpExtensionExtensionLengthCounter
	(*PatternFlowGtpExtensionExtensionLength)(nil),                       // 744: otg.PatternFlowGtpExtensionExtensionLength
	(*PatternFlowGtpExtensionContentsCounter)(nil),                       // 745: otg.PatternFlowGtpExtensionContentsCounter
	(*PatternFlowGtpExtensionContents)(nil),                              // 746: otg.PatternFlowGtpExtensionContents
	(*PatternFlowGtpExtensionNextExtensionHeaderCounter)(nil),            // 747: otg.PatternFlowGtpExtensionNextExtensionHeaderCounter
	(*PatternFlowGtpExtensionNextExtensionHeader)(nil),                   // 748: otg.PatternFlowGtpExtensionNextExtensionHeader
	(*PatternFlowGtpv2VersionCounter)(nil),                               // 749: otg.PatternFlowGtpv2VersionCounter
	(*PatternFlowGtpv2Version)(nil),                                      // 750: otg.PatternFlowGtpv2Version
	(*PatternFlowGtpv2PiggybackingFlagCounter)(nil),                      // 751: otg.PatternFlowGtpv2PiggybackingFlagCounter
	(*PatternFlowGtpv2PiggybackingFlag)(nil),                             // 752: otg.PatternFlowGtpv2PiggybackingFlag
	(*PatternFlowGtpv2TeidFlagCounter)(nil),                              // 753: otg.PatternFlowGtpv2TeidFlagCounter
	(*PatternFlowGtpv2TeidFlag)(nil),                                     // 754: otg.PatternFlowGtpv2TeidFlag
	(*PatternFlowGtpv2Spare1Counter)(nil),                                // 755: otg.PatternFlowGtpv2Spare1Counter
	(*PatternFlowGtpv2Spare1)(nil),                                       // 756: otg.PatternFlowGtpv2Spare1
	(*PatternFlowGtpv2MessageTypeCounter)(nil),                           // 757: otg.PatternFlowGtpv2MessageTypeCounter
	(*PatternFlowGtpv2MessageType)(nil),                                  // 758: otg.PatternFlowGtpv2MessageType
	(*PatternFlowGtpv2MessageLengthCounter)(nil),                         // 759: otg.PatternFlowGtpv2MessageLengthCounter
	(*PatternFlowGtpv2MessageLength)(nil),                                // 760: otg.PatternFlowGtpv2MessageLength
	(*PatternFlowGtpv2TeidCounter)(nil),                                  // 761: otg.PatternFlowGtpv2TeidCounter
	(*PatternFlowGtpv2Teid)(nil),                                         // 762: otg.PatternFlowGtpv2Teid
	(*PatternFlowGtpv2SequenceNumberCounter)(nil),                        // 763: otg.PatternFlowGtpv2SequenceNumberCounter
	(*PatternFlowGtpv2SequenceNumber)(nil),                               // 764: otg.PatternFlowGtpv2SequenceNumber
	(*PatternFlowGtpv2Spare2Counter)(nil),                                // 765: otg.PatternFlowGtpv2Spare2Counter
	(*PatternFlowGtpv2Spare2)(nil),                                       // 766: otg.PatternFlowGtpv2Spare2
	(*PatternFlowArpHardwareTypeCounter)(nil),                            // 767: otg.PatternFlowArpHardwareTypeCounter
	(*PatternFlowArpHardwareType)(nil),                                   // 768: otg.PatternFlowArpHardwareType
	(*PatternFlowArpProtocolTypeCounter)(nil),                            // 769: otg.PatternFlowArpProtocolTypeCounter
	(*PatternFlowArpProtocolType)(nil),                                   // 770: otg.PatternFlowArpProtocolType
	(*PatternFlowArpHardwareLengthCounter)(nil),                          // 771: otg.PatternFlowArpHardwareLengthCounter
	(*PatternFlowArpHardwareLength)(nil),                                 // 772: otg.PatternFlowArpHardwareLength
	(*PatternFlowArpProtocolLengthCounter)(nil),                          // 773: otg.PatternFlowArpProtocolLengthCounter
	(*PatternFlowArpProtocolLength)(nil),                                 // 774: otg.PatternFlowArpProtocolLength
	(*PatternFlowArpOperationCounter)(nil),                               // 775: otg.PatternFlowArpOperationCounter
	(*PatternFlowArpOperation)(nil),                                      // 776: otg.PatternFlowArpOperation
	(*PatternFlowArpSenderHardwareAddrCounter)(nil),                      // 777: otg.PatternFlowArpSenderHardwareAddrCounter
	(*PatternFlowArpSenderHardwareAddr)(nil),                             // 778: otg.PatternFlowArpSenderHardwareAddr
	(*PatternFlowArpSenderProtocolAddrCounter)(nil),                      // 779: otg.PatternFlowArpSenderProtocolAddrCounter
	(*PatternFlowArpSenderProtocolAddr)(nil),                             // 780: otg.PatternFlowArpSenderProtocolAddr
	(*PatternFlowArpTargetHardwareAddrCounter)(nil),                      // 781: otg.PatternFlowArpTargetHardwareAddrCounter
	(*PatternFlowArpTargetHardwareAddr)(nil),                             // 782: otg.PatternFlowArpTargetHardwareAddr
	(*PatternFlowArpTargetProtocolAddrCounter)(nil),                      // 783: otg.PatternFlowArpTargetProtocolAddrCounter
	(*PatternFlowArpTargetProtocolAddr)(nil),                             // 784: otg.PatternFlowArpTargetProtocolAddr
	(*PatternFlowIcmpEchoTypeCounter)(nil),                               // 785: otg.PatternFlowIcmpEchoTypeCounter
	(*PatternFlowIcmpEchoType)(nil),                                      // 786: otg.PatternFlowIcmpEchoType
	(*PatternFlowIcmpEchoCodeCounter)(nil),                               // 787: otg.PatternFlowIcmpEchoCodeCounter
	(*PatternFlowIcmpEchoCode)(nil),                                      // 788: otg.PatternFlowIcmpEchoCode
	(*PatternFlowIcmpEchoChecksum)(nil),                                  // 789: otg.PatternFlowIcmpEchoChecksum
	(*PatternFlowIcmpEchoIdentifierCounter)(nil),                         // 790: otg.PatternFlowIcmpEchoIdentifierCounter
	(*PatternFlowIcmpEchoIdentifier)(nil),                                // 791: otg.PatternFlowIcmpEchoIdentifier
	(*PatternFlowIcmpEchoSequenceNumberCounter)(nil),                     // 792: otg.PatternFlowIcmpEchoSequenceNumberCounter
	(*PatternFlowIcmpEchoSequenceNumber)(nil),                            // 793: otg.PatternFlowIcmpEchoSequenceNumber
	(*PatternFlowIcmpCommonChecksum)(nil),                                // 794: otg.PatternFlowIcmpCommonChecksum
	(*PatternFlowIcmpNextFieldsIdentifierCounter)(nil),                   // 795: otg.PatternFlowIcmpNextFieldsIdentifierCounter
	(*PatternFlowIcmpNextFieldsIdentifier)(nil),                          // 796: otg.PatternFlowIcmpNextFieldsIdentifier
	(*PatternFlowIcmpNextFieldsSequenceNumberCounter)(nil),               // 797: otg.PatternFlowIcmpNextFieldsSequenceNumberCounter
	(*PatternFlowIcmpNextFieldsSequenceNumber)(nil),                      // 798: otg.PatternFlowIcmpNextFieldsSequenceNumber
	(*PatternFlowIcmpv6EchoTypeCounter)(nil),                             // 799: otg.PatternFlowIcmpv6EchoTypeCounter
	(*PatternFlowIcmpv6EchoType)(nil),                                    // 800: otg.PatternFlowIcmpv6EchoType
	(*PatternFlowIcmpv6EchoCodeCounter)(nil),                             // 801: otg.PatternFlowIcmpv6EchoCodeCounter
	(*PatternFlowIcmpv6EchoCode)(nil),                                    // 802: otg.PatternFlowIcmpv6EchoCode
	(*PatternFlowIcmpv6EchoIdentifierCounter)(nil),                       // 803: otg.PatternFlowIcmpv6EchoIdentifierCounter
	(*PatternFlowIcmpv6EchoIdentifier)(nil),                              // 804: otg.PatternFlowIcmpv6EchoIdentifier
	(*PatternFlowIcmpv6EchoSequenceNumberCounter)(nil),                   // 805: otg.PatternFlowIcmpv6EchoSequenceNumberCounter
	(*PatternFlowIcmpv6EchoSequenceNumber)(nil),                          // 806: otg.PatternFlowIcmpv6EchoSequenceNumber
	(*PatternFlowIcmpv6EchoChecksum)(nil),                                // 807: otg.PatternFlowIcmpv6EchoChecksum
	(*PatternFlowIcmpv6CommonChecksum)(nil),                              // 808: otg.PatternFlowIcmpv6CommonChecksum
	(*PatternFlowPppAddressCounter)(nil),                                 // 809: otg.PatternFlowPppAddressCounter
	(*PatternFlowPppAddress)(nil),                                        // 810: otg.PatternFlowPppAddress
	(*PatternFlowPppControlCounter)(nil),                                 // 811: otg.PatternFlowPppControlCounter
	(*PatternFlowPppControl)(nil),                                        // 812: otg.PatternFlowPppControl
	(*PatternFlowPppProtocolTypeCounter)(nil),                            // 813: otg.PatternFlowPppProtocolTypeCounter
	(*PatternFlowPppProtocolType)(nil),                                   // 814: otg.PatternFlowPppProtocolType
	(*PatternFlowIgmpv1VersionCounter)(nil),                              // 815: otg.PatternFlowIgmpv1VersionCounter
	(*PatternFlowIgmpv1Version)(nil),                                     // 816: otg.PatternFlowIgmpv1Version
	(*PatternFlowIgmpv1TypeCounter)(nil),                                 // 817: otg.PatternFlowIgmpv1TypeCounter
	(*PatternFlowIgmpv1Type)(nil),                                        // 818: otg.PatternFlowIgmpv1Type
	(*PatternFlowIgmpv1UnusedCounter)(nil),                               // 819: otg.PatternFlowIgmpv1UnusedCounter
	(*PatternFlowIgmpv1Unused)(nil),                                      // 820: otg.PatternFlowIgmpv1Unused
	(*PatternFlowIgmpv1Checksum)(nil),                                    // 821: otg.PatternFlowIgmpv1Checksum
	(*PatternFlowIgmpv1GroupAddressCounter)(nil),                         // 822: otg.PatternFlowIgmpv1GroupAddressCounter
	(*PatternFlowIgmpv1GroupAddress)(nil),                                // 823: otg.PatternFlowIgmpv1GroupAddress
	(*PatternFlowMplsLabelCounter)(nil),                                  // 824: otg.PatternFlowMplsLabelCounter
	(*PatternFlowMplsLabel)(nil),                                         // 825: otg.PatternFlowMplsLabel
	(*PatternFlowMplsTrafficClassCounter)(nil),                           // 826: otg.PatternFlowMplsTrafficClassCounter
	(*PatternFlowMplsTrafficClass)(nil),                                  // 827: otg.PatternFlowMplsTrafficClass
	(*PatternFlowMplsBottomOfStackCounter)(nil),                          // 828: otg.PatternFlowMplsBottomOfStackCounter
	(*PatternFlowMplsBottomOfStack)(nil),                                 // 829: otg.PatternFlowMplsBottomOfStack
	(*PatternFlowMplsTimeToLiveCounter)(nil),                             // 830: otg.PatternFlowMplsTimeToLiveCounter
	(*PatternFlowMplsTimeToLive)(nil),                                    // 831: otg.PatternFlowMplsTimeToLive
	(*Version)(nil),                                                      // 832: otg.Version
	(*Success)(nil),                                                      // 833: otg.Success
	(*BadRequest)(nil),                                                   // 834: otg.BadRequest
	(*InternalServerError)(nil),                                          // 835: otg.InternalServerError
	(*SetConfigRequest)(nil),                                             // 836: otg.SetConfigRequest
	(*SetConfigResponse)(nil),                                            // 837: otg.SetConfigResponse
	(*GetConfigResponse)(nil),                                            // 838: otg.GetConfigResponse
	(*SetTransmitStateRequest)(nil),                                      // 839: otg.SetTransmitStateRequest
	(*SetTransmitStateResponse)(nil),                                     // 840: otg.SetTransmitStateResponse
	(*SetLinkStateRequest)(nil),                                          // 841: otg.SetLinkStateRequest
	(*SetLinkStateResponse)(nil),                                         // 842: otg.SetLinkStateResponse
	(*SetCaptureStateRequest)(nil),                                       // 843: otg.SetCaptureStateRequest
	(*SetCaptureStateResponse)(nil),                                      // 844: otg.SetCaptureStateResponse
	(*UpdateFlowsRequest)(nil),                                           // 845: otg.UpdateFlowsRequest
	(*UpdateFlowsResponse)(nil),                                          // 846: otg.UpdateFlowsResponse
	(*SetRouteStateRequest)(nil),                                         // 847: otg.SetRouteStateRequest
	(*SetRouteStateResponse)(nil),                                        // 848: otg.SetRouteStateResponse
	(*SendPingRequest)(nil),                                              // 849: otg.SendPingRequest
	(*SendPingResponse)(nil),                                             // 850: otg.SendPingResponse
	(*SetProtocolStateRequest)(nil),                                      // 851: otg.SetProtocolStateRequest
	(*SetProtocolStateResponse)(nil),                                     // 852: otg.SetProtocolStateResponse
	(*SetDeviceStateRequest)(nil),                                        // 853: otg.SetDeviceStateRequest
	(*SetDeviceStateResponse)(nil),                                       // 854: otg.SetDeviceStateResponse
	(*GetMetricsRequest)(nil),                                            // 855: otg.GetMetricsRequest
	(*GetMetricsResponse)(nil),                                           // 856: otg.GetMetricsResponse
	(*GetStatesRequest)(nil),                                             // 857: otg.GetStatesRequest
	(*GetStatesResponse)(nil),                                            // 858: otg.GetStatesResponse
	(*GetCaptureRequest)(nil),                                            // 859: otg.GetCaptureRequest
	(*GetCaptureResponse)(nil),                                           // 860: otg.GetCaptureResponse
	(*GetVersionResponse)(nil),                                           // 861: otg.GetVersionResponse
	(*LagProtocol_Choice)(nil),                                           // 862: otg.LagProtocol.Choice
	(*LagPortLacp_ActorActivity)(nil),                                    // 863: otg.LagPortLacp.ActorActivity
	(*EthernetConnection_Choice)(nil),                                    // 864: otg.EthernetConnection.Choice
	(*DeviceVlan_Tpid)(nil),                                              // 865: otg.DeviceVlan.Tpid
	(*DeviceIpv4GatewayMAC_Choice)(nil),                                  // 866: otg.DeviceIpv4GatewayMAC.Choice
	(*DeviceIpv6GatewayMAC_Choice)(nil),                                  // 867: otg.DeviceIpv6GatewayMAC.Choice
	(*Layer1_Speed)(nil),                                                 // 868: otg.Layer1.Speed
	(*Layer1_Media)(nil),                                                 // 869: otg.Layer1.Media
	(*Layer1FlowControl_Choice)(nil),                                     // 870: otg.Layer1FlowControl.Choice
	(*Capture_Format)(nil),                                               // 871: otg.Capture.Format
	(*CaptureFilter_Choice)(nil),                                         // 872: otg.CaptureFilter.Choice
	(*IsisInterface_NetworkType)(nil),                                    // 873: otg.IsisInterface.NetworkType
	(*IsisInterface_LevelType)(nil),                                      // 874: otg.IsisInterface.LevelType
	(*IsisInterfaceAuthentication_AuthType)(nil),                         // 875: otg.IsisInterfaceAuthentication.AuthType
	(*IsisAuthenticationBase_AuthType)(nil),                              // 876: otg.IsisAuthenticationBase.AuthType
	(*IsisV4RouteRange_OriginType)(nil),                                  // 877: otg.IsisV4RouteRange.OriginType
	(*IsisV4RouteRange_RedistributionType)(nil),                          // 878: otg.IsisV4RouteRange.RedistributionType
	(*IsisV6RouteRange_OriginType)(nil),                                  // 879: otg.IsisV6RouteRange.OriginType
	(*IsisV6RouteRange_RedistributionType)(nil),                          // 880: otg.IsisV6RouteRange.RedistributionType
	(*BgpV4Peer_AsType)(nil),                                             // 881: otg.BgpV4Peer.AsType
	(*BgpV4Peer_AsNumberWidth)(nil),                                      // 882: otg.BgpV4Peer.AsNumberWidth
	(*BgpV4EthernetSegment_ActiveMode)(nil),                              // 883: otg.BgpV4EthernetSegment.ActiveMode
	(*BgpRouteAdvanced_Origin)(nil),                                      // 884: otg.BgpRouteAdvanced.Origin
	(*BgpCommunity_Type)(nil),                                            // 885: otg.BgpCommunity.Type
	(*BgpExtCommunity_Type)(nil),                                         // 886: otg.BgpExtCommunity.Type
	(*BgpExtCommunity_Subtype)(nil),                                      // 887: otg.BgpExtCommunity.Subtype
	(*BgpAsPath_AsSetMode)(nil),                                          // 888: otg.BgpAsPath.AsSetMode
	(*BgpAsPathSegment_Type)(nil),                                        // 889: otg.BgpAsPathSegment.Type
	(*BgpV4EvpnEvis_Choice)(nil),                                         // 890: otg.BgpV4EvpnEvis.Choice
	(*BgpV4EviVxlan_ReplicationType)(nil),                                // 891: otg.BgpV4EviVxlan.ReplicationType
	(*BgpRouteDistinguisher_RdType)(nil),                                 // 892: otg.BgpRouteDistinguisher.RdType
	(*BgpRouteTarget_RtType)(nil),                                        // 893: otg.BgpRouteTarget.RtType
	(*BgpV4RouteRange_NextHopMode)(nil),                                  // 894: otg.BgpV4RouteRange.NextHopMode
	(*BgpV4RouteRange_NextHopAddressType)(nil),                           // 895: otg.BgpV4RouteRange.NextHopAddressType
	(*BgpV6RouteRange_NextHopMode)(nil),                                  // 896: otg.BgpV6RouteRange.NextHopMode
	(*BgpV6RouteRange_NextHopAddressType)(nil),                           // 897: otg.BgpV6RouteRange.NextHopAddressType
	(*BgpSrteV4Policy_NextHopMode)(nil),                                  // 898: otg.BgpSrteV4Policy.NextHopMode
	(*BgpSrteV4Policy_NextHopAddressType)(nil),                           // 899: otg.BgpSrteV4Policy.NextHopAddressType
	(*BgpSrteRemoteEndpointSubTlv_AddressFamily)(nil),                    // 900: otg.BgpSrteRemoteEndpointSubTlv.AddressFamily
	(*BgpSrteBindingSubTlv_BindingSidType)(nil),                          // 901: otg.BgpSrteBindingSubTlv.BindingSidType
	(*BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy)(nil), // 902: otg.BgpSrteExplicitNullLabelPolicySubTlv.ExplicitNullLabelPolicy
	(*BgpSrteSegment_SegmentType)(nil),                                   // 903: otg.BgpSrteSegment.SegmentType
	(*BgpSrteV6Policy_NextHopMode)(nil),                                  // 904: otg.BgpSrteV6Policy.NextHopMode
	(*BgpSrteV6Policy_NextHopAddressType)(nil),                           // 905: otg.BgpSrteV6Policy.NextHopAddressType
	(*BgpV6Peer_AsType)(nil),                                             // 906: otg.BgpV6Peer.AsType
	(*BgpV6Peer_AsNumberWidth)(nil),                                      // 907: otg.BgpV6Peer.AsNumberWidth
	(*BgpV6EthernetSegment_ActiveMode)(nil),                              // 908: otg.BgpV6EthernetSegment.ActiveMode
	(*BgpV6EvpnEvis_Choice)(nil),                                         // 909: otg.BgpV6EvpnEvis.Choice
	(*BgpV6EviVxlan_ReplicationType)(nil),                                // 910: otg.BgpV6EviVxlan.ReplicationType
	(*VxlanV4TunnelDestinationIPMode_Choice)(nil),                        // 911: otg.VxlanV4TunnelDestinationIPMode.Choice
	(*VxlanV6TunnelDestinationIPMode_Choice)(nil),                        // 912: otg.VxlanV6TunnelDestinationIPMode.Choice
	(*RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle)(nil),        // 913: otg.RsvpLspIpv4InterfaceP2PEgressIpv4Lsp.ReservationStyle
	(*RsvpEro_PrependNeighborIp)(nil),                                    // 914: otg.RsvpEro.PrependNeighborIp
	(*RsvpEroSubobject_Type)(nil),                                        // 915: otg.RsvpEroSubobject.Type
	(*RsvpEroSubobject_HopType)(nil),                                     // 916: otg.RsvpEroSubobject.HopType
	(*FlowTxRx_Choice)(nil),                                              // 917: otg.FlowTxRx.Choice
	(*FlowRouter_Mode)(nil),                                              // 918: otg.FlowRouter.Mode
	(*FlowHeader_Choice)(nil),                                            // 919: otg.FlowHeader.Choice
	(*FlowIpv4Priority_Choice)(nil),                                      // 920: otg.FlowIpv4Priority.Choice
	(*FlowIcmp_Choice)(nil),                                              // 921: otg.FlowIcmp.Choice
	(*FlowIcmpv6_Choice)(nil),                                            // 922: otg.FlowIcmpv6.Choice
	(*FlowSize_Choice)(nil),                                              // 923: otg.FlowSize.Choice
	(*FlowRate_Choice)(nil),                                              // 924: otg.FlowRate.Choice
	(*FlowDuration_Choice)(nil),                                          // 925: otg.FlowDuration.Choice
	(*FlowDelay_Choice)(nil),                                             // 926: otg.FlowDelay.Choice
	(*FlowDurationInterBurstGap_Choice)(nil),                             // 927: otg.FlowDurationInterBurstGap.Choice
	(*FlowLatencyMetrics_Mode)(nil),                                      // 928: otg.FlowLatencyMetrics.Mode
	(*EventRequest_Type)(nil),                                            // 929: otg.EventRequest.Type
	(*LldpConnection_Choice)(nil),                                        // 930: otg.LldpConnection.Choice
	(*LldpChassisId_Choice)(nil),                                         // 931: otg.LldpChassisId.Choice
	(*LldpPortId_Choice)(nil),                                            // 932: otg.LldpPortId.Choice
	(*LldpChassisMacSubType_Choice)(nil),                                 // 933: otg.LldpChassisMacSubType.Choice
	(*LldpPortInterfaceNameSubType_Choice)(nil),                          // 934: otg.LldpPortInterfaceNameSubType.Choice
	(*LldpSystemName_Choice)(nil),                                        // 935: otg.LldpSystemName.Choice
	(*LinkState_State)(nil),                                              // 936: otg.LinkState.State
	(*TransmitState_State)(nil),                                          // 937: otg.TransmitState.State
	(*CaptureState_State)(nil),                                           // 938: otg.CaptureState.State
	(*FlowsUpdate_PropertyNames)(nil),                                    // 939: otg.FlowsUpdate.PropertyNames
	(*RouteState_State)(nil),                                             // 940: otg.RouteState.State
	(*ProtocolState_State)(nil),                                          // 941: otg.ProtocolState.State
	(*DeviceState_Choice)(nil),                                           // 942: otg.DeviceState.Choice
	(*Ping_Choice)(nil),                                                  // 943: otg.Ping.Choice
	(*Response_Result)(nil),                                              // 944: otg.Response.Result
	(*LacpMemberState_State)(nil),                                        // 945: otg.LacpMemberState.State
	(*MetricsRequest_Choice)(nil),                                        // 946: otg.MetricsRequest.Choice
	(*MetricsResponse_Choice)(nil),                                       // 947: otg.MetricsResponse.Choice
	(*PortMetricsRequest_ColumnNames)(nil),                               // 948: otg.PortMetricsRequest.ColumnNames
	(*PortMetric_Link)(nil),                                              // 949: otg.PortMetric.Link
	(*PortMetric_Capture)(nil),                                           // 950: otg.PortMetric.Capture
	(*PortMetric_Transmit)(nil),                                          // 951: otg.PortMetric.Transmit
	(*FlowMetricsRequest_MetricNames)(nil),                               // 952: otg.FlowMetricsRequest.MetricNames
	(*FlowMetricGroupRequest_Choice)(nil),                                // 953: otg.FlowMetricGroupRequest.Choice
	(*FlowMetric_Transmit)(nil),                                          // 954: otg.FlowMetric.Transmit
	(*Bgpv4MetricsRequest_ColumnNames)(nil),                              // 955: otg.Bgpv4MetricsRequest.ColumnNames
	(*Bgpv4Metric_SessionState)(nil),                                     // 956: otg.Bgpv4Metric.SessionState
	(*Bgpv4Metric_FsmState)(nil),                                         // 957: otg.Bgpv4Metric.FsmState
	(*Bgpv6MetricsRequest_ColumnNames)(nil),                              // 958: otg.Bgpv6MetricsRequest.ColumnNames
	(*Bgpv6Metric_SessionState)(nil),                                     // 959: otg.Bgpv6Metric.SessionState
	(*Bgpv6Metric_FsmState)(nil),                                         // 960: otg.Bgpv6Metric.FsmState
	(*IsisMetricsRequest_ColumnNames)(nil),                               // 961: otg.IsisMetricsRequest.ColumnNames
	(*LagMetricsRequest_ColumnNames)(nil),                                // 962: otg.LagMetricsRequest.ColumnNames
	(*LagMetric_OperStatus)(nil),                                         // 963: otg.LagMetric.OperStatus
	(*LacpMetricsRequest_ColumnNames)(nil),                               // 964: otg.LacpMetricsRequest.ColumnNames
	(*LacpMetric_Activity)(nil),                                          // 965: otg.LacpMetric.Activity
	(*LacpMetric_Timeout)(nil),                                           // 966: otg.LacpMetric.Timeout
	(*LacpMetric_Synchronization)(nil),                                   // 967: otg.LacpMetric.Synchronization
	(*LldpMetricsRequest_ColumnNames)(nil),                               // 968: otg.LldpMetricsRequest.ColumnNames
	(*RsvpMetricsRequest_ColumnNames)(nil),                               // 969: otg.RsvpMetricsRequest.ColumnNames
	(*StatesRequest_Choice)(nil),                                         // 970: otg.StatesRequest.Choice
	(*StatesResponse_Choice)(nil),                                        // 971: otg.StatesResponse.Choice
	(*BgpPrefixStateRequest_PrefixFilters)(nil),                          // 972: otg.BgpPrefixStateRequest.PrefixFilters
	(*BgpPrefixIpv4UnicastFilter_Origin)(nil),                            // 973: otg.BgpPrefixIpv4UnicastFilter.Origin
	(*BgpPrefixIpv6UnicastFilter_Origin)(nil),                            // 974: otg.BgpPrefixIpv6UnicastFilter.Origin
	(*BgpPrefixIpv4UnicastState_Origin)(nil),                             // 975: otg.BgpPrefixIpv4UnicastState.Origin
	(*BgpPrefixIpv6UnicastState_Origin)(nil),                             // 976: otg.BgpPrefixIpv6UnicastState.Origin
	(*ResultBgpCommunity_Type)(nil),                                      // 977: otg.ResultBgpCommunity.Type
	(*ResultBgpAsPathSegment_Type)(nil),                                  // 978: otg.ResultBgpAsPathSegment.Type
	(*IsisLspState_PduType)(nil),                                         // 979: otg.IsisLspState.PduType
	(*IsisLspV4Prefix_RedistributionType)(nil),                           // 980: otg.IsisLspV4Prefix.RedistributionType
	(*IsisLspV4Prefix_OriginType)(nil),                                   // 981: otg.IsisLspV4Prefix.OriginType
	(*IsisLspExtendedV4Prefix_RedistributionType)(nil),                   // 982: otg.IsisLspExtendedV4Prefix.RedistributionType
	(*IsisLspV6Prefix_RedistributionType)(nil),                           // 983: otg.IsisLspV6Prefix.RedistributionType
	(*IsisLspV6Prefix_OriginType)(nil),                                   // 984: otg.IsisLspV6Prefix.OriginType
	(*LldpNeighborsState_ChassisIdType)(nil),                             // 985: otg.LldpNeighborsState.ChassisIdType
	(*LldpNeighborsState_PortIdType)(nil),                                // 986: otg.LldpNeighborsState.PortIdType
	(*LldpCapabilityState_CapabilityName)(nil),                           // 987: otg.LldpCapabilityState.CapabilityName
	(*RsvpLspState_SessionStatus)(nil),                                   // 988: otg.RsvpLspState.SessionStatus
	(*RsvpLspState_LastFlapReason)(nil),                                  // 989: otg.RsvpLspState.LastFlapReason
	(*RsvpLspIpv4Ero_Type)(nil),                                          // 990: otg.RsvpLspIpv4Ero.Type
	(*PatternFlowEthernetDst_Choice)(nil),                                // 991: otg.PatternFlowEthernetDst.Choice
	(*PatternFlowEthernetSrc_Choice)(nil),                                // 992: otg.PatternFlowEthernetSrc.Choice
	(*PatternFlowEthernetEtherType_Choice)(nil),                          // 993: otg.PatternFlowEthernetEtherType.Choice
	(*PatternFlowEthernetPfcQueue_Choice)(nil),                           // 994: otg.PatternFlowEthernetPfcQueue.Choice
	(*PatternFlowVlanPriority_Choice)(nil),                               // 995: otg.PatternFlowVlanPriority.Choice
	(*PatternFlowVlanCfi_Choice)(nil),                                    // 996: otg.PatternFlowVlanCfi.Choice
	(*PatternFlowVlanId_Choice)(nil),                                     // 997: otg.PatternFlowVlanId.Choice
	(*PatternFlowVlanTpid_Choice)(nil),                                   // 998: otg.PatternFlowVlanTpid.Choice
	(*PatternFlowVxlanFlags_Choice)(nil),                                 // 999: otg.PatternFlowVxlanFlags.Choice
	(*PatternFlowVxlanReserved0_Choice)(nil),                             // 1000: otg.PatternFlowVxlanReserved0.Choice
	(*PatternFlowVxlanVni_Choice)(nil),                                   // 1001: otg.PatternFlowVxlanVni.Choice
	(*PatternFlowVxlanReserved1_Choice)(nil),                             // 1002: otg.PatternFlowVxlanReserved1.Choice
	(*PatternFlowIpv4Version_Choice)(nil),                                // 1003: otg.PatternFlowIpv4Version.Choice
	(*PatternFlowIpv4HeaderLength_Choice)(nil),                           // 1004: otg.PatternFlowIpv4HeaderLength.Choice
	(*PatternFlowIpv4TotalLength_Choice)(nil),                            // 1005: otg.PatternFlowIpv4TotalLength.Choice
	(*PatternFlowIpv4Identification_Choice)(nil),                         // 1006: otg.PatternFlowIpv4Identification.Choice
	(*PatternFlowIpv4Reserved_Choice)(nil),                               // 1007: otg.PatternFlowIpv4Reserved.Choice
	(*PatternFlowIpv4DontFragment_Choice)(nil),                           // 1008: otg.PatternFlowIpv4DontFragment.Choice
	(*PatternFlowIpv4MoreFragments_Choice)(nil),                          // 1009: otg.PatternFlowIpv4MoreFragments.Choice
	(*PatternFlowIpv4FragmentOffset_Choice)(nil),                         // 1010: otg.PatternFlowIpv4FragmentOffset.Choice
	(*PatternFlowIpv4TimeToLive_Choice)(nil),                             // 1011: otg.PatternFlowIpv4TimeToLive.Choice
	(*PatternFlowIpv4Protocol_Choice)(nil),                               // 1012: otg.PatternFlowIpv4Protocol.Choice
	(*PatternFlowIpv4HeaderChecksum_Choice)(nil),                         // 1013: otg.PatternFlowIpv4HeaderChecksum.Choice
	(*PatternFlowIpv4HeaderChecksum_Generated)(nil),                      // 1014: otg.PatternFlowIpv4HeaderChecksum.Generated
	(*PatternFlowIpv4Src_Choice)(nil),                                    // 1015: otg.PatternFlowIpv4Src.Choice
	(*PatternFlowIpv4Dst_Choice)(nil),                                    // 1016: otg.PatternFlowIpv4Dst.Choice
	(*PatternFlowIpv4PriorityRaw_Choice)(nil),                            // 1017: otg.PatternFlowIpv4PriorityRaw.Choice
	(*PatternFlowIpv4DscpPhb_Choice)(nil),                                // 1018: otg.PatternFlowIpv4DscpPhb.Choice
	(*PatternFlowIpv4DscpEcn_Choice)(nil),                                // 1019: otg.PatternFlowIpv4DscpEcn.Choice
	(*PatternFlowIpv4TosPrecedence_Choice)(nil),                          // 1020: otg.PatternFlowIpv4TosPrecedence.Choice
	(*PatternFlowIpv4TosDelay_Choice)(nil),                               // 1021: otg.PatternFlowIpv4TosDelay.Choice
	(*PatternFlowIpv4TosThroughput_Choice)(nil),                          // 1022: otg.PatternFlowIpv4TosThroughput.Choice
	(*PatternFlowIpv4TosReliability_Choice)(nil),                         // 1023: otg.PatternFlowIpv4TosReliability.Choice
	(*PatternFlowIpv4TosMonetary_Choice)(nil),                            // 1024: otg.PatternFlowIpv4TosMonetary.Choice
	(*PatternFlowIpv4TosUnused_Choice)(nil),                              // 1025: otg.PatternFlowIpv4TosUnused.Choice
	(*PatternFlowIpv6Version_Choice)(nil),                                // 1026: otg.PatternFlowIpv6Version.Choice
	(*PatternFlowIpv6TrafficClass_Choice)(nil),                           // 1027: otg.PatternFlowIpv6TrafficClass.Choice
	(*PatternFlowIpv6FlowLabel_Choice)(nil),                              // 1028: otg.PatternFlowIpv6FlowLabel.Choice
	(*PatternFlowIpv6PayloadLength_Choice)(nil),                          // 1029: otg.PatternFlowIpv6PayloadLength.Choice
	(*PatternFlowIpv6NextHeader_Choice)(nil),                             // 1030: otg.PatternFlowIpv6NextHeader.Choice
	(*PatternFlowIpv6HopLimit_Choice)(nil),                               // 1031: otg.PatternFlowIpv6HopLimit.Choice
	(*PatternFlowIpv6Src_Choice)(nil),                                    // 1032: otg.PatternFlowIpv6Src.Choice
	(*PatternFlowIpv6Dst_Choice)(nil),                                    // 1033: otg.PatternFlowIpv6Dst.Choice
	(*PatternFlowPfcPauseDst_Choice)(nil),                                // 1034: otg.PatternFlowPfcPauseDst.Choice
	(*PatternFlowPfcPauseSrc_Choice)(nil),                                // 1035: otg.PatternFlowPfcPauseSrc.Choice
	(*PatternFlowPfcPauseEtherType_Choice)(nil),                          // 1036: otg.PatternFlowPfcPauseEtherType.Choice
	(*PatternFlowPfcPauseControlOpCode_Choice)(nil),                      // 1037: otg.PatternFlowPfcPauseControlOpCode.Choice
	(*PatternFlowPfcPauseClassEnableVector_Choice)(nil),                  // 1038: otg.PatternFlowPfcPauseClassEnableVector.Choice
	(*PatternFlowPfcPausePauseClass0_Choice)(nil),                        // 1039: otg.PatternFlowPfcPausePauseClass0.Choice
	(*PatternFlowPfcPausePauseClass1_Choice)(nil),                        // 1040: otg.PatternFlowPfcPausePauseClass1.Choice
	(*PatternFlowPfcPausePauseClass2_Choice)(nil),                        // 1041: otg.PatternFlowPfcPausePauseClass2.Choice
	(*PatternFlowPfcPausePauseClass3_Choice)(nil),                        // 1042: otg.PatternFlowPfcPausePauseClass3.Choice
	(*PatternFlowPfcPausePauseClass4_Choice)(nil),                        // 1043: otg.PatternFlowPfcPausePauseClass4.Choice
	(*PatternFlowPfcPausePauseClass5_Choice)(nil),                        // 1044: otg.PatternFlowPfcPausePauseClass5.Choice
	(*PatternFlowPfcPausePauseClass6_Choice)(nil),                        // 1045: otg.PatternFlowPfcPausePauseClass6.Choice
	(*PatternFlowPfcPausePauseClass7_Choice)(nil),                        // 1046: otg.PatternFlowPfcPausePauseClass7.Choice
	(*PatternFlowEthernetPauseDst_Choice)(nil),                           // 1047: otg.PatternFlowEthernetPauseDst.Choice
	(*PatternFlowEthernetPauseSrc_Choice)(nil),                           // 1048: otg.PatternFlowEthernetPauseSrc.Choice
	(*PatternFlowEthernetPauseEtherType_Choice)(nil),                     // 1049: otg.PatternFlowEthernetPauseEtherType.Choice
	(*PatternFlowEthernetPauseControlOpCode_Choice)(nil),                 // 1050: otg.PatternFlowEthernetPauseControlOpCode.Choice
	(*PatternFlowEthernetPauseTime_Choice)(nil),                          // 1051: otg.PatternFlowEthernetPauseTime.Choice
	(*PatternFlowTcpSrcPort_Choice)(nil),                                 // 1052: otg.PatternFlowTcpSrcPort.Choice
	(*PatternFlowTcpDstPort_Choice)(nil),                                 // 1053: otg.PatternFlowTcpDstPort.Choice
	(*PatternFlowTcpSeqNum_Choice)(nil),                                  // 1054: otg.PatternFlowTcpSeqNum.Choice
	(*PatternFlowTcpAckNum_Choice)(nil),                                  // 1055: otg.PatternFlowTcpAckNum.Choice
	(*PatternFlowTcpDataOffset_Choice)(nil),                              // 1056: otg.PatternFlowTcpDataOffset.Choice
	(*PatternFlowTcpEcnNs_Choice)(nil),                                   // 1057: otg.PatternFlowTcpEcnNs.Choice
	(*PatternFlowTcpEcnCwr_Choice)(nil),                                  // 1058: otg.PatternFlowTcpEcnCwr.Choice
	(*PatternFlowTcpEcnEcho_Choice)(nil),                                 // 1059: otg.PatternFlowTcpEcnEcho.Choice
	(*PatternFlowTcpCtlUrg_Choice)(nil),                                  // 1060: otg.PatternFlowTcpCtlUrg.Choice
	(*PatternFlowTcpCtlAck_Choice)(nil),                                  // 1061: otg.PatternFlowTcpCtlAck.Choice
	(*PatternFlowTcpCtlPsh_Choice)(nil),                                  // 1062: otg.PatternFlowTcpCtlPsh.Choice
	(*PatternFlowTcpCtlRst_Choice)(nil),                                  // 1063: otg.PatternFlowTcpCtlRst.Choice
	(*PatternFlowTcpCtlSyn_Choice)(nil),                                  // 1064: otg.PatternFlowTcpCtlSyn.Choice
	(*PatternFlowTcpCtlFin_Choice)(nil),                                  // 1065: otg.PatternFlowTcpCtlFin.Choice
	(*PatternFlowTcpWindow_Choice)(nil),                                  // 1066: otg.PatternFlowTcpWindow.Choice
	(*PatternFlowUdpSrcPort_Choice)(nil),                                 // 1067: otg.PatternFlowUdpSrcPort.Choice
	(*PatternFlowUdpDstPort_Choice)(nil),                                 // 1068: otg.PatternFlowUdpDstPort.Choice
	(*PatternFlowUdpLength_Choice)(nil),                                  // 1069: otg.PatternFlowUdpLength.Choice
	(*PatternFlowUdpChecksum_Choice)(nil),                                // 1070: otg.PatternFlowUdpChecksum.Choice
	(*PatternFlowUdpChecksum_Generated)(nil),                             // 1071: otg.PatternFlowUdpChecksum.Generated
	(*PatternFlowGreChecksumPresent_Choice)(nil),                         // 1072: otg.PatternFlowGreChecksumPresent.Choice
	(*PatternFlowGreReserved0_Choice)(nil),                               // 1073: otg.PatternFlowGreReserved0.Choice
	(*PatternFlowGreVersion_Choice)(nil),                                 // 1074: otg.PatternFlowGreVersion.Choice
	(*PatternFlowGreProtocol_Choice)(nil),                                // 1075: otg.PatternFlowGreProtocol.Choice
	(*PatternFlowGreChecksum_Choice)(nil),                                // 1076: otg.PatternFlowGreChecksum.Choice
	(*PatternFlowGreChecksum_Generated)(nil),                             // 1077: otg.PatternFlowGreChecksum.Generated
	(*PatternFlowGreReserved1_Choice)(nil),                               // 1078: otg.PatternFlowGreReserved1.Choice
	(*PatternFlowGtpv1Version_Choice)(nil),                               // 1079: otg.PatternFlowGtpv1Version.Choice
	(*PatternFlowGtpv1ProtocolType_Choice)(nil),                          // 1080: otg.PatternFlowGtpv1ProtocolType.Choice
	(*PatternFlowGtpv1Reserved_Choice)(nil),                              // 1081: otg.PatternFlowGtpv1Reserved.Choice
	(*PatternFlowGtpv1EFlag_Choice)(nil),                                 // 1082: otg.PatternFlowGtpv1EFlag.Choice
	(*PatternFlowGtpv1SFlag_Choice)(nil),                                 // 1083: otg.PatternFlowGtpv1SFlag.Choice
	(*PatternFlowGtpv1PnFlag_Choice)(nil),                                // 1084: otg.PatternFlowGtpv1PnFlag.Choice
	(*PatternFlowGtpv1MessageType_Choice)(nil),                           // 1085: otg.PatternFlowGtpv1MessageType.Choice
	(*PatternFlowGtpv1MessageLength_Choice)(nil),                         // 1086: otg.PatternFlowGtpv1MessageLength.Choice
	(*PatternFlowGtpv1Teid_Choice)(nil),                                  // 1087: otg.PatternFlowGtpv1Teid.Choice
	(*PatternFlowGtpv1SquenceNumber_Choice)(nil),                         // 1088: otg.PatternFlowGtpv1SquenceNumber.Choice
	(*PatternFlowGtpv1NPduNumber_Choice)(nil),                            // 1089: otg.PatternFlowGtpv1NPduNumber.Choice
	(*PatternFlowGtpv1NextExtensionHeaderType_Choice)(nil),               // 1090: otg.PatternFlowGtpv1NextExtensionHeaderType.Choice
	(*PatternFlowGtpExtensionExtensionLength_Choice)(nil),                // 1091: otg.PatternFlowGtpExtensionExtensionLength.Choice
	(*PatternFlowGtpExtensionContents_Choice)(nil),                       // 1092: otg.PatternFlowGtpExtensionContents.Choice
	(*PatternFlowGtpExtensionNextExtensionHeader_Choice)(nil),            // 1093: otg.PatternFlowGtpExtensionNextExtensionHeader.Choice
	(*PatternFlowGtpv2Version_Choice)(nil),                               // 1094: otg.PatternFlowGtpv2Version.Choice
	(*PatternFlowGtpv2PiggybackingFlag_Choice)(nil),                      // 1095: otg.PatternFlowGtpv2PiggybackingFlag.Choice
	(*PatternFlowGtpv2TeidFlag_Choice)(nil),                              // 1096: otg.PatternFlowGtpv2TeidFlag.Choice
	(*PatternFlowGtpv2Spare1_Choice)(nil),                                // 1097: otg.PatternFlowGtpv2Spare1.Choice
	(*PatternFlowGtpv2MessageType_Choice)(nil),                           // 1098: otg.PatternFlowGtpv2MessageType.Choice
	(*PatternFlowGtpv2MessageLength_Choice)(nil),                         // 1099: otg.PatternFlowGtpv2MessageLength.Choice
	(*PatternFlowGtpv2Teid_Choice)(nil),                                  // 1100: otg.PatternFlowGtpv2Teid.Choice
	(*PatternFlowGtpv2SequenceNumber_Choice)(nil),                        // 1101: otg.PatternFlowGtpv2SequenceNumber.Choice
	(*PatternFlowGtpv2Spare2_Choice)(nil),                                // 1102: otg.PatternFlowGtpv2Spare2.Choice
	(*PatternFlowArpHardwareType_Choice)(nil),                            // 1103: otg.PatternFlowArpHardwareType.Choice
	(*PatternFlowArpProtocolType_Choice)(nil),                            // 1104: otg.PatternFlowArpProtocolType.Choice
	(*PatternFlowArpHardwareLength_Choice)(nil),                          // 1105: otg.PatternFlowArpHardwareLength.Choice
	(*PatternFlowArpProtocolLength_Choice)(nil),                          // 1106: otg.PatternFlowArpProtocolLength.Choice
	(*PatternFlowArpOperation_Choice)(nil),                               // 1107: otg.PatternFlowArpOperation.Choice
	(*PatternFlowArpSenderHardwareAddr_Choice)(nil),                      // 1108: otg.PatternFlowArpSenderHardwareAddr.Choice
	(*PatternFlowArpSenderProtocolAddr_Choice)(nil),                      // 1109: otg.PatternFlowArpSenderProtocolAddr.Choice
	(*PatternFlowArpTargetHardwareAddr_Choice)(nil),                      // 1110: otg.PatternFlowArpTargetHardwareAddr.Choice
	(*PatternFlowArpTargetProtocolAddr_Choice)(nil),                      // 1111: otg.PatternFlowArpTargetProtocolAddr.Choice
	(*PatternFlowIcmpEchoType_Choice)(nil),                               // 1112: otg.PatternFlowIcmpEchoType.Choice
	(*PatternFlowIcmpEchoCode_Choice)(nil),                               // 1113: otg.PatternFlowIcmpEchoCode.Choice
	(*PatternFlowIcmpEchoChecksum_Choice)(nil),                           // 1114: otg.PatternFlowIcmpEchoChecksum.Choice
	(*PatternFlowIcmpEchoChecksum_Generated)(nil),                        // 1115: otg.PatternFlowIcmpEchoChecksum.Generated
	(*PatternFlowIcmpEchoIdentifier_Choice)(nil),                         // 1116: otg.PatternFlowIcmpEchoIdentifier.Choice
	(*PatternFlowIcmpEchoSequenceNumber_Choice)(nil),                     // 1117: otg.PatternFlowIcmpEchoSequenceNumber.Choice
	(*PatternFlowIcmpCommonChecksum_Choice)(nil),                         // 1118: otg.PatternFlowIcmpCommonChecksum.Choice
	(*PatternFlowIcmpCommonChecksum_Generated)(nil),                      // 1119: otg.PatternFlowIcmpCommonChecksum.Generated
	(*PatternFlowIcmpNextFieldsIdentifier_Choice)(nil),                   // 1120: otg.PatternFlowIcmpNextFieldsIdentifier.Choice
	(*PatternFlowIcmpNextFieldsSequenceNumber_Choice)(nil),               // 1121: otg.PatternFlowIcmpNextFieldsSequenceNumber.Choice
	(*PatternFlowIcmpv6EchoType_Choice)(nil),                             // 1122: otg.PatternFlowIcmpv6EchoType.Choice
	(*PatternFlowIcmpv6EchoCode_Choice)(nil),                             // 1123: otg.PatternFlowIcmpv6EchoCode.Choice
	(*PatternFlowIcmpv6EchoIdentifier_Choice)(nil),                       // 1124: otg.PatternFlowIcmpv6EchoIdentifier.Choice
	(*PatternFlowIcmpv6EchoSequenceNumber_Choice)(nil),                   // 1125: otg.PatternFlowIcmpv6EchoSequenceNumber.Choice
	(*PatternFlowIcmpv6EchoChecksum_Choice)(nil),                         // 1126: otg.PatternFlowIcmpv6EchoChecksum.Choice
	(*PatternFlowIcmpv6EchoChecksum_Generated)(nil),                      // 1127: otg.PatternFlowIcmpv6EchoChecksum.Generated
	(*PatternFlowIcmpv6CommonChecksum_Choice)(nil),                       // 1128: otg.PatternFlowIcmpv6CommonChecksum.Choice
	(*PatternFlowIcmpv6CommonChecksum_Generated)(nil),                    // 1129: otg.PatternFlowIcmpv6CommonChecksum.Generated
	(*PatternFlowPppAddress_Choice)(nil),                                 // 1130: otg.PatternFlowPppAddress.Choice
	(*PatternFlowPppControl_Choice)(nil),                                 // 1131: otg.PatternFlowPppControl.Choice
	(*PatternFlowPppProtocolType_Choice)(nil),                            // 1132: otg.PatternFlowPppProtocolType.Choice
	(*PatternFlowIgmpv1Version_Choice)(nil),                              // 1133: otg.PatternFlowIgmpv1Version.Choice
	(*PatternFlowIgmpv1Type_Choice)(nil),                                 // 1134: otg.PatternFlowIgmpv1Type.Choice
	(*PatternFlowIgmpv1Unused_Choice)(nil),                               // 1135: otg.PatternFlowIgmpv1Unused.Choice
	(*PatternFlowIgmpv1Checksum_Choice)(nil),                             // 1136: otg.PatternFlowIgmpv1Checksum.Choice
	(*PatternFlowIgmpv1Checksum_Generated)(nil),                          // 1137: otg.PatternFlowIgmpv1Checksum.Generated
	(*PatternFlowIgmpv1GroupAddress_Choice)(nil),                         // 1138: otg.PatternFlowIgmpv1GroupAddress.Choice
	(*PatternFlowMplsLabel_Choice)(nil),                                  // 1139: otg.PatternFlowMplsLabel.Choice
	(*PatternFlowMplsTrafficClass_Choice)(nil),                           // 1140: otg.PatternFlowMplsTrafficClass.Choice
	(*PatternFlowMplsBottomOfStack_Choice)(nil),                          // 1141: otg.PatternFlowMplsBottomOfStack.Choice
	(*PatternFlowMplsTimeToLive_Choice)(nil),                             // 1142: otg.PatternFlowMplsTimeToLive.Choice
	(*emptypb.Empty)(nil),                                                // 1143: google.protobuf.Empty
}
var file_otg_proto_depIdxs = []int32{
	283,  // 0: otg.Config.ports:type_name -> otg.Port
	285,  // 1: otg.Config.lags:type_name -> otg.Lag
	301,  // 2: otg.Config.layer1:type_name -> otg.Layer1
	306,  // 3: otg.Config.captures:type_name -> otg.Capture
	314,  // 4: otg.Config.devices:type_name -> otg.Device
	413,  // 5: otg.Config.flows:type_name -> otg.Flow
	456,  // 6: otg.Config.events:type_name -> otg.Event
	282,  // 7: otg.Config.options:type_name -> otg.ConfigOptions
	462,  // 8: otg.Config.lldp:type_name -> otg.Lldp
	284,  // 9: otg.ConfigOptions.port_options:type_name -> otg.PortOptions
	315,  // 10: otg.ConfigOptions.protocol_options:type_name -> otg.ProtocolOptions
	286,  // 11: otg.Lag.ports:type_name -> otg.LagPort
	287,  // 12: otg.Lag.protocol:type_name -> otg.LagProtocol
	290,  // 13: otg.LagPort.lacp:type_name -> otg.LagPortLacp
	291,  // 14: otg.LagPort.ethernet:type_name -> otg.DeviceEthernetBase
	0,    // 15: otg.LagProtocol.choice:type_name -> otg.LagProtocol.Choice.Enum
	289,  // 16: otg.LagProtocol.lacp:type_name -> otg.LagProtocolLacp
	288,  // 17: otg.LagProtocol.static:type_name -> otg.LagProtocolStatic
	1,    // 18: otg.LagPortLacp.actor_activity:type_name -> otg.LagPortLacp.ActorActivity.Enum
	294,  // 19: otg.DeviceEthernetBase.vlans:type_name -> otg.DeviceVlan
	293,  // 20: otg.DeviceEthernet.connection:type_name -> otg.EthernetConnection
	295,  // 21: otg.DeviceEthernet.ipv4_addresses:type_name -> otg.DeviceIpv4
	298,  // 22: otg.DeviceEthernet.ipv6_addresses:type_name -> otg.DeviceIpv6
	294,  // 23: otg.DeviceEthernet.vlans:type_name -> otg.DeviceVlan
	2,    // 24: otg.EthernetConnection.choice:type_name -> otg.EthernetConnection.Choice.Enum
	3,    // 25: otg.DeviceVlan.tpid:type_name -> otg.DeviceVlan.Tpid.Enum
	297,  // 26: otg.DeviceIpv4.gateway_mac:type_name -> otg.DeviceIpv4GatewayMAC
	4,    // 27: otg.DeviceIpv4GatewayMAC.choice:type_name -> otg.DeviceIpv4GatewayMAC.Choice.Enum
	300,  // 28: otg.DeviceIpv6.gateway_mac:type_name -> otg.DeviceIpv6GatewayMAC
	5,    // 29: otg.DeviceIpv6GatewayMAC.choice:type_name -> otg.DeviceIpv6GatewayMAC.Choice.Enum
	6,    // 30: otg.Layer1.speed:type_name -> otg.Layer1.Speed.Enum
	7,    // 31: otg.Layer1.media:type_name -> otg.Layer1.Media.Enum
	302,  // 32: otg.Layer1.auto_negotiation:type_name -> otg.Layer1AutoNegotiation
	303,  // 33: otg.Layer1.flow_control:type_name -> otg.Layer1FlowControl
	8,    // 34: otg.Layer1FlowControl.choice:type_name -> otg.Layer1FlowControl.Choice.Enum
	305,  // 35: otg.Layer1FlowControl.ieee_802_1qbb:type_name -> otg.Layer1Ieee8021qbb
	304,  // 36: otg.Layer1FlowControl.ieee_802_3x:type_name -> otg.Layer1Ieee8023x
	307,  // 37: otg.Capture.filters:type_name -> otg.CaptureFilter
	9,    // 38: otg.Capture.format:type_name -> otg.Capture.Format.Enum
	10,   // 39: otg.CaptureFilter.choice:type_name -> otg.CaptureFilter.Choice.Enum
	308,  // 40: otg.CaptureFilter.custom:type_name -> otg.CaptureCustom
	310,  // 41: otg.CaptureFilter.ethernet:type_name -> otg.CaptureEthernet
	311,  // 42: otg.CaptureFilter.vlan:type_name -> otg.CaptureVlan
	312,  // 43: otg.CaptureFilter.ipv4:type_name -> otg.CaptureIpv4
	313,  // 44: otg.CaptureFilter.ipv6:type_name -> otg.CaptureIpv6
	309,  // 45: otg.CaptureEthernet.src:type_name -> otg.CaptureField
	309,  // 46: otg.CaptureEthernet.dst:type_name -> otg.CaptureField
	309,  // 47: otg.CaptureEthernet.ether_type:type_name -> otg.CaptureField
	309,  // 48: otg.CaptureEthernet.pfc_queue:type_name -> otg.CaptureField
	309,  // 49: otg.CaptureVlan.priority:type_name -> otg.CaptureField
	309,  // 50: otg.CaptureVlan.cfi:type_name -> otg.CaptureField
	309,  // 51: otg.CaptureVlan.id:type_name -> otg.CaptureField
	309,  // 52: otg.CaptureVlan.protocol:type_name -> otg.CaptureField
	309,  // 53: otg.CaptureIpv4.version:type_name -> otg.CaptureField
	309,  // 54: otg.CaptureIpv4.header_length:type_name -> otg.CaptureField
	309,  // 55: otg.CaptureIpv4.priority:type_name -> otg.CaptureField
	309,  // 56: otg.CaptureIpv4.total_length:type_name -> otg.CaptureField
	309,  // 57: otg.CaptureIpv4.identification:type_name -> otg.CaptureField
	309,  // 58: otg.CaptureIpv4.reserved:type_name -> otg.CaptureField
	309,  // 59: otg.CaptureIpv4.dont_fragment:type_name -> otg.CaptureField
	309,  // 60: otg.CaptureIpv4.more_fragments:type_name -> otg.CaptureField
	309,  // 61: otg.CaptureIpv4.fragment_offset:type_name -> otg.CaptureField
	309,  // 62: otg.CaptureIpv4.time_to_live:type_name -> otg.CaptureField
	309,  // 63: otg.CaptureIpv4.protocol:type_name -> otg.CaptureField
	309,  // 64: otg.CaptureIpv4.header_checksum:type_name -> otg.CaptureField
	309,  // 65: otg.CaptureIpv4.src:type_name -> otg.CaptureField
	309,  // 66: otg.CaptureIpv4.dst:type_name -> otg.CaptureField
	309,  // 67: otg.CaptureIpv6.version:type_name -> otg.CaptureField
	309,  // 68: otg.CaptureIpv6.traffic_class:type_name -> otg.CaptureField
	309,  // 69: otg.CaptureIpv6.flow_label:type_name -> otg.CaptureField
	309,  // 70: otg.CaptureIpv6.payload_length:type_name -> otg.CaptureField
	309,  // 71: otg.CaptureIpv6.next_header:type_name -> otg.CaptureField
	309,  // 72: otg.CaptureIpv6.hop_limit:type_name -> otg.CaptureField
	309,  // 73: otg.CaptureIpv6.src:type_name -> otg.CaptureField
	309,  // 74: otg.CaptureIpv6.dst:type_name -> otg.CaptureField
	292,  // 75: otg.Device.ethernets:type_name -> otg.DeviceEthernet
	296,  // 76: otg.Device.ipv4_loopbacks:type_name -> otg.DeviceIpv4Loopback
	299,  // 77: otg.Device.ipv6_loopbacks:type_name -> otg.DeviceIpv6Loopback
	316,  // 78: otg.Device.isis:type_name -> otg.DeviceIsisRouter
	335,  // 79: otg.Device.bgp:type_name -> otg.DeviceBgpRouter
	390,  // 80: otg.Device.vxlan:type_name -> otg.DeviceVxlan
	402,  // 81: otg.Device.rsvp:type_name -> otg.DeviceRsvp
	317,  // 82: otg.DeviceIsisRouter.instance:type_name -> otg.DeviceIsisMultiInstance
	318,  // 83: otg.DeviceIsisRouter.interfaces:type_name -> otg.IsisInterface
	326,  // 84: otg.DeviceIsisRouter.basic:type_name -> otg.IsisBasic
	327,  // 85: otg.DeviceIsisRouter.advanced:type_name -> otg.IsisAdvanced
	328,  // 86: otg.DeviceIsisRouter.router_auth:type_name -> otg.IsisAuthentication
	330,  // 87: otg.DeviceIsisRouter.v4_routes:type_name -> otg.IsisV4RouteRange
	334,  // 88: otg.DeviceIsisRouter.v6_routes:type_name -> otg.IsisV6RouteRange
	11,   // 89: otg.IsisInterface.network_type:type_name -> otg.IsisInterface.NetworkType.Enum
	12,   // 90: otg.IsisInterface.level_type:type_name -> otg.IsisInterface.LevelType.Enum
	319,  // 91: otg.IsisInterface.l1_settings:type_name -> otg.IsisInterfaceLevel
	319,  // 92: otg.IsisInterface.l2_settings:type_name -> otg.IsisInterfaceLevel
	320,  // 93: otg.IsisInterface.multi_topology_ids:type_name -> otg.IsisMT
	321,  // 94: otg.IsisInterface.traffic_engineering:type_name -> otg.LinkStateTE
	323,  // 95: otg.IsisInterface.authentication:type_name -> otg.IsisInterfaceAuthentication
	324,  // 96: otg.IsisInterface.advanced:type_name -> otg.IsisInterfaceAdvanced
	325,  // 97: otg.IsisInterface.link_protection:type_name -> otg.IsisInterfaceLinkProtection
	322,  // 98: otg.LinkStateTE.priority_bandwidths:type_name -> otg.LinkStatepriorityBandwidths
	13,   // 99: otg.IsisInterfaceAuthentication.auth_type:type_name -> otg.IsisInterfaceAuthentication.AuthType.Enum
	329,  // 100: otg.IsisAuthentication.area_auth:type_name -> otg.IsisAuthenticationBase
	329,  // 101: otg.IsisAuthentication.domain_auth:type_name -> otg.IsisAuthenticationBase
	14,   // 102: otg.IsisAuthenticationBase.auth_type:type_name -> otg.IsisAuthenticationBase.AuthType.Enum
	331,  // 103: otg.IsisV4RouteRange.addresses:type_name -> otg.V4RouteAddress
	15,   // 104: otg.IsisV4RouteRange.origin_type:type_name -> otg.IsisV4RouteRange.OriginType.Enum
	16,   // 105: otg.IsisV4RouteRange.redistribution_type:type_name -> otg.IsisV4RouteRange.RedistributionType.Enum
	332,  // 106: otg.IsisV6RouteRange.addresses:type_name -> otg.V6RouteAddress
	17,   // 107: otg.IsisV6RouteRange.origin_type:type_name -> otg.IsisV6RouteRange.OriginType.Enum
	18,   // 108: otg.IsisV6RouteRange.redistribution_type:type_name -> otg.IsisV6RouteRange.RedistributionType.Enum
	337,  // 109: otg.DeviceBgpRouter.ipv4_interfaces:type_name -> otg.BgpV4Interface
	384,  // 110: otg.DeviceBgpRouter.ipv6_interfaces:type_name -> otg.BgpV6Interface
	338,  // 111: otg.BgpV4Peer.evpn_ethernet_segments:type_name -> otg.BgpV4EthernetSegment
	19,   // 112: otg.BgpV4Peer.as_type:type_name -> otg.BgpV4Peer.AsType.Enum
	20,   // 113: otg.BgpV4Peer.as_number_width:type_name -> otg.BgpV4Peer.AsNumberWidth.Enum
	351,  // 114: otg.BgpV4Peer.advanced:type_name -> otg.BgpAdvanced
	352,  // 115: otg.BgpV4Peer.capability:type_name -> otg.BgpCapability
	353,  // 116: otg.BgpV4Peer.learned_information_filter:type_name -> otg.BgpLearnedInformationFilter
	354,  // 117: otg.BgpV4Peer.v4_routes:type_name -> otg.BgpV4RouteRange
	356,  // 118: otg.BgpV4Peer.v6_routes:type_name -> otg.BgpV6RouteRange
	357,  // 119: otg.BgpV4Peer.v4_srte_policies:type_name -> otg.BgpSrteV4Policy
	381,  // 120: otg.BgpV4Peer.v6_srte_policies:type_name -> otg.BgpSrteV6Policy
	336,  // 121: otg.BgpV4Interface.peers:type_name -> otg.BgpV4Peer
	339,  // 122: otg.BgpV4EthernetSegment.df_election:type_name -> otg.BgpEthernetSegmentDfElection
	345,  // 123: otg.BgpV4EthernetSegment.evis:type_name -> otg.BgpV4EvpnEvis
	21,   // 124: otg.BgpV4EthernetSegment.active_mode:type_name -> otg.BgpV4EthernetSegment.ActiveMode.Enum
	340,  // 125: otg.BgpV4EthernetSegment.advanced:type_name -> otg.BgpRouteAdvanced
	341,  // 126: otg.BgpV4EthernetSegment.communities:type_name -> otg.BgpCommunity
	342,  // 127: otg.BgpV4EthernetSegment.ext_communities:type_name -> otg.BgpExtCommunity
	343,  // 128: otg.BgpV4EthernetSegment.as_path:type_name -> otg.BgpAsPath
	22,   // 129: otg.BgpRouteAdvanced.origin:type_name -> otg.BgpRouteAdvanced.Origin.Enum
	23,   // 130: otg.BgpCommunity.type:type_name -> otg.BgpCommunity.Type.Enum
	24,   // 131: otg.BgpExtCommunity.type:type_name -> otg.BgpExtCommunity.Type.Enum
	25,   // 132: otg.BgpExtCommunity.subtype:type_name -> otg.BgpExtCommunity.Subtype.Enum
	26,   // 133: otg.BgpAsPath.as_set_mode:type_name -> otg.BgpAsPath.AsSetMode.Enum
	344,  // 134: otg.BgpAsPath.segments:type_name -> otg.BgpAsPathSegment
	27,   // 135: otg.BgpAsPathSegment.type:type_name -> otg.BgpAsPathSegment.Type.Enum
	28,   // 136: otg.BgpV4EvpnEvis.choice:type_name -> otg.BgpV4EvpnEvis.Choice.Enum
	346,  // 137: otg.BgpV4EvpnEvis.evi_vxlan:type_name -> otg.BgpV4EviVxlan
	347,  // 138: otg.BgpV4EviVxlan.broadcast_domains:type_name -> otg.BgpV4EviVxlanBroadcastDomain
	29,   // 139: otg.BgpV4EviVxlan.replication_type:type_name -> otg.BgpV4EviVxlan.ReplicationType.Enum
	349,  // 140: otg.BgpV4EviVxlan.route_distinguisher:type_name -> otg.BgpRouteDistinguisher
	350,  // 141: otg.BgpV4EviVxlan.route_target_export:type_name -> otg.BgpRouteTarget
	350,  // 142: otg.BgpV4EviVxlan.route_target_import:type_name -> otg.BgpRouteTarget
	350,  // 143: otg.BgpV4EviVxlan.l3_route_target_export:type_name -> otg.BgpRouteTarget
	350,  // 144: otg.BgpV4EviVxlan.l3_route_target_import:type_name -> otg.BgpRouteTarget
	340,  // 145: otg.BgpV4EviVxlan.advanced:type_name -> otg.BgpRouteAdvanced
	341,  // 146: otg.BgpV4EviVxlan.communities:type_name -> otg.BgpCommunity
	342,  // 147: otg.BgpV4EviVxlan.ext_communities:type_name -> otg.BgpExtCommunity
	343,  // 148: otg.BgpV4EviVxlan.as_path:type_name -> otg.BgpAsPath
	348,  // 149: otg.BgpV4EviVxlanBroadcastDomain.cmac_ip_range:type_name -> otg.BgpCMacIpRange
	333,  // 150: otg.BgpCMacIpRange.mac_addresses:type_name -> otg.MACRouteAddress
	331,  // 151: otg.BgpCMacIpRange.ipv4_addresses:type_name -> otg.V4RouteAddress
	332,  // 152: otg.BgpCMacIpRange.ipv6_addresses:type_name -> otg.V6RouteAddress
	340,  // 153: otg.BgpCMacIpRange.advanced:type_name -> otg.BgpRouteAdvanced
	341,  // 154: otg.BgpCMacIpRange.communities:type_name -> otg.BgpCommunity
	342,  // 155: otg.BgpCMacIpRange.ext_communities:type_name -> otg.BgpExtCommunity
	343,  // 156: otg.BgpCMacIpRange.as_path:type_name -> otg.BgpAsPath
	30,   // 157: otg.BgpRouteDistinguisher.rd_type:type_name -> otg.BgpRouteDistinguisher.RdType.Enum
	31,   // 158: otg.BgpRouteTarget.rt_type:type_name -> otg.BgpRouteTarget.RtType.Enum
	331,  // 159: otg.BgpV4RouteRange.addresses:type_name -> otg.V4RouteAddress
	32,   // 160: otg.BgpV4RouteRange.next_hop_mode:type_name -> otg.BgpV4RouteRange.NextHopMode.Enum
	33,   // 161: otg.BgpV4RouteRange.next_hop_address_type:type_name -> otg.BgpV4RouteRange.NextHopAddressType.Enum
	340,  // 162: otg.BgpV4RouteRange.advanced:type_name -> otg.BgpRouteAdvanced
	341,  // 163: otg.BgpV4RouteRange.communities:type_name -> otg.BgpCommunity
	343,  // 164: otg.BgpV4RouteRange.as_path:type_name -> otg.BgpAsPath
	355,  // 165: otg.BgpV4RouteRange.add_path:type_name -> otg.BgpAddPath
	342,  // 166: otg.BgpV4RouteRange.ext_communities:type_name -> otg.BgpExtCommunity
	332,  // 167: otg.BgpV6RouteRange.addresses:type_name -> otg.V6RouteAddress
	34,   // 168: otg.BgpV6RouteRange.next_hop_mode:type_name -> otg.BgpV6RouteRange.NextHopMode.Enum
	35,   // 169: otg.BgpV6RouteRange.next_hop_address_type:type_name -> otg.BgpV6RouteRange.NextHopAddressType.Enum
	340,  // 170: otg.BgpV6RouteRange.advanced:type_name -> otg.BgpRouteAdvanced
	341,  // 171: otg.BgpV6RouteRange.communities:type_name -> otg.BgpCommunity
	343,  // 172: otg.BgpV6RouteRange.as_path:type_name -> otg.BgpAsPath
	355,  // 173: otg.BgpV6RouteRange.add_path:type_name -> otg.BgpAddPath
	342,  // 174: otg.BgpV6RouteRange.ext_communities:type_name -> otg.BgpExtCommunity
	36,   // 175: otg.BgpSrteV4Policy.next_hop_mode:type_name -> otg.BgpSrteV4Policy.NextHopMode.Enum
	37,   // 176: otg.BgpSrteV4Policy.next_hop_address_type:type_name -> otg.BgpSrteV4Policy.NextHopAddressType.Enum
	340,  // 177: otg.BgpSrteV4Policy.advanced:type_name -> otg.BgpRouteAdvanced
	355,  // 178: otg.BgpSrteV4Policy.add_path:type_name -> otg.BgpAddPath
	343,  // 179: otg.BgpSrteV4Policy.as_path:type_name -> otg.BgpAsPath
	341,  // 180: otg.BgpSrteV4Policy.communities:type_name -> otg.BgpCommunity
	342,  // 181: otg.BgpSrteV4Policy.ext_communities:type_name -> otg.BgpExtCommunity
	358,  // 182: otg.BgpSrteV4Policy.tunnel_tlvs:type_name -> otg.BgpSrteV4TunnelTlv
	359,  // 183: otg.BgpSrteV4TunnelTlv.remote_endpoint_sub_tlv:type_name -> otg.BgpSrteRemoteEndpointSubTlv
	360,  // 184: otg.BgpSrteV4TunnelTlv.color_sub_tlv:type_name -> otg.BgpSrteColorSubTlv
	361,  // 185: otg.BgpSrteV4TunnelTlv.binding_sub_tlv:type_name -> otg.BgpSrteBindingSubTlv
	362,  // 186: otg.BgpSrteV4TunnelTlv.preference_sub_tlv:type_name -> otg.BgpSrtePreferenceSubTlv
	363,  // 187: otg.BgpSrteV4TunnelTlv.policy_priority_sub_tlv:type_name -> otg.BgpSrtePolicyPrioritySubTlv
	364,  // 188: otg.BgpSrteV4TunnelTlv.policy_name_sub_tlv:type_name -> otg.BgpSrtePolicyNameSubTlv
	365,  // 189: otg.BgpSrteV4TunnelTlv.explicit_null_label_policy_sub_tlv:type_name -> otg.BgpSrteExplicitNullLabelPolicySubTlv
	366,  // 190: otg.BgpSrteV4TunnelTlv.segment_lists:type_name -> otg.BgpSrteSegmentList
	38,   // 191: otg.BgpSrteRemoteEndpointSubTlv.address_family:type_name -> otg.BgpSrteRemoteEndpointSubTlv.AddressFamily.Enum
	39,   // 192: otg.BgpSrteBindingSubTlv.binding_sid_type:type_name -> otg.BgpSrteBindingSubTlv.BindingSidType.Enum
	40,   // 193: otg.BgpSrteExplicitNullLabelPolicySubTlv.explicit_null_label_policy:type_name -> otg.BgpSrteExplicitNullLabelPolicySubTlv.ExplicitNullLabelPolicy.Enum
	367,  // 194: otg.BgpSrteSegmentList.segments:type_name -> otg.BgpSrteSegment
	41,   // 195: otg.BgpSrteSegment.segment_type:type_name -> otg.BgpSrteSegment.SegmentType.Enum
	370,  // 196: otg.BgpSrteSegment.type_a:type_name -> otg.BgpSrteSegmentATypeSubTlv
	371,  // 197: otg.BgpSrteSegment.type_b:type_name -> otg.BgpSrteSegmentBTypeSubTlv
	372,  // 198: otg.BgpSrteSegment.type_c:type_name -> otg.BgpSrteSegmentCTypeSubTlv
	373,  // 199: otg.BgpSrteSegment.type_d:type_name -> otg.BgpSrteSegmentDTypeSubTlv
	374,  // 200: otg.BgpSrteSegment.type_e:type_name -> otg.BgpSrteSegmentETypeSubTlv
	375,  // 201: otg.BgpSrteSegment.type_f:type_name -> otg.BgpSrteSegmentFTypeSubTlv
	376,  // 202: otg.BgpSrteSegment.type_g:type_name -> otg.BgpSrteSegmentGTypeSubTlv
	377,  // 203: otg.BgpSrteSegment.type_h:type_name -> otg.BgpSrteSegmentHTypeSubTlv
	378,  // 204: otg.BgpSrteSegment.type_i:type_name -> otg.BgpSrteSegmentITypeSubTlv
	379,  // 205: otg.BgpSrteSegment.type_j:type_name -> otg.BgpSrteSegmentJTypeSubTlv
	380,  // 206: otg.BgpSrteSegment.type_k:type_name -> otg.BgpSrteSegmentKTypeSubTlv
	369,  // 207: otg.BgpSrteSegmentBTypeSubTlv.srv6_sid_endpoint_behavior:type_name -> otg.BgpSrteSRv6SIDEndpointBehaviorAndStructure
	368,  // 208: otg.BgpSrteSegmentCTypeSubTlv.sr_mpls_sid:type_name -> otg.BgpSrteSrMplsSid
	368,  // 209: otg.BgpSrteSegmentDTypeSubTlv.sr_mpls_sid:type_name -> otg.BgpSrteSrMplsSid
	368,  // 210: otg.BgpSrteSegmentETypeSubTlv.sr_mpls_sid:type_name -> otg.BgpSrteSrMplsSid
	368,  // 211: otg.BgpSrteSegmentFTypeSubTlv.sr_mpls_sid:type_name -> otg.BgpSrteSrMplsSid
	368,  // 212: otg.BgpSrteSegmentGTypeSubTlv.sr_mpls_sid:type_name -> otg.BgpSrteSrMplsSid
	368,  // 213: otg.BgpSrteSegmentHTypeSubTlv.sr_mpls_sid:type_name -> otg.BgpSrteSrMplsSid
	369,  // 214: otg.BgpSrteSegmentITypeSubTlv.srv6_sid_endpoint_behavior:type_name -> otg.BgpSrteSRv6SIDEndpointBehaviorAndStructure
	369,  // 215: otg.BgpSrteSegmentJTypeSubTlv.srv6_sid_endpoint_behavior:type_name -> otg.BgpSrteSRv6SIDEndpointBehaviorAndStructure
	369,  // 216: otg.BgpSrteSegmentKTypeSubTlv.srv6_sid_endpoint_behavior:type_name -> otg.BgpSrteSRv6SIDEndpointBehaviorAndStructure
	42,   // 217: otg.BgpSrteV6Policy.next_hop_mode:type_name -> otg.BgpSrteV6Policy.NextHopMode.Enum
	43,   // 218: otg.BgpSrteV6Policy.next_hop_address_type:type_name -> otg.BgpSrteV6Policy.NextHopAddressType.Enum
	340,  // 219: otg.BgpSrteV6Policy.advanced:type_name -> otg.BgpRouteAdvanced
	355,  // 220: otg.BgpSrteV6Policy.add_path:type_name -> otg.BgpAddPath
	343,  // 221: otg.BgpSrteV6Policy.as_path:type_name -> otg.BgpAsPath
	341,  // 222: otg.BgpSrteV6Policy.communities:type_name -> otg.BgpCommunity
	342,  // 223: otg.BgpSrteV6Policy.extcommunities:type_name -> otg.BgpExtCommunity
	382,  // 224: otg.BgpSrteV6Policy.tunnel_tlvs:type_name -> otg.BgpSrteV6TunnelTlv
	359,  // 225: otg.BgpSrteV6TunnelTlv.remote_endpoint_sub_tlv:type_name -> otg.BgpSrteRemoteEndpointSubTlv
	360,  // 226: otg.BgpSrteV6TunnelTlv.color_sub_tlv:type_name -> otg.BgpSrteColorSubTlv
	361,  // 227: otg.BgpSrteV6TunnelTlv.binding_sub_tlv:type_name -> otg.BgpSrteBindingSubTlv
	362,  // 228: otg.BgpSrteV6TunnelTlv.preference_sub_tlv:type_name -> otg.BgpSrtePreferenceSubTlv
	363,  // 229: otg.BgpSrteV6TunnelTlv.policy_priority_sub_tlv:type_name -> otg.BgpSrtePolicyPrioritySubTlv
	364,  // 230: otg.BgpSrteV6TunnelTlv.policy_name_sub_tlv:type_name -> otg.BgpSrtePolicyNameSubTlv
	365,  // 231: otg.BgpSrteV6TunnelTlv.explicit_null_label_policy_sub_tlv:type_name -> otg.BgpSrteExplicitNullLabelPolicySubTlv
	366,  // 232: otg.BgpSrteV6TunnelTlv.segment_lists:type_name -> otg.BgpSrteSegmentList
	385,  // 233: otg.BgpV6Peer.segment_routing:type_name -> otg.BgpV6SegmentRouting
	386,  // 234: otg.BgpV6Peer.evpn_ethernet_segments:type_name -> otg.BgpV6EthernetSegment
	44,   // 235: otg.BgpV6Peer.as_type:type_name -> otg.BgpV6Peer.AsType.Enum
	45,   // 236: otg.BgpV6Peer.as_number_width:type_name -> otg.BgpV6Peer.AsNumberWidth.Enum
	351,  // 237: otg.BgpV6Peer.advanced:type_name -> otg.BgpAdvanced
	352,  // 238: otg.BgpV6Peer.capability:type_name -> otg.BgpCapability
	353,  // 239: otg.BgpV6Peer.learned_information_filter:type_name -> otg.BgpLearnedInformationFilter
	354,  // 240: otg.BgpV6Peer.v4_routes:type_name -> otg.BgpV4RouteRange
	356,  // 241: otg.BgpV6Peer.v6_routes:type_name -> otg.BgpV6RouteRange
	357,  // 242: otg.BgpV6Peer.v4_srte_policies:type_name -> otg.BgpSrteV4Policy
	381,  // 243: otg.BgpV6Peer.v6_srte_policies:type_name -> otg.BgpSrteV6Policy
	383,  // 244: otg.BgpV6Interface.peers:type_name -> otg.BgpV6Peer
	339,  // 245: otg.BgpV6EthernetSegment.df_election:type_name -> otg.BgpEthernetSegmentDfElection
	387,  // 246: otg.BgpV6EthernetSegment.evis:type_name -> otg.BgpV6EvpnEvis
	46,   // 247: otg.BgpV6EthernetSegment.active_mode:type_name -> otg.BgpV6EthernetSegment.ActiveMode.Enum
	340,  // 248: otg.BgpV6EthernetSegment.advanced:type_name -> otg.BgpRouteAdvanced
	341,  // 249: otg.BgpV6EthernetSegment.communities:type_name -> otg.BgpCommunity
	342,  // 250: otg.BgpV6EthernetSegment.ext_communities:type_name -> otg.BgpExtCommunity
	343,  // 251: otg.BgpV6EthernetSegment.as_path:type_name -> otg.BgpAsPath
	47,   // 252: otg.BgpV6EvpnEvis.choice:type_name -> otg.BgpV6EvpnEvis.Choice.Enum
	388,  // 253: otg.BgpV6EvpnEvis.evi_vxlan:type_name -> otg.BgpV6EviVxlan
	389,  // 254: otg.BgpV6EviVxlan.broadcast_domains:type_name -> otg.BgpV6EviVxlanBroadcastDomain
	48,   // 255: otg.BgpV6EviVxlan.replication_type:type_name -> otg.BgpV6EviVxlan.ReplicationType.Enum
	349,  // 256: otg.BgpV6EviVxlan.route_distinguisher:type_name -> otg.BgpRouteDistinguisher
	350,  // 257: otg.BgpV6EviVxlan.route_target_export:type_name -> otg.BgpRouteTarget
	350,  // 258: otg.BgpV6EviVxlan.route_target_import:type_name -> otg.BgpRouteTarget
	350,  // 259: otg.BgpV6EviVxlan.l3_route_target_export:type_name -> otg.BgpRouteTarget
	350,  // 260: otg.BgpV6EviVxlan.l3_route_target_import:type_name -> otg.BgpRouteTarget
	340,  // 261: otg.BgpV6EviVxlan.advanced:type_name -> otg.BgpRouteAdvanced
	341,  // 262: otg.BgpV6EviVxlan.communities:type_name -> otg.BgpCommunity
	342,  // 263: otg.BgpV6EviVxlan.ext_communities:type_name -> otg.BgpExtCommunity
	343,  // 264: otg.BgpV6EviVxlan.as_path:type_name -> otg.BgpAsPath
	348,  // 265: otg.BgpV6EviVxlanBroadcastDomain.cmac_ip_range:type_name -> otg.BgpCMacIpRange
	391,  // 266: otg.DeviceVxlan.v4_tunnels:type_name -> otg.VxlanV4Tunnel
	392,  // 267: otg.DeviceVxlan.v6_tunnels:type_name -> otg.VxlanV6Tunnel
	393,  // 268: otg.VxlanV4Tunnel.destination_ip_mode:type_name -> otg.VxlanV4TunnelDestinationIPMode
	394,  // 269: otg.VxlanV6Tunnel.destination_ip_mode:type_name -> otg.VxlanV6TunnelDestinationIPMode
	49,   // 270: otg.VxlanV4TunnelDestinationIPMode.choice:type_name -> otg.VxlanV4TunnelDestinationIPMode.Choice.Enum
	395,  // 271: otg.VxlanV4TunnelDestinationIPMode.unicast:type_name -> otg.VxlanV4TunnelDestinationIPModeUnicast
	400,  // 272: otg.VxlanV4TunnelDestinationIPMode.multicast:type_name -> otg.VxlanV4TunnelDestinationIPModeMulticast
	50,   // 273: otg.VxlanV6TunnelDestinationIPMode.choice:type_name -> otg.VxlanV6TunnelDestinationIPMode.Choice.Enum
	396,  // 274: otg.VxlanV6TunnelDestinationIPMode.unicast:type_name -> otg.VxlanV6TunnelDestinationIPModeUnicast
	401,  // 275: otg.VxlanV6TunnelDestinationIPMode.multicast:type_name -> otg.VxlanV6TunnelDestinationIPModeMulticast
	398,  // 276: otg.VxlanV4TunnelDestinationIPModeUnicast.vteps:type_name -> otg.VxlanV4TunnelDestinationIPModeUnicastVtep
	399,  // 277: otg.VxlanV6TunnelDestinationIPModeUnicast.vteps:type_name -> otg.VxlanV6TunnelDestinationIPModeUnicastVtep
	397,  // 278: otg.VxlanV4TunnelDestinationIPModeUnicastVtep.arp_suppression_cache:type_name -> otg.VxlanTunnelDestinationIPModeUnicastArpSuppressionCache
	397,  // 279: otg.VxlanV6TunnelDestinationIPModeUnicastVtep.arp_suppression_cache:type_name -> otg.VxlanTunnelDestinationIPModeUnicastArpSuppressionCache
	403,  // 280: otg.DeviceRsvp.ipv4_interfaces:type_name -> otg.RsvpIpv4Interface
	404,  // 281: otg.DeviceRsvp.lsp_ipv4_interfaces:type_name -> otg.RsvpLspIpv4Interface
	405,  // 282: otg.RsvpLspIpv4Interface.p2p_egress_ipv4_lsps:type_name -> otg.RsvpLspIpv4InterfaceP2PEgressIpv4Lsp
	406,  // 283: otg.RsvpLspIpv4Interface.p2p_ingress_ipv4_lsps:type_name -> otg.RsvpLspIpv4InterfaceP2PIngressIpv4Lsp
	51,   // 284: otg.RsvpLspIpv4InterfaceP2PEgressIpv4Lsp.reservation_style:type_name -> otg.RsvpLspIpv4InterfaceP2PEgressIpv4Lsp.ReservationStyle.Enum
	407,  // 285: otg.RsvpLspIpv4InterfaceP2PIngressIpv4Lsp.session_attribute:type_name -> otg.RsvpSessionAttribute
	409,  // 286: otg.RsvpLspIpv4InterfaceP2PIngressIpv4Lsp.tspec:type_name -> otg.RsvpTspec
	410,  // 287: otg.RsvpLspIpv4InterfaceP2PIngressIpv4Lsp.fast_reroute:type_name -> otg.RsvpFastReroute
	411,  // 288: otg.RsvpLspIpv4InterfaceP2PIngressIpv4Lsp.ero:type_name -> otg.RsvpEro
	408,  // 289: otg.RsvpSessionAttribute.resource_affinities:type_name -> otg.RsvpResourceAffinities
	52,   // 290: otg.RsvpEro.prepend_neighbor_ip:type_name -> otg.RsvpEro.PrependNeighborIp.Enum
	412,  // 291: otg.RsvpEro.subobjects:type_name -> otg.RsvpEroSubobject
	53,   // 292: otg.RsvpEroSubobject.type:type_name -> otg.RsvpEroSubobject.Type.Enum
	54,   // 293: otg.RsvpEroSubobject.hop_type:type_name -> otg.RsvpEroSubobject.HopType.Enum
	414,  // 294: otg.Flow.tx_rx:type_name -> otg.FlowTxRx
	417,  // 295: otg.Flow.packet:type_name -> otg.FlowHeader
	443,  // 296: otg.Flow.size:type_name -> otg.FlowSize
	446,  // 297: otg.Flow.rate:type_name -> otg.FlowRate
	447,  // 298: otg.Flow.duration:type_name -> otg.FlowDuration
	454,  // 299: otg.Flow.metrics:type_name -> otg.FlowMetrics
	55,   // 300: otg.FlowTxRx.choice:type_name -> otg.FlowTxRx.Choice.Enum
	415,  // 301: otg.FlowTxRx.port:type_name -> otg.FlowPort
	416,  // 302: otg.FlowTxRx.device:type_name -> otg.FlowRouter
	56,   // 303: otg.FlowRouter.mode:type_name -> otg.FlowRouter.Mode.Enum
	57,   // 304: otg.FlowHeader.choice:type_name -> otg.FlowHeader.Choice.Enum
	418,  // 305: otg.FlowHeader.custom:type_name -> otg.FlowCustom
	419,  // 306: otg.FlowHeader.ethernet:type_name -> otg.FlowEthernet
	420,  // 307: otg.FlowHeader.vlan:type_name -> otg.FlowVlan
	421,  // 308: otg.FlowHeader.vxlan:type_name -> otg.FlowVxlan
	422,  // 309: otg.FlowHeader.ipv4:type_name -> otg.FlowIpv4
	426,  // 310: otg.FlowHeader.ipv6:type_name -> otg.FlowIpv6
	427,  // 311: otg.FlowHeader.pfcpause:type_name -> otg.FlowPfcPause
	428,  // 312: otg.FlowHeader.ethernetpause:type_name -> otg.FlowEthernetPause
	429,  // 313: otg.FlowHeader.tcp:type_name -> otg.FlowTcp
	430,  // 314: otg.FlowHeader.udp:type_name -> otg.FlowUdp
	431,  // 315: otg.FlowHeader.gre:type_name -> otg.FlowGre
	432,  // 316: otg.FlowHeader.gtpv1:type_name -> otg.FlowGtpv1
	434,  // 317: otg.FlowHeader.gtpv2:type_name -> otg.FlowGtpv2
	435,  // 318: otg.FlowHeader.arp:type_name -> otg.FlowArp
	436,  // 319: otg.FlowHeader.icmp:type_name -> otg.FlowIcmp
	438,  // 320: otg.FlowHeader.icmpv6:type_name -> otg.FlowIcmpv6
	440,  // 321: otg.FlowHeader.ppp:type_name -> otg.FlowPpp
	441,  // 322: otg.FlowHeader.igmpv1:type_name -> otg.FlowIgmpv1
	442,  // 323: otg.FlowHeader.mpls:type_name -> otg.FlowMpls
	553,  // 324: otg.FlowEthernet.dst:type_name -> otg.PatternFlowEthernetDst
	555,  // 325: otg.FlowEthernet.src:type_name -> otg.PatternFlowEthernetSrc
	557,  // 326: otg.FlowEthernet.ether_type:type_name -> otg.PatternFlowEthernetEtherType
	559,  // 327: otg.FlowEthernet.pfc_queue:type_name -> otg.PatternFlowEthernetPfcQueue
	561,  // 328: otg.FlowVlan.priority:type_name -> otg.PatternFlowVlanPriority
	563,  // 329: otg.FlowVlan.cfi:type_name -> otg.PatternFlowVlanCfi
	565,  // 330: otg.FlowVlan.id:type_name -> otg.PatternFlowVlanId
	567,  // 331: otg.FlowVlan.tpid:type_name -> otg.PatternFlowVlanTpid
	569,  // 332: otg.FlowVxlan.flags:type_name -> otg.PatternFlowVxlanFlags
	571,  // 333: otg.FlowVxlan.reserved0:type_name -> otg.PatternFlowVxlanReserved0
	573,  // 334: otg.FlowVxlan.vni:type_name -> otg.PatternFlowVxlanVni
	575,  // 335: otg.FlowVxlan.reserved1:type_name -> otg.PatternFlowVxlanReserved1
	577,  // 336: otg.FlowIpv4.version:type_name -> otg.PatternFlowIpv4Version
	579,  // 337: otg.FlowIpv4.header_length:type_name -> otg.PatternFlowIpv4HeaderLength
	423,  // 338: otg.FlowIpv4.priority:type_name -> otg.FlowIpv4Priority
	581,  // 339: otg.FlowIpv4.total_length:type_name -> otg.PatternFlowIpv4TotalLength
	583,  // 340: otg.FlowIpv4.identification:type_name -> otg.PatternFlowIpv4Identification
	585,  // 341: otg.FlowIpv4.reserved:type_name -> otg.PatternFlowIpv4Reserved
	587,  // 342: otg.FlowIpv4.dont_fragment:type_name -> otg.PatternFlowIpv4DontFragment
	589,  // 343: otg.FlowIpv4.more_fragments:type_name -> otg.PatternFlowIpv4MoreFragments
	591,  // 344: otg.FlowIpv4.fragment_offset:type_name -> otg.PatternFlowIpv4FragmentOffset
	593,  // 345: otg.FlowIpv4.time_to_live:type_name -> otg.PatternFlowIpv4TimeToLive
	595,  // 346: otg.FlowIpv4.protocol:type_name -> otg.PatternFlowIpv4Protocol
	596,  // 347: otg.FlowIpv4.header_checksum:type_name -> otg.PatternFlowIpv4HeaderChecksum
	598,  // 348: otg.FlowIpv4.src:type_name -> otg.PatternFlowIpv4Src
	600,  // 349: otg.FlowIpv4.dst:type_name -> otg.PatternFlowIpv4Dst
	58,   // 350: otg.FlowIpv4Priority.choice:type_name -> otg.FlowIpv4Priority.Choice.Enum
	602,  // 351: otg.FlowIpv4Priority.raw:type_name -> otg.PatternFlowIpv4PriorityRaw
	425,  // 352: otg.FlowIpv4Priority.tos:type_name -> otg.FlowIpv4Tos
	424,  // 353: otg.FlowIpv4Priority.dscp:type_name -> otg.FlowIpv4Dscp
	604,  // 354: otg.FlowIpv4Dscp.phb:type_name -> otg.PatternFlowIpv4DscpPhb
	606,  // 355: otg.FlowIpv4Dscp.ecn:type_name -> otg.PatternFlowIpv4DscpEcn
	608,  // 356: otg.FlowIpv4Tos.precedence:type_name -> otg.PatternFlowIpv4TosPrecedence
	610,  // 357: otg.FlowIpv4Tos.delay:type_name -> otg.PatternFlowIpv4TosDelay
	612,  // 358: otg.FlowIpv4Tos.throughput:type_name -> otg.PatternFlowIpv4TosThroughput
	614,  // 359: otg.FlowIpv4Tos.reliability:type_name -> otg.PatternFlowIpv4TosReliability
	616,  // 360: otg.FlowIpv4Tos.monetary:type_name -> otg.PatternFlowIpv4TosMonetary
	618,  // 361: otg.FlowIpv4Tos.unused:type_name -> otg.PatternFlowIpv4TosUnused
	620,  // 362: otg.FlowIpv6.version:type_name -> otg.PatternFlowIpv6Version
	622,  // 363: otg.FlowIpv6.traffic_class:type_name -> otg.PatternFlowIpv6TrafficClass
	624,  // 364: otg.FlowIpv6.flow_label:type_name -> otg.PatternFlowIpv6FlowLabel
	626,  // 365: otg.FlowIpv6.payload_length:type_name -> otg.PatternFlowIpv6PayloadLength
	628,  // 366: otg.FlowIpv6.next_header:type_name -> otg.PatternFlowIpv6NextHeader
	630,  // 367: otg.FlowIpv6.hop_limit:type_name -> otg.PatternFlowIpv6HopLimit
	632,  // 368: otg.FlowIpv6.src:type_name -> otg.PatternFlowIpv6Src
	634,  // 369: otg.FlowIpv6.dst:type_name -> otg.PatternFlowIpv6Dst
	636,  // 370: otg.FlowPfcPause.dst:type_name -> otg.PatternFlowPfcPauseDst
	638,  // 371: otg.FlowPfcPause.src:type_name -> otg.PatternFlowPfcPauseSrc
	640,  // 372: otg.FlowPfcPause.ether_type:type_name -> otg.PatternFlowPfcPauseEtherType
	642,  // 373: otg.FlowPfcPause.control_op_code:type_name -> otg.PatternFlowPfcPauseControlOpCode
	644,  // 374: otg.FlowPfcPause.class_enable_vector:type_name -> otg.PatternFlowPfcPauseClassEnableVector
	646,  // 375: otg.FlowPfcPause.pause_class_0:type_name -> otg.PatternFlowPfcPausePauseClass0
	648,  // 376: otg.FlowPfcPause.pause_class_1:type_name -> otg.PatternFlowPfcPausePauseClass1
	650,  // 377: otg.FlowPfcPause.pause_class_2:type_name -> otg.PatternFlowPfcPausePauseClass2
	652,  // 378: otg.FlowPfcPause.pause_class_3:type_name -> otg.PatternFlowPfcPausePauseClass3
	654,  // 379: otg.FlowPfcPause.pause_class_4:type_name -> otg.PatternFlowPfcPausePauseClass4
	656,  // 380: otg.FlowPfcPause.pause_class_5:type_name -> otg.PatternFlowPfcPausePauseClass5
	658,  // 381: otg.FlowPfcPause.pause_class_6:type_name -> otg.PatternFlowPfcPausePauseClass6
	660,  // 382: otg.FlowPfcPause.pause_class_7:type_name -> otg.PatternFlowPfcPausePauseClass7
	662,  // 383: otg.FlowEthernetPause.dst:type_name -> otg.PatternFlowEthernetPauseDst
	664,  // 384: otg.FlowEthernetPause.src:type_name -> otg.PatternFlowEthernetPauseSrc
	666,  // 385: otg.FlowEthernetPause.ether_type:type_name -> otg.PatternFlowEthernetPauseEtherType
	668,  // 386: otg.FlowEthernetPause.control_op_code:type_name -> otg.PatternFlowEthernetPauseControlOpCode
	670,  // 387: otg.FlowEthernetPause.time:type_name -> otg.PatternFlowEthernetPauseTime
	672,  // 388: otg.FlowTcp.src_port:type_name -> otg.PatternFlowTcpSrcPort
	674,  // 389: otg.FlowTcp.dst_port:type_name -> otg.PatternFlowTcpDstPort
	676,  // 390: otg.FlowTcp.seq_num:type_name -> otg.PatternFlowTcpSeqNum
	678,  // 391: otg.FlowTcp.ack_num:type_name -> otg.PatternFlowTcpAckNum
	680,  // 392: otg.FlowTcp.data_offset:type_name -> otg.PatternFlowTcpDataOffset
	682,  // 393: otg.FlowTcp.ecn_ns:type_name -> otg.PatternFlowTcpEcnNs
	684,  // 394: otg.FlowTcp.ecn_cwr:type_name -> otg.PatternFlowTcpEcnCwr
	686,  // 395: otg.FlowTcp.ecn_echo:type_name -> otg.PatternFlowTcpEcnEcho
	688,  // 396: otg.FlowTcp.ctl_urg:type_name -> otg.PatternFlowTcpCtlUrg
	690,  // 397: otg.FlowTcp.ctl_ack:type_name -> otg.PatternFlowTcpCtlAck
	692,  // 398: otg.FlowTcp.ctl_psh:type_name -> otg.PatternFlowTcpCtlPsh
	694,  // 399: otg.FlowTcp.ctl_rst:type_name -> otg.PatternFlowTcpCtlRst
	696,  // 400: otg.FlowTcp.ctl_syn:type_name -> otg.PatternFlowTcpCtlSyn
	698,  // 401: otg.FlowTcp.ctl_fin:type_name -> otg.PatternFlowTcpCtlFin
	700,  // 402: otg.FlowTcp.window:type_name -> otg.PatternFlowTcpWindow
	702,  // 403: otg.FlowUdp.src_port:type_name -> otg.PatternFlowUdpSrcPort
	704,  // 404: otg.FlowUdp.dst_port:type_name -> otg.PatternFlowUdpDstPort
	706,  // 405: otg.FlowUdp.length:type_name -> otg.PatternFlowUdpLength
	707,  // 406: otg.FlowUdp.checksum:type_name -> otg.PatternFlowUdpChecksum
	709,  // 407: otg.FlowGre.checksum_present:type_name -> otg.PatternFlowGreChecksumPresent
	711,  // 408: otg.FlowGre.reserved0:type_name -> otg.PatternFlowGreReserved0
	713,  // 409: otg.FlowGre.version:type_name -> otg.PatternFlowGreVersion
	715,  // 410: otg.FlowGre.protocol:type_name -> otg.PatternFlowGreProtocol
	716,  // 411: otg.FlowGre.checksum:type_name -> otg.PatternFlowGreChecksum
	718,  // 412: otg.FlowGre.reserved1:type_name -> otg.PatternFlowGreReserved1
	720,  // 413: otg.FlowGtpv1.version:type_name -> otg.PatternFlowGtpv1Version
	722,  // 414: otg.FlowGtpv1.protocol_type:type_name -> otg.PatternFlowGtpv1ProtocolType
	724,  // 415: otg.FlowGtpv1.reserved:type_name -> otg.PatternFlowGtpv1Reserved
	726,  // 416: otg.FlowGtpv1.e_flag:type_name -> otg.PatternFlowGtpv1EFlag
	728,  // 417: otg.FlowGtpv1.s_flag:type_name -> otg.PatternFlowGtpv1SFlag
	730,  // 418: otg.FlowGtpv1.pn_flag:type_name -> otg.PatternFlowGtpv1PnFlag
	732,  // 419: otg.FlowGtpv1.message_type:type_name -> otg.PatternFlowGtpv1MessageType
	734,  // 420: otg.FlowGtpv1.message_length:type_name -> otg.PatternFlowGtpv1MessageLength
	736,  // 421: otg.FlowGtpv1.teid:type_name -> otg.PatternFlowGtpv1Teid
	738,  // 422: otg.FlowGtpv1.squence_number:type_name -> otg.PatternFlowGtpv1SquenceNumber
	740,  // 423: otg.FlowGtpv1.n_pdu_number:type_name -> otg.PatternFlowGtpv1NPduNumber
	742,  // 424: otg.FlowGtpv1.next_extension_header_type:type_name -> otg.PatternFlowGtpv1NextExtensionHeaderType
	433,  // 425: otg.FlowGtpv1.extension_headers:type_name -> otg.FlowGtpExtension
	744,  // 426: otg.FlowGtpExtension.extension_length:type_name -> otg.PatternFlowGtpExtensionExtensionLength
	746,  // 427: otg.FlowGtpExtension.contents:type_name -> otg.PatternFlowGtpExtensionContents
	748,  // 428: otg.FlowGtpExtension.next_extension_header:type_name -> otg.PatternFlowGtpExtensionNextExtensionHeader
	750,  // 429: otg.FlowGtpv2.version:type_name -> otg.PatternFlowGtpv2Version
	752,  // 430: otg.FlowGtpv2.piggybacking_flag:type_name -> otg.PatternFlowGtpv2PiggybackingFlag
	754,  // 431: otg.FlowGtpv2.teid_flag:type_name -> otg.PatternFlowGtpv2TeidFlag
	756,  // 432: otg.FlowGtpv2.spare1:type_name -> otg.PatternFlowGtpv2Spare1
	758,  // 433: otg.FlowGtpv2.message_type:type_name -> otg.PatternFlowGtpv2MessageType
	760,  // 434: otg.FlowGtpv2.message_length:type_name -> otg.PatternFlowGtpv2MessageLength
	762,  // 435: otg.FlowGtpv2.teid:type_name -> otg.PatternFlowGtpv2Teid
	764,  // 436: otg.FlowGtpv2.sequence_number:type_name -> otg.PatternFlowGtpv2SequenceNumber
	766,  // 437: otg.FlowGtpv2.spare2:type_name -> otg.PatternFlowGtpv2Spare2
	768,  // 438: otg.FlowArp.hardware_type:type_name -> otg.PatternFlowArpHardwareType
	770,  // 439: otg.FlowArp.protocol_type:type_name -> otg.PatternFlowArpProtocolType
	772,  // 440: otg.FlowArp.hardware_length:type_name -> otg.PatternFlowArpHardwareLength
	774,  // 441: otg.FlowArp.protocol_length:type_name -> otg.PatternFlowArpProtocolLength
	776,  // 442: otg.FlowArp.operation:type_name -> otg.PatternFlowArpOperation
	778,  // 443: otg.FlowArp.sender_hardware_addr:type_name -> otg.PatternFlowArpSenderHardwareAddr
	780,  // 444: otg.FlowArp.sender_protocol_addr:type_name -> otg.PatternFlowArpSenderProtocolAddr
	782,  // 445: otg.FlowArp.target_hardware_addr:type_name -> otg.PatternFlowArpTargetHardwareAddr
	784,  // 446: otg.FlowArp.target_protocol_addr:type_name -> otg.PatternFlowArpTargetProtocolAddr
	59,   // 447: otg.FlowIcmp.choice:type_name -> otg.FlowIcmp.Choice.Enum
	437,  // 448: otg.FlowIcmp.echo:type_name -> otg.FlowIcmpEcho
	786,  // 449: otg.FlowIcmpEcho.type:type_name -> otg.PatternFlowIcmpEchoType
	788,  // 450: otg.FlowIcmpEcho.code:type_name -> otg.PatternFlowIcmpEchoCode
	789,  // 451: otg.FlowIcmpEcho.checksum:type_name -> otg.PatternFlowIcmpEchoChecksum
	791,  // 452: otg.FlowIcmpEcho.identifier:type_name -> otg.PatternFlowIcmpEchoIdentifier
	793,  // 453: otg.FlowIcmpEcho.sequence_number:type_name -> otg.PatternFlowIcmpEchoSequenceNumber
	60,   // 454: otg.FlowIcmpv6.choice:type_name -> otg.FlowIcmpv6.Choice.Enum
	439,  // 455: otg.FlowIcmpv6.echo:type_name -> otg.FlowIcmpv6Echo
	800,  // 456: otg.FlowIcmpv6Echo.type:type_name -> otg.PatternFlowIcmpv6EchoType
	802,  // 457: otg.FlowIcmpv6Echo.code:type_name -> otg.PatternFlowIcmpv6EchoCode
	804,  // 458: otg.FlowIcmpv6Echo.identifier:type_name -> otg.PatternFlowIcmpv6EchoIdentifier
	806,  // 459: otg.FlowIcmpv6Echo.sequence_number:type_name -> otg.PatternFlowIcmpv6EchoSequenceNumber
	807,  // 460: otg.FlowIcmpv6Echo.checksum:type_name -> otg.PatternFlowIcmpv6EchoChecksum
	810,  // 461: otg.FlowPpp.address:type_name -> otg.PatternFlowPppAddress
	812,  // 462: otg.FlowPpp.control:type_name -> otg.PatternFlowPppControl
	814,  // 463: otg.FlowPpp.protocol_type:type_name -> otg.PatternFlowPppProtocolType
	816,  // 464: otg.FlowIgmpv1.version:type_name -> otg.PatternFlowIgmpv1Version
	818,  // 465: otg.FlowIgmpv1.type:type_name -> otg.PatternFlowIgmpv1Type
	820,  // 466: otg.FlowIgmpv1.unused:type_name -> otg.PatternFlowIgmpv1Unused
	821,  // 467: otg.FlowIgmpv1.checksum:type_name -> otg.PatternFlowIgmpv1Checksum
	823,  // 468: otg.FlowIgmpv1.group_address:type_name -> otg.PatternFlowIgmpv1GroupAddress
	825,  // 469: otg.FlowMpls.label:type_name -> otg.PatternFlowMplsLabel
	827,  // 470: otg.FlowMpls.traffic_class:type_name -> otg.PatternFlowMplsTrafficClass
	829,  // 471: otg.FlowMpls.bottom_of_stack:type_name -> otg.PatternFlowMplsBottomOfStack
	831,  // 472: otg.FlowMpls.time_to_live:type_name -> otg.PatternFlowMplsTimeToLive
	61,   // 473: otg.FlowSize.choice:type_name -> otg.FlowSize.Choice.Enum
	444,  // 474: otg.FlowSize.increment:type_name -> otg.FlowSizeIncrement
	445,  // 475: otg.FlowSize.random:type_name -> otg.FlowSizeRandom
	62,   // 476: otg.FlowRate.choice:type_name -> otg.FlowRate.Choice.Enum
	63,   // 477: otg.FlowDuration.choice:type_name -> otg.FlowDuration.Choice.Enum
	450,  // 478: otg.FlowDuration.fixed_packets:type_name -> otg.FlowFixedPackets
	451,  // 479: otg.FlowDuration.fixed_seconds:type_name -> otg.FlowFixedSeconds
	452,  // 480: otg.FlowDuration.burst:type_name -> otg.FlowBurst
	448,  // 481: otg.FlowDuration.continuous:type_name -> otg.FlowContinuous
	449,  // 482: otg.FlowContinuous.delay:type_name -> otg.FlowDelay
	64,   // 483: otg.FlowDelay.choice:type_name -> otg.FlowDelay.Choice.Enum
	449,  // 484: otg.FlowFixedPackets.delay:type_name -> otg.FlowDelay
	449,  // 485: otg.FlowFixedSeconds.delay:type_name -> otg.FlowDelay
	453,  // 486: otg.FlowBurst.inter_burst_gap:type_name -> otg.FlowDurationInterBurstGap
	65,   // 487: otg.FlowDurationInterBurstGap.choice:type_name -> otg.FlowDurationInterBurstGap.Choice.Enum
	455,  // 488: otg.FlowMetrics.latency:type_name -> otg.FlowLatencyMetrics
	66,   // 489: otg.FlowLatencyMetrics.mode:type_name -> otg.FlowLatencyMetrics.Mode.Enum
	458,  // 490: otg.Event.link:type_name -> otg.EventLink
	457,  // 491: otg.Event.rx_rate_threshold:type_name -> otg.EventRxRateThreshold
	459,  // 492: otg.Event.route_advertise_withdraw:type_name -> otg.EventRouteAdvertiseWithdraw
	67,   // 493: otg.EventRequest.type:type_name -> otg.EventRequest.Type.Enum
	460,  // 494: otg.EventSubscription.events:type_name -> otg.EventRequest
	463,  // 495: otg.Lldp.connection:type_name -> otg.LldpConnection
	464,  // 496: otg.Lldp.chassis_id:type_name -> otg.LldpChassisId
	465,  // 497: otg.Lldp.port_id:type_name -> otg.LldpPortId
	468,  // 498: otg.Lldp.system_name:type_name -> otg.LldpSystemName
	68,   // 499: otg.LldpConnection.choice:type_name -> otg.LldpConnection.Choice.Enum
	69,   // 500: otg.LldpChassisId.choice:type_name -> otg.LldpChassisId.Choice.Enum
	466,  // 501: otg.LldpChassisId.mac_address_subtype:type_name -> otg.LldpChassisMacSubType
	70,   // 502: otg.LldpPortId.choice:type_name -> otg.LldpPortId.Choice.Enum
	467,  // 503: otg.LldpPortId.interface_name_subtype:type_name -> otg.LldpPortInterfaceNameSubType
	71,   // 504: otg.LldpChassisMacSubType.choice:type_name -> otg.LldpChassisMacSubType.Choice.Enum
	72,   // 505: otg.LldpPortInterfaceNameSubType.choice:type_name -> otg.LldpPortInterfaceNameSubType.Choice.Enum
	73,   // 506: otg.LldpSystemName.choice:type_name -> otg.LldpSystemName.Choice.Enum
	74,   // 507: otg.LinkState.state:type_name -> otg.LinkState.State.Enum
	75,   // 508: otg.TransmitState.state:type_name -> otg.TransmitState.State.Enum
	76,   // 509: otg.CaptureState.state:type_name -> otg.CaptureState.State.Enum
	77,   // 510: otg.FlowsUpdate.property_names:type_name -> otg.FlowsUpdate.PropertyNames.Enum
	413,  // 511: otg.FlowsUpdate.flows:type_name -> otg.Flow
	78,   // 512: otg.RouteState.state:type_name -> otg.RouteState.State.Enum
	479,  // 513: otg.PingRequest.endpoints:type_name -> otg.Ping
	79,   // 514: otg.ProtocolState.state:type_name -> otg.ProtocolState.State.Enum
	80,   // 515: otg.DeviceState.choice:type_name -> otg.DeviceState.Choice.Enum
	484,  // 516: otg.DeviceState.lacp_member_state:type_name -> otg.LacpMemberState
	81,   // 517: otg.Ping.choice:type_name -> otg.Ping.Choice.Enum
	480,  // 518: otg.Ping.ipv4:type_name -> otg.PingIpv4
	481,  // 519: otg.Ping.ipv6:type_name -> otg.PingIpv6
	483,  // 520: otg.PingResponse.responses:type_name -> otg.Response
	82,   // 521: otg.Response.result:type_name -> otg.Response.Result.Enum
	83,   // 522: otg.LacpMemberState.state:type_name -> otg.LacpMemberState.State.Enum
	84,   // 523: otg.MetricsRequest.choice:type_name -> otg.MetricsRequest.Choice.Enum
	487,  // 524: otg.MetricsRequest.port:type_name -> otg.PortMetricsRequest
	489,  // 525: otg.MetricsRequest.flow:type_name -> otg.FlowMetricsRequest
	495,  // 526: otg.MetricsRequest.bgpv4:type_name -> otg.Bgpv4MetricsRequest
	497,  // 527: otg.MetricsRequest.bgpv6:type_name -> otg.Bgpv6MetricsRequest
	499,  // 528: otg.MetricsRequest.isis:type_name -> otg.IsisMetricsRequest
	501,  // 529: otg.MetricsRequest.lag:type_name -> otg.LagMetricsRequest
	503,  // 530: otg.MetricsRequest.lacp:type_name -> otg.LacpMetricsRequest
	505,  // 531: otg.MetricsRequest.lldp:type_name -> otg.LldpMetricsRequest
	507,  // 532: otg.MetricsRequest.rsvp:type_name -> otg.RsvpMetricsRequest
	85,   // 533: otg.MetricsResponse.choice:type_name -> otg.MetricsResponse.Choice.Enum
	488,  // 534: otg.MetricsResponse.port_metrics:type_name -> otg.PortMetric
	491,  // 535: otg.MetricsResponse.flow_metrics:type_name -> otg.FlowMetric
	496,  // 536: otg.MetricsResponse.bgpv4_metrics:type_name -> otg.Bgpv4Metric
	498,  // 537: otg.MetricsResponse.bgpv6_metrics:type_name -> otg.Bgpv6Metric
	500,  // 538: otg.MetricsResponse.isis_metrics:type_name -> otg.IsisMetric
	502,  // 539: otg.MetricsResponse.lag_metrics:type_name -> otg.LagMetric
	504,  // 540: otg.MetricsResponse.lacp_metrics:type_name -> otg.LacpMetric
	506,  // 541: otg.MetricsResponse.lldp_metrics:type_name -> otg.LldpMetric
	508,  // 542: otg.MetricsResponse.rsvp_metrics:type_name -> otg.RsvpMetric
	86,   // 543: otg.PortMetricsRequest.column_names:type_name -> otg.PortMetricsRequest.ColumnNames.Enum
	87,   // 544: otg.PortMetric.link:type_name -> otg.PortMetric.Link.Enum
	88,   // 545: otg.PortMetric.capture:type_name -> otg.PortMetric.Capture.Enum
	89,   // 546: otg.PortMetric.transmit:type_name -> otg.PortMetric.Transmit.Enum
	490,  // 547: otg.FlowMetricsRequest.metric_groups:type_name -> otg.FlowMetricGroupRequest
	90,   // 548: otg.FlowMetricsRequest.metric_names:type_name -> otg.FlowMetricsRequest.MetricNames.Enum
	91,   // 549: otg.FlowMetricGroupRequest.choice:type_name -> otg.FlowMetricGroupRequest.Choice.Enum
	492,  // 550: otg.FlowMetric.metric_groups:type_name -> otg.FlowMetricGroup
	92,   // 551: otg.FlowMetric.transmit:type_name -> otg.FlowMetric.Transmit.Enum
	493,  // 552: otg.FlowMetric.timestamps:type_name -> otg.MetricTimestamp
	494,  // 553: otg.FlowMetric.latency:type_name -> otg.MetricLatency
	93,   // 554: otg.Bgpv4MetricsRequest.column_names:type_name -> otg.Bgpv4MetricsRequest.ColumnNames.Enum
	94,   // 555: otg.Bgpv4Metric.session_state:type_name -> otg.Bgpv4Metric.SessionState.Enum
	95,   // 556: otg.Bgpv4Metric.fsm_state:type_name -> otg.Bgpv4Metric.FsmState.Enum
	96,   // 557: otg.Bgpv6MetricsRequest.column_names:type_name -> otg.Bgpv6MetricsRequest.ColumnNames.Enum
	97,   // 558: otg.Bgpv6Metric.session_state:type_name -> otg.Bgpv6Metric.SessionState.Enum
	98,   // 559: otg.Bgpv6Metric.fsm_state:type_name -> otg.Bgpv6Metric.FsmState.Enum
	99,   // 560: otg.IsisMetricsRequest.column_names:type_name -> otg.IsisMetricsRequest.ColumnNames.Enum
	100,  // 561: otg.LagMetricsRequest.column_names:type_name -> otg.LagMetricsRequest.ColumnNames.Enum
	101,  // 562: otg.LagMetric.oper_status:type_name -> otg.LagMetric.OperStatus.Enum
	102,  // 563: otg.LacpMetricsRequest.column_names:type_name -> otg.LacpMetricsRequest.ColumnNames.Enum
	103,  // 564: otg.LacpMetric.activity:type_name -> otg.LacpMetric.Activity.Enum
	104,  // 565: otg.LacpMetric.timeout:type_name -> otg.LacpMetric.Timeout.Enum
	105,  // 566: otg.LacpMetric.synchronization:type_name -> otg.LacpMetric.Synchronization.Enum
	106,  // 567: otg.LldpMetricsRequest.column_names:type_name -> otg.LldpMetricsRequest.ColumnNames.Enum
	107,  // 568: otg.RsvpMetricsRequest.column_names:type_name -> otg.RsvpMetricsRequest.ColumnNames.Enum
	108,  // 569: otg.StatesRequest.choice:type_name -> otg.StatesRequest.Choice.Enum
	511,  // 570: otg.StatesRequest.ipv4_neighbors:type_name -> otg.Neighborsv4StatesRequest
	513,  // 571: otg.StatesRequest.ipv6_neighbors:type_name -> otg.Neighborsv6StatesRequest
	515,  // 572: otg.StatesRequest.bgp_prefixes:type_name -> otg.BgpPrefixStateRequest
	524,  // 573: otg.StatesRequest.isis_lsps:type_name -> otg.IsisLspsStateRequest
	541,  // 574: otg.StatesRequest.lldp_neighbors:type_name -> otg.LldpNeighborsStateRequest
	545,  // 575: otg.StatesRequest.rsvp_lsps:type_name -> otg.RsvpLspsStateRequest
	109,  // 576: otg.StatesResponse.choice:type_name -> otg.StatesResponse.Choice.Enum
	512,  // 577: otg.StatesResponse.ipv4_neighbors:type_name -> otg.Neighborsv4State
	514,  // 578: otg.StatesResponse.ipv6_neighbors:type_name -> otg.Neighborsv6State
	518,  // 579: otg.StatesResponse.bgp_prefixes:type_name -> otg.BgpPrefixesState
	525,  // 580: otg.StatesResponse.isis_lsps:type_name -> otg.IsisLspsState
	542,  // 581: otg.StatesResponse.lldp_neighbors:type_name -> otg.LldpNeighborsState
	546,  // 582: otg.StatesResponse.rsvp_lsps:type_name -> otg.RsvpLspsState
	110,  // 583: otg.BgpPrefixStateRequest.prefix_filters:type_name -> otg.BgpPrefixStateRequest.PrefixFilters.Enum
	516,  // 584: otg.BgpPrefixStateRequest.ipv4_unicast_filters:type_name -> otg.BgpPrefixIpv4UnicastFilter
	517,  // 585: otg.BgpPrefixStateRequest.ipv6_unicast_filters:type_name -> otg.BgpPrefixIpv6UnicastFilter
	111,  // 586: otg.BgpPrefixIpv4UnicastFilter.origin:type_name -> otg.BgpPrefixIpv4UnicastFilter.Origin.Enum
	112,  // 587: otg.BgpPrefixIpv6UnicastFilter.origin:type_name -> otg.BgpPrefixIpv6UnicastFilter.Origin.Enum
	519,  // 588: otg.BgpPrefixesState.ipv4_unicast_prefixes:type_name -> otg.BgpPrefixIpv4UnicastState
	520,  // 589: otg.BgpPrefixesState.ipv6_unicast_prefixes:type_name -> otg.BgpPrefixIpv6UnicastState
	113,  // 590: otg.BgpPrefixIpv4UnicastState.origin:type_name -> otg.BgpPrefixIpv4UnicastState.Origin.Enum
	521,  // 591: otg.BgpPrefixIpv4UnicastState.communities:type_name -> otg.ResultBgpCommunity
	522,  // 592: otg.BgpPrefixIpv4UnicastState.as_path:type_name -> otg.ResultBgpAsPath
	114,  // 593: otg.BgpPrefixIpv6UnicastState.origin:type_name -> otg.BgpPrefixIpv6UnicastState.Origin.Enum
	521,  // 594: otg.BgpPrefixIpv6UnicastState.communities:type_name -> otg.ResultBgpCommunity
	522,  // 595: otg.BgpPrefixIpv6UnicastState.as_path:type_name -> otg.ResultBgpAsPath
	115,  // 596: otg.ResultBgpCommunity.type:type_name -> otg.ResultBgpCommunity.Type.Enum
	523,  // 597: otg.ResultBgpAsPath.segments:type_name -> otg.ResultBgpAsPathSegment
	116,  // 598: otg.ResultBgpAsPathSegment.type:type_name -> otg.ResultBgpAsPathSegment.Type.Enum
	526,  // 599: otg.IsisLspsState.lsps:type_name -> otg.IsisLspState
	117,  // 600: otg.IsisLspState.pdu_type:type_name -> otg.IsisLspState.PduType.Enum
	529,  // 601: otg.IsisLspState.flags:type_name -> otg.IsisLspFlags
	527,  // 602: otg.IsisLspState.tlvs:type_name -> otg.IsisLspTlvs
	528,  // 603: otg.IsisLspTlvs.hostname_tlvs:type_name -> otg.IsisLspHostname
	530,  // 604: otg.IsisLspTlvs.is_reachability_tlvs:type_name -> otg.IsisLspIsReachabilityTlv
	531,  // 605: otg.IsisLspTlvs.extended_is_reachability_tlvs:type_name -> otg.IsisLspExtendedIsReachabilityTlv
	533,  // 606: otg.IsisLspTlvs.ipv4_internal_reachability_tlvs:type_name -> otg.IsisLspIpv4InternalReachabilityTlv
	534,  // 607: otg.IsisLspTlvs.ipv4_external_reachability_tlvs:type_name -> otg.IsisLspIpv4ExternalReachabilityTlv
	536,  // 608: otg.IsisLspTlvs.extended_ipv4_reachability_tlvs:type_name -> otg.IsisLspExtendedIpv4ReachabilityTlv
	538,  // 609: otg.IsisLspTlvs.ipv6_reachability_tlvs:type_name -> otg.IsisLspIpv6ReachabilityTlv
	532,  // 610: otg.IsisLspIsReachabilityTlv.neighbors:type_name -> otg.IsisLspneighbor
	532,  // 611: otg.IsisLspExtendedIsReachabilityTlv.neighbors:type_name -> otg.IsisLspneighbor
	535,  // 612: otg.IsisLspIpv4InternalReachabilityTlv.prefixes:type_name -> otg.IsisLspV4Prefix
	535,  // 613: otg.IsisLspIpv4ExternalReachabilityTlv.prefixes:type_name -> otg.IsisLspV4Prefix
	118,  // 614: otg.IsisLspV4Prefix.redistribution_type:type_name -> otg.IsisLspV4Prefix.RedistributionType.Enum
	119,  // 615: otg.IsisLspV4Prefix.origin_type:type_name -> otg.IsisLspV4Prefix.OriginType.Enum
	537,  // 616: otg.IsisLspExtendedIpv4ReachabilityTlv.prefixes:type_name -> otg.IsisLspExtendedV4Prefix
	120,  // 617: otg.IsisLspExtendedV4Prefix.redistribution_type:type_name -> otg.IsisLspExtendedV4Prefix.RedistributionType.Enum
	540,  // 618: otg.IsisLspExtendedV4Prefix.prefix_attributes:type_name -> otg.IsisLspPrefixAttributes
	539,  // 619: otg.IsisLspIpv6ReachabilityTlv.prefixes:type_name -> otg.IsisLspV6Prefix
	121,  // 620: otg.IsisLspV6Prefix.redistribution_type:type_name -> otg.IsisLspV6Prefix.RedistributionType.Enum
	122,  // 621: otg.IsisLspV6Prefix.origin_type:type_name -> otg.IsisLspV6Prefix.OriginType.Enum
	540,  // 622: otg.IsisLspV6Prefix.prefix_attributes:type_name -> otg.IsisLspPrefixAttributes
	123,  // 623: otg.LldpNeighborsState.chassis_id_type:type_name -> otg.LldpNeighborsState.ChassisIdType.Enum
	124,  // 624: otg.LldpNeighborsState.port_id_type:type_name -> otg.LldpNeighborsState.PortIdType.Enum
	543,  // 625: otg.LldpNeighborsState.custom_tlvs:type_name -> otg.LldpCustomTLVState
	544,  // 626: otg.LldpNeighborsState.capabilities:type_name -> otg.LldpCapabilityState
	125,  // 627: otg.LldpCapabilityState.capability_name:type_name -> otg.LldpCapabilityState.CapabilityName.Enum
	547,  // 628: otg.RsvpLspsState.ipv4_lsps:type_name -> otg.RsvpIPv4LspState
	548,  // 629: otg.RsvpIPv4LspState.lsp:type_name -> otg.RsvpLspState
	549,  // 630: otg.RsvpIPv4LspState.rros:type_name -> otg.RsvpLspIpv4Rro
	550,  // 631: otg.RsvpIPv4LspState.eros:type_name -> otg.RsvpLspIpv4Ero
	126,  // 632: otg.RsvpLspState.session_status:type_name -> otg.RsvpLspState.SessionStatus.Enum
	127,  // 633: otg.RsvpLspState.last_flap_reason:type_name -> otg.RsvpLspState.LastFlapReason.Enum
	128,  // 634: otg.RsvpLspIpv4Ero.type:type_name -> otg.RsvpLspIpv4Ero.Type.Enum
	129,  // 635: otg.PatternFlowEthernetDst.choice:type_name -> otg.PatternFlowEthernetDst.Choice.Enum
	552,  // 636: otg.PatternFlowEthernetDst.increment:type_name -> otg.PatternFlowEthernetDstCounter
	552,  // 637: otg.PatternFlowEthernetDst.decrement:type_name -> otg.PatternFlowEthernetDstCounter
	130,  // 638: otg.PatternFlowEthernetSrc.choice:type_name -> otg.PatternFlowEthernetSrc.Choice.Enum
	554,  // 639: otg.PatternFlowEthernetSrc.increment:type_name -> otg.PatternFlowEthernetSrcCounter
	554,  // 640: otg.PatternFlowEthernetSrc.decrement:type_name -> otg.PatternFlowEthernetSrcCounter
	131,  // 641: otg.PatternFlowEthernetEtherType.choice:type_name -> otg.PatternFlowEthernetEtherType.Choice.Enum
	556,  // 642: otg.PatternFlowEthernetEtherType.increment:type_name -> otg.PatternFlowEthernetEtherTypeCounter
	556,  // 643: otg.PatternFlowEthernetEtherType.decrement:type_name -> otg.PatternFlowEthernetEtherTypeCounter
	132,  // 644: otg.PatternFlowEthernetPfcQueue.choice:type_name -> otg.PatternFlowEthernetPfcQueue.Choice.Enum
	558,  // 645: otg.PatternFlowEthernetPfcQueue.increment:type_name -> otg.PatternFlowEthernetPfcQueueCounter
	558,  // 646: otg.PatternFlowEthernetPfcQueue.decrement:type_name -> otg.PatternFlowEthernetPfcQueueCounter
	133,  // 647: otg.PatternFlowVlanPriority.choice:type_name -> otg.PatternFlowVlanPriority.Choice.Enum
	560,  // 648: otg.PatternFlowVlanPriority.increment:type_name -> otg.PatternFlowVlanPriorityCounter
	560,  // 649: otg.PatternFlowVlanPriority.decrement:type_name -> otg.PatternFlowVlanPriorityCounter
	134,  // 650: otg.PatternFlowVlanCfi.choice:type_name -> otg.PatternFlowVlanCfi.Choice.Enum
	562,  // 651: otg.PatternFlowVlanCfi.increment:type_name -> otg.PatternFlowVlanCfiCounter
	562,  // 652: otg.PatternFlowVlanCfi.decrement:type_name -> otg.PatternFlowVlanCfiCounter
	135,  // 653: otg.PatternFlowVlanId.choice:type_name -> otg.PatternFlowVlanId.Choice.Enum
	564,  // 654: otg.PatternFlowVlanId.increment:type_name -> otg.PatternFlowVlanIdCounter
	564,  // 655: otg.PatternFlowVlanId.decrement:type_name -> otg.PatternFlowVlanIdCounter
	136,  // 656: otg.PatternFlowVlanTpid.choice:type_name -> otg.PatternFlowVlanTpid.Choice.Enum
	566,  // 657: otg.PatternFlowVlanTpid.increment:type_name -> otg.PatternFlowVlanTpidCounter
	566,  // 658: otg.PatternFlowVlanTpid.decrement:type_name -> otg.PatternFlowVlanTpidCounter
	137,  // 659: otg.PatternFlowVxlanFlags.choice:type_name -> otg.PatternFlowVxlanFlags.Choice.Enum
	568,  // 660: otg.PatternFlowVxlanFlags.increment:type_name -> otg.PatternFlowVxlanFlagsCounter
	568,  // 661: otg.PatternFlowVxlanFlags.decrement:type_name -> otg.PatternFlowVxlanFlagsCounter
	138,  // 662: otg.PatternFlowVxlanReserved0.choice:type_name -> otg.PatternFlowVxlanReserved0.Choice.Enum
	570,  // 663: otg.PatternFlowVxlanReserved0.increment:type_name -> otg.PatternFlowVxlanReserved0Counter
	570,  // 664: otg.PatternFlowVxlanReserved0.decrement:type_name -> otg.PatternFlowVxlanReserved0Counter
	139,  // 665: otg.PatternFlowVxlanVni.choice:type_name -> otg.PatternFlowVxlanVni.Choice.Enum
	572,  // 666: otg.PatternFlowVxlanVni.increment:type_name -> otg.PatternFlowVxlanVniCounter
	572,  // 667: otg.PatternFlowVxlanVni.decrement:type_name -> otg.PatternFlowVxlanVniCounter
	140,  // 668: otg.PatternFlowVxlanReserved1.choice:type_name -> otg.PatternFlowVxlanReserved1.Choice.Enum
	574,  // 669: otg.PatternFlowVxlanReserved1.increment:type_name -> otg.PatternFlowVxlanReserved1Counter
	574,  // 670: otg.PatternFlowVxlanReserved1.decrement:type_name -> otg.PatternFlowVxlanReserved1Counter
	141,  // 671: otg.PatternFlowIpv4Version.choice:type_name -> otg.PatternFlowIpv4Version.Choice.Enum
	576,  // 672: otg.PatternFlowIpv4Version.increment:type_name -> otg.PatternFlowIpv4VersionCounter
	576,  // 673: otg.PatternFlowIpv4Version.decrement:type_name -> otg.PatternFlowIpv4VersionCounter
	142,  // 674: otg.PatternFlowIpv4HeaderLength.choice:type_name -> otg.PatternFlowIpv4HeaderLength.Choice.Enum
	578,  // 675: otg.PatternFlowIpv4HeaderLength.increment:type_name -> otg.PatternFlowIpv4HeaderLengthCounter
	578,  // 676: otg.PatternFlowIpv4HeaderLength.decrement:type_name -> otg.PatternFlowIpv4HeaderLengthCounter
	143,  // 677: otg.PatternFlowIpv4TotalLength.choice:type_name -> otg.PatternFlowIpv4TotalLength.Choice.Enum
	580,  // 678: otg.PatternFlowIpv4TotalLength.increment:type_name -> otg.PatternFlowIpv4TotalLengthCounter
	580,  // 679: otg.PatternFlowIpv4TotalLength.decrement:type_name -> otg.PatternFlowIpv4TotalLengthCounter
	144,  // 680: otg.PatternFlowIpv4Identification.choice:type_name -> otg.PatternFlowIpv4Identification.Choice.Enum
	582,  // 681: otg.PatternFlowIpv4Identification.increment:type_name -> otg.PatternFlowIpv4IdentificationCounter
	582,  // 682: otg.PatternFlowIpv4Identification.decrement:type_name -> otg.PatternFlowIpv4IdentificationCounter
	145,  // 683: otg.PatternFlowIpv4Reserved.choice:type_name -> otg.PatternFlowIpv4Reserved.Choice.Enum
	584,  // 684: otg.PatternFlowIpv4Reserved.increment:type_name -> otg.PatternFlowIpv4ReservedCounter
	584,  // 685: otg.PatternFlowIpv4Reserved.decrement:type_name -> otg.PatternFlowIpv4ReservedCounter
	146,  // 686: otg.PatternFlowIpv4DontFragment.choice:type_name -> otg.PatternFlowIpv4DontFragment.Choice.Enum
	586,  // 687: otg.PatternFlowIpv4DontFragment.increment:type_name -> otg.PatternFlowIpv4DontFragmentCounter
	586,  // 688: otg.PatternFlowIpv4DontFragment.decrement:type_name -> otg.PatternFlowIpv4DontFragmentCounter
	147,  // 689: otg.PatternFlowIpv4MoreFragments.choice:type_name -> otg.PatternFlowIpv4MoreFragments.Choice.Enum
	588,  // 690: otg.PatternFlowIpv4MoreFragments.increment:type_name -> otg.PatternFlowIpv4MoreFragmentsCounter
	588,  // 691: otg.PatternFlowIpv4MoreFragments.decrement:type_name -> otg.PatternFlowIpv4MoreFragmentsCounter
	148,  // 692: otg.PatternFlowIpv4FragmentOffset.choice:type_name -> otg.PatternFlowIpv4FragmentOffset.Choice.Enum
	590,  // 693: otg.PatternFlowIpv4FragmentOffset.increment:type_name -> otg.PatternFlowIpv4FragmentOffsetCounter
	590,  // 694: otg.PatternFlowIpv4FragmentOffset.decrement:type_name -> otg.PatternFlowIpv4FragmentOffsetCounter
	149,  // 695: otg.PatternFlowIpv4TimeToLive.choice:type_name -> otg.PatternFlowIpv4TimeToLive.Choice.Enum
	592,  // 696: otg.PatternFlowIpv4TimeToLive.increment:type_name -> otg.PatternFlowIpv4TimeToLiveCounter
	592,  // 697: otg.PatternFlowIpv4TimeToLive.decrement:type_name -> otg.PatternFlowIpv4TimeToLiveCounter
	150,  // 698: otg.PatternFlowIpv4Protocol.choice:type_name -> otg.PatternFlowIpv4Protocol.Choice.Enum
	594,  // 699: otg.PatternFlowIpv4Protocol.increment:type_name -> otg.PatternFlowIpv4ProtocolCounter
	594,  // 700: otg.PatternFlowIpv4Protocol.decrement:type_name -> otg.PatternFlowIpv4ProtocolCounter
	151,  // 701: otg.PatternFlowIpv4HeaderChecksum.choice:type_name -> otg.PatternFlowIpv4HeaderChecksum.Choice.Enum
	152,  // 702: otg.PatternFlowIpv4HeaderChecksum.generated:type_name -> otg.PatternFlowIpv4HeaderChecksum.Generated.Enum
	153,  // 703: otg.PatternFlowIpv4Src.choice:type_name -> otg.PatternFlowIpv4Src.Choice.Enum
	597,  // 704: otg.PatternFlowIpv4Src.increment:type_name -> otg.PatternFlowIpv4SrcCounter
	597,  // 705: otg.PatternFlowIpv4Src.decrement:type_name -> otg.PatternFlowIpv4SrcCounter
	154,  // 706: otg.PatternFlowIpv4Dst.choice:type_name -> otg.PatternFlowIpv4Dst.Choice.Enum
	599,  // 707: otg.PatternFlowIpv4Dst.increment:type_name -> otg.PatternFlowIpv4DstCounter
	599,  // 708: otg.PatternFlowIpv4Dst.decrement:type_name -> otg.PatternFlowIpv4DstCounter
	155,  // 709: otg.PatternFlowIpv4PriorityRaw.choice:type_name -> otg.PatternFlowIpv4PriorityRaw.Choice.Enum
	601,  // 710: otg.PatternFlowIpv4PriorityRaw.increment:type_name -> otg.PatternFlowIpv4PriorityRawCounter
	601,  // 711: otg.PatternFlowIpv4PriorityRaw.decrement:type_name -> otg.PatternFlowIpv4PriorityRawCounter
	156,  // 712: otg.PatternFlowIpv4DscpPhb.choice:type_name -> otg.PatternFlowIpv4DscpPhb.Choice.Enum
	603,  // 713: otg.PatternFlowIpv4DscpPhb.increment:type_name -> otg.PatternFlowIpv4DscpPhbCounter
	603,  // 714: otg.PatternFlowIpv4DscpPhb.decrement:type_name -> otg.PatternFlowIpv4DscpPhbCounter
	157,  // 715: otg.PatternFlowIpv4DscpEcn.choice:type_name -> otg.PatternFlowIpv4DscpEcn.Choice.Enum
	605,  // 716: otg.PatternFlowIpv4DscpEcn.increment:type_name -> otg.PatternFlowIpv4DscpEcnCounter
	605,  // 717: otg.PatternFlowIpv4DscpEcn.decrement:type_name -> otg.PatternFlowIpv4DscpEcnCounter
	158,  // 718: otg.PatternFlowIpv4TosPrecedence.choice:type_name -> otg.PatternFlowIpv4TosPrecedence.Choice.Enum
	607,  // 719: otg.PatternFlowIpv4TosPrecedence.increment:type_name -> otg.PatternFlowIpv4TosPrecedenceCounter
	607,  // 720: otg.PatternFlowIpv4TosPrecedence.decrement:type_name -> otg.PatternFlowIpv4TosPrecedenceCounter
	159,  // 721: otg.PatternFlowIpv4TosDelay.choice:type_name -> otg.PatternFlowIpv4TosDelay.Choice.Enum
	609,  // 722: otg.PatternFlowIpv4TosDelay.increment:type_name -> otg.PatternFlowIpv4TosDelayCounter
	609,  // 723: otg.PatternFlowIpv4TosDelay.decrement:type_name -> otg.PatternFlowIpv4TosDelayCounter
	160,  // 724: otg.PatternFlowIpv4TosThroughput.choice:type_name -> otg.PatternFlowIpv4TosThroughput.Choice.Enum
	611,  // 725: otg.PatternFlowIpv4TosThroughput.increment:type_name -> otg.PatternFlowIpv4TosThroughputCounter
	611,  // 726: otg.PatternFlowIpv4TosThroughput.decrement:type_name -> otg.PatternFlowIpv4TosThroughputCounter
	161,  // 727: otg.PatternFlowIpv4TosReliability.choice:type_name -> otg.PatternFlowIpv4TosReliability.Choice.Enum
	613,  // 728: otg.PatternFlowIpv4TosReliability.increment:type_name -> otg.PatternFlowIpv4TosReliabilityCounter
	613,  // 729: otg.PatternFlowIpv4TosReliability.decrement:type_name -> otg.PatternFlowIpv4TosReliabilityCounter
	162,  // 730: otg.PatternFlowIpv4TosMonetary.choice:type_name -> otg.PatternFlowIpv4TosMonetary.Choice.Enum
	615,  // 731: otg.PatternFlowIpv4TosMonetary.increment:type_name -> otg.PatternFlowIpv4TosMonetaryCounter
	615,  // 732: otg.PatternFlowIpv4TosMonetary.decrement:type_name -> otg.PatternFlowIpv4TosMonetaryCounter
	163,  // 733: otg.PatternFlowIpv4TosUnused.choice:type_name -> otg.PatternFlowIpv4TosUnused.Choice.Enum
	617,  // 734: otg.PatternFlowIpv4TosUnused.increment:type_name -> otg.PatternFlowIpv4TosUnusedCounter
	617,  // 735: otg.PatternFlowIpv4TosUnused.decrement:type_name -> otg.PatternFlowIpv4TosUnusedCounter
	164,  // 736: otg.PatternFlowIpv6Version.choice:type_name -> otg.PatternFlowIpv6Version.Choice.Enum
	619,  // 737: otg.PatternFlowIpv6Version.increment:type_name -> otg.PatternFlowIpv6VersionCounter
	619,  // 738: otg.PatternFlowIpv6Version.decrement:type_name -> otg.PatternFlowIpv6VersionCounter
	165,  // 739: otg.PatternFlowIpv6TrafficClass.choice:type_name -> otg.PatternFlowIpv6TrafficClass.Choice.Enum
	621,  // 740: otg.PatternFlowIpv6TrafficClass.increment:type_name -> otg.PatternFlowIpv6TrafficClassCounter
	621,  // 741: otg.PatternFlowIpv6TrafficClass.decrement:type_name -> otg.PatternFlowIpv6TrafficClassCounter
	166,  // 742: otg.PatternFlowIpv6FlowLabel.choice:type_name -> otg.PatternFlowIpv6FlowLabel.Choice.Enum
	623,  // 743: otg.PatternFlowIpv6FlowLabel.increment:type_name -> otg.PatternFlowIpv6FlowLabelCounter
	623,  // 744: otg.PatternFlowIpv6FlowLabel.decrement:type_name -> otg.PatternFlowIpv6FlowLabelCounter
	167,  // 745: otg.PatternFlowIpv6PayloadLength.choice:type_name -> otg.PatternFlowIpv6PayloadLength.Choice.Enum
	625,  // 746: otg.PatternFlowIpv6PayloadLength.increment:type_name -> otg.PatternFlowIpv6PayloadLengthCounter
	625,  // 747: otg.PatternFlowIpv6PayloadLength.decrement:type_name -> otg.PatternFlowIpv6PayloadLengthCounter
	168,  // 748: otg.PatternFlowIpv6NextHeader.choice:type_name -> otg.PatternFlowIpv6NextHeader.Choice.Enum
	627,  // 749: otg.PatternFlowIpv6NextHeader.increment:type_name -> otg.PatternFlowIpv6NextHeaderCounter
	627,  // 750: otg.PatternFlowIpv6NextHeader.decrement:type_name -> otg.PatternFlowIpv6NextHeaderCounter
	169,  // 751: otg.PatternFlowIpv6HopLimit.choice:type_name -> otg.PatternFlowIpv6HopLimit.Choice.Enum
	629,  // 752: otg.PatternFlowIpv6HopLimit.increment:type_name -> otg.PatternFlowIpv6HopLimitCounter
	629,  // 753: otg.PatternFlowIpv6HopLimit.decrement:type_name -> otg.PatternFlowIpv6HopLimitCounter
	170,  // 754: otg.PatternFlowIpv6Src.choice:type_name -> otg.PatternFlowIpv6Src.Choice.Enum
	631,  // 755: otg.PatternFlowIpv6Src.increment:type_name -> otg.PatternFlowIpv6SrcCounter
	631,  // 756: otg.PatternFlowIpv6Src.decrement:type_name -> otg.PatternFlowIpv6SrcCounter
	171,  // 757: otg.PatternFlowIpv6Dst.choice:type_name -> otg.PatternFlowIpv6Dst.Choice.Enum
	633,  // 758: otg.PatternFlowIpv6Dst.increment:type_name -> otg.PatternFlowIpv6DstCounter
	633,  // 759: otg.PatternFlowIpv6Dst.decrement:type_name -> otg.PatternFlowIpv6DstCounter
	172,  // 760: otg.PatternFlowPfcPauseDst.choice:type_name -> otg.PatternFlowPfcPauseDst.Choice.Enum
	635,  // 761: otg.PatternFlowPfcPauseDst.increment:type_name -> otg.PatternFlowPfcPauseDstCounter
	635,  // 762: otg.PatternFlowPfcPauseDst.decrement:type_name -> otg.PatternFlowPfcPauseDstCounter
	173,  // 763: otg.PatternFlowPfcPauseSrc.choice:type_name -> otg.PatternFlowPfcPauseSrc.Choice.Enum
	637,  // 764: otg.PatternFlowPfcPauseSrc.increment:type_name -> otg.PatternFlowPfcPauseSrcCounter
	637,  // 765: otg.PatternFlowPfcPauseSrc.decrement:type_name -> otg.PatternFlowPfcPauseSrcCounter
	174,  // 766: otg.PatternFlowPfcPauseEtherType.choice:type_name -> otg.PatternFlowPfcPauseEtherType.Choice.Enum
	639,  // 767: otg.PatternFlowPfcPauseEtherType.increment:type_name -> otg.PatternFlowPfcPauseEtherTypeCounter
	639,  // 768: otg.PatternFlowPfcPauseEtherType.decrement:type_name -> otg.PatternFlowPfcPauseEtherTypeCounter
	175,  // 769: otg.PatternFlowPfcPauseControlOpCode.choice:type_name -> otg.PatternFlowPfcPauseControlOpCode.Choice.Enum
	641,  // 770: otg.PatternFlowPfcPauseControlOpCode.increment:type_name -> otg.PatternFlowPfcPauseControlOpCodeCounter
	641,  // 771: otg.PatternFlowPfcPauseControlOpCode.decrement:type_name -> otg.PatternFlowPfcPauseControlOpCodeCounter
	176,  // 772: otg.PatternFlowPfcPauseClassEnableVector.choice:type_name -> otg.PatternFlowPfcPauseClassEnableVector.Choice.Enum
	643,  // 773: otg.PatternFlowPfcPauseClassEnableVector.increment:type_name -> otg.PatternFlowPfcPauseClassEnableVectorCounter
	643,  // 774: otg.PatternFlowPfcPauseClassEnableVector.decrement:type_name -> otg.PatternFlowPfcPauseClassEnableVectorCounter
	177,  // 775: otg.PatternFlowPfcPausePauseClass0.choice:type_name -> otg.PatternFlowPfcPausePauseClass0.Choice.Enum
	645,  // 776: otg.PatternFlowPfcPausePauseClass0.increment:type_name -> otg.PatternFlowPfcPausePauseClass0Counter
	645,  // 777: otg.PatternFlowPfcPausePauseClass0.decrement:type_name -> otg.PatternFlowPfcPausePauseClass0Counter
	178,  // 778: otg.PatternFlowPfcPausePauseClass1.choice:type_name -> otg.PatternFlowPfcPausePauseClass1.Choice.Enum
	647,  // 779: otg.PatternFlowPfcPausePauseClass1.increment:type_name -> otg.PatternFlowPfcPausePauseClass1Counter
	647,  // 780: otg.PatternFlowPfcPausePauseClass1.decrement:type_name -> otg.PatternFlowPfcPausePauseClass1Counter
	179,  // 781: otg.PatternFlowPfcPausePauseClass2.choice:type_name -> otg.PatternFlowPfcPausePauseClass2.Choice.Enum
	649,  // 782: otg.PatternFlowPfcPausePauseClass2.increment:type_name -> otg.PatternFlowPfcPausePauseClass2Counter
	649,  // 783: otg.PatternFlowPfcPausePauseClass2.decrement:type_name -> otg.PatternFlowPfcPausePauseClass2Counter
	180,  // 784: otg.PatternFlowPfcPausePauseClass3.choice:type_name -> otg.PatternFlowPfcPausePauseClass3.Choice.Enum
	651,  // 785: otg.PatternFlowPfcPausePauseClass3.increment:type_name -> otg.PatternFlowPfcPausePauseClass3Counter
	651,  // 786: otg.PatternFlowPfcPausePauseClass3.decrement:type_name -> otg.PatternFlowPfcPausePauseClass3Counter
	181,  // 787: otg.PatternFlowPfcPausePauseClass4.choice:type_name -> otg.PatternFlowPfcPausePauseClass4.Choice.Enum
	653,  // 788: otg.PatternFlowPfcPausePauseClass4.increment:type_name -> otg.PatternFlowPfcPausePauseClass4Counter
	653,  // 789: otg.PatternFlowPfcPausePauseClass4.decrement:type_name -> otg.PatternFlowPfcPausePauseClass4Counter
	182,  // 790: otg.PatternFlowPfcPausePauseClass5.choice:type_name -> otg.PatternFlowPfcPausePauseClass5.Choice.Enum
	655,  // 791: otg.PatternFlowPfcPausePauseClass5.increment:type_name -> otg.PatternFlowPfcPausePauseClass5Counter
	655,  // 792: otg.PatternFlowPfcPausePauseClass5.decrement:type_name -> otg.PatternFlowPfcPausePauseClass5Counter
	183,  // 793: otg.PatternFlowPfcPausePauseClass6.choice:type_name -> otg.PatternFlowPfcPausePauseClass6.Choice.Enum
	657,  // 794: otg.PatternFlowPfcPausePauseClass6.increment:type_name -> otg.PatternFlowPfcPausePauseClass6Counter
	657,  // 795: otg.PatternFlowPfcPausePauseClass6.decrement:type_name -> otg.PatternFlowPfcPausePauseClass6Counter
	184,  // 796: otg.PatternFlowPfcPausePauseClass7.choice:type_name -> otg.PatternFlowPfcPausePauseClass7.Choice.Enum
	659,  // 797: otg.PatternFlowPfcPausePauseClass7.increment:type_name -> otg.PatternFlowPfcPausePauseClass7Counter
	659,  // 798: otg.PatternFlowPfcPausePauseClass7.decrement:type_name -> otg.PatternFlowPfcPausePauseClass7Counter
	185,  // 799: otg.PatternFlowEthernetPauseDst.choice:type_name -> otg.PatternFlowEthernetPauseDst.Choice.Enum
	661,  // 800: otg.PatternFlowEthernetPauseDst.increment:type_name -> otg.PatternFlowEthernetPauseDstCounter
	661,  // 801: otg.PatternFlowEthernetPauseDst.decrement:type_name -> otg.PatternFlowEthernetPauseDstCounter
	186,  // 802: otg.PatternFlowEthernetPauseSrc.choice:type_name -> otg.PatternFlowEthernetPauseSrc.Choice.Enum
	663,  // 803: otg.PatternFlowEthernetPauseSrc.increment:type_name -> otg.PatternFlowEthernetPauseSrcCounter
	663,  // 804: otg.PatternFlowEthernetPauseSrc.decrement:type_name -> otg.PatternFlowEthernetPauseSrcCounter
	187,  // 805: otg.PatternFlowEthernetPauseEtherType.choice:type_name -> otg.PatternFlowEthernetPauseEtherType.Choice.Enum
	665,  // 806: otg.PatternFlowEthernetPauseEtherType.increment:type_name -> otg.PatternFlowEthernetPauseEtherTypeCounter
	665,  // 807: otg.PatternFlowEthernetPauseEtherType.decrement:type_name -> otg.PatternFlowEthernetPauseEtherTypeCounter
	188,  // 808: otg.PatternFlowEthernetPauseControlOpCode.choice:type_name -> otg.PatternFlowEthernetPauseControlOpCode.Choice.Enum
	667,  // 809: otg.PatternFlowEthernetPauseControlOpCode.increment:type_name -> otg.PatternFlowEthernetPauseControlOpCodeCounter
	667,  // 810: otg.PatternFlowEthernetPauseControlOpCode.decrement:type_name -> otg.PatternFlowEthernetPauseControlOpCodeCounter
	189,  // 811: otg.PatternFlowEthernetPauseTime.choice:type_name -> otg.PatternFlowEthernetPauseTime.Choice.Enum
	669,  // 812: otg.PatternFlowEthernetPauseTime.increment:type_name -> otg.PatternFlowEthernetPauseTimeCounter
	669,  // 813: otg.PatternFlowEthernetPauseTime.decrement:type_name -> otg.PatternFlowEthernetPauseTimeCounter
	190,  // 814: otg.PatternFlowTcpSrcPort.choice:type_name -> otg.PatternFlowTcpSrcPort.Choice.Enum
	671,  // 815: otg.PatternFlowTcpSrcPort.increment:type_name -> otg.PatternFlowTcpSrcPortCounter
	671,  // 816: otg.PatternFlowTcpSrcPort.decrement:type_name -> otg.PatternFlowTcpSrcPortCounter
	191,  // 817: otg.PatternFlowTcpDstPort.choice:type_name -> otg.PatternFlowTcpDstPort.Choice.Enum
	673,  // 818: otg.PatternFlowTcpDstPort.increment:type_name -> otg.PatternFlowTcpDstPortCounter
	673,  // 819: otg.PatternFlowTcpDstPort.decrement:type_name -> otg.PatternFlowTcpDstPortCounter
	192,  // 820: otg.PatternFlowTcpSeqNum.choice:type_name -> otg.PatternFlowTcpSeqNum.Choice.Enum
	675,  // 821: otg.PatternFlowTcpSeqNum.increment:type_name -> otg.PatternFlowTcpSeqNumCounter
	675,  // 822: otg.PatternFlowTcpSeqNum.decrement:type_name -> otg.PatternFlowTcpSeqNumCounter
	193,  // 823: otg.PatternFlowTcpAckNum.choice:type_name -> otg.PatternFlowTcpAckNum.Choice.Enum
	677,  // 824: otg.PatternFlowTcpAckNum.increment:type_name -> otg.PatternFlowTcpAckNumCounter
	677,  // 825: otg.PatternFlowTcpAckNum.decrement:type_name -> otg.PatternFlowTcpAckNumCounter
	194,  // 826: otg.PatternFlowTcpDataOffset.choice:type_name -> otg.PatternFlowTcpDataOffset.Choice.Enum
	679,  // 827: otg.PatternFlowTcpDataOffset.increment:type_name -> otg.PatternFlowTcpDataOffsetCounter
	679,  // 828: otg.PatternFlowTcpDataOffset.decrement:type_name -> otg.PatternFlowTcpDataOffsetCounter
	195,  // 829: otg.PatternFlowTcpEcnNs.choice:type_name -> otg.PatternFlowTcpEcnNs.Choice.Enum
	681,  // 830: otg.PatternFlowTcpEcnNs.increment:type_name -> otg.PatternFlowTcpEcnNsCounter
	681,  // 831: otg.PatternFlowTcpEcnNs.decrement:type_name -> otg.PatternFlowTcpEcnNsCounter
	196,  // 832: otg.PatternFlowTcpEcnCwr.choice:type_name -> otg.PatternFlowTcpEcnCwr.Choice.Enum
	683,  // 833: otg.PatternFlowTcpEcnCwr.increment:type_name -> otg.PatternFlowTcpEcnCwrCounter
	683,  // 834: otg.PatternFlowTcpEcnCwr.decrement:type_name -> otg.PatternFlowTcpEcnCwrCounter
	197,  // 835: otg.PatternFlowTcpEcnEcho.choice:type_name -> otg.PatternFlowTcpEcnEcho.Choice.Enum
	685,  // 836: otg.PatternFlowTcpEcnEcho.increment:type_name -> otg.PatternFlowTcpEcnEchoCounter
	685,  // 837: otg.PatternFlowTcpEcnEcho.decrement:type_name -> otg.PatternFlowTcpEcnEchoCounter
	198,  // 838: otg.PatternFlowTcpCtlUrg.choice:type_name -> otg.PatternFlowTcpCtlUrg.Choice.Enum
	687,  // 839: otg.PatternFlowTcpCtlUrg.increment:type_name -> otg.PatternFlowTcpCtlUrgCounter
	687,  // 840: otg.PatternFlowTcpCtlUrg.decrement:type_name -> otg.PatternFlowTcpCtlUrgCounter
	199,  // 841: otg.PatternFlowTcpCtlAck.choice:type_name -> otg.PatternFlowTcpCtlAck.Choice.Enum
	689,  // 842: otg.PatternFlowTcpCtlAck.increment:type_name -> otg.PatternFlowTcpCtlAckCounter
	689,  // 843: otg.PatternFlowTcpCtlAck.decrement:type_name -> otg.PatternFlowTcpCtlAckCounter
	200,  // 844: otg.PatternFlowTcpCtlPsh.choice:type_name -> otg.PatternFlowTcpCtlPsh.Choice.Enum
	691,  // 845: otg.PatternFlowTcpCtlPsh.increment:type_name -> otg.PatternFlowTcpCtlPshCounter
	691,  // 846: otg.PatternFlowTcpCtlPsh.decrement:type_name -> otg.PatternFlowTcpCtlPshCounter
	201,  // 847: otg.PatternFlowTcpCtlRst.choice:type_name -> otg.PatternFlowTcpCtlRst.Choice.Enum
	693,  // 848: otg.PatternFlowTcpCtlRst.increment:type_name -> otg.PatternFlowTcpCtlRstCounter
	693,  // 849: otg.PatternFlowTcpCtlRst.decrement:type_name -> otg.PatternFlowTcpCtlRstCounter
	202,  // 850: otg.PatternFlowTcpCtlSyn.choice:type_name -> otg.PatternFlowTcpCtlSyn.Choice.Enum
	695,  // 851: otg.PatternFlowTcpCtlSyn.increment:type_name -> otg.PatternFlowTcpCtlSynCounter
	695,  // 852: otg.PatternFlowTcpCtlSyn.decrement:type_name -> otg.PatternFlowTcpCtlSynCounter
	203,  // 853: otg.PatternFlowTcpCtlFin.choice:type_name -> otg.PatternFlowTcpCtlFin.Choice.Enum
	697,  // 854: otg.PatternFlowTcpCtlFin.increment:type_name -> otg.PatternFlowTcpCtlFinCounter
	697,  // 855: otg.PatternFlowTcpCtlFin.decrement:type_name -> otg.PatternFlowTcpCtlFinCounter
	204,  // 856: otg.PatternFlowTcpWindow.choice:type_name -> otg.PatternFlowTcpWindow.Choice.Enum
	699,  // 857: otg.PatternFlowTcpWindow.increment:type_name -> otg.PatternFlowTcpWindowCounter
	699,  // 858: otg.PatternFlowTcpWindow.decrement:type_name -> otg.PatternFlowTcpWindowCounter
	205,  // 859: otg.PatternFlowUdpSrcPort.choice:type_name -> otg.PatternFlowUdpSrcPort.Choice.Enum
	701,  // 860: otg.PatternFlowUdpSrcPort.increment:type_name -> otg.PatternFlowUdpSrcPortCounter
	701,  // 861: otg.PatternFlowUdpSrcPort.decrement:type_name -> otg.PatternFlowUdpSrcPortCounter
	206,  // 862: otg.PatternFlowUdpDstPort.choice:type_name -> otg.PatternFlowUdpDstPort.Choice.Enum
	703,  // 863: otg.PatternFlowUdpDstPort.increment:type_name -> otg.PatternFlowUdpDstPortCounter
	703,  // 864: otg.PatternFlowUdpDstPort.decrement:type_name -> otg.PatternFlowUdpDstPortCounter
	207,  // 865: otg.PatternFlowUdpLength.choice:type_name -> otg.PatternFlowUdpLength.Choice.Enum
	705,  // 866: otg.PatternFlowUdpLength.increment:type_name -> otg.PatternFlowUdpLengthCounter
	705,  // 867: otg.PatternFlowUdpLength.decrement:type_name -> otg.PatternFlowUdpLengthCounter
	208,  // 868: otg.PatternFlowUdpChecksum.choice:type_name -> otg.PatternFlowUdpChecksum.Choice.Enum
	209,  // 869: otg.PatternFlowUdpChecksum.generated:type_name -> otg.PatternFlowUdpChecksum.Generated.Enum
	210,  // 870: otg.PatternFlowGreChecksumPresent.choice:type_name -> otg.PatternFlowGreChecksumPresent.Choice.Enum
	708,  // 871: otg.PatternFlowGreChecksumPresent.increment:type_name -> otg.PatternFlowGreChecksumPresentCounter
	708,  // 872: otg.PatternFlowGreChecksumPresent.decrement:type_name -> otg.PatternFlowGreChecksumPresentCounter
	211,  // 873: otg.PatternFlowGreReserved0.choice:type_name -> otg.PatternFlowGreReserved0.Choice.Enum
	710,  // 874: otg.PatternFlowGreReserved0.increment:type_name -> otg.PatternFlowGreReserved0Counter
	710,  // 875: otg.PatternFlowGreReserved0.decrement:type_name -> otg.PatternFlowGreReserved0Counter
	212,  // 876: otg.PatternFlowGreVersion.choice:type_name -> otg.PatternFlowGreVersion.Choice.Enum
	712,  // 877: otg.PatternFlowGreVersion.increment:type_name -> otg.PatternFlowGreVersionCounter
	712,  // 878: otg.PatternFlowGreVersion.decrement:type_name -> otg.PatternFlowGreVersionCounter
	213,  // 879: otg.PatternFlowGreProtocol.choice:type_name -> otg.PatternFlowGreProtocol.Choice.Enum
	714,  // 880: otg.PatternFlowGreProtocol.increment:type_name -> otg.PatternFlowGreProtocolCounter
	714,  // 881: otg.PatternFlowGreProtocol.decrement:type_name -> otg.PatternFlowGreProtocolCounter
	214,  // 882: otg.PatternFlowGreChecksum.choice:type_name -> otg.PatternFlowGreChecksum.Choice.Enum
	215,  // 883: otg.PatternFlowGreChecksum.generated:type_name -> otg.PatternFlowGreChecksum.Generated.Enum
	216,  // 884: otg.PatternFlowGreReserved1.choice:type_name -> otg.PatternFlowGreReserved1.Choice.Enum
	717,  // 885: otg.PatternFlowGreReserved1.increment:type_name -> otg.PatternFlowGreReserved1Counter
	717,  // 886: otg.PatternFlowGreReserved1.decrement:type_name -> otg.PatternFlowGreReserved1Counter
	217,  // 887: otg.PatternFlowGtpv1Version.choice:type_name -> otg.PatternFlowGtpv1Version.Choice.Enum
	719,  // 888: otg.PatternFlowGtpv1Version.increment:type_name -> otg.PatternFlowGtpv1VersionCounter
	719,  // 889: otg.PatternFlowGtpv1Version.decrement:type_name -> otg.PatternFlowGtpv1VersionCounter
	218,  // 890: otg.PatternFlowGtpv1ProtocolType.choice:type_name -> otg.PatternFlowGtpv1ProtocolType.Choice.Enum
	721,  // 891: otg.PatternFlowGtpv1ProtocolType.increment:type_name -> otg.PatternFlowGtpv1ProtocolTypeCounter
	721,  // 892: otg.PatternFlowGtpv1ProtocolType.decrement:type_name -> otg.PatternFlowGtpv1ProtocolTypeCounter
	219,  // 893: otg.PatternFlowGtpv1Reserved.choice:type_name -> otg.PatternFlowGtpv1Reserved.Choice.Enum
	723,  // 894: otg.PatternFlowGtpv1Reserved.increment:type_name -> otg.PatternFlowGtpv1ReservedCounter
	723,  // 895: otg.PatternFlowGtpv1Reserved.decrement:type_name -> otg.PatternFlowGtpv1ReservedCounter
	220,  // 896: otg.PatternFlowGtpv1EFlag.choice:type_name -> otg.PatternFlowGtpv1EFlag.Choice.Enum
	725,  // 897: otg.PatternFlowGtpv1EFlag.increment:type_name -> otg.PatternFlowGtpv1EFlagCounter
	725,  // 898: otg.PatternFlowGtpv1EFlag.decrement:type_name -> otg.PatternFlowGtpv1EFlagCounter
	221,  // 899: otg.PatternFlowGtpv1SFlag.choice:type_name -> otg.PatternFlowGtpv1SFlag.Choice.Enum
	727,  // 900: otg.PatternFlowGtpv1SFlag.increment:type_name -> otg.PatternFlowGtpv1SFlagCounter
	727,  // 901: otg.PatternFlowGtpv1SFlag.decrement:type_name -> otg.PatternFlowGtpv1SFlagCounter
	222,  // 902: otg.PatternFlowGtpv1PnFlag.choice:type_name -> otg.PatternFlowGtpv1PnFlag.Choice.Enum
	729,  // 903: otg.PatternFlowGtpv1PnFlag.increment:type_name -> otg.PatternFlowGtpv1PnFlagCounter
	729,  // 904: otg.PatternFlowGtpv1PnFlag.decrement:type_name -> otg.PatternFlowGtpv1PnFlagCounter
	223,  // 905: otg.PatternFlowGtpv1MessageType.choice:type_name -> otg.PatternFlowGtpv1MessageType.Choice.Enum
	731,  // 906: otg.PatternFlowGtpv1MessageType.increment:type_name -> otg.PatternFlowGtpv1MessageTypeCounter
	731,  // 907: otg.PatternFlowGtpv1MessageType.decrement:type_name -> otg.PatternFlowGtpv1MessageTypeCounter
	224,  // 908: otg.PatternFlowGtpv1MessageLength.choice:type_name -> otg.PatternFlowGtpv1MessageLength.Choice.Enum
	733,  // 909: otg.PatternFlowGtpv1MessageLength.increment:type_name -> otg.PatternFlowGtpv1MessageLengthCounter
	733,  // 910: otg.PatternFlowGtpv1MessageLength.decrement:type_name -> otg.PatternFlowGtpv1MessageLengthCounter
	225,  // 911: otg.PatternFlowGtpv1Teid.choice:type_name -> otg.PatternFlowGtpv1Teid.Choice.Enum
	735,  // 912: otg.PatternFlowGtpv1Teid.increment:type_name -> otg.PatternFlowGtpv1TeidCounter
	735,  // 913: otg.PatternFlowGtpv1Teid.decrement:type_name -> otg.PatternFlowGtpv1TeidCounter
	226,  // 914: otg.PatternFlowGtpv1SquenceNumber.choice:type_name -> otg.PatternFlowGtpv1SquenceNumber.Choice.Enum
	737,  // 915: otg.PatternFlowGtpv1SquenceNumber.increment:type_name -> otg.PatternFlowGtpv1SquenceNumberCounter
	737,  // 916: otg.PatternFlowGtpv1SquenceNumber.decrement:type_name -> otg.PatternFlowGtpv1SquenceNumberCounter
	227,  // 917: otg.PatternFlowGtpv1NPduNumber.choice:type_name -> otg.PatternFlowGtpv1NPduNumber.Choice.Enum
	739,  // 918: otg.PatternFlowGtpv1NPduNumber.increment:type_name -> otg.PatternFlowGtpv1NPduNumberCounter
	739,  // 919: otg.PatternFlowGtpv1NPduNumber.decrement:type_name -> otg.PatternFlowGtpv1NPduNumberCounter
	228,  // 920: otg.PatternFlowGtpv1NextExtensionHeaderType.choice:type_name -> otg.PatternFlowGtpv1NextExtensionHeaderType.Choice.Enum
	741,  // 921: otg.PatternFlowGtpv1NextExtensionHeaderType.increment:type_name -> otg.PatternFlowGtpv1NextExtensionHeaderTypeCounter
	741,  // 922: otg.PatternFlowGtpv1NextExtensionHeaderType.decrement:type_name -> otg.PatternFlowGtpv1NextExtensionHeaderTypeCounter
	229,  // 923: otg.PatternFlowGtpExtensionExtensionLength.choice:type_name -> otg.PatternFlowGtpExtensionExtensionLength.Choice.Enum
	743,  // 924: otg.PatternFlowGtpExtensionExtensionLength.increment:type_name -> otg.PatternFlowGtpExtensionExtensionLengthCounter
	743,  // 925: otg.PatternFlowGtpExtensionExtensionLength.decrement:type_name -> otg.PatternFlowGtpExtensionExtensionLengthCounter
	230,  // 926: otg.PatternFlowGtpExtensionContents.choice:type_name -> otg.PatternFlowGtpExtensionContents.Choice.Enum
	745,  // 927: otg.PatternFlowGtpExtensionContents.increment:type_name -> otg.PatternFlowGtpExtensionContentsCounter
	745,  // 928: otg.PatternFlowGtpExtensionContents.decrement:type_name -> otg.PatternFlowGtpExtensionContentsCounter
	231,  // 929: otg.PatternFlowGtpExtensionNextExtensionHeader.choice:type_name -> otg.PatternFlowGtpExtensionNextExtensionHeader.Choice.Enum
	747,  // 930: otg.PatternFlowGtpExtensionNextExtensionHeader.increment:type_name -> otg.PatternFlowGtpExtensionNextExtensionHeaderCounter
	747,  // 931: otg.PatternFlowGtpExtensionNextExtensionHeader.decrement:type_name -> otg.PatternFlowGtpExtensionNextExtensionHeaderCounter
	232,  // 932: otg.PatternFlowGtpv2Version.choice:type_name -> otg.PatternFlowGtpv2Version.Choice.Enum
	749,  // 933: otg.PatternFlowGtpv2Version.increment:type_name -> otg.PatternFlowGtpv2VersionCounter
	749,  // 934: otg.PatternFlowGtpv2Version.decrement:type_name -> otg.PatternFlowGtpv2VersionCounter
	233,  // 935: otg.PatternFlowGtpv2PiggybackingFlag.choice:type_name -> otg.PatternFlowGtpv2PiggybackingFlag.Choice.Enum
	751,  // 936: otg.PatternFlowGtpv2PiggybackingFlag.increment:type_name -> otg.PatternFlowGtpv2PiggybackingFlagCounter
	751,  // 937: otg.PatternFlowGtpv2PiggybackingFlag.decrement:type_name -> otg.PatternFlowGtpv2PiggybackingFlagCounter
	234,  // 938: otg.PatternFlowGtpv2TeidFlag.choice:type_name -> otg.PatternFlowGtpv2TeidFlag.Choice.Enum
	753,  // 939: otg.PatternFlowGtpv2TeidFlag.increment:type_name -> otg.PatternFlowGtpv2TeidFlagCounter
	753,  // 940: otg.PatternFlowGtpv2TeidFlag.decrement:type_name -> otg.PatternFlowGtpv2TeidFlagCounter
	235,  // 941: otg.PatternFlowGtpv2Spare1.choice:type_name -> otg.PatternFlowGtpv2Spare1.Choice.Enum
	755,  // 942: otg.PatternFlowGtpv2Spare1.increment:type_name -> otg.PatternFlowGtpv2Spare1Counter
	755,  // 943: otg.PatternFlowGtpv2Spare1.decrement:type_name -> otg.PatternFlowGtpv2Spare1Counter
	236,  // 944: otg.PatternFlowGtpv2MessageType.choice:type_name -> otg.PatternFlowGtpv2MessageType.Choice.Enum
	757,  // 945: otg.PatternFlowGtpv2MessageType.increment:type_name -> otg.PatternFlowGtpv2MessageTypeCounter
	757,  // 946: otg.PatternFlowGtpv2MessageType.decrement:type_name -> otg.PatternFlowGtpv2MessageTypeCounter
	237,  // 947: otg.PatternFlowGtpv2MessageLength.choice:type_name -> otg.PatternFlowGtpv2MessageLength.Choice.Enum
	759,  // 948: otg.PatternFlowGtpv2MessageLength.increment:type_name -> otg.PatternFlowGtpv2MessageLengthCounter
	759,  // 949: otg.PatternFlowGtpv2MessageLength.decrement:type_name -> otg.PatternFlowGtpv2MessageLengthCounter
	238,  // 950: otg.PatternFlowGtpv2Teid.choice:type_name -> otg.PatternFlowGtpv2Teid.Choice.Enum
	761,  // 951: otg.PatternFlowGtpv2Teid.increment:type_name -> otg.PatternFlowGtpv2TeidCounter
	761,  // 952: otg.PatternFlowGtpv2Teid.decrement:type_name -> otg.PatternFlowGtpv2TeidCounter
	239,  // 953: otg.PatternFlowGtpv2SequenceNumber.choice:type_name -> otg.PatternFlowGtpv2SequenceNumber.Choice.Enum
	763,  // 954: otg.PatternFlowGtpv2SequenceNumber.increment:type_name -> otg.PatternFlowGtpv2SequenceNumberCounter
	763,  // 955: otg.PatternFlowGtpv2SequenceNumber.decrement:type_name -> otg.PatternFlowGtpv2SequenceNumberCounter
	240,  // 956: otg.PatternFlowGtpv2Spare2.choice:type_name -> otg.PatternFlowGtpv2Spare2.Choice.Enum
	765,  // 957: otg.PatternFlowGtpv2Spare2.increment:type_name -> otg.PatternFlowGtpv2Spare2Counter
	765,  // 958: otg.PatternFlowGtpv2Spare2.decrement:type_name -> otg.PatternFlowGtpv2Spare2Counter
	241,  // 959: otg.PatternFlowArpHardwareType.choice:type_name -> otg.PatternFlowArpHardwareType.Choice.Enum
	767,  // 960: otg.PatternFlowArpHardwareType.increment:type_name -> otg.PatternFlowArpHardwareTypeCounter
	767,  // 961: otg.PatternFlowArpHardwareType.decrement:type_name -> otg.PatternFlowArpHardwareTypeCounter
	242,  // 962: otg.PatternFlowArpProtocolType.choice:type_name -> otg.PatternFlowArpProtocolType.Choice.Enum
	769,  // 963: otg.PatternFlowArpProtocolType.increment:type_name -> otg.PatternFlowArpProtocolTypeCounter
	769,  // 964: otg.PatternFlowArpProtocolType.decrement:type_name -> otg.PatternFlowArpProtocolTypeCounter
	243,  // 965: otg.PatternFlowArpHardwareLength.choice:type_name -> otg.PatternFlowArpHardwareLength.Choice.Enum
	771,  // 966: otg.PatternFlowArpHardwareLength.increment:type_name -> otg.PatternFlowArpHardwareLengthCounter
	771,  // 967: otg.PatternFlowArpHardwareLength.decrement:type_name -> otg.PatternFlowArpHardwareLengthCounter
	244,  // 968: otg.PatternFlowArpProtocolLength.choice:type_name -> otg.PatternFlowArpProtocolLength.Choice.Enum
	773,  // 969: otg.PatternFlowArpProtocolLength.increment:type_name -> otg.PatternFlowArpProtocolLengthCounter
	773,  // 970: otg.PatternFlowArpProtocolLength.decrement:type_name -> otg.PatternFlowArpProtocolLengthCounter
	245,  // 971: otg.PatternFlowArpOperation.choice:type_name -> otg.PatternFlowArpOperation.Choice.Enum
	775,  // 972: otg.PatternFlowArpOperation.increment:type_name -> otg.PatternFlowArpOperationCounter
	775,  // 973: otg.PatternFlowArpOperation.decrement:type_name -> otg.PatternFlowArpOperationCounter
	246,  // 974: otg.PatternFlowArpSenderHardwareAddr.choice:type_name -> otg.PatternFlowArpSenderHardwareAddr.Choice.Enum
	777,  // 975: otg.PatternFlowArpSenderHardwareAddr.increment:type_name -> otg.PatternFlowArpSenderHardwareAddrCounter
	777,  // 976: otg.PatternFlowArpSenderHardwareAddr.decrement:type_name -> otg.PatternFlowArpSenderHardwareAddrCounter
	247,  // 977: otg.PatternFlowArpSenderProtocolAddr.choice:type_name -> otg.PatternFlowArpSenderProtocolAddr.Choice.Enum
	779,  // 978: otg.PatternFlowArpSenderProtocolAddr.increment:type_name -> otg.PatternFlowArpSenderProtocolAddrCounter
	779,  // 979: otg.PatternFlowArpSenderProtocolAddr.decrement:type_name -> otg.PatternFlowArpSenderProtocolAddrCounter
	248,  // 980: otg.PatternFlowArpTargetHardwareAddr.choice:type_name -> otg.PatternFlowArpTargetHardwareAddr.Choice.Enum
	781,  // 981: otg.PatternFlowArpTargetHardwareAddr.increment:type_name -> otg.PatternFlowArpTargetHardwareAddrCounter
	781,  // 982: otg.PatternFlowArpTargetHardwareAddr.decrement:type_name -> otg.PatternFlowArpTargetHardwareAddrCounter
	249,  // 983: otg.PatternFlowArpTargetProtocolAddr.choice:type_name -> otg.PatternFlowArpTargetProtocolAddr.Choice.Enum
	783,  // 984: otg.PatternFlowArpTargetProtocolAddr.increment:type_name -> otg.PatternFlowArpTargetProtocolAddrCounter
	783,  // 985: otg.PatternFlowArpTargetProtocolAddr.decrement:type_name -> otg.PatternFlowArpTargetProtocolAddrCounter
	250,  // 986: otg.PatternFlowIcmpEchoType.choice:type_name -> otg.PatternFlowIcmpEchoType.Choice.Enum
	785,  // 987: otg.PatternFlowIcmpEchoType.increment:type_name -> otg.PatternFlowIcmpEchoTypeCounter
	785,  // 988: otg.PatternFlowIcmpEchoType.decrement:type_name -> otg.PatternFlowIcmpEchoTypeCounter
	251,  // 989: otg.PatternFlowIcmpEchoCode.choice:type_name -> otg.PatternFlowIcmpEchoCode.Choice.Enum
	787,  // 990: otg.PatternFlowIcmpEchoCode.increment:type_name -> otg.PatternFlowIcmpEchoCodeCounter
	787,  // 991: otg.PatternFlowIcmpEchoCode.decrement:type_name -> otg.PatternFlowIcmpEchoCodeCounter
	252,  // 992: otg.PatternFlowIcmpEchoChecksum.choice:type_name -> otg.PatternFlowIcmpEchoChecksum.Choice.Enum
	253,  // 993: otg.PatternFlowIcmpEchoChecksum.generated:type_name -> otg.PatternFlowIcmpEchoChecksum.Generated.Enum
	254,  // 994: otg.PatternFlowIcmpEchoIdentifier.choice:type_name -> otg.PatternFlowIcmpEchoIdentifier.Choice.Enum
	790,  // 995: otg.PatternFlowIcmpEchoIdentifier.increment:type_name -> otg.PatternFlowIcmpEchoIdentifierCounter
	790,  // 996: otg.PatternFlowIcmpEchoIdentifier.decrement:type_name -> otg.PatternFlowIcmpEchoIdentifierCounter
	255,  // 997: otg.PatternFlowIcmpEchoSequenceNumber.choice:type_name -> otg.PatternFlowIcmpEchoSequenceNumber.Choice.Enum
	792,  // 998: otg.PatternFlowIcmpEchoSequenceNumber.increment:type_name -> otg.PatternFlowIcmpEchoSequenceNumberCounter
	792,  // 999: otg.PatternFlowIcmpEchoSequenceNumber.decrement:type_name -> otg.PatternFlowIcmpEchoSequenceNumberCounter
	256,  // 1000: otg.PatternFlowIcmpCommonChecksum.choice:type_name -> otg.PatternFlowIcmpCommonChecksum.Choice.Enum
	257,  // 1001: otg.PatternFlowIcmpCommonChecksum.generated:type_name -> otg.PatternFlowIcmpCommonChecksum.Generated.Enum
	258,  // 1002: otg.PatternFlowIcmpNextFieldsIdentifier.choice:type_name -> otg.PatternFlowIcmpNextFieldsIdentifier.Choice.Enum
	795,  // 1003: otg.PatternFlowIcmpNextFieldsIdentifier.increment:type_name -> otg.PatternFlowIcmpNextFieldsIdentifierCounter
	795,  // 1004: otg.PatternFlowIcmpNextFieldsIdentifier.decrement:type_name -> otg.PatternFlowIcmpNextFieldsIdentifierCounter
	259,  // 1005: otg.PatternFlowIcmpNextFieldsSequenceNumber.choice:type_name -> otg.PatternFlowIcmpNextFieldsSequenceNumber.Choice.Enum
	797,  // 1006: otg.PatternFlowIcmpNextFieldsSequenceNumber.increment:type_name -> otg.PatternFlowIcmpNextFieldsSequenceNumberCounter
	797,  // 1007: otg.PatternFlowIcmpNextFieldsSequenceNumber.decrement:type_name -> otg.PatternFlowIcmpNextFieldsSequenceNumberCounter
	260,  // 1008: otg.PatternFlowIcmpv6EchoType.choice:type_name -> otg.PatternFlowIcmpv6EchoType.Choice.Enum
	799,  // 1009: otg.PatternFlowIcmpv6EchoType.increment:type_name -> otg.PatternFlowIcmpv6EchoTypeCounter
	799,  // 1010: otg.PatternFlowIcmpv6EchoType.decrement:type_name -> otg.PatternFlowIcmpv6EchoTypeCounter
	261,  // 1011: otg.PatternFlowIcmpv6EchoCode.choice:type_name -> otg.PatternFlowIcmpv6EchoCode.Choice.Enum
	801,  // 1012: otg.PatternFlowIcmpv6EchoCode.increment:type_name -> otg.PatternFlowIcmpv6EchoCodeCounter
	801,  // 1013: otg.PatternFlowIcmpv6EchoCode.decrement:type_name -> otg.PatternFlowIcmpv6EchoCodeCounter
	262,  // 1014: otg.PatternFlowIcmpv6EchoIdentifier.choice:type_name -> otg.PatternFlowIcmpv6EchoIdentifier.Choice.Enum
	803,  // 1015: otg.PatternFlowIcmpv6EchoIdentifier.increment:type_name -> otg.PatternFlowIcmpv6EchoIdentifierCounter
	803,  // 1016: otg.PatternFlowIcmpv6EchoIdentifier.decrement:type_name -> otg.PatternFlowIcmpv6EchoIdentifierCounter
	263,  // 1017: otg.PatternFlowIcmpv6EchoSequenceNumber.choice:type_name -> otg.PatternFlowIcmpv6EchoSequenceNumber.Choice.Enum
	805,  // 1018: otg.PatternFlowIcmpv6EchoSequenceNumber.increment:type_name -> otg.PatternFlowIcmpv6EchoSequenceNumberCounter
	805,  // 1019: otg.PatternFlowIcmpv6EchoSequenceNumber.decrement:type_name -> otg.PatternFlowIcmpv6EchoSequenceNumberCounter
	264,  // 1020: otg.PatternFlowIcmpv6EchoChecksum.choice:type_name -> otg.PatternFlowIcmpv6EchoChecksum.Choice.Enum
	265,  // 1021: otg.PatternFlowIcmpv6EchoChecksum.generated:type_name -> otg.PatternFlowIcmpv6EchoChecksum.Generated.Enum
	266,  // 1022: otg.PatternFlowIcmpv6CommonChecksum.choice:type_name -> otg.PatternFlowIcmpv6CommonChecksum.Choice.Enum
	267,  // 1023: otg.PatternFlowIcmpv6CommonChecksum.generated:type_name -> otg.PatternFlowIcmpv6CommonChecksum.Generated.Enum
	268,  // 1024: otg.PatternFlowPppAddress.choice:type_name -> otg.PatternFlowPppAddress.Choice.Enum
	809,  // 1025: otg.PatternFlowPppAddress.increment:type_name -> otg.PatternFlowPppAddressCounter
	809,  // 1026: otg.PatternFlowPppAddress.decrement:type_name -> otg.PatternFlowPppAddressCounter
	269,  // 1027: otg.PatternFlowPppControl.choice:type_name -> otg.PatternFlowPppControl.Choice.Enum
	811,  // 1028: otg.PatternFlowPppControl.increment:type_name -> otg.PatternFlowPppControlCounter
	811,  // 1029: otg.PatternFlowPppControl.decrement:type_name -> otg.PatternFlowPppControlCounter
	270,  // 1030: otg.PatternFlowPppProtocolType.choice:type_name -> otg.PatternFlowPppProtocolType.Choice.Enum
	813,  // 1031: otg.PatternFlowPppProtocolType.increment:type_name -> otg.PatternFlowPppProtocolTypeCounter
	813,  // 1032: otg.PatternFlowPppProtocolType.decrement:type_name -> otg.PatternFlowPppProtocolTypeCounter
	271,  // 1033: otg.PatternFlowIgmpv1Version.choice:type_name -> otg.PatternFlowIgmpv1Version.Choice.Enum
	815,  // 1034: otg.PatternFlowIgmpv1Version.increment:type_name -> otg.PatternFlowIgmpv1VersionCounter
	815,  // 1035: otg.PatternFlowIgmpv1Version.decrement:type_name -> otg.PatternFlowIgmpv1VersionCounter
	272,  // 1036: otg.PatternFlowIgmpv1Type.choice:type_name -> otg.PatternFlowIgmpv1Type.Choice.Enum
	817,  // 1037: otg.PatternFlowIgmpv1Type.increment:type_name -> otg.PatternFlowIgmpv1TypeCounter
	817,  // 1038: otg.PatternFlowIgmpv1Type.decrement:type_name -> otg.PatternFlowIgmpv1TypeCounter
	273,  // 1039: otg.PatternFlowIgmpv1Unused.choice:type_name -> otg.PatternFlowIgmpv1Unused.Choice.Enum
	819,  // 1040: otg.PatternFlowIgmpv1Unused.increment:type_name -> otg.PatternFlowIgmpv1UnusedCounter
	819,  // 1041: otg.PatternFlowIgmpv1Unused.decrement:type_name -> otg.PatternFlowIgmpv1UnusedCounter
	274,  // 1042: otg.PatternFlowIgmpv1Checksum.choice:type_name -> otg.PatternFlowIgmpv1Checksum.Choice.Enum
	275,  // 1043: otg.PatternFlowIgmpv1Checksum.generated:type_name -> otg.PatternFlowIgmpv1Checksum.Generated.Enum
	276,  // 1044: otg.PatternFlowIgmpv1GroupAddress.choice:type_name -> otg.PatternFlowIgmpv1GroupAddress.Choice.Enum
	822,  // 1045: otg.PatternFlowIgmpv1GroupAddress.increment:type_name -> otg.PatternFlowIgmpv1GroupAddressCounter
	822,  // 1046: otg.PatternFlowIgmpv1GroupAddress.decrement:type_name -> otg.PatternFlowIgmpv1GroupAddressCounter
	277,  // 1047: otg.PatternFlowMplsLabel.choice:type_name -> otg.PatternFlowMplsLabel.Choice.Enum
	824,  // 1048: otg.PatternFlowMplsLabel.increment:type_name -> otg.PatternFlowMplsLabelCounter
	824,  // 1049: otg.PatternFlowMplsLabel.decrement:type_name -> otg.PatternFlowMplsLabelCounter
	278,  // 1050: otg.PatternFlowMplsTrafficClass.choice:type_name -> otg.PatternFlowMplsTrafficClass.Choice.Enum
	826,  // 1051: otg.PatternFlowMplsTrafficClass.increment:type_name -> otg.PatternFlowMplsTrafficClassCounter
	826,  // 1052: otg.PatternFlowMplsTrafficClass.decrement:type_name -> otg.PatternFlowMplsTrafficClassCounter
	279,  // 1053: otg.PatternFlowMplsBottomOfStack.choice:type_name -> otg.PatternFlowMplsBottomOfStack.Choice.Enum
	828,  // 1054: otg.PatternFlowMplsBottomOfStack.increment:type_name -> otg.PatternFlowMplsBottomOfStackCounter
	828,  // 1055: otg.PatternFlowMplsBottomOfStack.decrement:type_name -> otg.PatternFlowMplsBottomOfStackCounter
	280,  // 1056: otg.PatternFlowMplsTimeToLive.choice:type_name -> otg.PatternFlowMplsTimeToLive.Choice.Enum
	830,  // 1057: otg.PatternFlowMplsTimeToLive.increment:type_name -> otg.PatternFlowMplsTimeToLiveCounter
	830,  // 1058: otg.PatternFlowMplsTimeToLive.decrement:type_name -> otg.PatternFlowMplsTimeToLiveCounter
	470,  // 1059: otg.Success.response_warning:type_name -> otg.ResponseWarning
	469,  // 1060: otg.BadRequest.response_error:type_name -> otg.ResponseError
	469,  // 1061: otg.InternalServerError.response_error:type_name -> otg.ResponseError
	281,  // 1062: otg.SetConfigRequest.config:type_name -> otg.Config
	470,  // 1063: otg.SetConfigResponse.status_code_200:type_name -> otg.ResponseWarning
	469,  // 1064: otg.SetConfigResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1065: otg.SetConfigResponse.status_code_500:type_name -> otg.ResponseError
	281,  // 1066: otg.GetConfigResponse.status_code_200:type_name -> otg.Config
	469,  // 1067: otg.GetConfigResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1068: otg.GetConfigResponse.status_code_500:type_name -> otg.ResponseError
	472,  // 1069: otg.SetTransmitStateRequest.transmit_state:type_name -> otg.TransmitState
	470,  // 1070: otg.SetTransmitStateResponse.status_code_200:type_name -> otg.ResponseWarning
	469,  // 1071: otg.SetTransmitStateResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1072: otg.SetTransmitStateResponse.status_code_500:type_name -> otg.ResponseError
	471,  // 1073: otg.SetLinkStateRequest.link_state:type_name -> otg.LinkState
	470,  // 1074: otg.SetLinkStateResponse.status_code_200:type_name -> otg.ResponseWarning
	469,  // 1075: otg.SetLinkStateResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1076: otg.SetLinkStateResponse.status_code_500:type_name -> otg.ResponseError
	473,  // 1077: otg.SetCaptureStateRequest.capture_state:type_name -> otg.CaptureState
	470,  // 1078: otg.SetCaptureStateResponse.status_code_200:type_name -> otg.ResponseWarning
	469,  // 1079: otg.SetCaptureStateResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1080: otg.SetCaptureStateResponse.status_code_500:type_name -> otg.ResponseError
	474,  // 1081: otg.UpdateFlowsRequest.flows_update:type_name -> otg.FlowsUpdate
	281,  // 1082: otg.UpdateFlowsResponse.status_code_200:type_name -> otg.Config
	469,  // 1083: otg.UpdateFlowsResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1084: otg.UpdateFlowsResponse.status_code_500:type_name -> otg.ResponseError
	475,  // 1085: otg.SetRouteStateRequest.route_state:type_name -> otg.RouteState
	470,  // 1086: otg.SetRouteStateResponse.status_code_200:type_name -> otg.ResponseWarning
	469,  // 1087: otg.SetRouteStateResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1088: otg.SetRouteStateResponse.status_code_500:type_name -> otg.ResponseError
	476,  // 1089: otg.SendPingRequest.ping_request:type_name -> otg.PingRequest
	482,  // 1090: otg.SendPingResponse.status_code_200:type_name -> otg.PingResponse
	469,  // 1091: otg.SendPingResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1092: otg.SendPingResponse.status_code_500:type_name -> otg.ResponseError
	477,  // 1093: otg.SetProtocolStateRequest.protocol_state:type_name -> otg.ProtocolState
	470,  // 1094: otg.SetProtocolStateResponse.status_code_200:type_name -> otg.ResponseWarning
	469,  // 1095: otg.SetProtocolStateResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1096: otg.SetProtocolStateResponse.status_code_500:type_name -> otg.ResponseError
	478,  // 1097: otg.SetDeviceStateRequest.device_state:type_name -> otg.DeviceState
	470,  // 1098: otg.SetDeviceStateResponse.status_code_200:type_name -> otg.ResponseWarning
	469,  // 1099: otg.SetDeviceStateResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1100: otg.SetDeviceStateResponse.status_code_500:type_name -> otg.ResponseError
	485,  // 1101: otg.GetMetricsRequest.metrics_request:type_name -> otg.MetricsRequest
	486,  // 1102: otg.GetMetricsResponse.status_code_200:type_name -> otg.MetricsResponse
	469,  // 1103: otg.GetMetricsResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1104: otg.GetMetricsResponse.status_code_500:type_name -> otg.ResponseError
	509,  // 1105: otg.GetStatesRequest.states_request:type_name -> otg.StatesRequest
	510,  // 1106: otg.GetStatesResponse.status_code_200:type_name -> otg.StatesResponse
	469,  // 1107: otg.GetStatesResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1108: otg.GetStatesResponse.status_code_500:type_name -> otg.ResponseError
	551,  // 1109: otg.GetCaptureRequest.capture_request:type_name -> otg.CaptureRequest
	469,  // 1110: otg.GetCaptureResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1111: otg.GetCaptureResponse.status_code_500:type_name -> otg.ResponseError
	832,  // 1112: otg.GetVersionResponse.status_code_200:type_name -> otg.Version
	469,  // 1113: otg.GetVersionResponse.status_code_400:type_name -> otg.ResponseError
	469,  // 1114: otg.GetVersionResponse.status_code_500:type_name -> otg.ResponseError
	836,  // 1115: otg.Openapi.SetConfig:input_type -> otg.SetConfigRequest
	1143, // 1116: otg.Openapi.GetConfig:input_type -> google.protobuf.Empty
	839,  // 1117: otg.Openapi.SetTransmitState:input_type -> otg.SetTransmitStateRequest
	841,  // 1118: otg.Openapi.SetLinkState:input_type -> otg.SetLinkStateRequest
	843,  // 1119: otg.Openapi.SetCaptureState:input_type -> otg.SetCaptureStateRequest
	845,  // 1120: otg.Openapi.UpdateFlows:input_type -> otg.UpdateFlowsRequest
	847,  // 1121: otg.Openapi.SetRouteState:input_type -> otg.SetRouteStateRequest
	849,  // 1122: otg.Openapi.SendPing:input_type -> otg.SendPingRequest
	851,  // 1123: otg.Openapi.SetProtocolState:input_type -> otg.SetProtocolStateRequest
	853,  // 1124: otg.Openapi.SetDeviceState:input_type -> otg.SetDeviceStateRequest
	855,  // 1125: otg.Openapi.GetMetrics:input_type -> otg.GetMetricsRequest
	857,  // 1126: otg.Openapi.GetStates:input_type -> otg.GetStatesRequest
	859,  // 1127: otg.Openapi.GetCapture:input_type -> otg.GetCaptureRequest
	1143, // 1128: otg.Openapi.GetVersion:input_type -> google.protobuf.Empty
	837,  // 1129: otg.Openapi.SetConfig:output_type -> otg.SetConfigResponse
	838,  // 1130: otg.Openapi.GetConfig:output_type -> otg.GetConfigResponse
	840,  // 1131: otg.Openapi.SetTransmitState:output_type -> otg.SetTransmitStateResponse
	842,  // 1132: otg.Openapi.SetLinkState:output_type -> otg.SetLinkStateResponse
	844,  // 1133: otg.Openapi.SetCaptureState:output_type -> otg.SetCaptureStateResponse
	846,  // 1134: otg.Openapi.UpdateFlows:output_type -> otg.UpdateFlowsResponse
	848,  // 1135: otg.Openapi.SetRouteState:output_type -> otg.SetRouteStateResponse
	850,  // 1136: otg.Openapi.SendPing:output_type -> otg.SendPingResponse
	852,  // 1137: otg.Openapi.SetProtocolState:output_type -> otg.SetProtocolStateResponse
	854,  // 1138: otg.Openapi.SetDeviceState:output_type -> otg.SetDeviceStateResponse
	856,  // 1139: otg.Openapi.GetMetrics:output_type -> otg.GetMetricsResponse
	858,  // 1140: otg.Openapi.GetStates:output_type -> otg.GetStatesResponse
	860,  // 1141: otg.Openapi.GetCapture:output_type -> otg.GetCaptureResponse
	861,  // 1142: otg.Openapi.GetVersion:output_type -> otg.GetVersionResponse
	1129, // [1129:1143] is the sub-list for method output_type
	1115, // [1115:1129] is the sub-list for method input_type
	1115, // [1115:1115] is the sub-list for extension type_name
	1115, // [1115:1115] is the sub-list for extension extendee
	0,    // [0:1115] is the sub-list for field type_name
}

func init() { file_otg_proto_init() }
func file_otg_proto_init() {
	if File_otg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_otg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagProtocolStatic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagProtocolLacp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagPortLacp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEthernetBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEthernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIpv4Loopback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIpv4GatewayMAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIpv6Loopback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIpv6GatewayMAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer1AutoNegotiation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer1FlowControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer1Ieee8023X); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer1Ieee8021Qbb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureEthernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIsisRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIsisMultiInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisInterfaceLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisMT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkStateTE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkStatepriorityBandwidths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisInterfaceAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisInterfaceAdvanced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisInterfaceLinkProtection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisAdvanced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisAuthentication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisAuthenticationBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisV4RouteRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V4RouteAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V6RouteAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MACRouteAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisV6RouteRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceBgpRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4EthernetSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpEthernetSegmentDfElection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteAdvanced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpCommunity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpExtCommunity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpAsPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpAsPathSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4EvpnEvis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4EviVxlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4EviVxlanBroadcastDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpCMacIpRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteDistinguisher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpAdvanced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpLearnedInformationFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4RouteRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpAddPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6RouteRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteV4Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteV4TunnelTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteRemoteEndpointSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteColorSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteBindingSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrtePreferenceSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrtePolicyPrioritySubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrtePolicyNameSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteExplicitNullLabelPolicySubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSrMplsSid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSRv6SIDEndpointBehaviorAndStructure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentATypeSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentBTypeSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentCTypeSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentDTypeSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentETypeSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentFTypeSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentGTypeSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentHTypeSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentITypeSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentJTypeSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegmentKTypeSubTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteV6Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteV6TunnelTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6SegmentRouting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6EthernetSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6EvpnEvis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6EviVxlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6EviVxlanBroadcastDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceVxlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV4Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV6Tunnel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV4TunnelDestinationIPMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV6TunnelDestinationIPMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV4TunnelDestinationIPModeUnicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV6TunnelDestinationIPModeUnicast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanTunnelDestinationIPModeUnicastArpSuppressionCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV4TunnelDestinationIPModeUnicastVtep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV6TunnelDestinationIPModeUnicastVtep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV4TunnelDestinationIPModeMulticast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV6TunnelDestinationIPModeMulticast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRsvp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpIpv4Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspIpv4Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspIpv4InterfaceP2PEgressIpv4Lsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspIpv4InterfaceP2PIngressIpv4Lsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpSessionAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpResourceAffinities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpTspec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpFastReroute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpEro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpEroSubobject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowTxRx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowEthernet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowVxlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIpv4Priority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIpv4Dscp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIpv4Tos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowPfcPause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowEthernetPause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowTcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowUdp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowGre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowGtpv1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowGtpExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowGtpv2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowArp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIcmp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIcmpEcho); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIcmpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIcmpv6Echo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowPpp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIgmpv1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMpls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSizeIncrement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSizeRandom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowContinuous); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowDelay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowFixedPackets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowFixedSeconds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowBurst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowDurationInterBurstGap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowLatencyMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRxRateThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRouteAdvertiseWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lldp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpChassisId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpPortId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpChassisMacSubType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpPortInterfaceNameSubType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpSystemName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingIpv4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingIpv6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LacpMemberState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMetricGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMetricGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricLatency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgpv4MetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgpv4Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgpv6MetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgpv6Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LacpMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LacpMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Neighborsv4StatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Neighborsv4State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Neighborsv6StatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Neighborsv6State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPrefixStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPrefixIpv4UnicastFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPrefixIpv6UnicastFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPrefixesState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPrefixIpv4UnicastState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPrefixIpv6UnicastState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultBgpCommunity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultBgpAsPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultBgpAsPathSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspsStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspTlvs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspHostname); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspIsReachabilityTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspExtendedIsReachabilityTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspneighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspIpv4InternalReachabilityTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspIpv4ExternalReachabilityTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspV4Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspExtendedIpv4ReachabilityTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspExtendedV4Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspIpv6ReachabilityTlv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspV6Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspPrefixAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighborsStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighborsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpCustomTLVState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpCapabilityState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspsStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpIPv4LspState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspIpv4Rro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspIpv4Ero); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetDstCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetDst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetSrcCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetSrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetEtherTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetEtherType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPfcQueueCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPfcQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanPriorityCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanCfiCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanCfi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanIdCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanTpidCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanTpid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanFlagsCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanReserved0Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanReserved0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanVniCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanVni); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanReserved1Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanReserved1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4VersionCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4HeaderLengthCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4HeaderLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TotalLengthCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TotalLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4IdentificationCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Identification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4ReservedCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Reserved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4DontFragmentCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4DontFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4MoreFragmentsCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4MoreFragments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4FragmentOffsetCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4FragmentOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TimeToLiveCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TimeToLive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4ProtocolCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4HeaderChecksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4SrcCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Src); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4DstCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Dst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4PriorityRawCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4PriorityRaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4DscpPhbCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4DscpPhb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4DscpEcnCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4DscpEcn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosPrecedenceCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosPrecedence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosDelayCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosDelay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosThroughputCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosThroughput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosReliabilityCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosReliability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosMonetaryCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosMonetary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosUnusedCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosUnused); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6VersionCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6TrafficClassCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6TrafficClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6FlowLabelCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6FlowLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6PayloadLengthCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6PayloadLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6NextHeaderCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6NextHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6HopLimitCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6HopLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6SrcCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6Src); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6DstCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6Dst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseDstCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseDst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseSrcCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseSrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseEtherTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseEtherType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseControlOpCodeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseControlOpCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseClassEnableVectorCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseClassEnableVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass0Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass1Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass2Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass3Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass4Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass5Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass6Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass7Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass7); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseDstCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseDst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseSrcCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseSrc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseEtherTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseEtherType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseControlOpCodeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseControlOpCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseTimeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpSrcPortCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpSrcPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpDstPortCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpDstPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpSeqNumCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpSeqNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpAckNumCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpAckNum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpDataOffsetCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpDataOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpEcnNsCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpEcnNs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpEcnCwrCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpEcnCwr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpEcnEchoCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpEcnEcho); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlUrgCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlUrg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlAckCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlPshCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlPsh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlRstCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlRst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlSynCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlSyn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlFinCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlFin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpWindowCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpSrcPortCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpSrcPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpDstPortCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpDstPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpLengthCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpChecksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreChecksumPresentCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreChecksumPresent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreReserved0Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreReserved0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreVersionCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreProtocolCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreChecksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreReserved1Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreReserved1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1VersionCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1ProtocolTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1ProtocolType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1ReservedCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1Reserved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1EFlagCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1EFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1SFlagCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1SFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1PnFlagCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1PnFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1MessageTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1MessageType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1MessageLengthCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1MessageLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1TeidCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1Teid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1SquenceNumberCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1SquenceNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1NPduNumberCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1NPduNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1NextExtensionHeaderTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1NextExtensionHeaderType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpExtensionExtensionLengthCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpExtensionExtensionLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpExtensionContentsCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpExtensionContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpExtensionNextExtensionHeaderCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpExtensionNextExtensionHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2VersionCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2PiggybackingFlagCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2PiggybackingFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2TeidFlagCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2TeidFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2Spare1Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2Spare1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2MessageTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2MessageType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2MessageLengthCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2MessageLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2TeidCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2Teid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2SequenceNumberCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2SequenceNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2Spare2Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2Spare2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpHardwareTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpHardwareType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpProtocolTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpProtocolType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpHardwareLengthCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpHardwareLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpProtocolLengthCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpProtocolLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpOperationCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpSenderHardwareAddrCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpSenderHardwareAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpSenderProtocolAddrCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpSenderProtocolAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpTargetHardwareAddrCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpTargetHardwareAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpTargetProtocolAddrCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpTargetProtocolAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoCodeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoChecksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoIdentifierCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoSequenceNumberCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoSequenceNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpCommonChecksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpNextFieldsIdentifierCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpNextFieldsIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpNextFieldsSequenceNumberCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpNextFieldsSequenceNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoCodeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoIdentifierCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoSequenceNumberCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoSequenceNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoChecksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6CommonChecksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPppAddressCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPppAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPppControlCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPppControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPppProtocolTypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPppProtocolType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1VersionCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1TypeCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1UnusedCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1Unused); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1Checksum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[541].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1GroupAddressCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[542].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1GroupAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[543].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsLabelCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[544].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[545].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsTrafficClassCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[546].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsTrafficClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[547].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsBottomOfStackCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[548].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsBottomOfStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[549].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsTimeToLiveCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[550].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsTimeToLive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[551].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[552].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[553].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[554].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalServerError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[555].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[556].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[557].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[558].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTransmitStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[559].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTransmitStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[560].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLinkStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[561].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLinkStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[562].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCaptureStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[563].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCaptureStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[564].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[565].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[566].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRouteStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[567].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRouteStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[568].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[569].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[570].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProtocolStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[571].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProtocolStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[572].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[573].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[574].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[575].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[576].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[577].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[578].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCaptureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[579].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCaptureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[580].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[581].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagProtocol_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[582].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagPortLacp_ActorActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[583].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetConnection_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[584].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceVlan_Tpid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[585].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIpv4GatewayMAC_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[586].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIpv6GatewayMAC_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[587].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer1_Speed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[588].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer1_Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[589].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer1FlowControl_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[590].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capture_Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[591].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureFilter_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[592].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisInterface_NetworkType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[593].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisInterface_LevelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[594].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisInterfaceAuthentication_AuthType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[595].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisAuthenticationBase_AuthType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[596].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisV4RouteRange_OriginType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[597].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisV4RouteRange_RedistributionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[598].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisV6RouteRange_OriginType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[599].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisV6RouteRange_RedistributionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[600].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4Peer_AsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[601].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4Peer_AsNumberWidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[602].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4EthernetSegment_ActiveMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[603].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteAdvanced_Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[604].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpCommunity_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[605].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpExtCommunity_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[606].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpExtCommunity_Subtype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[607].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpAsPath_AsSetMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[608].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpAsPathSegment_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[609].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4EvpnEvis_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[610].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4EviVxlan_ReplicationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[611].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteDistinguisher_RdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[612].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpRouteTarget_RtType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[613].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4RouteRange_NextHopMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[614].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV4RouteRange_NextHopAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[615].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6RouteRange_NextHopMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[616].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6RouteRange_NextHopAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[617].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteV4Policy_NextHopMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[618].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteV4Policy_NextHopAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[619].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteRemoteEndpointSubTlv_AddressFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[620].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteBindingSubTlv_BindingSidType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[621].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteExplicitNullLabelPolicySubTlv_ExplicitNullLabelPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[622].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteSegment_SegmentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[623].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteV6Policy_NextHopMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[624].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpSrteV6Policy_NextHopAddressType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[625].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6Peer_AsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[626].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6Peer_AsNumberWidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[627].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6EthernetSegment_ActiveMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[628].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6EvpnEvis_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[629].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpV6EviVxlan_ReplicationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[630].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV4TunnelDestinationIPMode_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[631].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VxlanV6TunnelDestinationIPMode_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[632].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspIpv4InterfaceP2PEgressIpv4Lsp_ReservationStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[633].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpEro_PrependNeighborIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[634].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpEroSubobject_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[635].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpEroSubobject_HopType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[636].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowTxRx_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[637].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowRouter_Mode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[638].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowHeader_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[639].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIpv4Priority_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[640].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIcmp_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[641].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowIcmpv6_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[642].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSize_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[643].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowRate_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[644].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowDuration_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[645].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowDelay_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[646].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowDurationInterBurstGap_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[647].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowLatencyMetrics_Mode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[648].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRequest_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[649].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpConnection_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[650].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpChassisId_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[651].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpPortId_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[652].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpChassisMacSubType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[653].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpPortInterfaceNameSubType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[654].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpSystemName_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[655].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkState_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[656].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitState_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[657].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureState_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[658].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowsUpdate_PropertyNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[659].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteState_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[660].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolState_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[661].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceState_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[662].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[663].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[664].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LacpMemberState_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[665].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsRequest_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[666].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponse_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[667].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortMetricsRequest_ColumnNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[668].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortMetric_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[669].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortMetric_Capture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[670].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortMetric_Transmit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[671].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMetricsRequest_MetricNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[672].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMetricGroupRequest_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[673].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowMetric_Transmit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[674].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgpv4MetricsRequest_ColumnNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[675].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgpv4Metric_SessionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[676].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgpv4Metric_FsmState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[677].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgpv6MetricsRequest_ColumnNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[678].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgpv6Metric_SessionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[679].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgpv6Metric_FsmState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[680].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisMetricsRequest_ColumnNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[681].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagMetricsRequest_ColumnNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[682].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagMetric_OperStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[683].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LacpMetricsRequest_ColumnNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[684].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LacpMetric_Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[685].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LacpMetric_Timeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[686].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LacpMetric_Synchronization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[687].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpMetricsRequest_ColumnNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[688].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpMetricsRequest_ColumnNames); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[689].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatesRequest_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[690].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatesResponse_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[691].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPrefixStateRequest_PrefixFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[692].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPrefixIpv4UnicastFilter_Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[693].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPrefixIpv6UnicastFilter_Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[694].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPrefixIpv4UnicastState_Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[695].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPrefixIpv6UnicastState_Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[696].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultBgpCommunity_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[697].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultBgpAsPathSegment_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[698].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspState_PduType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[699].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspV4Prefix_RedistributionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[700].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspV4Prefix_OriginType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[701].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspExtendedV4Prefix_RedistributionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[702].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspV6Prefix_RedistributionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[703].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsisLspV6Prefix_OriginType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[704].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighborsState_ChassisIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[705].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpNeighborsState_PortIdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[706].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LldpCapabilityState_CapabilityName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[707].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspState_SessionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[708].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspState_LastFlapReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[709].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsvpLspIpv4Ero_Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[710].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetDst_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[711].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetSrc_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[712].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetEtherType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[713].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPfcQueue_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[714].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanPriority_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[715].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanCfi_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[716].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanId_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[717].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVlanTpid_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[718].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanFlags_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[719].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanReserved0_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[720].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanVni_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[721].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowVxlanReserved1_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[722].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Version_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[723].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4HeaderLength_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[724].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TotalLength_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[725].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Identification_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[726].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Reserved_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[727].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4DontFragment_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[728].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4MoreFragments_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[729].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4FragmentOffset_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[730].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TimeToLive_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[731].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Protocol_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[732].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4HeaderChecksum_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[733].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4HeaderChecksum_Generated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[734].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Src_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[735].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4Dst_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[736].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4PriorityRaw_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[737].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4DscpPhb_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[738].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4DscpEcn_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[739].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosPrecedence_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[740].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosDelay_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[741].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosThroughput_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[742].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosReliability_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[743].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosMonetary_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[744].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv4TosUnused_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[745].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6Version_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[746].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6TrafficClass_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[747].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6FlowLabel_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[748].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6PayloadLength_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[749].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6NextHeader_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[750].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6HopLimit_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[751].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6Src_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[752].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIpv6Dst_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[753].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseDst_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[754].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseSrc_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[755].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseEtherType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[756].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseControlOpCode_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[757].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPauseClassEnableVector_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[758].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass0_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[759].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass1_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[760].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass2_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[761].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass3_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[762].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass4_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[763].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass5_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[764].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass6_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[765].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPfcPausePauseClass7_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[766].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseDst_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[767].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseSrc_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[768].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseEtherType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[769].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseControlOpCode_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[770].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowEthernetPauseTime_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[771].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpSrcPort_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[772].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpDstPort_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[773].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpSeqNum_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[774].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpAckNum_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[775].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpDataOffset_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[776].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpEcnNs_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[777].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpEcnCwr_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[778].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpEcnEcho_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[779].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlUrg_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[780].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlAck_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[781].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlPsh_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[782].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlRst_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[783].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlSyn_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[784].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpCtlFin_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[785].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowTcpWindow_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[786].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpSrcPort_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[787].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpDstPort_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[788].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpLength_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[789].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpChecksum_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[790].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowUdpChecksum_Generated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[791].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreChecksumPresent_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[792].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreReserved0_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[793].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreVersion_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[794].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreProtocol_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[795].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreChecksum_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[796].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreChecksum_Generated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[797].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGreReserved1_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[798].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1Version_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[799].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1ProtocolType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[800].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1Reserved_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[801].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1EFlag_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[802].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1SFlag_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[803].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1PnFlag_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[804].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1MessageType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[805].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1MessageLength_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[806].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1Teid_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[807].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1SquenceNumber_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[808].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1NPduNumber_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[809].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv1NextExtensionHeaderType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[810].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpExtensionExtensionLength_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[811].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpExtensionContents_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[812].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpExtensionNextExtensionHeader_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[813].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2Version_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[814].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2PiggybackingFlag_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[815].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2TeidFlag_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[816].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2Spare1_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[817].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2MessageType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[818].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2MessageLength_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[819].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2Teid_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[820].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2SequenceNumber_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[821].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowGtpv2Spare2_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[822].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpHardwareType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[823].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpProtocolType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[824].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpHardwareLength_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[825].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpProtocolLength_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[826].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpOperation_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[827].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpSenderHardwareAddr_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[828].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpSenderProtocolAddr_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[829].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpTargetHardwareAddr_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[830].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowArpTargetProtocolAddr_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[831].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[832].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoCode_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[833].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoChecksum_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[834].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoChecksum_Generated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[835].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoIdentifier_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[836].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpEchoSequenceNumber_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[837].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpCommonChecksum_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[838].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpCommonChecksum_Generated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[839].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpNextFieldsIdentifier_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[840].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpNextFieldsSequenceNumber_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[841].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[842].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoCode_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[843].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoIdentifier_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[844].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoSequenceNumber_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[845].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoChecksum_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[846].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6EchoChecksum_Generated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[847].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6CommonChecksum_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[848].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIcmpv6CommonChecksum_Generated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[849].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPppAddress_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[850].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPppControl_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[851].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowPppProtocolType_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[852].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1Version_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[853].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1Type_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[854].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1Unused_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[855].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1Checksum_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[856].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1Checksum_Generated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[857].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowIgmpv1GroupAddress_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[858].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsLabel_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[859].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsTrafficClass_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[860].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsBottomOfStack_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_otg_proto_msgTypes[861].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternFlowMplsTimeToLive_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_otg_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[45].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[50].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[51].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[61].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[62].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[63].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[73].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[75].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[82].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[83].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[85].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[86].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[89].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[90].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[91].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[92].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[93].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[94].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[95].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[96].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[97].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[98].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[99].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[100].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[101].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[102].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[104].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[105].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[106].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[107].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[108].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[110].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[111].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[112].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[113].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[116].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[117].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[118].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[119].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[120].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[121].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[122].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[123].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[124].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[125].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[126].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[127].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[128].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[129].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[130].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[131].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[132].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[133].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[134].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[135].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[136].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[138].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[139].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[140].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[141].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[142].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[143].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[144].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[145].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[146].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[147].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[148].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[149].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[150].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[151].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[152].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[153].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[154].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[155].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[156].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[157].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[158].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[159].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[160].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[161].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[162].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[163].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[164].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[165].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[166].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[167].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[168].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[169].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[170].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[171].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[172].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[173].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[174].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[175].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[176].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[177].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[178].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[180].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[181].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[182].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[183].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[184].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[185].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[186].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[187].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[197].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[198].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[199].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[200].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[202].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[204].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[205].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[207].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[208].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[209].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[210].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[211].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[212].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[213].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[215].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[217].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[219].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[221].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[223].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[225].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[227].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[228].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[229].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[231].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[233].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[235].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[236].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[237].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[238].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[239].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[240].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[242].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[244].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[245].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[247].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[248].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[251].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[254].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[256].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[258].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[259].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[261].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[262].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[263].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[265].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[266].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[267].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[268].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[269].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[271].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[272].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[273].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[274].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[275].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[276].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[277].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[278].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[279].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[280].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[281].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[282].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[283].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[284].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[285].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[286].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[287].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[288].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[289].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[290].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[291].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[292].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[293].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[294].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[295].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[296].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[297].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[298].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[299].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[300].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[301].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[302].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[303].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[304].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[305].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[306].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[307].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[308].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[309].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[310].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[311].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[312].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[313].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[314].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[315].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[316].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[317].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[318].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[319].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[320].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[321].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[322].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[323].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[324].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[325].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[326].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[327].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[328].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[329].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[330].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[331].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[332].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[333].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[334].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[335].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[336].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[337].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[338].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[339].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[340].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[341].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[342].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[343].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[344].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[345].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[346].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[347].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[348].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[349].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[350].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[351].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[352].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[353].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[354].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[355].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[356].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[357].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[358].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[359].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[360].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[361].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[362].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[363].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[364].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[365].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[366].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[367].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[368].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[369].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[370].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[371].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[372].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[373].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[374].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[375].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[376].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[377].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[378].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[379].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[380].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[381].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[382].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[383].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[384].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[385].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[386].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[387].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[388].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[389].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[390].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[391].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[392].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[393].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[394].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[395].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[396].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[397].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[398].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[399].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[400].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[401].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[402].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[403].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[404].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[405].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[406].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[407].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[408].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[409].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[410].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[411].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[412].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[413].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[414].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[415].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[416].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[417].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[418].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[419].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[420].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[421].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[422].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[423].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[424].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[425].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[426].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[427].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[428].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[429].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[430].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[431].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[432].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[433].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[434].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[435].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[436].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[437].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[438].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[439].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[440].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[441].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[442].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[443].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[444].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[445].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[446].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[447].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[448].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[449].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[450].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[451].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[452].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[453].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[454].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[455].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[456].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[457].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[458].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[459].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[460].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[461].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[462].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[463].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[464].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[465].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[466].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[467].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[468].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[469].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[470].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[471].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[472].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[473].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[474].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[475].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[476].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[477].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[478].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[479].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[480].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[481].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[482].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[483].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[484].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[485].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[486].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[487].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[488].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[489].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[490].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[491].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[492].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[493].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[494].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[495].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[496].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[497].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[498].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[499].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[500].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[501].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[502].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[503].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[504].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[505].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[506].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[507].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[508].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[509].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[510].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[511].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[512].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[513].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[514].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[515].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[516].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[517].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[518].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[519].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[520].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[521].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[522].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[523].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[524].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[525].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[526].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[527].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[528].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[529].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[530].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[531].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[532].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[533].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[534].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[535].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[536].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[537].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[538].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[539].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[540].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[541].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[542].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[543].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[544].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[545].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[546].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[547].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[548].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[549].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[550].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[551].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[556].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[557].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[559].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[561].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[563].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[565].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[567].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[569].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[571].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[573].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[575].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[577].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[579].OneofWrappers = []interface{}{}
	file_otg_proto_msgTypes[580].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_otg_proto_rawDesc,
			NumEnums:      281,
			NumMessages:   862,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_otg_proto_goTypes,
		DependencyIndexes: file_otg_proto_depIdxs,
		EnumInfos:         file_otg_proto_enumTypes,
		MessageInfos:      file_otg_proto_msgTypes,
	}.Build()
	File_otg_proto = out.File
	file_otg_proto_rawDesc = nil
	file_otg_proto_goTypes = nil
	file_otg_proto_depIdxs = nil
}
