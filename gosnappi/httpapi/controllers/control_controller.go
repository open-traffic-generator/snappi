// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"io"
	"log"
	"net/http"

	gosnappi "github.com/open-traffic-generator/snappi/gosnappi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi/interfaces"
	"google.golang.org/protobuf/encoding/protojson"
)

type controlController struct {
	handler interfaces.ControlHandler
}

func NewHttpControlController(handler interfaces.ControlHandler) interfaces.ControlController {
	return &controlController{handler}
}

func (ctrl *controlController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/control/state", Method: "POST", Name: "SetControlState", Handler: ctrl.SetControlState},
		{Path: "/control/action", Method: "POST", Name: "SetControlAction", Handler: ctrl.SetControlAction},
		{Path: "/control/transmit", Method: "POST", Name: "SetTransmitState", Handler: ctrl.SetTransmitState},
		{Path: "/control/link", Method: "POST", Name: "SetLinkState", Handler: ctrl.SetLinkState},
		{Path: "/control/capture", Method: "POST", Name: "SetCaptureState", Handler: ctrl.SetCaptureState},
		{Path: "/control/flows", Method: "POST", Name: "UpdateFlows", Handler: ctrl.UpdateFlows},
		{Path: "/control/routes", Method: "POST", Name: "SetRouteState", Handler: ctrl.SetRouteState},
		{Path: "/control/ping", Method: "POST", Name: "SendPing", Handler: ctrl.SendPing},
		{Path: "/control/protocols", Method: "POST", Name: "SetProtocolState", Handler: ctrl.SetProtocolState},
		{Path: "/control/devices", Method: "POST", Name: "SetDeviceState", Handler: ctrl.SetDeviceState},
	}
}

/*
SetControlState: POST /control/state
Description: Sets the operational state of configured resources.
*/
func (ctrl *controlController) SetControlState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.ControlState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewControlState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetControlStateError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetControlStateError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetControlStateError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SetControlState(item, r)
	if err != nil {
		ctrl.responseSetControlStateError(w, "internal", err)
		return
	}

	if result.HasWarning() {
		data, err := controlMrlOpts.Marshal(result.Warning().Msg())
		if err != nil {
			ctrl.responseSetControlStateError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetControlStateError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetControlStateError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
SetControlAction: POST /control/action
Description: Triggers actions against configured resources.
*/
func (ctrl *controlController) SetControlAction(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.ControlAction
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewControlAction()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetControlActionError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetControlActionError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetControlActionError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SetControlAction(item, r)
	if err != nil {
		ctrl.responseSetControlActionError(w, "internal", err)
		return
	}

	if result.HasControlActionResponse() {
		data, err := controlMrlOpts.Marshal(result.ControlActionResponse().Msg())
		if err != nil {
			ctrl.responseSetControlActionError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetControlActionError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetControlActionError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
SetTransmitState: POST /control/transmit
Description: Deprecated: Please use `set_control_state` with `traffic.flow_transmit` choice instead

Updates the state of configuration resources on the traffic generator.
The Response.Warnings in the Success response is available for implementers to disclose additional information about a state change including any implicit changes that are outside the scope of the state change.
*/
func (ctrl *controlController) SetTransmitState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.TransmitState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewTransmitState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetTransmitStateError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetTransmitStateError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetTransmitStateError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SetTransmitState(item, r)
	if err != nil {
		ctrl.responseSetTransmitStateError(w, "internal", err)
		return
	}

	if result.HasWarning() {
		data, err := controlMrlOpts.Marshal(result.Warning().Msg())
		if err != nil {
			ctrl.responseSetTransmitStateError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetTransmitStateError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetTransmitStateError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
SetLinkState: POST /control/link
Description: Deprecated: Please use `set_control_state` with `port.link` choice instead

Updates the state of configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetLinkState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.LinkState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewLinkState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetLinkStateError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetLinkStateError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetLinkStateError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SetLinkState(item, r)
	if err != nil {
		ctrl.responseSetLinkStateError(w, "internal", err)
		return
	}

	if result.HasWarning() {
		data, err := controlMrlOpts.Marshal(result.Warning().Msg())
		if err != nil {
			ctrl.responseSetLinkStateError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetLinkStateError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetLinkStateError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
SetCaptureState: POST /control/capture
Description: Deprecated: Please use `set_control_state` with `port.capture` choice instead

Updates the state of configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetCaptureState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.CaptureState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewCaptureState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetCaptureStateError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetCaptureStateError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetCaptureStateError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SetCaptureState(item, r)
	if err != nil {
		ctrl.responseSetCaptureStateError(w, "internal", err)
		return
	}

	if result.HasWarning() {
		data, err := controlMrlOpts.Marshal(result.Warning().Msg())
		if err != nil {
			ctrl.responseSetCaptureStateError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetCaptureStateError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetCaptureStateError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
UpdateFlows: POST /control/flows
Description: Deprecated: Please use `update_config` with `flow` choice instead

Updates flow properties without disruption of transmit state.
*/
func (ctrl *controlController) UpdateFlows(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.FlowsUpdate
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewFlowsUpdate()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseUpdateFlowsError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseUpdateFlowsError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseUpdateFlowsError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.UpdateFlows(item, r)
	if err != nil {
		ctrl.responseUpdateFlowsError(w, "internal", err)
		return
	}

	if result.HasConfig() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.Config()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseUpdateFlowsError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseUpdateFlowsError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
SetRouteState: POST /control/routes
Description: Deprecated: Please use `set_control_state` with `protocol.route` choice instead

Updates the state of configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetRouteState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.RouteState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewRouteState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetRouteStateError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetRouteStateError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetRouteStateError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SetRouteState(item, r)
	if err != nil {
		ctrl.responseSetRouteStateError(w, "internal", err)
		return
	}

	if result.HasWarning() {
		data, err := controlMrlOpts.Marshal(result.Warning().Msg())
		if err != nil {
			ctrl.responseSetRouteStateError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetRouteStateError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetRouteStateError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
SendPing: POST /control/ping
Description: Deprecated: Please use `set_control_action` with `protocol.ipv*.ping` choice instead

API to send an IPv4 and/or IPv6 ICMP Echo Request(s) between endpoints. For each endpoint 1 ping packet will be sent and API shall wait for ping response to either be successful or timeout. The API wait timeout for each request is 300ms.
*/
func (ctrl *controlController) SendPing(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.PingRequest
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewPingRequest()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSendPingError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSendPingError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSendPingError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SendPing(item, r)
	if err != nil {
		ctrl.responseSendPingError(w, "internal", err)
		return
	}

	if result.HasPingResponse() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.PingResponse()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSendPingError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseSendPingError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
SetProtocolState: POST /control/protocols
Description: Deprecated: Please use `set_control_state` with `protocol.all` choice instead

Sets all configured protocols to `start` or `stop` state.
*/
func (ctrl *controlController) SetProtocolState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.ProtocolState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewProtocolState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetProtocolStateError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetProtocolStateError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetProtocolStateError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SetProtocolState(item, r)
	if err != nil {
		ctrl.responseSetProtocolStateError(w, "internal", err)
		return
	}

	if result.HasWarning() {
		data, err := controlMrlOpts.Marshal(result.Warning().Msg())
		if err != nil {
			ctrl.responseSetProtocolStateError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetProtocolStateError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetProtocolStateError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

/*
SetDeviceState: POST /control/devices
Description: Deprecated: Please use `set_control_state` with `protocol` choice instead

Set specific state/actions on device configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetDeviceState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.DeviceState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewDeviceState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetDeviceStateError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetDeviceStateError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetDeviceStateError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SetDeviceState(item, r)
	if err != nil {
		ctrl.responseSetDeviceStateError(w, "internal", err)
		return
	}

	if result.HasWarning() {
		data, err := controlMrlOpts.Marshal(result.Warning().Msg())
		if err != nil {
			ctrl.responseSetDeviceStateError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetDeviceStateError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetDeviceStateError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}

var controlMrlOpts = protojson.MarshalOptions{
	UseProtoNames:   true,
	AllowPartial:    true,
	EmitUnpopulated: true,
	Indent:          "  ",
}
