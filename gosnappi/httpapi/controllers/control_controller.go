// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"io"
	"log"
	"net/http"

	gosnappi "github.com/open-traffic-generator/snappi/gosnappi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi/interfaces"
	"google.golang.org/protobuf/encoding/protojson"
)

type controlController struct {
	handler interfaces.ControlHandler
}

func NewHttpControlController(handler interfaces.ControlHandler) interfaces.ControlController {
	return &controlController{handler}
}

func (ctrl *controlController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/control/state", Method: "POST", Name: "SetControlState", Handler: ctrl.SetControlState},
		{Path: "/control/action", Method: "POST", Name: "SetControlAction", Handler: ctrl.SetControlAction},
		{Path: "/control/transmit", Method: "POST", Name: "SetTransmitState", Handler: ctrl.SetTransmitState},
		{Path: "/control/link", Method: "POST", Name: "SetLinkState", Handler: ctrl.SetLinkState},
		{Path: "/control/capture", Method: "POST", Name: "SetCaptureState", Handler: ctrl.SetCaptureState},
		{Path: "/control/flows", Method: "POST", Name: "UpdateFlows", Handler: ctrl.UpdateFlows},
		{Path: "/control/routes", Method: "POST", Name: "SetRouteState", Handler: ctrl.SetRouteState},
		{Path: "/control/ping", Method: "POST", Name: "SendPing", Handler: ctrl.SendPing},
		{Path: "/control/protocols", Method: "POST", Name: "SetProtocolState", Handler: ctrl.SetProtocolState},
		{Path: "/control/devices", Method: "POST", Name: "SetDeviceState", Handler: ctrl.SetDeviceState},
	}
}

/*
SetControlState: POST /control/state
Description: Sets the operational state of configured resources.
*/
func (ctrl *controlController) SetControlState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.ControlState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewControlState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetControlState400(w, err)
				return
			}
		} else {
			ctrl.responseSetControlState400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseSetControlState500(w, bodyError)
		return
	}
	result := ctrl.handler.SetControlState(item, r)
	if result.HasStatusCode200() {
		data, err := controlMrlOpts.Marshal(result.StatusCode200().Msg())
		if err != nil {
			ctrl.responseSetControlState400(w, err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSetControlState500(w, errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetControlState400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetControlStateResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *controlController) responseSetControlState500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetControlStateResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

/*
SetControlAction: POST /control/action
Description: Triggers actions against configured resources.
*/
func (ctrl *controlController) SetControlAction(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.ControlAction
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewControlAction()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetControlAction400(w, err)
				return
			}
		} else {
			ctrl.responseSetControlAction400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseSetControlAction500(w, bodyError)
		return
	}
	result := ctrl.handler.SetControlAction(item, r)
	if result.HasStatusCode200() {
		data, err := controlMrlOpts.Marshal(result.StatusCode200().Msg())
		if err != nil {
			ctrl.responseSetControlAction400(w, err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSetControlAction500(w, errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetControlAction400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetControlActionResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *controlController) responseSetControlAction500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetControlActionResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

/*
SetTransmitState: POST /control/transmit
Description: Deprecated: Please use `set_control_state` with `traffic.flow_transmit` choice instead

Deprecated: Please use `set_control_state` with `traffic.flow_transmit` choice instead

Updates the state of configuration resources on the traffic generator.
The Response.Warnings in the Success response is available for implementers to disclose additional information about a state change including any implicit changes that are outside the scope of the state change.
*/
func (ctrl *controlController) SetTransmitState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.TransmitState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewTransmitState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetTransmitState400(w, err)
				return
			}
		} else {
			ctrl.responseSetTransmitState400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseSetTransmitState500(w, bodyError)
		return
	}
	result := ctrl.handler.SetTransmitState(item, r)
	if result.HasStatusCode200() {
		data, err := controlMrlOpts.Marshal(result.StatusCode200().Msg())
		if err != nil {
			ctrl.responseSetTransmitState400(w, err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSetTransmitState500(w, errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetTransmitState400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetTransmitStateResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *controlController) responseSetTransmitState500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetTransmitStateResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

/*
SetLinkState: POST /control/link
Description: Deprecated: Please use `set_control_state` with `port.link` choice instead

Deprecated: Please use `set_control_state` with `port.link` choice instead

Updates the state of configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetLinkState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.LinkState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewLinkState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetLinkState400(w, err)
				return
			}
		} else {
			ctrl.responseSetLinkState400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseSetLinkState500(w, bodyError)
		return
	}
	result := ctrl.handler.SetLinkState(item, r)
	if result.HasStatusCode200() {
		data, err := controlMrlOpts.Marshal(result.StatusCode200().Msg())
		if err != nil {
			ctrl.responseSetLinkState400(w, err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSetLinkState500(w, errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetLinkState400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetLinkStateResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *controlController) responseSetLinkState500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetLinkStateResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

/*
SetCaptureState: POST /control/capture
Description: Deprecated: Please use `set_control_state` with `port.capture` choice instead

Deprecated: Please use `set_control_state` with `port.capture` choice instead

Updates the state of configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetCaptureState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.CaptureState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewCaptureState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetCaptureState400(w, err)
				return
			}
		} else {
			ctrl.responseSetCaptureState400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseSetCaptureState500(w, bodyError)
		return
	}
	result := ctrl.handler.SetCaptureState(item, r)
	if result.HasStatusCode200() {
		data, err := controlMrlOpts.Marshal(result.StatusCode200().Msg())
		if err != nil {
			ctrl.responseSetCaptureState400(w, err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSetCaptureState500(w, errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetCaptureState400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetCaptureStateResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *controlController) responseSetCaptureState500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetCaptureStateResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

/*
UpdateFlows: POST /control/flows
Description: Deprecated: Please use `update_config` with `flow` choice instead

Deprecated: Please use `update_config` with `flow` choice instead

Updates flow properties without disruption of transmit state.
*/
func (ctrl *controlController) UpdateFlows(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.FlowsUpdate
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewFlowsUpdate()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseUpdateFlows400(w, err)
				return
			}
		} else {
			ctrl.responseUpdateFlows400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseUpdateFlows500(w, bodyError)
		return
	}
	result := ctrl.handler.UpdateFlows(item, r)
	if result.HasStatusCode200() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.StatusCode200()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseUpdateFlows500(w, errors.New("Unknown error"))
}

func (ctrl *controlController) responseUpdateFlows400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewUpdateFlowsResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *controlController) responseUpdateFlows500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewUpdateFlowsResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

/*
SetRouteState: POST /control/routes
Description: Deprecated: Please use `set_control_state` with `protocol.route` choice instead

Deprecated: Please use `set_control_state` with `protocol.route` choice instead

Updates the state of configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetRouteState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.RouteState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewRouteState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetRouteState400(w, err)
				return
			}
		} else {
			ctrl.responseSetRouteState400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseSetRouteState500(w, bodyError)
		return
	}
	result := ctrl.handler.SetRouteState(item, r)
	if result.HasStatusCode200() {
		data, err := controlMrlOpts.Marshal(result.StatusCode200().Msg())
		if err != nil {
			ctrl.responseSetRouteState400(w, err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSetRouteState500(w, errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetRouteState400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetRouteStateResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *controlController) responseSetRouteState500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetRouteStateResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

/*
SendPing: POST /control/ping
Description: Deprecated: Please use `set_control_action` with `protocol.ipv*.ping` choice instead

Deprecated: Please use `set_control_action` with `protocol.ipv*.ping` choice instead

API to send an IPv4 and/or IPv6 ICMP Echo Request(s) between endpoints. For each endpoint 1 ping packet will be sent and API shall wait for ping response to either be successful or timeout. The API wait timeout for each request is 300ms.
*/
func (ctrl *controlController) SendPing(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.PingRequest
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewPingRequest()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSendPing400(w, err)
				return
			}
		} else {
			ctrl.responseSendPing400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseSendPing500(w, bodyError)
		return
	}
	result := ctrl.handler.SendPing(item, r)
	if result.HasStatusCode200() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.StatusCode200()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSendPing500(w, errors.New("Unknown error"))
}

func (ctrl *controlController) responseSendPing400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSendPingResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *controlController) responseSendPing500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSendPingResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

/*
SetProtocolState: POST /control/protocols
Description: Deprecated: Please use `set_control_state` with `protocol.all` choice instead

Deprecated: Please use `set_control_state` with `protocol.all` choice instead

Sets all configured protocols to `start` or `stop` state.
*/
func (ctrl *controlController) SetProtocolState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.ProtocolState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewProtocolState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetProtocolState400(w, err)
				return
			}
		} else {
			ctrl.responseSetProtocolState400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseSetProtocolState500(w, bodyError)
		return
	}
	result := ctrl.handler.SetProtocolState(item, r)
	if result.HasStatusCode200() {
		data, err := controlMrlOpts.Marshal(result.StatusCode200().Msg())
		if err != nil {
			ctrl.responseSetProtocolState400(w, err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSetProtocolState500(w, errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetProtocolState400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetProtocolStateResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *controlController) responseSetProtocolState500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetProtocolStateResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

/*
SetDeviceState: POST /control/devices
Description: Deprecated: Please use `set_control_state` with `protocol` choice instead

Deprecated: Please use `set_control_state` with `protocol` choice instead

Set specific state/actions on device configuration resources on the traffic generator.
*/
func (ctrl *controlController) SetDeviceState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.DeviceState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewDeviceState()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetDeviceState400(w, err)
				return
			}
		} else {
			ctrl.responseSetDeviceState400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseSetDeviceState500(w, bodyError)
		return
	}
	result := ctrl.handler.SetDeviceState(item, r)
	if result.HasStatusCode200() {
		data, err := controlMrlOpts.Marshal(result.StatusCode200().Msg())
		if err != nil {
			ctrl.responseSetDeviceState400(w, err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSetDeviceState500(w, errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetDeviceState400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetDeviceStateResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *controlController) responseSetDeviceState500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetDeviceStateResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

var controlMrlOpts = protojson.MarshalOptions{
	UseProtoNames:   true,
	AllowPartial:    true,
	EmitUnpopulated: true,
	Indent:          "  ",
}
