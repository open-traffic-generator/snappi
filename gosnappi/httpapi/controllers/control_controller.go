// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"io"
	"log"
	"net/http"

	gosnappi "github.com/open-traffic-generator/snappi/gosnappi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi/interfaces"
	"google.golang.org/protobuf/encoding/protojson"
)

type controlController struct {
	handler interfaces.ControlHandler
}

func NewHttpControlController(handler interfaces.ControlHandler) interfaces.ControlController {
	return &controlController{handler}
}

func (ctrl *controlController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/control/state", Method: "POST", Name: "SetControlState", Handler: ctrl.SetControlState},
		{Path: "/control/action", Method: "POST", Name: "SetControlAction", Handler: ctrl.SetControlAction},
	}
}

/*
SetControlState: POST /control/state
Description: Sets the operational state of configured resources.
*/
func (ctrl *controlController) SetControlState(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.ControlState
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewControlState()
			err := item.Unmarshal().FromJson(string(body))
			if err != nil {
				ctrl.responseSetControlStateError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetControlStateError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetControlStateError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SetControlState(item, r)
	if err != nil {
		ctrl.responseSetControlStateError(w, "internal", err)
		return
	}

	if result.HasWarning() {

		proto, err := result.Warning().Marshal().ToProto()
		if err != nil {
			ctrl.responseSetControlStateError(w, "validation", err)
		}
		data, err := controlMrlOpts.Marshal(proto)
		if err != nil {
			ctrl.responseSetControlStateError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetControlStateError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetControlStateError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.Unmarshal().FromJson(rsp_err.Error())
		if err != nil {
			_ = result.SetCode(statusCode)
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			_ = result.SetErrors([]string{rsp_err.Error()})
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result.Marshal()); err != nil {
		log.Print(err.Error())
	}
}

/*
SetControlAction: POST /control/action
Description: Triggers actions against configured resources.
*/
func (ctrl *controlController) SetControlAction(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.ControlAction
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewControlAction()
			err := item.Unmarshal().FromJson(string(body))
			if err != nil {
				ctrl.responseSetControlActionError(w, "validation", err)
				return
			}
		} else {
			ctrl.responseSetControlActionError(w, "validation", readError)
			return
		}
	} else {
		bodyError := errors.New("Request does not have a body")
		ctrl.responseSetControlActionError(w, "validation", bodyError)
		return
	}
	result, err := ctrl.handler.SetControlAction(item, r)
	if err != nil {
		ctrl.responseSetControlActionError(w, "internal", err)
		return
	}

	if result.HasControlActionResponse() {

		proto, err := result.ControlActionResponse().Marshal().ToProto()
		if err != nil {
			ctrl.responseSetControlActionError(w, "validation", err)
		}
		data, err := controlMrlOpts.Marshal(proto)
		if err != nil {
			ctrl.responseSetControlActionError(w, "validation", err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	ctrl.responseSetControlActionError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *controlController) responseSetControlActionError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.Unmarshal().FromJson(rsp_err.Error())
		if err != nil {
			_ = result.SetCode(statusCode)
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			_ = result.SetErrors([]string{rsp_err.Error()})
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result.Marshal()); err != nil {
		log.Print(err.Error())
	}
}

var controlMrlOpts = protojson.MarshalOptions{
	UseProtoNames:   true,
	AllowPartial:    true,
	EmitUnpopulated: true,
	Indent:          "  ",
}
