// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"io"
	"log"
	"net/http"

	gosnappi "github.com/open-traffic-generator/snappi/gosnappi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi/interfaces"
	"google.golang.org/grpc/status"
)

type monitorController struct {
	handler interfaces.MonitorHandler
}

func NewHttpMonitorController(handler interfaces.MonitorHandler) interfaces.MonitorController {
	return &monitorController{handler}
}

func (ctrl *monitorController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/monitor/metrics", Method: "POST", Name: "GetMetrics", Handler: ctrl.GetMetrics},
		{Path: "/monitor/states", Method: "POST", Name: "GetStates", Handler: ctrl.GetStates},
		{Path: "/monitor/capture", Method: "POST", Name: "GetCapture", Handler: ctrl.GetCapture},
	}
}

/*
GetMetrics: POST /monitor/metrics
Description:
*/
func (ctrl *monitorController) GetMetrics(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.MetricsRequest
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewMetricsRequest()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseGetMetricsError(w, 400, err)
				return
			}
		} else {
			ctrl.responseGetMetricsError(w, 400, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseGetMetricsError(w, 500, bodyError)
		return
	}
	result, err := ctrl.handler.GetMetrics(item, r)
	if err != nil {
		ctrl.responseGetMetricsError(w, 500, err)
		return
	}

	if result.HasMetricsResponse() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.MetricsResponse()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetMetricsError(w, 500, errors.New("Unknown error"))
}

func (ctrl *monitorController) responseGetMetricsError(w http.ResponseWriter, status_code int, rsp_err error) {
	result := gosnappi.NewError()

	st, _ := status.FromError(rsp_err)
	err := result.FromJson(st.Message())
	if err != nil {
		result.Msg().Errors = []string{rsp_err.Error()}
	}
	result.Msg().Code = int32(status_code)

	if _, err := httpapi.WriteJSONResponse(w, status_code, result); err != nil {
		log.Print(err.Error())
	}
}

/*
GetStates: POST /monitor/states
Description:
*/
func (ctrl *monitorController) GetStates(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.StatesRequest
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewStatesRequest()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseGetStatesError(w, 400, err)
				return
			}
		} else {
			ctrl.responseGetStatesError(w, 400, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseGetStatesError(w, 500, bodyError)
		return
	}
	result, err := ctrl.handler.GetStates(item, r)
	if err != nil {
		ctrl.responseGetStatesError(w, 500, err)
		return
	}

	if result.HasStatesResponse() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.StatesResponse()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetStatesError(w, 500, errors.New("Unknown error"))
}

func (ctrl *monitorController) responseGetStatesError(w http.ResponseWriter, status_code int, rsp_err error) {
	result := gosnappi.NewError()

	st, _ := status.FromError(rsp_err)
	err := result.FromJson(st.Message())
	if err != nil {
		result.Msg().Errors = []string{rsp_err.Error()}
	}
	result.Msg().Code = int32(status_code)

	if _, err := httpapi.WriteJSONResponse(w, status_code, result); err != nil {
		log.Print(err.Error())
	}
}

/*
GetCapture: POST /monitor/capture
Description:
*/
func (ctrl *monitorController) GetCapture(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.CaptureRequest
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewCaptureRequest()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseGetCaptureError(w, 400, err)
				return
			}
		} else {
			ctrl.responseGetCaptureError(w, 400, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseGetCaptureError(w, 500, bodyError)
		return
	}
	result, err := ctrl.handler.GetCapture(item, r)
	if err != nil {
		ctrl.responseGetCaptureError(w, 500, err)
		return
	}

	if result.HasResponseBytes() {
		if _, err := httpapi.WriteByteResponse(w, 200, result.ResponseBytes()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetCaptureError(w, 500, errors.New("Unknown error"))
}

func (ctrl *monitorController) responseGetCaptureError(w http.ResponseWriter, status_code int, rsp_err error) {
	result := gosnappi.NewError()

	st, _ := status.FromError(rsp_err)
	err := result.FromJson(st.Message())
	if err != nil {
		result.Msg().Errors = []string{rsp_err.Error()}
	}
	result.Msg().Code = int32(status_code)

	if _, err := httpapi.WriteJSONResponse(w, status_code, result); err != nil {
		log.Print(err.Error())
	}
}
