// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"io"
	"log"
	"net/http"

	gosnappi "github.com/open-traffic-generator/snappi/gosnappi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi/interfaces"
	"google.golang.org/protobuf/encoding/protojson"
)

type configurationController struct {
	handler interfaces.ConfigurationHandler
}

func NewHttpConfigurationController(handler interfaces.ConfigurationHandler) interfaces.ConfigurationController {
	return &configurationController{handler}
}

func (ctrl *configurationController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/config", Method: "POST", Name: "SetConfig", Handler: ctrl.SetConfig},
		{Path: "/config", Method: "GET", Name: "GetConfig", Handler: ctrl.GetConfig},
		{Path: "/config", Method: "PATCH", Name: "UpdateConfig", Handler: ctrl.UpdateConfig},
	}
}

/*
SetConfig: POST /config
Description: Sets configuration resources on the traffic generator.
*/
func (ctrl *configurationController) SetConfig(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.Config
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewConfig()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseSetConfig400(w, err)
				return
			}
		} else {
			ctrl.responseSetConfig400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseSetConfig500(w, bodyError)
		return
	}
	result := ctrl.handler.SetConfig(item, r)
	if result.HasStatusCode200() {
		data, err := configurationMrlOpts.Marshal(result.StatusCode200().Msg())
		if err != nil {
			ctrl.responseSetConfig400(w, err)
		}
		httpapi.WriteCustomJSONResponse(w, 200, data)

		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseSetConfig500(w, errors.New("Unknown error"))
}

func (ctrl *configurationController) responseSetConfig400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetConfigResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *configurationController) responseSetConfig500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewSetConfigResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

/*
GetConfig: GET /config
Description:
*/
func (ctrl *configurationController) GetConfig(w http.ResponseWriter, r *http.Request) {
	result := ctrl.handler.GetConfig(r)
	if result.HasStatusCode200() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.StatusCode200()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetConfig500(w, errors.New("Unknown error"))
}

func (ctrl *configurationController) responseGetConfig500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewGetConfigResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

/*
UpdateConfig: PATCH /config
Description: Updates specific attributes of resources configured on the traffic generator. The fetched configuration shall reflect the updates applied successfully.
The Response.Warnings in the Success response is available for implementers to disclose additional information about a state change including any implicit changes that are outside the scope of the state change.
*/
func (ctrl *configurationController) UpdateConfig(w http.ResponseWriter, r *http.Request) {
	var item gosnappi.ConfigUpdate
	if r.Body != nil {
		body, readError := io.ReadAll(r.Body)
		if body != nil {
			item = gosnappi.NewConfigUpdate()
			err := item.FromJson(string(body))
			if err != nil {
				ctrl.responseUpdateConfig400(w, err)
				return
			}
		} else {
			ctrl.responseUpdateConfig400(w, readError)
			return
		}
	} else {
		bodyError := errors.New("Request do not have any body")
		ctrl.responseUpdateConfig500(w, bodyError)
		return
	}
	result := ctrl.handler.UpdateConfig(item, r)
	if result.HasStatusCode200() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.StatusCode200()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode400() {
		if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	if result.HasStatusCode500() {
		if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseUpdateConfig500(w, errors.New("Unknown error"))
}

func (ctrl *configurationController) responseUpdateConfig400(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewUpdateConfigResponse()
	result.StatusCode400().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 400, result.StatusCode400()); err != nil {
		log.Print(err.Error())
	}
}

func (ctrl *configurationController) responseUpdateConfig500(w http.ResponseWriter, rsp_err error) {
	result := gosnappi.NewUpdateConfigResponse()
	result.StatusCode500().SetErrors([]string{rsp_err.Error()})
	if _, err := httpapi.WriteJSONResponse(w, 500, result.StatusCode500()); err != nil {
		log.Print(err.Error())
	}
}

var configurationMrlOpts = protojson.MarshalOptions{
	UseProtoNames:   true,
	AllowPartial:    true,
	EmitUnpopulated: true,
	Indent:          "  ",
}
