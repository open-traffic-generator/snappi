// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"log"
	"net/http"

	gosnappi "github.com/open-traffic-generator/snappi/gosnappi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi/interfaces"
)

type capabilitiesController struct {
	handler interfaces.CapabilitiesHandler
}

func NewHttpCapabilitiesController(handler interfaces.CapabilitiesHandler) interfaces.CapabilitiesController {
	return &capabilitiesController{handler}
}

func (ctrl *capabilitiesController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/capabilities/version", Method: "GET", Name: "GetVersion", Handler: ctrl.GetVersion},
	}
}

/*
GetVersion: GET /capabilities/version
Description:
*/
func (ctrl *capabilitiesController) GetVersion(w http.ResponseWriter, r *http.Request) {
	result, err := ctrl.handler.GetVersion(r)
	if err != nil {
		ctrl.responseGetVersionError(w, "internal", err)
		return
	}

	if result.HasVersion() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.Version()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetVersionError(w, "internal", errors.New("Unknown error"))
}

func (ctrl *capabilitiesController) responseGetVersionError(w http.ResponseWriter, errorKind gosnappi.ErrorKindEnum, rsp_err error) {
	var result gosnappi.Error
	var statusCode int32
	if errorKind == "validation" {
		statusCode = 400
	} else if errorKind == "internal" {
		statusCode = 500
	}

	if rErr, ok := rsp_err.(gosnappi.Error); ok {
		result = rErr
	} else {
		result = gosnappi.NewError()
		err := result.FromJson(rsp_err.Error())
		if err != nil {
			result.Msg().Code = statusCode
			err = result.SetKind(errorKind)
			if err != nil {
				log.Print(err.Error())
			}
			result.Msg().Errors = []string{rsp_err.Error()}
		}
	}

	if _, err := httpapi.WriteJSONResponse(w, int(result.Code()), result); err != nil {
		log.Print(err.Error())
	}
}
