// This file is autogenerated. Do not modify
package controllers

import (
	"errors"
	"log"
	"net/http"

	gosnappi "github.com/open-traffic-generator/snappi/gosnappi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi"
	"github.com/open-traffic-generator/snappi/gosnappi/httpapi/interfaces"
	"google.golang.org/grpc/status"
)

type capabilitiesController struct {
	handler interfaces.CapabilitiesHandler
}

func NewHttpCapabilitiesController(handler interfaces.CapabilitiesHandler) interfaces.CapabilitiesController {
	return &capabilitiesController{handler}
}

func (ctrl *capabilitiesController) Routes() []httpapi.Route {
	return []httpapi.Route{
		{Path: "/capabilities/version", Method: "GET", Name: "GetVersion", Handler: ctrl.GetVersion},
	}
}

/*
GetVersion: GET /capabilities/version
Description:
*/
func (ctrl *capabilitiesController) GetVersion(w http.ResponseWriter, r *http.Request) {
	result, err := ctrl.handler.GetVersion(r)
	if err != nil {
		ctrl.responseGetVersionError(w, 500, err)
		return
	}

	if result.HasVersion() {
		if _, err := httpapi.WriteJSONResponse(w, 200, result.Version()); err != nil {
			log.Print(err.Error())
		}
		return
	}
	ctrl.responseGetVersionError(w, 500, errors.New("Unknown error"))
}

func (ctrl *capabilitiesController) responseGetVersionError(w http.ResponseWriter, status_code int, rsp_err error) {
	result := gosnappi.NewError()

	st, _ := status.FromError(rsp_err)
	err := result.FromJson(st.Message())
	if err != nil {
		result.Msg().Errors = []string{rsp_err.Error()}
	}
	result.Msg().Code = int32(status_code)

	if _, err := httpapi.WriteJSONResponse(w, status_code, result); err != nil {
		log.Print(err.Error())
	}
}
