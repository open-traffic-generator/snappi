openapi: 3.0.3
info:
  title: Open Traffic Generator API
  description: "Open Traffic Generator API defines a model-driven, vendor-neutral\
    \ and standard \ninterface for emulating layer 2-7 network devices and generating\
    \ test traffic.\n\nContributions can be made in the following ways:\n- [open an\
    \ issue](https://github.com/open-traffic-generator/models/issues) in the models\
    \ repository\n- [fork the models repository](https://github.com/open-traffic-generator/models)\
    \ and submit a PR"
  version: 0.12.2
  contact:
    url: https://github.com/open-traffic-generator/models
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-model-guide: https://github.com/open-traffic-generator/models/blob/master/MODEL-GUIDE.md
servers:
- url: /
paths:
  /config:
    post:
      tags:
      - Configuration
      operationId: set_config
      description: |-
        Sets configuration resources on the traffic generator.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '200':
          $ref: '#/components/responses/Success'
          x-field-uid: 1
        default:
          $ref: '#/components/responses/Failure'
          x-field-uid: 2
    get:
      tags:
      - Configuration
      operationId: get_config
      responses:
        '200':
          description: |-
            Config response from the traffic generator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          x-field-uid: 1
        default:
          $ref: '#/components/responses/Failure'
          x-field-uid: 2
    patch:
      tags:
      - Configuration
      operationId: update_config
      description: |-
        Updates specific attributes of resources configured on the traffic generator. The fetched configuration shall reflect the updates applied successfully.
        The Response.Warnings in the Success response is available for implementers to disclose additional information about a state change including any implicit changes that are outside the scope of the state change.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config.Update'
      responses:
        '200':
          $ref: '#/components/responses/Success'
          x-field-uid: 1
        default:
          $ref: '#/components/responses/Failure'
          x-field-uid: 2
  /control/state:
    post:
      tags:
      - Control
      operationId: set_control_state
      description: |-
        Sets the operational state of configured resources.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Control.State'
      responses:
        '200':
          $ref: '#/components/responses/Success'
          x-field-uid: 1
        default:
          $ref: '#/components/responses/Failure'
          x-field-uid: 2
  /control/action:
    post:
      tags:
      - Control
      operationId: set_control_action
      description: |-
        Triggers actions against configured resources.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Control.Action'
      responses:
        '200':
          description: |-
            Response for actions triggered against configured resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Control.Action.Response'
          x-field-uid: 1
        default:
          $ref: '#/components/responses/Failure'
          x-field-uid: 2
  /monitor/metrics:
    description: |-
      Metrics API
    post:
      tags:
      - Monitor
      operationId: get_metrics
      requestBody:
        description: |-
          Request to traffic generator for metrics of choice
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metrics.Request'
      responses:
        '200':
          description: |-
            Response from traffic generator for chosen metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics.Response'
          x-field-uid: 1
        default:
          $ref: '#/components/responses/Failure'
          x-field-uid: 2
  /monitor/states:
    description: |-
      States API
    post:
      tags:
      - Monitor
      operationId: get_states
      requestBody:
        description: |-
          Request to traffic generator for states of choice
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/States.Request'
      responses:
        '200':
          description: |-
            Response from traffic generator for chosen states
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/States.Response'
          x-field-uid: 1
        default:
          $ref: '#/components/responses/Failure'
          x-field-uid: 2
  /monitor/capture:
    description: |-
      Capture results API
    post:
      tags:
      - Monitor
      operationId: get_capture
      requestBody:
        description: |-
          Capture results request to the traffic generator.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Capture.Request'
      responses:
        '200':
          description: |-
            Capture results response from the traffic generator.
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          x-field-uid: 1
        default:
          $ref: '#/components/responses/Failure'
          x-field-uid: 2
  /capabilities/version:
    get:
      tags:
      - Capabilities
      operationId: get_version
      responses:
        '200':
          description: |-
            Version details from API server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
          x-field-uid: 1
        default:
          $ref: '#/components/responses/Failure'
          x-field-uid: 2
components:
  responses:
    Success:
      description: "The request has succeeded with no application content but the\
        \ server \nmay return a list of detailed warnings."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Warning'
    Failure:
      description: |-
        The request did not succeed and server has responded with error details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Config:
      description: |-
        A container for all models that are part of the configuration.
      type: object
      properties:
        ports:
          description: |-
            The ports that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Port'
          x-field-uid: 1
        lags:
          description: |-
            The LAGs that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Lag'
          x-field-uid: 2
        layer1:
          description: |-
            The layer1 settings that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Layer1'
          x-field-uid: 3
        captures:
          description: |-
            The capture settings that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Capture'
          x-field-uid: 4
        devices:
          description: "The emulated devices that will be configured on the traffic\
            \ generator.\nEach device contains configurations for network interfaces\
            \ and \nprotocols running on top of those interfaces."
          type: array
          items:
            $ref: '#/components/schemas/Device'
          x-field-uid: 5
        flows:
          description: |-
            The flows that will be configured on the traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Flow'
          x-field-uid: 6
        events:
          $ref: '#/components/schemas/Event'
          x-field-uid: 7
        options:
          $ref: '#/components/schemas/Config.Options'
          x-field-uid: 8
        lldp:
          description: |-
            LLDP protocol that will be configured on traffic generator.
          type: array
          items:
            $ref: '#/components/schemas/Lldp'
          x-field-uid: 9
    Config.Options:
      description: |-
        Global configuration options.
      type: object
      properties:
        port_options:
          $ref: '#/components/schemas/Port.Options'
          x-field-uid: 1
        protocol_options:
          $ref: '#/components/schemas/Protocol.Options'
          x-field-uid: 2
    Port:
      description: |-
        An abstract test port.
      type: object
      properties:
        location:
          description: |-
            The location of a test port.  It is the endpoint where packets will emit from.
            Test port locations can be the following:
              - physical appliance with multiple ports
              - physical chassis with multiple cards and ports
              - local interface
              - virtual machine, docker container, kubernetes cluster

            The test port location format is implementation specific. Use the /results/capabilities API to determine what formats an  implementation supports for the location property.
            Get the configured location state by using the /results/port API.
          type: string
          x-field-uid: 1
        name:
          x-field-uid: 2
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
      required:
      - name
    Port.Options:
      description: "Common port options that apply to all configured Port objects. "
      type: object
      properties:
        location_preemption:
          description: |-
            Preempt all the test port locations as defined by the  Port.Port.properties.location. If the test ports defined by their location values are in use and  this value is true, the test ports will be preempted.
          type: boolean
          default: false
          x-field-uid: 1
    Lag:
      description: |-
        The container for LAG (ports group) - aggregation of multiple LAG members (ports)
      type: object
      properties:
        ports:
          type: array
          items:
            $ref: '#/components/schemas/Lag.Port'
          minItems: 1
          maxItems: 32
          x-field-uid: 1
        protocol:
          $ref: '#/components/schemas/Lag.Protocol'
          x-field-uid: 2
        min_links:
          description: |-
            Specifies the mininum number of member interfaces that must be active for the aggregate interface to be available.
            If the aggregate interface is not available due to min-links criterion not being met, LACPDUs continue to be transmitted and received by the member interfaces if LACP is enabled, but other PDUs are not transmitted or received.
          type: integer
          format: uint32
          maximum: 32
          default: 1
          x-field-uid: 3
        name:
          x-field-uid: 4
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
      required:
      - name
    Lag.Port:
      description: |-
        The container for a port's ethernet interface and LAG protocol settings
      type: object
      required:
      - port_name
      - ethernet
      properties:
        port_name:
          description: "The name of a port object that will be part of the LAG. \n\
            \nx-constraint:\n- /components/schemas/Port/properties/name\n\n\nx-constraint:\n\
            - /components/schemas/Port/properties/name\n"
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 1
        lacp:
          $ref: '#/components/schemas/Lag.Port.Lacp'
          x-field-uid: 2
        ethernet:
          $ref: '#/components/schemas/Device.EthernetBase'
          x-field-uid: 3
    Lag.Protocol:
      type: object
      properties:
        choice:
          description: |-
            The type of controlling protocol for the LAG (ports group).
          type: string
          default: lacp
          x-field-uid: 1
          x-enum:
            lacp:
              x-field-uid: 1
            static:
              x-field-uid: 2
          enum:
          - lacp
          - static
        lacp:
          $ref: '#/components/schemas/Lag.Protocol.Lacp'
          x-field-uid: 2
        static:
          $ref: '#/components/schemas/Lag.Protocol.Static'
          x-field-uid: 3
    Lag.Protocol.Static:
      description: |-
        The container for static link aggregation protocol settings.
      type: object
      properties:
        lag_id:
          description: |-
            The static lag id
          type: integer
          format: uint32
          maximum: 65535
          default: 0
          x-field-uid: 1
    Lag.Protocol.Lacp:
      description: |-
        The container for link aggregation control protocol settings of a LAG (ports group).
      type: object
      properties:
        actor_system_id:
          description: |-
            The actor system id
          type: string
          format: mac
          default: 00:00:00:00:00:00
          x-field-uid: 1
        actor_system_priority:
          description: |-
            The actor system priority
          type: integer
          format: uint32
          maximum: 65535
          default: 0
          x-field-uid: 2
        actor_key:
          description: |-
            The actor key
          type: integer
          format: uint32
          maximum: 65535
          default: 0
          x-field-uid: 3
    Lag.Port.Lacp:
      description: |-
        The container for link aggregation control protocol settings of a LAG member (port).
      type: object
      properties:
        actor_port_number:
          description: |-
            The actor port number
          type: integer
          format: uint32
          maximum: 65535
          default: 0
          x-field-uid: 1
        actor_port_priority:
          description: |-
            The actor port priority
          type: integer
          format: uint32
          maximum: 65535
          default: 1
          x-field-uid: 2
        actor_activity:
          description: |-
            Sets the value of LACP actor activity as either passive or active.
            Passive indicates the port's preference for not transmitting  LACPDUs unless its partner's control is Active.
            Active indicates the port's preference to participate in the  protocol regardless of the partner's control value.
          type: string
          default: active
          x-field-uid: 3
          x-enum:
            passive:
              x-field-uid: 1
            active:
              x-field-uid: 2
          enum:
          - passive
          - active
        lacpdu_periodic_time_interval:
          x-constants:
            fast: 1
            slow: 30
            auto: 0
          description: |-
            This field defines how frequently LACPDUs are sent to the link partner
          type: integer
          format: uint32
          maximum: 65535
          default: 0
          x-field-uid: 4
        lacpdu_timeout:
          x-constants:
            short: 3
            long: 90
            auto: 0
          description: |-
            This timer is used to detect whether received protocol information has expired
          type: integer
          format: uint32
          maximum: 65535
          default: 0
          x-field-uid: 5
    Device.EthernetBase:
      description: |-
        Base Ethernet interface.
      type: object
      required:
      - mac
      - name
      properties:
        mac:
          description: |-
            Media Access Control address.
          type: string
          format: mac
          x-field-uid: 1
        mtu:
          description: |-
            Maximum Transmission Unit.
          type: integer
          format: uint32
          maximum: 65535
          default: 1500
          x-field-uid: 2
        vlans:
          description: |-
            List of VLANs
          type: array
          items:
            $ref: '#/components/schemas/Device.Vlan'
          x-field-uid: 3
        name:
          x-field-uid: 4
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Device.Ethernet:
      description: |-
        An Ethernet interface with IPv4 and IPv6 addresses.
      type: object
      properties:
        connection:
          description: |-
            Device connection to physical, LAG or another device.
          $ref: '#/components/schemas/Ethernet.Connection'
          x-field-uid: 2
        ipv4_addresses:
          description: "List of IPv4 addresses and their gateways. "
          type: array
          items:
            $ref: '#/components/schemas/Device.Ipv4'
          x-field-uid: 3
        ipv6_addresses:
          description: |-
            List of global IPv6 addresses and their gateways.
            The Link Local IPv6 address will be automatically generated.
          type: array
          items:
            $ref: '#/components/schemas/Device.Ipv6'
          x-field-uid: 4
        mac:
          x-field-uid: 5
          description: |-
            Media Access Control address.
          type: string
          format: mac
        mtu:
          x-field-uid: 6
          description: |-
            Maximum Transmission Unit.
          type: integer
          format: uint32
          maximum: 65535
          default: 1500
        vlans:
          x-field-uid: 7
          description: |-
            List of VLANs
          type: array
          items:
            $ref: '#/components/schemas/Device.Vlan'
        name:
          x-field-uid: 8
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
      required:
      - mac
      - name
    Ethernet.Connection:
      description: |-
        Ethernet interface connection to a port, LAG or VXLAN tunnel.
      type: object
      properties:
        choice:
          description: |-
            port_name, lag_name or vxlan_name
          type: string
          x-field-uid: 1
          x-enum:
            port_name:
              x-field-uid: 1
            lag_name:
              x-field-uid: 2
            vxlan_name:
              x-field-uid: 3
          enum:
          - port_name
          - lag_name
          - vxlan_name
        port_name:
          description: |
            Name of the port that the Ethernet interface is configured on.

            x-constraint:
            - /components/schemas/Port/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 2
        lag_name:
          description: |
            Name of the LAG that the Ethernet interface is configured on.

            x-constraint:
            - /components/schemas/Lag/properties/name


            x-constraint:
            - /components/schemas/Lag/properties/name
          type: string
          x-constraint:
          - /components/schemas/Lag/properties/name
          x-field-uid: 3
        vxlan_name:
          description: |
            Name of the VXLAN instance (or VXLAN tunnel) that this Ethernet interface is connected to.

            x-constraint:
            - #/components/schemas/Vxlan.V4Tunnel/properties/name
            - #/components/schemas/Vxlan.V6Tunnel/properties/name


            x-constraint:
            - #/components/schemas/Vxlan.V4Tunnel/properties/name
            - #/components/schemas/Vxlan.V6Tunnel/properties/name
          type: string
          x-constraint:
          - '#/components/schemas/Vxlan.V4Tunnel/properties/name'
          - '#/components/schemas/Vxlan.V6Tunnel/properties/name'
          x-field-uid: 4
    Device.Vlan:
      description: |-
        Emulated VLAN protocol.
      type: object
      properties:
        tpid:
          description: |-
            Tag protocol identifier
          type: string
          default: x8100
          x-field-uid: 1
          x-enum:
            x8100:
              x-field-uid: 1
            x88A8:
              x-field-uid: 2
            x9100:
              x-field-uid: 3
            x9200:
              x-field-uid: 4
            x9300:
              x-field-uid: 5
          enum:
          - x8100
          - x88A8
          - x9100
          - x9200
          - x9300
        priority:
          description: |-
            Priority code point
          type: integer
          format: uint32
          maximum: 3
          default: 0
          x-field-uid: 2
        id:
          description: |-
            VLAN identifier
          type: integer
          format: uint32
          maximum: 4095
          default: 1
          x-field-uid: 3
        name:
          x-field-uid: 4
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
      required:
      - name
    Device.Ipv4:
      description: |-
        An IPv4 interface with gateway
      type: object
      required:
      - gateway
      - address
      - name
      properties:
        gateway:
          description: |-
            The IPv4 address of the gateway
          type: string
          format: ipv4
          x-field-uid: 1
        gateway_mac:
          $ref: '#/components/schemas/Device.Ipv4GatewayMAC'
          x-field-uid: 2
        address:
          x-field-uid: 3
          description: |-
            The IPv4 address
          type: string
          format: ipv4
        prefix:
          x-field-uid: 4
          description: |-
            The prefix of the IPv4 address.
          type: integer
          format: uint32
          minimum: 1
          maximum: 32
          default: 24
        name:
          x-field-uid: 5
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Device.Ipv4Loopback:
      description: |-
        An IPv4 Loopback interface.
      type: object
      required:
      - eth_name
      - name
      properties:
        eth_name:
          description: |
            The unique name of the Ethernet interface behind which this Loopback  interface will be created.

            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name


            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
          x-field-uid: 1
        address:
          description: |-
            The IPv4 Loopback address with prefix length of 32.
          type: string
          format: ipv4
          default: 0.0.0.0
          x-field-uid: 2
        name:
          x-field-uid: 3
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Device.Ipv4GatewayMAC:
      description: |-
        By default auto(resolved gateway mac) is set.  Setting a value would mean that ARP will not be used for learning MAC of connected device. The user-configured MAC address will be used for auto-filling the destination
         MAC address in the control and data packets sent from this IPv4 endpoint
        whenever applicable.
      type: object
      properties:
        choice:
          description: |-
            auto or configured value.
          type: string
          default: auto
          x-field-uid: 1
          x-enum:
            auto:
              x-field-uid: 1
            value:
              x-field-uid: 2
          enum:
          - auto
          - value
        auto:
          description: |-
            The OTG implementation can provide a system generated value for this property. If the OTG is unable to generate a value the default value must be used.
          type: string
          format: mac
          default: 00:00:00:00:00:00
          x-field-uid: 2
        value:
          type: string
          format: mac
          default: 00:00:00:00:00:00
          x-field-uid: 3
    Device.Ipv6:
      description: |-
        An IPv6 interface with gateway.
      type: object
      required:
      - gateway
      - address
      - name
      properties:
        gateway:
          description: |-
            The IPv6 gateway address.
          type: string
          format: ipv6
          x-field-uid: 1
        gateway_mac:
          $ref: '#/components/schemas/Device.Ipv6GatewayMAC'
          x-field-uid: 2
        address:
          x-field-uid: 3
          description: |-
            The IPv6 address.
          type: string
          format: ipv6
        prefix:
          x-field-uid: 4
          description: |-
            The network prefix.
          type: integer
          format: uint32
          minimum: 1
          maximum: 128
          default: 64
        name:
          x-field-uid: 5
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Device.Ipv6Loopback:
      description: |-
        An IPv6 Loopback interface
      type: object
      required:
      - eth_name
      - name
      properties:
        eth_name:
          description: "The unique name of the Ethernet interface behind which this\
            \ Loopback \n interface will be created.\n\nx-constraint:\n- /components/schemas/Device.Ethernet/properties/name\n\
            \n\nx-constraint:\n- /components/schemas/Device.Ethernet/properties/name\n"
          type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
          x-field-uid: 1
        address:
          description: |-
            The IPv6 Loopback address with prefix length of 128.
          type: string
          format: ipv6
          default: ::0
          x-field-uid: 2
        name:
          x-field-uid: 3
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Device.Ipv6GatewayMAC:
      description: |-
        By default auto(resolved gateway mac) is set. Setting a value would mean that ND will not be used for learning MAC of connected device. The user-configured MAC address will be used for auto-filling the destination
         MAC address in the control and data packets sent from this IPv6 endpoint
        whenever applicable.
      type: object
      properties:
        choice:
          description: |-
            auto or configured value.
          type: string
          default: auto
          x-field-uid: 1
          x-enum:
            auto:
              x-field-uid: 1
            value:
              x-field-uid: 2
          enum:
          - auto
          - value
        auto:
          description: |-
            The OTG implementation can provide a system generated value for this property. If the OTG is unable to generate a value the default value must be used.
          type: string
          format: mac
          default: 00:00:00:00:00:00
          x-field-uid: 2
        value:
          type: string
          format: mac
          default: 00:00:00:00:00:00
          x-field-uid: 3
    Layer1:
      description: |-
        A container for layer1 settings.
      type: object
      required:
      - port_names
      - name
      properties:
        port_names:
          description: "A list of unique names of port objects that will share the\n\
            choice settings. \n\nx-constraint:\n- /components/schemas/Port/properties/name\n\
            \n\nx-constraint:\n- /components/schemas/Port/properties/name\n"
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 1
        speed:
          description: |-
            Set the speed if supported.
          type: string
          default: speed_10_gbps
          x-field-uid: 2
          x-enum:
            speed_10_fd_mbps:
              x-field-uid: 1
            speed_10_hd_mbps:
              x-field-uid: 2
            speed_100_fd_mbps:
              x-field-uid: 3
            speed_100_hd_mbps:
              x-field-uid: 4
            speed_1_gbps:
              x-field-uid: 5
            speed_10_gbps:
              x-field-uid: 6
            speed_25_gbps:
              x-field-uid: 7
            speed_40_gbps:
              x-field-uid: 8
            speed_50_gbps:
              x-field-uid: 9
            speed_100_gbps:
              x-field-uid: 10
            speed_200_gbps:
              x-field-uid: 11
            speed_400_gbps:
              x-field-uid: 12
          enum:
          - speed_10_fd_mbps
          - speed_10_hd_mbps
          - speed_100_fd_mbps
          - speed_100_hd_mbps
          - speed_1_gbps
          - speed_10_gbps
          - speed_25_gbps
          - speed_40_gbps
          - speed_50_gbps
          - speed_100_gbps
          - speed_200_gbps
          - speed_400_gbps
        media:
          description: |-
            Set the type of media interface if supported.
          type: string
          x-field-uid: 3
          x-enum:
            copper:
              x-field-uid: 1
            fiber:
              x-field-uid: 2
            sgmii:
              x-field-uid: 3
          enum:
          - copper
          - fiber
          - sgmii
        promiscuous:
          description: |-
            Enable promiscuous mode if supported.
          type: boolean
          default: true
          x-field-uid: 4
        mtu:
          description: |-
            Set the maximum transmission unit size if supported.
          type: integer
          format: uint32
          minimum: 64
          maximum: 9000
          default: 1500
          x-field-uid: 5
        ieee_media_defaults:
          description: |-
            Set to true to override the auto_negotiate, link_training
            and rs_fec settings for gigabit ethernet interfaces.
          type: boolean
          x-field-uid: 6
        auto_negotiate:
          description: |-
            Enable/disable auto negotiation.
          type: boolean
          x-field-uid: 7
        auto_negotiation:
          $ref: '#/components/schemas/Layer1.AutoNegotiation'
          x-field-uid: 8
        flow_control:
          $ref: '#/components/schemas/Layer1.FlowControl'
          x-field-uid: 9
        name:
          x-field-uid: 10
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Layer1.AutoNegotiation:
      description: |-
        Configuration for auto negotiation settings
      type: object
      properties:
        advertise_1000_mbps:
          description: |-
            If auto_negotiate is true and the interface supports this option
            then this speed will be advertised.
          type: boolean
          default: true
          x-field-uid: 1
        advertise_100_fd_mbps:
          description: |-
            If auto_negotiate is true and the interface supports this option
            then this speed will be advertised.
          type: boolean
          default: true
          x-field-uid: 2
        advertise_100_hd_mbps:
          description: |-
            If auto_negotiate is true and the interface supports this option
            then this speed will be advertised.
          type: boolean
          default: true
          x-field-uid: 3
        advertise_10_fd_mbps:
          description: |-
            If auto_negotiate is true and the interface supports this option
            then this speed will be advertised.
          type: boolean
          default: true
          x-field-uid: 4
        advertise_10_hd_mbps:
          description: |-
            If auto_negotiate is true and the interface supports this option
            then this speed will be advertised.
          type: boolean
          default: true
          x-field-uid: 5
        link_training:
          description: |-
            Enable/disable gigabit ethernet link training.
          type: boolean
          default: false
          x-field-uid: 6
        rs_fec:
          description: |-
            Enable/disable gigabit ethernet reed solomon forward error correction (RS FEC).
          type: boolean
          default: false
          x-field-uid: 7
    Layer1.FlowControl:
      description: |-
        A container for layer1 receive flow control settings.
        To enable flow control settings on ports this object must be a valid
        object not a null value.
      type: object
      properties:
        directed_address:
          description: |-
            The 48bit mac address that the layer1 port names will listen on
            for a directed pause.
          type: string
          format: mac
          default: 01:80:C2:00:00:01
          x-field-uid: 1
        choice:
          description: |-
            The type of priority flow control.
          type: string
          default: ieee_802_1qbb
          x-field-uid: 2
          x-enum:
            ieee_802_1qbb:
              x-field-uid: 1
            ieee_802_3x:
              x-field-uid: 2
          enum:
          - ieee_802_1qbb
          - ieee_802_3x
        ieee_802_1qbb:
          $ref: '#/components/schemas/Layer1.Ieee8021qbb'
          x-field-uid: 3
        ieee_802_3x:
          $ref: '#/components/schemas/Layer1.Ieee8023x'
          x-field-uid: 4
    Layer1.Ieee8023x:
      description: |-
        A container for ieee 802.3x rx pause settings
      type: object
    Layer1.Ieee8021qbb:
      description: "These settings enhance the existing 802.3x pause priority capabilities\
        \ \nto enable flow control based on 802.1p priorities (classes of service). "
      type: object
      properties:
        pfc_delay:
          description: "The upper limit on the transmit time of a queue after receiving\
            \ a \nmessage to pause a specified priority.\nA value of 0 or null indicates\
            \ that pfc delay will not be enabled. "
          type: integer
          format: uint32
          default: 0
          maximum: 65535
          x-field-uid: 1
        pfc_class_0:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          format: uint32
          maximum: 7
          default: 0
          x-field-uid: 2
        pfc_class_1:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          format: uint32
          maximum: 7
          default: 1
          x-field-uid: 3
        pfc_class_2:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          format: uint32
          maximum: 7
          default: 2
          x-field-uid: 4
        pfc_class_3:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          format: uint32
          maximum: 7
          default: 3
          x-field-uid: 5
        pfc_class_4:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          format: uint32
          maximum: 7
          default: 4
          x-field-uid: 6
        pfc_class_5:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          format: uint32
          maximum: 7
          default: 5
          x-field-uid: 7
        pfc_class_6:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          format: uint32
          maximum: 7
          default: 6
          x-field-uid: 8
        pfc_class_7:
          description: |-
            The valid values are null, 0 - 7.
            A null value indicates there is no setting for this pfc class.
          type: integer
          format: uint32
          maximum: 7
          default: 7
          x-field-uid: 9
    Capture:
      x-status:
        status: under_review
        information: There may be changes in filter configuration
      description: |-
        Under Review: There may be changes in filter configuration

        Under Review: There may be changes in filter configuration

        Configuration for capture settings.
      type: object
      required:
      - port_names
      - name
      properties:
        port_names:
          description: |
            The unique names of ports that the capture settings will apply to. Port_names cannot be duplicated between capture objects.

            x-constraint:
            - /components/schemas/Port/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 1
        filters:
          description: |-
            A list of filters to apply to the capturing ports. If no filters are specified then all packets will be captured. A capture can have multiple filters. The number of filters supported is determined by the implementation which can be retrieved using the capabilities API.
            When multiple filters are specified the capture implementation  must && (and) all the filters.
          type: array
          items:
            $ref: '#/components/schemas/Capture.Filter'
          x-field-uid: 2
        overwrite:
          description: |-
            Overwrite the capture buffer.
          type: boolean
          default: true
          x-field-uid: 3
        packet_size:
          description: |-
            The maximum size of each captured packet. If no value is specified or it is null then the entire packet will be captured.
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 4
        format:
          description: |-
            The format of the capture file.
          type: string
          default: pcap
          x-field-uid: 5
          x-enum:
            pcap:
              x-field-uid: 1
            pcapng:
              x-field-uid: 2
          enum:
          - pcap
          - pcapng
        name:
          x-field-uid: 6
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Capture.Filter:
      description: |-
        Configuration for capture filters
      type: object
      properties:
        choice:
          description: |-
            The type of capture filter.
          type: string
          default: custom
          x-field-uid: 1
          x-enum:
            custom:
              x-field-uid: 1
            ethernet:
              x-field-uid: 2
            vlan:
              x-field-uid: 3
            ipv4:
              x-field-uid: 4
            ipv6:
              x-field-uid: 5
          enum:
          - custom
          - ethernet
          - vlan
          - ipv4
          - ipv6
        custom:
          description: |-
            Offset from last filter in the list. If no filters are present it is offset from position 0. Multiple custom filters can be present, the length of each custom filter is the length of the value being filtered.
          $ref: '#/components/schemas/Capture.Custom'
          x-field-uid: 2
        ethernet:
          $ref: '#/components/schemas/Capture.Ethernet'
          x-field-uid: 3
        vlan:
          $ref: '#/components/schemas/Capture.Vlan'
          x-field-uid: 4
        ipv4:
          $ref: '#/components/schemas/Capture.Ipv4'
          x-field-uid: 5
        ipv6:
          $ref: '#/components/schemas/Capture.Ipv6'
          x-field-uid: 6
    Capture.Custom:
      properties:
        offset:
          description: |-
            The bit offset of field to filter on
          type: integer
          format: uint32
          x-field-uid: 1
        bit_length:
          description: |-
            The bit length of field to filter on
          type: integer
          format: uint32
          default: 8
          x-field-uid: 2
        value:
          x-field-uid: 3
          type: string
          format: hex
          default: '00'
        mask:
          x-field-uid: 4
          type: string
          format: hex
          default: '00'
        negate:
          x-field-uid: 5
          type: boolean
          default: false
      type: object
    Capture.Field:
      type: object
      properties:
        value:
          type: string
          format: hex
          default: '00'
          x-field-uid: 1
        mask:
          type: string
          format: hex
          default: '00'
          x-field-uid: 2
        negate:
          type: boolean
          default: false
          x-field-uid: 3
    Capture.Ethernet:
      type: object
      properties:
        src:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 1
        dst:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 2
        ether_type:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 3
        pfc_queue:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 4
    Capture.Vlan:
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 1
        cfi:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 2
        id:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 3
        protocol:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 4
    Capture.Ipv4:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 1
        header_length:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 2
        priority:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 3
        total_length:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 4
        identification:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 5
        reserved:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 6
        dont_fragment:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 7
        more_fragments:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 8
        fragment_offset:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 9
        time_to_live:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 10
        protocol:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 11
        header_checksum:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 12
        src:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 13
        dst:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 14
    Capture.Ipv6:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 1
        traffic_class:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 2
        flow_label:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 3
        payload_length:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 4
        next_header:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 5
        hop_limit:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 6
        src:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 7
        dst:
          $ref: '#/components/schemas/Capture.Field'
          x-field-uid: 8
    Device:
      description: |-
        A container for emulated interfaces, loopback interfaces and protocol configurations.
      type: object
      properties:
        ethernets:
          description: |-
            Ethernet configuration for one or more emulated network interfaces.
          type: array
          items:
            $ref: '#/components/schemas/Device.Ethernet'
          x-field-uid: 1
        ipv4_loopbacks:
          description: |-
            IPv4 Loopback interface that can be attached to an Ethernet in the same device  or to an Ethernet in another device.
          type: array
          items:
            $ref: '#/components/schemas/Device.Ipv4Loopback'
          x-field-uid: 2
        ipv6_loopbacks:
          description: |-
            IPv6 Loopback interface that can be attached to an Ethernet in the same device  or to an Ethernet in another device.
          type: array
          items:
            $ref: '#/components/schemas/Device.Ipv6Loopback'
          x-field-uid: 3
        isis:
          description: |-
            The properties of an IS-IS router and its children,  such as IS-IS interfaces and route ranges.
          $ref: '#/components/schemas/Device.IsisRouter'
          x-field-uid: 4
        bgp:
          description: |-
            The properties of BGP router and its children,  such as BGPv4, BGPv6 peers and their route ranges.
          $ref: '#/components/schemas/Device.BgpRouter'
          x-field-uid: 5
        vxlan:
          description: |-
            Configuration of VXLAN tunnel interfaces RFC Ref: https://datatracker.ietf.org/doc/html/rfc7348
          $ref: '#/components/schemas/Device.Vxlan'
          x-field-uid: 6
        name:
          x-field-uid: 7
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        rsvp:
          description: |-
            The properties of an RSVP router and its children.
          $ref: '#/components/schemas/Device.Rsvp'
          x-field-uid: 8
      required:
      - name
    Protocol.Options:
      description: "Common options that apply to all configured protocols and interfaces. "
      type: object
      properties:
        auto_start_all:
          description: |-
            When set to true, all underlying resources for configured protocols   and interfaces shall be created and corresponding protocol session negotiation shall be initiated. Otherwise, when set to false,  corresponding protocol session negotiation will need to be initiated  using a separate set_protocol_state API call.
          type: boolean
          default: true
          x-field-uid: 1
    Device.IsisRouter:
      description: |-
        A container of properties for an ISIS router and its interfaces.
      type: object
      required:
      - system_id
      - interfaces
      - name
      properties:
        instance:
          description: |-
            This contains the properties of a Multi-Instance-capable routers or MI-RTR. Each router can emulate one ISIS instance at a time.
          $ref: '#/components/schemas/Device.IsisMultiInstance'
          x-field-uid: 1
        system_id:
          description: |-
            The System ID for this emulated ISIS router, e.g. "640100010000".
          type: string
          format: hex
          x-field-uid: 2
        interfaces:
          description: |-
            List of ISIS interfaces for this router.
          type: array
          items:
            $ref: '#/components/schemas/Isis.Interface'
          x-field-uid: 3
        basic:
          description: "Contains basic properties of an ISIS Router. "
          $ref: '#/components/schemas/Isis.Basic'
          x-field-uid: 4
        advanced:
          description: |-
            Contains advance properties of an ISIS Router..
          $ref: '#/components/schemas/Isis.Advanced'
          x-field-uid: 5
        router_auth:
          description: |-
            ISIS Router authentication properties.
          $ref: '#/components/schemas/Isis.Authentication'
          x-field-uid: 6
        v4_routes:
          description: |-
            Emulated ISIS IPv4 routes.
          type: array
          items:
            $ref: '#/components/schemas/Isis.V4RouteRange'
          x-field-uid: 7
        v6_routes:
          description: |-
            Emulated ISIS IPv6 routes.
          type: array
          items:
            $ref: '#/components/schemas/Isis.V6RouteRange'
          x-field-uid: 8
        name:
          x-field-uid: 9
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Device.IsisMultiInstance:
      description: "This container properties of an Multi-Instance-capable router\
        \ (MI-RTR). "
      type: object
      properties:
        iid:
          description: |-
            Instance Identifier (IID) TLV will associate a PDU with an ISIS instance  by using a unique 16-bit number and including one or more  Instance-Specific Topology Identifiers (ITIDs).
          type: integer
          format: uint32
          default: 1
          maximum: 65535
          x-field-uid: 1
        itids:
          description: |-
            This contains one or more ITIDs that will be advertised in IID TLV.
          type: array
          items:
            type: integer
            format: uint32
            default: 0
            maximum: 65535
          x-field-uid: 2
    Isis.Interface:
      description: |-
        Configuration for single ISIS interface.
      type: object
      required:
      - eth_name
      - name
      properties:
        eth_name:
          description: "The unique name of the Ethernet interface on which ISIS is\
            \ running. Two ISIS interfaces cannot share the same Ethernet.       \
            \  \n\nx-constraint:\n- /components/schemas/Device.Ethernet/properties/name\n\
            \n\nx-constraint:\n- /components/schemas/Device.Ethernet/properties/name\n"
          type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
          x-field-uid: 1
        metric:
          description: |-
            The default metric cost for the interface.
          type: integer
          format: uint32
          maximum: 16777215
          default: 10
          x-field-uid: 2
        network_type:
          description: "The type of network link. "
          type: string
          default: broadcast
          x-field-uid: 3
          x-enum:
            broadcast:
              x-field-uid: 1
            point_to_point:
              x-field-uid: 2
          enum:
          - broadcast
          - point_to_point
        level_type:
          description: "This indicates whether this router is participating in Level-1\
            \ (L1), \nLevel-2 (L2) or both L1 and L2 domains on this interface."
          type: string
          default: level_2
          x-field-uid: 4
          x-enum:
            level_1:
              x-field-uid: 1
            level_2:
              x-field-uid: 2
            level_1_2:
              x-field-uid: 3
          enum:
          - level_1
          - level_2
          - level_1_2
        l1_settings:
          description: |-
            Settings of Level 1 Hello.
          $ref: '#/components/schemas/IsisInterface.Level'
          x-field-uid: 5
        l2_settings:
          description: |-
            Settings of Level 2 Hello.
          $ref: '#/components/schemas/IsisInterface.Level'
          x-field-uid: 6
        multi_topology_ids:
          description: |-
            Contains the properties of multiple topologies.
          type: array
          items:
            $ref: '#/components/schemas/Isis.MT'
          x-field-uid: 7
        traffic_engineering:
          description: |-
            Contains a list of Traffic Engineering attributes.
          type: array
          items:
            $ref: '#/components/schemas/LinkState.TE'
          x-field-uid: 8
        authentication:
          description: |-
            The Circuit authentication method used for the interfaces on this emulated ISIS v4/v6 router.
          $ref: '#/components/schemas/IsisInterface.Authentication'
          x-field-uid: 9
        advanced:
          description: |-
            Optional container for advanced interface properties.
          $ref: '#/components/schemas/IsisInterface.Advanced'
          x-field-uid: 10
        link_protection:
          description: |-
            Link protection on the ISIS link between two interfaces.
          $ref: '#/components/schemas/IsisInterface.LinkProtection'
          x-field-uid: 11
        srlg_values:
          description: |-
            This contains list of SRLG values for the link between two interfaces.
          type: array
          items:
            type: integer
            format: uint32
            maximum: 16777215
            default: 0
          x-field-uid: 12
        name:
          x-field-uid: 13
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    IsisInterface.Level:
      description: |-
        Configuration for the properties of Level 1 Hello.
      type: object
      properties:
        priority:
          description: |-
            The Priority setting in Level 1 LAN Hellos for Designated Router election.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 1
        hello_interval:
          description: |-
            The Hello interval for Level 1 Hello messages, in seconds.
          type: integer
          format: uint32
          default: 10
          x-field-uid: 2
        dead_interval:
          description: |-
            The Dead (Holding Time) interval for Level 1 Hello messages, in seconds.
          type: integer
          format: uint32
          default: 30
          x-field-uid: 3
    Isis.MT:
      description: |-
        Configuration of properties per interface per topology when multiple topologies are configured in an ISIS router.
        in a ISIS router.
      type: object
      properties:
        mt_id:
          description: |-
            The Multi Topology ID for one of the topologies supported on the ISIS interface.
          type: integer
          format: uint32
          maximum: 65535
          default: 0
          x-field-uid: 1
        link_metric:
          description: |-
            Specifies the link metric for this topology on the ISIS interface.
          type: integer
          format: uint32
          default: 10
          maximum: 16777215
          x-field-uid: 2
    LinkState.TE:
      description: |-
        A container for Traffic Engineering properties on a interface.
      type: object
      properties:
        administrative_group:
          description: "The Administrative group sub-TLV (sub-TLV 3). It is a 4-octet\
            \ \nuser-defined bit mask used to assign administrative group numbers\
            \ \nto the interface, for use in assigning colors and resource classes.\
            \ \nEach set bit corresponds to a single administrative group for this\
            \ \ninterface. The settings translate into Group numbers, which range\
            \ \nfrom 0 to 31 (integers)."
          type: string
          format: hex
          default: '00000000'
          x-field-uid: 1
        metric_level:
          description: |-
            The user-assigned link metric for Traffic Engineering.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 2
        max_bandwith:
          description: "The maximum link bandwidth (sub-TLV 9) in bytes/sec allowed\
            \ for this \nlink for a direction."
          type: integer
          format: uint32
          default: 125000000
          x-field-uid: 3
        max_reservable_bandwidth:
          description: "The maximum link bandwidth (sub-TLV 10) in bytes/sec allowed\
            \ for this \nlink in a direction."
          type: integer
          format: uint32
          default: 125000000
          x-field-uid: 4
        priority_bandwidths:
          description: |-
            Configuration of bandwidths of priority 0 through priority 7.
          $ref: '#/components/schemas/LinkState.priorityBandwidths'
          x-field-uid: 5
    LinkState.priorityBandwidths:
      description: "Specifies the amount of bandwidth that can be reserved with a\
        \ setup priority of 0 \nthrough 7, arranged in increasing order with priority\
        \ 0 having highest priority. \nIn ISIS, this is sent in sub-TLV (11) of Extended\
        \ IS Reachability TLV. "
      type: object
      properties:
        pb0:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 0.
          type: integer
          format: uint32
          default: 125000000
          x-field-uid: 1
        pb1:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 1.
          type: integer
          format: uint32
          default: 125000000
          x-field-uid: 2
        pb2:
          description: |-
            Specify the amount of bandwidth that can be reserved for the Priority 2.
          type: integer
          format: uint32
          default: 125000000
          x-field-uid: 3
        pb3:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 3.
          type: integer
          format: uint32
          default: 125000000
          x-field-uid: 4
        pb4:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 4.
          type: integer
          format: uint32
          default: 125000000
          x-field-uid: 5
        pb5:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 5.
          type: integer
          format: uint32
          default: 125000000
          x-field-uid: 6
        pb6:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 6.
          type: integer
          format: uint32
          default: 125000000
          x-field-uid: 7
        pb7:
          description: |-
            Specifies the amount of bandwidth that can be reserved for the Priority 7.
          type: integer
          format: uint32
          default: 125000000
          x-field-uid: 8
    IsisInterface.Authentication:
      description: |-
        Optional container for circuit authentication properties.
      type: object
      required:
      - auth_type
      properties:
        auth_type:
          description: |-
            The circuit authentication method.
          type: string
          x-field-uid: 1
          x-enum:
            md5:
              x-field-uid: 1
            password:
              x-field-uid: 2
          enum:
          - md5
          - password
        md5:
          description: |-
            MD5 key to be used for authentication.
          type: string
          minLength: 0
          maxLength: 255
          x-field-uid: 2
        password:
          description: |-
            The password, in clear text, to be used for Authentication.
          type: string
          minLength: 0
          maxLength: 255
          x-field-uid: 3
    IsisInterface.Advanced:
      description: |-
        Optional container for advanced interface properties.
      type: object
      properties:
        auto_adjust_mtu:
          description: "If a padded Hello message is received on the interface, the\
            \ length of \nthe Hello packets sent out on that interface is adjusted\
            \ to match."
          type: boolean
          default: true
          x-field-uid: 1
        auto_adjust_area:
          description: "If a Level 1 Hello is received on this emulated router for\
            \ an area \nnot currently in its area list, an area from the received\
            \ Hello is \nadded to that list. This ensures an area match for all future\
            \ \nLevel 1 Hellos from the source L1 router."
          type: boolean
          default: true
          x-field-uid: 2
        auto_adjust_supported_protocols:
          description: "If a Hello message listing supported protocols is received\
            \ on this \nemulated router, the supported protocols advertised by this\
            \ router \nare changed to match exactly."
          type: boolean
          default: false
          x-field-uid: 3
        enable_3way_handshake:
          description: |-
            If it is true, the Point-to-Point circuit will include 3-way TLV in its Point-to-Point IIH  and attempt to establish the adjacency as specified in RFC 5303. This field is not applicable if network_type is set to 'broadcast' type in ISIS interface.
          type: boolean
          default: true
          x-field-uid: 4
        p2p_hellos_to_unicast_mac:
          description: "If it is true, the Point-to-Point Hello messages will be sent\
            \ to the unicast MAC address. "
          type: boolean
          default: false
          x-field-uid: 5
    IsisInterface.LinkProtection:
      description: |-
        Optional container for the link protection sub TLV (type 20).
      type: object
      properties:
        extra_traffic:
          description: |-
            Enable this to protect other link or links. LSPs on a link of this type are lost
            if any of the links fail.
          type: boolean
          default: false
          x-field-uid: 1
        unprotected:
          description: "Enabling this signifies that there is no other link protecting\
            \ this \nlink. LSPs on a link of this type are lost if the link fails."
          type: boolean
          default: false
          x-field-uid: 2
        shared:
          description: "Enable this to share the Extra Traffic links between one or\
            \ more \nlinks of type Shared.There are one or more disjoint links of\
            \ type \nExtra Traffic that are protecting this link."
          type: boolean
          default: false
          x-field-uid: 3
        dedicated_1_to_1:
          description: "Enabling this signifies that there is one dedicated disjoint\
            \ link \nof type Extra Traffic that is protecting this link."
          type: boolean
          default: false
          x-field-uid: 4
        dedicated_1_plus_1:
          description: "Enabling this signifies that a dedicated disjoint link is\
            \ protecting \nthis link. However, the protecting link is not advertised\
            \ in the \nlink state database and is therefore not available for the\
            \ routing \nof LSPs."
          type: boolean
          default: false
          x-field-uid: 5
        enhanced:
          description: "Enabling this signifies that a protection scheme that is more\
            \ \nreliable than Dedicated 1+1."
          type: boolean
          default: false
          x-field-uid: 6
        reserved_40:
          description: "This is a Protection Scheme with value 0x40. "
          type: boolean
          default: false
          x-field-uid: 7
        reserved_80:
          description: "This is a Protection Scheme with value 0x80. "
          type: boolean
          default: false
          x-field-uid: 8
    Isis.Basic:
      description: |-
        This contains ISIS router basic properties.
      type: object
      properties:
        ipv4_te_router_id:
          description: "IPv4 Traffic Engineering(TE) router id. This address should\
            \ be configured as an IPv4 Loopback address in 'ipv4_loopbacks' in the\
            \ Device.      "
          type: string
          format: ipv4
          x-field-uid: 1
        hostname:
          description: |-
            Host name for the router. The host name is transmitted in all the packets sent from the router.
          type: string
          x-field-uid: 2
        enable_wide_metric:
          description: |-
            When set to true, it allows sending of more detailed metric information  for the routes using 32-bit wide values using TLV 135 IP reachability and  more detailed reachability information for IS reachability by using TLV 22.  The detailed usage is described in RFC3784.
          type: boolean
          default: true
          x-field-uid: 3
        learned_lsp_filter:
          description: |-
            Configuration for controlling storage of ISIS learned LSPs are received from the neighbors.
          type: boolean
          default: false
          x-field-uid: 4
    Isis.Advanced:
      description: |-
        Contains ISIS router advanced properties.
      type: object
      properties:
        enable_hello_padding:
          description: |-
            It enables padding of Hello message to MTU size.
          type: boolean
          default: true
          x-field-uid: 1
        max_area_addresses:
          description: "The Number of Area Addresses permitted, with a valid range\
            \ from 0 to 254.  A zero indicates a maximum of 3 addresses. "
          type: integer
          format: uint32
          maximum: 254
          default: 3
          x-field-uid: 2
        area_addresses:
          description: |-
            Its combination of the ISP and HO-DSP.Usually all nodes within an area have  the same area address. If no area addresses are configured, a default area of "490001" will be advertised.
          type: array
          items:
            type: string
            format: hex
          x-field-uid: 3
        lsp_refresh_rate:
          description: |-
            The rate at which LSPs are re-sent in seconds.
          type: integer
          format: uint32
          default: 600
          maximum: 65535
          x-field-uid: 4
        lsp_lifetime:
          description: |-
            The MaxAge for retaining a learned LSP on this router in seconds.
          type: integer
          format: uint32
          default: 1200
          maximum: 65535
          x-field-uid: 5
        psnp_interval:
          description: |-
            The number of milliseconds between transmissions of Partial Sequence Number PDU.
          type: integer
          format: uint32
          maximum: 60000
          default: 2000
          x-field-uid: 6
        csnp_interval:
          description: |-
            The number of milliseconds between transmissions of Partial Sequence Number PDU.
          type: integer
          format: uint32
          minimum: 1
          maximum: 65535000
          default: 10000
          x-field-uid: 7
        max_lsp_size:
          description: |-
            The maximum size in bytes of any LSP that can be transmitted over a link of equal or less  than maximum MTU size.
          type: integer
          format: uint32
          minimum: 64
          maximum: 9216
          default: 1492
          x-field-uid: 8
        lsp_mgroup_min_trans_interval:
          description: |-
            The number of seconds between transmissions of LSPs/MGROUP-PDUs.
          type: integer
          format: uint32
          minimum: 1
          maximum: 60000
          default: 5000
          x-field-uid: 9
        enable_attached_bit:
          description: |-
            If the Attached bit is enabled, it indicates that the ISIS router is attached to another area  or the Level 2 backbone. The purpose of an Attached-Bit is to accomplish Inter-Area Routing.  When an L1/L2 router is connected to more than one area, it sets the Attached-bit on its L1 LSP. This can cause a default route ( 0.0.0.0/0 ) to be installed by the receiving router.
          type: boolean
          default: true
          x-field-uid: 10
    Isis.Authentication:
      description: |-
        This contains ISIS Area/Domain authentication properties.
      type: object
      properties:
        ignore_receive_md5:
          description: |-
            Do not verify MD5 checksum in received LSPs.
          type: boolean
          default: true
          x-field-uid: 1
        area_auth:
          description: |-
            The Area authentication method used for the emulated ISIS router.
            This is used for L1 LSPs.
          $ref: '#/components/schemas/Isis.AuthenticationBase'
          x-field-uid: 2
        domain_auth:
          description: |-
            The Domain authentication method used for the emulated ISIS router.
            This is used for L2 LSPs.
          $ref: '#/components/schemas/Isis.AuthenticationBase'
          x-field-uid: 3
    Isis.AuthenticationBase:
      description: |-
        Optional container for ISIS authentication properties.
      type: object
      required:
      - auth_type
      properties:
        auth_type:
          description: |-
            The authentication method.
          type: string
          x-field-uid: 1
          x-enum:
            md5:
              x-field-uid: 1
            password:
              x-field-uid: 2
          enum:
          - md5
          - password
        md5:
          description: |-
            Authentication as an MD5 key.
          type: string
          minLength: 0
          maxLength: 255
          x-field-uid: 2
        password:
          description: |-
            Authentication as a clear text password.
          type: string
          minLength: 0
          maxLength: 255
          x-field-uid: 3
    Isis.V4RouteRange:
      description: |-
        Emulated ISIS IPv4 routes.
      type: object
      properties:
        addresses:
          description: |-
            A list of group of IPv4 route addresses.
          type: array
          items:
            $ref: '#/components/schemas/V4RouteAddress'
          x-field-uid: 1
        link_metric:
          x-field-uid: 2
          description: |-
            The user-defined metric associated with this route range.
          type: integer
          format: uint32
          default: 0
          minimum: 0
          maximum: 16777215
        origin_type:
          x-field-uid: 3
          description: "The origin of the advertised route-internal or external to\
            \ the ISIS area. Options include the following: \n  Internal-for intra-area\
            \ routes, through Level 1 LSPs. \n  External-for inter-area routes redistributed\
            \ within L1, through Level\n1 LSPs."
          type: string
          default: internal
          x-enum:
            internal:
              x-field-uid: 1
            external:
              x-field-uid: 2
          enum:
          - internal
          - external
        redistribution_type:
          x-field-uid: 4
          description: "Defines the Up/Down (Redistribution) bit defined for TLVs\
            \ 128 and 130 by RFC 2966.  It is used for domain-wide advertisement of\
            \ prefix information.\n\n  Up (0)-used when a prefix is initially advertised\
            \ within the ISIS L3\nhierarchy, \n          and for all other prefixes\
            \ in L1 and L2 LSPs. (default) \n  Down (1)-used when an L1/L2 router\
            \ advertises L2 prefixes in L1 LSPs.\n\nThe prefixes are being advertised\
            \ from a higher level (L2) down to a lower level (L1). "
          type: string
          default: up
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
        name:
          x-field-uid: 5
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        prefix_attr_enabled:
          x-field-uid: 6
          description: "Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability\
            \ Attribute Flags\nwill be advertised or not. "
          type: boolean
          default: false
        x_flag:
          x-field-uid: 7
          description: |-
            External Prefix Flag (Bit 0)
          type: boolean
          default: false
        r_flag:
          x-field-uid: 8
          description: |-
            Re-advertisement Flag (Bit 1)
          type: boolean
          default: false
        n_flag:
          x-field-uid: 9
          description: |-
            Node Flag (Bit 2)
          type: boolean
          default: false
      required:
      - name
    V4RouteAddress:
      description: |-
        A container for IPv4 route addresses.
      type: object
      required:
      - address
      properties:
        address:
          description: |-
            The starting address of the network.
          type: string
          format: ipv4
          x-field-uid: 1
        prefix:
          description: "The IPv4 network prefix length to be applied to the address. "
          type: integer
          format: uint32
          default: 24
          maximum: 32
          x-field-uid: 2
        count:
          description: |-
            The total number of addresses in the range.
          type: integer
          format: uint32
          default: 1
          minimum: 1
          x-field-uid: 3
        step:
          description: |-
            Increments the network address prefixes within a route range  where multiple routes are present.  The value is incremented according to the Prefix Length and Step.
          type: integer
          format: uint32
          default: 1
          minimum: 1
          x-field-uid: 4
    V6RouteAddress:
      description: |-
        A container for IPv6 route addresses.
      type: object
      required:
      - address
      properties:
        address:
          description: |-
            The starting address of the network.
          type: string
          format: ipv6
          x-field-uid: 1
        prefix:
          description: |-
            The IPv6 network prefix length to be applied to the address.
          type: integer
          format: uint32
          default: 64
          maximum: 128
          x-field-uid: 2
        count:
          description: |-
            The total number of addresses in the range.
          type: integer
          format: uint32
          default: 1
          minimum: 1
          x-field-uid: 3
        step:
          description: |-
            Increments the network address prefixes within a route range  where multiple routes are present.  The value is incremented according to the Prefix Length and Step.
          type: integer
          format: uint32
          default: 1
          minimum: 1
          x-field-uid: 4
    MACRouteAddress:
      description: |-
        A container for MAC route addresses.
      type: object
      required:
      - address
      properties:
        address:
          description: |-
            The starting address of the MAC Range.
          type: string
          format: mac
          x-field-uid: 1
        prefix:
          description: "The MAC prefix length to be applied to the address. "
          type: integer
          format: uint32
          default: 48
          minimum: 0
          maximum: 48
          x-field-uid: 2
        count:
          description: |-
            The total number of mac addresses in the range.
          type: integer
          format: uint32
          default: 1
          minimum: 1
          x-field-uid: 3
        step:
          description: |-
            Increments the mac address prefixes within a mac range  where multiple routes are present.  The value is incremented according to the mac prefix Length and Step.
          type: integer
          format: uint32
          default: 1
          minimum: 1
          x-field-uid: 4
    Isis.V6RouteRange:
      description: |-
        Emulated ISIS IPv6 routes.
      type: object
      properties:
        addresses:
          description: |-
            A list of group of IPv6 route addresses.
          type: array
          items:
            $ref: '#/components/schemas/V6RouteAddress'
          x-field-uid: 1
        link_metric:
          x-field-uid: 2
          description: |-
            The user-defined metric associated with this route range.
          type: integer
          format: uint32
          default: 0
          minimum: 0
          maximum: 16777215
        origin_type:
          x-field-uid: 3
          description: "The origin of the advertised route-internal or external to\
            \ the ISIS area. Options include the following: \n  Internal-for intra-area\
            \ routes, through Level 1 LSPs. \n  External-for inter-area routes redistributed\
            \ within L1, through Level\n1 LSPs."
          type: string
          default: internal
          x-enum:
            internal:
              x-field-uid: 1
            external:
              x-field-uid: 2
          enum:
          - internal
          - external
        redistribution_type:
          x-field-uid: 4
          description: "Defines the Up/Down (Redistribution) bit defined for TLVs\
            \ 128 and 130 by RFC 2966.  It is used for domain-wide advertisement of\
            \ prefix information.\n\n  Up (0)-used when a prefix is initially advertised\
            \ within the ISIS L3\nhierarchy, \n          and for all other prefixes\
            \ in L1 and L2 LSPs. (default) \n  Down (1)-used when an L1/L2 router\
            \ advertises L2 prefixes in L1 LSPs.\n\nThe prefixes are being advertised\
            \ from a higher level (L2) down to a lower level (L1). "
          type: string
          default: up
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
        name:
          x-field-uid: 5
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        prefix_attr_enabled:
          x-field-uid: 6
          description: "Specifies whether the sub-TLV for IPv4/IPv6 Extended Reachability\
            \ Attribute Flags\nwill be advertised or not. "
          type: boolean
          default: false
        x_flag:
          x-field-uid: 7
          description: |-
            External Prefix Flag (Bit 0)
          type: boolean
          default: false
        r_flag:
          x-field-uid: 8
          description: |-
            Re-advertisement Flag (Bit 1)
          type: boolean
          default: false
        n_flag:
          x-field-uid: 9
          description: |-
            Node Flag (Bit 2)
          type: boolean
          default: false
      required:
      - name
    Device.BgpRouter:
      description: |-
        Configuration for one or more IPv4 or IPv6 BGP peers.
      type: object
      required:
      - router_id
      properties:
        router_id:
          description: |-
            The BGP router ID is a unique identifier used by BGP. It is a 32-bit value that is often represented by an IPv4 address.
          type: string
          format: ipv4
          x-field-uid: 1
        ipv4_interfaces:
          description: "This contains an array of references to IPv4 interfaces, \
            \ each of which will have list of peers to different destinations.   "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V4Interface'
          x-field-uid: 2
        ipv6_interfaces:
          description: |-
            This contains an array of references to IPv6 interfaces,  each of which will have list of peers to different destinations.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V6Interface'
          x-field-uid: 3
    Device.Bgp.MessageHeaderError:
      description: |-
        All errors detected while processing the Message Header are indicated by sending the NOTIFICATION message  with the Error Code-Message Header Error. The Error Subcode elaborates on the specific nature of the error.
      type: object
      properties:
        subcode:
          description: |-
            The Error Subcode indicates the specific type of error encountered during Message Header processing.
          type: string
          default: connection_not_synchronized_code1_subcode1
          x-field-uid: 1
          x-enum:
            connection_not_synchronized_code1_subcode1:
              x-field-uid: 1
            bad_message_length_code1_subcode2:
              x-field-uid: 2
            bad_message_type_code1_subcode3:
              x-field-uid: 3
          enum:
          - connection_not_synchronized_code1_subcode1
          - bad_message_length_code1_subcode2
          - bad_message_type_code1_subcode3
    Device.Bgp.OpenMessageError:
      description: |-
        All errors detected while processing the OPEN message are indicated by sending the NOTIFICATION message  with the Error Code-Open Message Error. The Error Subcode elaborates on the specific nature of the error.
      type: object
      properties:
        subcode:
          description: |-
            The Error Subcode indicates the specific type of error encountered during OPEN message processing.
          type: string
          default: unsupported_version_number_code2_subcode1
          x-field-uid: 1
          x-enum:
            unsupported_version_number_code2_subcode1:
              x-field-uid: 1
            error_peer_as_code2_subcode2:
              x-field-uid: 2
            error_bgp_id_code2_subcode3:
              x-field-uid: 3
            unsupported_optional_parameter_code2_subcode4:
              x-field-uid: 4
            auth_failed_code2_subcode5:
              x-field-uid: 5
            unsupported_hold_time_code2_subcode6:
              x-field-uid: 6
            unsupported_capability_code2_subcode7:
              x-field-uid: 7
          enum:
          - unsupported_version_number_code2_subcode1
          - error_peer_as_code2_subcode2
          - error_bgp_id_code2_subcode3
          - unsupported_optional_parameter_code2_subcode4
          - auth_failed_code2_subcode5
          - unsupported_hold_time_code2_subcode6
          - unsupported_capability_code2_subcode7
    Device.Bgp.UpdateMessageError:
      description: |-
        All errors detected while processing the UPDATE message are indicated by sending the NOTIFICATION message  with the Error Code-Update Message Error. The Error Subcode elaborates on the specific nature of the error.
      type: object
      properties:
        subcode:
          description: |-
            The Error Subcode, the specific type of error encountered during UPDATE processing.
          type: string
          default: malformed_attrib_list_code3_subcode1
          x-field-uid: 1
          x-enum:
            malformed_attrib_list_code3_subcode1:
              x-field-uid: 1
            unrecognized_wellknown_attrib_code3_subcode2:
              x-field-uid: 2
            wellknown_attrib_missing_code3_subcode3:
              x-field-uid: 3
            attrib_flags_error_code3_subcode4:
              x-field-uid: 4
            attrib_length_error_code3_subcode5:
              x-field-uid: 5
            invalid_origin_attrib_code3_subcode6:
              x-field-uid: 6
            as_routing_loop_code3_subcode7:
              x-field-uid: 7
            invalid_nhop_attrib_code3_subcode8:
              x-field-uid: 8
            error_optional_attrib_code3_subcode9:
              x-field-uid: 9
            invalid_network_field_code3_subcode10:
              x-field-uid: 10
            abnormal_aspath_code3_subcode11:
              x-field-uid: 11
          enum:
          - malformed_attrib_list_code3_subcode1
          - unrecognized_wellknown_attrib_code3_subcode2
          - wellknown_attrib_missing_code3_subcode3
          - attrib_flags_error_code3_subcode4
          - attrib_length_error_code3_subcode5
          - invalid_origin_attrib_code3_subcode6
          - as_routing_loop_code3_subcode7
          - invalid_nhop_attrib_code3_subcode8
          - error_optional_attrib_code3_subcode9
          - invalid_network_field_code3_subcode10
          - abnormal_aspath_code3_subcode11
    Device.Bgp.HoldTimerExpired:
      description: |-
        If a system does not receive successive KEEPALIVE, UPDATE, and/or NOTIFICATION messages within the period specified  in the Hold Time field of the OPEN message, then the NOTIFICATION message with the Hold Timer Expired Error Code(Error Code 4) is  sent and the BGP connection is closed. The Sub Code used is 0. If a user wants to use non zero Sub Code then CustomError can be used.
    Device.Bgp.FiniteStateMachineError:
      description: |-
        Any error detected by the BGP Finite State Machine (e.g., receipt of an unexpected event) is indicated by  sending the NOTIFICATION message with the Error Code-Finite State Machine Error(Error Code 5). The Sub Code used is 0.  If a user wants to use non zero Sub Code then CustomError can be used.
    Device.Bgp.CeaseError:
      description: |-
        In the absence of any fatal errors, a BGP peer can close its BGP connection by sending the NOTIFICATION message with the  Error Code Cease.
      type: object
      properties:
        subcode:
          description: |-
            The Error Subcode to be sent to the peer in the Cease NOTIFICATION.
          type: string
          default: admin_shutdown_code6_subcode2
          x-field-uid: 1
          x-enum:
            max_number_prefix_reached_code6_subcode1:
              x-field-uid: 1
            admin_shutdown_code6_subcode2:
              x-field-uid: 2
            peer_deleted_code6_subcode3:
              x-field-uid: 3
            admin_reset_code6_subcode4:
              x-field-uid: 4
            connection_reject_code6_subcode5:
              x-field-uid: 5
            other_config_changes_code6_subcode6:
              x-field-uid: 6
            connection_collision_resolution_code6_subcode7:
              x-field-uid: 7
            out_of_resources_code6_subcode8:
              x-field-uid: 8
            bfd_session_down_code6_subcode9:
              x-field-uid: 9
          enum:
          - max_number_prefix_reached_code6_subcode1
          - admin_shutdown_code6_subcode2
          - peer_deleted_code6_subcode3
          - admin_reset_code6_subcode4
          - connection_reject_code6_subcode5
          - other_config_changes_code6_subcode6
          - connection_collision_resolution_code6_subcode7
          - out_of_resources_code6_subcode8
          - bfd_session_down_code6_subcode9
    Device.Bgp.CustomError:
      description: |-
        A BGP peer can send NOTIFICATION message with user defined Error Code and Error Subcode.
      type: object
      properties:
        code:
          description: |-
            The Error code to be sent in the NOTIFICATION message to peer.
          type: integer
          format: uint32
          x-field-uid: 1
        subcode:
          description: |-
            The Error Subcode to be sent in the NOTIFICATION message to peer.
          type: integer
          format: uint32
          x-field-uid: 2
    Bgp.V4Peer:
      description: |-
        Configuration for emulated BGPv4 peers and routes.
      type: object
      required:
      - peer_address
      - as_type
      - as_number
      - name
      properties:
        peer_address:
          description: |-
            IPv4 address of the BGP peer for the session.
          type: string
          format: ipv4
          x-field-uid: 1
        evpn_ethernet_segments:
          description: "This contains the list of Ethernet Virtual Private Network\
            \ (EVPN) Ethernet Segments (ES) Per BGP Peer for IPv4 Address Family Identifier\
            \ (AFI).\n\nEach Ethernet Segment contains a list of EVPN Instances (EVIs)\
            \ . \nEach EVI contains a list of Broadcast Domains. \nEach Broadcast\
            \ Domain contains a list of MAC/IP Ranges. \n\n<Ethernet Segment, EVI,\
            \ Broadcast Domain> is responsible for advertising Ethernet Auto-discovery\
            \ Route Per EVI (Type 1).\n\n<Ethernet Segment, EVI> is responsible for\
            \ advertising Ethernet Auto-discovery Route Per Ethernet Segment (Type\
            \ 1).\n\n<Ethernet Segment, EVI, Broadcast Domain, MAC/IP> is responsible\
            \ for advertising MAC/IP Advertisement Route (Type 2).\n\n<Ethernet Segment,\
            \ EVI, Broadcast Domain> is responsible for advertising Inclusive Multicast\
            \ Ethernet Tag Route (Type 3).\n\nEthernet Segment is responsible for\
            \ advertising Ethernet Segment Route (Type 4)."
          type: array
          items:
            $ref: '#/components/schemas/BgpV4.EthernetSegment'
          x-field-uid: 2
        as_type:
          x-field-uid: 3
          description: |-
            The type of BGP autonomous system. External BGP is used for BGP links between two or more autonomous systems (ebgp). Internal BGP is used within a single autonomous system (ibgp). BGP property defaults are aligned with this object defined as an internal BGP peer. If the as_type is specified as 'ebgp' then other properties will need to be specified as per an external BGP peer. Specifically, for 'ebgp',  'as_set_mode' attribute in 'as_path' field  in any Route Range should be changed from default value 'do_not_include_local_as' to any other value.
          type: string
          x-enum:
            ibgp:
              x-field-uid: 1
            ebgp:
              x-field-uid: 2
          enum:
          - ibgp
          - ebgp
        as_number:
          x-field-uid: 4
          description: |-
            Autonomous System Number (AS number or ASN)
          type: integer
          format: uint32
        as_number_width:
          x-field-uid: 5
          description: |-
            The width in bytes of the as_number values. Any as_number values that exceeds the width MUST result in an error.
          type: string
          default: four
          x-enum:
            two:
              x-field-uid: 1
            four:
              x-field-uid: 2
          enum:
          - two
          - four
        advanced:
          x-field-uid: 6
          $ref: '#/components/schemas/Bgp.Advanced'
        capability:
          x-field-uid: 7
          $ref: '#/components/schemas/Bgp.Capability'
        learned_information_filter:
          x-field-uid: 8
          $ref: '#/components/schemas/Bgp.LearnedInformationFilter'
        v4_routes:
          x-field-uid: 9
          description: |-
            Emulated BGPv4 route ranges.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V4RouteRange'
        v6_routes:
          x-field-uid: 10
          description: |-
            Emulated BGPv6 route ranges.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V6RouteRange'
        v4_srte_policies:
          x-field-uid: 11
          description: |-
            Segment Routing Traffic Engineering (SR TE) Policies for IPv4 Address Family Identifier (AFI).
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V4Policy'
        v6_srte_policies:
          x-field-uid: 12
          description: |-
            Segment Routing Traffic Engineering (SR TE) Policies for IPv6 Address Family Identifier (AFI).
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V6Policy'
        name:
          x-field-uid: 13
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        graceful_restart:
          x-field-uid: 14
          $ref: '#/components/schemas/Bgp.GracefulRestart'
    Bgp.V4Interface:
      description: |-
        Configuration for emulated BGPv4 peers and routes on a single IPv4 interface.
      type: object
      required:
      - ipv4_name
      properties:
        ipv4_name:
          description: |
            The unique name of the IPv4 or Loopback IPv4 interface used as the source IP for this list of BGP peers.

            x-constraint:
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv4Loopback/properties/name


            x-constraint:
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv4Loopback/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv4/properties/name
          - /components/schemas/Device.Ipv4Loopback/properties/name
          x-field-uid: 1
        peers:
          description: |-
            This contains the list of BGPv4 peers configured on this interface.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V4Peer'
          x-field-uid: 2
    BgpV4.EthernetSegment:
      description: "Configuration for BGP Ethernet Segment ranges. Advertises following\
        \ routes - \n\nType 4 - Ethernet Segment Route"
      type: object
      properties:
        df_election:
          description: |-
            Designated Forwarder (DF) election configuration.
          $ref: '#/components/schemas/Bgp.EthernetSegment.DfElection'
          x-field-uid: 1
        evis:
          description: |-
            This contains the list of EVIs.
          type: array
          items:
            $ref: '#/components/schemas/BgpV4.EvpnEvis'
          x-field-uid: 2
        esi:
          x-field-uid: 3
          description: |-
            10-octet Ethernet Segment Identifier (ESI) Example - For multi-home scenario nonZero ESI is '10000000000000000000' .
          type: string
          format: hex
          default: '00000000000000000000'
        active_mode:
          x-field-uid: 4
          description: |-
            Single Active or All Active mode Redundancy mode selection for Multi-home.
          type: string
          default: all_active
          x-enum:
            single_active:
              x-field-uid: 1
            all_active:
              x-field-uid: 2
          enum:
          - single_active
          - all_active
        esi_label:
          x-field-uid: 5
          description: "The label value to be advertised as ESI Label in ESI Label\
            \ Extended Community. This is included in Ethernet Auto-discovery per\
            \ ES Routes advertised by a router. "
          type: integer
          format: uint32
          maximum: 16777215
          default: 0
        advanced:
          x-field-uid: 6
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          x-field-uid: 7
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        ext_communities:
          x-field-uid: 8
          description: |-
            Optional Extended Community settings. The Extended Communities Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes are utilized to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an 8-Bytes value. It is divided into two main parts. The first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes carry a unique set of data in a format defined by the type and sub-type field. Extended communities provide a larger  range for grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet, the valid sub types are route target and origin. The valid value for  administrator_as_2octet and administrator_as_4octet type is either two byte AS followed by four byte local administrator id or four byte AS followed by two  byte local administrator id.  When type is administrator_ipv4_address the valid sub types are route target and origin. The valid value for  administrator_ipv4_address is a four byte IPv4 address followed by a two byte local administrator id.  When type is opaque, valid sub types are color and encapsulation. When sub type is color, first two bytes of the value field contain flags and last four bytes  contains the value of the color. When sub type is encapsulation the first four bytes of value field are reserved and last two bytes carries the tunnel type from  IANA's "ETHER TYPES" registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth the valid sub type is extended_bandwidth. The first two bytes of the value field contains the AS number and the last four bytes contains the bandwidth in IEEE floating point format.  When type is evpn the valid subtype is mac_address. In the value field the low-order bit of the first byte(Flags) is defined as the "Sticky/static" flag and may be set to 1, indicating the MAC address is static and cannot move. The second byte is reserved and the  last four bytes contain the sequence number which is used to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates  occur for the same MAC address.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
        as_path:
          x-field-uid: 9
          description: |-
            Optional AS PATH settings.
          $ref: '#/components/schemas/Bgp.AsPath'
    Bgp.EthernetSegment.DfElection:
      description: |-
        Configuration for Designated Forwarder (DF) election among the Provider Edge (PE) routers on the same Ethernet Segment.
      type: object
      properties:
        election_timer:
          description: |-
            The DF election timer in seconds.
          type: integer
          format: uint32
          maximum: 300
          default: 3
          x-field-uid: 1
    Bgp.RouteAdvanced:
      description: |-
        Configuration for advanced BGP route range settings.
      type: object
      properties:
        include_multi_exit_discriminator:
          description: |-
            BGP Multi Exit Discriminator attribute sent to the peer to help in the route selection process.  If set to true, the Multi Exit Discriminator attribute will be included in the route advertisement.
          type: boolean
          default: true
          x-field-uid: 3
        multi_exit_discriminator:
          description: |-
            The multi exit discriminator (MED) value used for route selection sent to the peer.
          type: integer
          format: uint32
          x-field-uid: 1
        include_origin:
          description: |-
            If set to true, the Origin attribute will be included in the route advertisement.
          type: boolean
          default: true
          x-field-uid: 4
        origin:
          description: |-
            The origin attribute of a prefix can take three values: the prefix originates from an interior routing protocol 'igp',  it originates from 'egp' or the origin is 'incomplete', if the prefix is learned through other means.
          type: string
          default: igp
          x-field-uid: 2
          x-enum:
            igp:
              x-field-uid: 1
            egp:
              x-field-uid: 2
            incomplete:
              x-field-uid: 3
          enum:
          - igp
          - egp
          - incomplete
        include_local_preference:
          description: |-
            BGP Local Preference attribute sent to the peer to indicate the degree of preference  for externally learned routes. If set to true, the Local Preference attribute will be included  in the route advertisement. This should be included only for internal peers.
          type: boolean
          default: true
          x-field-uid: 5
        local_preference:
          description: |-
            Value to be set in Local Preference attribute if include_local_preference is set to true. It is  used for the selection of the path for the traffic leaving the AS. The route with the  highest local preference value is preferred.
          type: integer
          format: uint32
          default: 100
          x-field-uid: 6
    Bgp.Community:
      description: |-
        BGP communities provide additional capability for tagging routes and  for modifying BGP routing policy on upstream and downstream routers. BGP community is a 32-bit number which is broken into 16-bit AS number and  a 16-bit custom value.
      type: object
      properties:
        type:
          description: |-
            The type of community AS number.
          type: string
          x-field-uid: 1
          x-enum:
            manual_as_number:
              x-field-uid: 1
            no_export:
              x-field-uid: 2
            no_advertised:
              x-field-uid: 3
            no_export_subconfed:
              x-field-uid: 4
            llgr_stale:
              x-field-uid: 5
            no_llgr:
              x-field-uid: 6
          enum:
          - manual_as_number
          - no_export
          - no_advertised
          - no_export_subconfed
          - llgr_stale
          - no_llgr
        as_number:
          description: |-
            First two octets of 32 bit community AS number.
          type: integer
          format: uint32
          maximum: 65535
          default: 0
          x-field-uid: 2
        as_custom:
          description: "Last two octets of the community value. "
          type: integer
          format: uint32
          maximum: 65535
          default: 0
          x-field-uid: 3
    Bgp.ExtCommunity:
      description: |-
        The Extended Communities Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes are utilized to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an 8-Bytes value. It is divided into two main parts. The first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes carry a unique set of data in a  format defined by the type and sub-type field. Extended communities provide a larger  range for grouping or categorizing communities.
      type: object
      properties:
        type:
          description: "Extended Community Type field of 1 Byte.\n - administrator_as_2octet:\
            \ Two-Octet AS Specific Extended Community (RFC 4360).\n - administrator_ipv4_address:\
            \ IPv4 Address Specific Extended Community (RFC 4360).\n - administrator_as_4octet:\
            \  4-Octet AS Specific Extended Community (RFC 5668).\n - opaque: Opaque\
            \ Extended Community (RFC 7432).\n - evpn: EVPN Extended Community (RFC\
            \ 7153).  \n - administrator_as_2octet_link_bandwidth : Link Bandwidth\
            \ Extended Community (RFC 7153)."
          type: string
          x-field-uid: 1
          x-enum:
            administrator_as_2octet:
              x-field-uid: 1
            administrator_ipv4_address:
              x-field-uid: 2
            administrator_as_4octet:
              x-field-uid: 3
            opaque:
              x-field-uid: 4
            evpn:
              x-field-uid: 5
            administrator_as_2octet_link_bandwidth:
              x-field-uid: 6
          enum:
          - administrator_as_2octet
          - administrator_ipv4_address
          - administrator_as_4octet
          - opaque
          - evpn
          - administrator_as_2octet_link_bandwidth
        subtype:
          description: |-
            Extended Community Sub Type field of 1 Byte.
            - route_target: Route Target.
            - origin: Origin.
            - extended_bandwidth: Specifies the link bandwidth.
            - color: Specifies the color value.
            - encapsulation: Specifies the Encapsulation Extended Community.
            - mac_address: Specifies the Extended community MAC address.
          type: string
          x-field-uid: 2
          x-enum:
            route_target:
              x-field-uid: 1
            origin:
              x-field-uid: 2
            extended_bandwidth:
              x-field-uid: 3
            color:
              x-field-uid: 4
            encapsulation:
              x-field-uid: 5
            mac_address:
              x-field-uid: 6
          enum:
          - route_target
          - origin
          - extended_bandwidth
          - color
          - encapsulation
          - mac_address
        value:
          description: |-
            Extended Community value of 6 Bytes. Example - for the Opaque type and Color subtype value can be '0000000000c8'  for the color value 200.
          type: string
          format: hex
          x-field-uid: 3
    Bgp.AsPath:
      description: |-
        This attribute identifies the autonomous systems through  which routing information carried in this UPDATE message has passed. This contains the configuration of how to include the Local AS in the AS path attribute of the MP REACH NLRI. It also contains optional configuration of additional AS Path Segments that can be included in the AS Path attribute. The AS Path consists of a Set or Sequence of Autonomous Systems (AS) numbers  that a routing information passes through to reach the destination.
      type: object
      properties:
        as_set_mode:
          description: |-
            Defines how the Local AS should be included in the MP REACH NLRI. For iBGP sessions, "Do Not Include Local AS" must be chosen. For eBGP sessions, any choice other than "Do Not Include Local AS" can be chosen.
          type: string
          default: do_not_include_local_as
          x-field-uid: 1
          x-enum:
            do_not_include_local_as:
              x-field-uid: 1
            include_as_seq:
              x-field-uid: 2
            include_as_set:
              x-field-uid: 3
            include_as_confed_seq:
              x-field-uid: 4
            include_as_confed_set:
              x-field-uid: 5
            prepend_to_first_segment:
              x-field-uid: 6
          enum:
          - do_not_include_local_as
          - include_as_seq
          - include_as_set
          - include_as_confed_seq
          - include_as_confed_set
          - prepend_to_first_segment
        segments:
          description: "The additional AS path segments to be added in the NLRI. \
            \ By default, an empty AS path is always included and  the local AS is\
            \ added to it as per the value of 'as_set_mode' attribute. "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.AsPathSegment'
          x-field-uid: 2
    Bgp.AsPathSegment:
      description: |-
        Configuration for a single BGP AS path segment
      type: object
      properties:
        type:
          description: |-
            AS sequence is the most common type of AS_PATH, it contains the  list of ASNs starting with the most recent ASN being added read  from left to right.
            The other three AS_PATH types are used for Confederations - AS_SET is the type of AS_PATH attribute that summarizes routes using using the aggregate-address command, allowing AS_PATHs to be  summarized in the update as well. - AS_CONFED_SEQ gives the list of ASNs in the path starting with the  most recent ASN to be added reading left to right - AS_CONFED_SET will allow summarization of multiple AS PATHs to be  sent in BGP Updates.
          type: string
          default: as_seq
          x-field-uid: 1
          x-enum:
            as_seq:
              x-field-uid: 1
            as_set:
              x-field-uid: 2
            as_confed_seq:
              x-field-uid: 3
            as_confed_set:
              x-field-uid: 4
          enum:
          - as_seq
          - as_set
          - as_confed_seq
          - as_confed_set
        as_numbers:
          description: |-
            The AS numbers in this AS path segment.
          type: array
          items:
            type: integer
            format: uint32
            default: 1
          x-field-uid: 2
    BgpV4.EvpnEvis:
      description: "This contains a list of different flavors of EVPN. \nFor example\
        \ EVPN over VXLAN or EVPN over MPLS etc to be configured per Ethernet segment.\
        \ \nNeed to instantiate correct type of EVPN instance as per requirement."
      type: object
      properties:
        choice:
          type: string
          default: evi_vxlan
          x-field-uid: 1
          x-enum:
            evi_vxlan:
              x-field-uid: 1
          enum:
          - evi_vxlan
        evi_vxlan:
          description: "EVPN VXLAN instance to be configured per Ethernet Segment.\
            \                  "
          $ref: '#/components/schemas/BgpV4.EviVxlan'
          x-field-uid: 2
    BgpV4.EviVxlan:
      description: "Configuration for BGP EVPN EVI. Advertises following routes -\
        \ \n\nType 3 - Inclusive Multicast Ethernet Tag Route\n\nType 1 -  Ethernet\
        \ Auto-discovery Route (Per EVI)\n\nType 1 -  Ethernet Auto-discovery Route\
        \ (Per ES)"
      type: object
      properties:
        broadcast_domains:
          description: |-
            This contains the list of Broadcast Domains to be configured per EVI.
          type: array
          items:
            $ref: '#/components/schemas/BgpV4.EviVxlan.BroadcastDomain'
          x-field-uid: 1
        replication_type:
          x-field-uid: 2
          description: |-
            This model only supports Ingress Replication
          type: string
          default: ingress_replication
          x-enum:
            ingress_replication:
              x-field-uid: 1
          enum:
          - ingress_replication
        pmsi_label:
          x-field-uid: 3
          description: |-
            Downstream assigned VNI to be carried as Part of P-Multicast Service Interface Tunnel attribute (PMSI Tunnel Attribute) in Type 3 Inclusive Multicast Ethernet Tag Route.
          type: integer
          format: uint32
          maximum: 16777215
          default: 16
        ad_label:
          x-field-uid: 4
          description: |-
            The Auto-discovery Route label (AD label) value, which gets advertised in the Ethernet Auto-discovery Route per <EVI, ESI>
          type: integer
          format: uint32
          maximum: 16777215
          default: 0
        route_distinguisher:
          x-field-uid: 5
          description: |-
            Colon separated Extended Community value of 6 Bytes - "AS number: Value" identifying an EVI.            Example - for the as_2octet "60005:100".
          $ref: '#/components/schemas/Bgp.RouteDistinguisher'
        route_target_export:
          x-field-uid: 6
          description: "List of Layer 2 Virtual Network Identifier (L2VNI) export\
            \ targets associated with this EVI. "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        route_target_import:
          x-field-uid: 7
          description: "List of L2VNI import targets associated with this EVI. "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        l3_route_target_export:
          x-field-uid: 8
          description: |-
            List of Layer 3 Virtual Network Identifier (L3VNI) Export Route Targets.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        l3_route_target_import:
          x-field-uid: 9
          description: |-
            List of L3VNI Import Route Targets.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        advanced:
          x-field-uid: 10
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          x-field-uid: 11
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        ext_communities:
          x-field-uid: 12
          description: |-
            Optional Extended Community settings. The Extended Communities Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes are utilized to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an 8-Bytes value. It is divided into two main parts. The first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes carry a unique set of data in a format defined by the type and sub-type field. Extended communities provide a larger  range for grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet, the valid sub types are route target and origin. The valid value for  administrator_as_2octet and administrator_as_4octet type is either two byte AS followed by four byte local administrator id or four byte AS followed by two  byte local administrator id.  When type is administrator_ipv4_address the valid sub types are route target and origin. The valid value for  administrator_ipv4_address is a four byte IPv4 address followed by a two byte local administrator id.  When type is opaque, valid sub types are color and encapsulation. When sub type is color, first two bytes of the value field contain flags and last four bytes  contains the value of the color. When sub type is encapsulation the first four bytes of value field are reserved and last two bytes carries the tunnel type from  IANA's "ETHER TYPES" registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth the valid sub type is extended_bandwidth. The first two bytes of the value field contains the AS number and the last four bytes contains the bandwidth in IEEE floating point format.  When type is evpn the valid subtype is mac_address. In the value field the low-order bit of the first byte(Flags) is defined as the "Sticky/static" flag and may be set to 1, indicating the MAC address is static and cannot move. The second byte is reserved and the  last four bytes contain the sequence number which is used to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates  occur for the same MAC address.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
        as_path:
          x-field-uid: 13
          description: |-
            Optional AS PATH settings.
          $ref: '#/components/schemas/Bgp.AsPath'
    BgpV4.EviVxlan.BroadcastDomain:
      description: |-
        Configuration for Broadcast Domains per EVI.
      type: object
      properties:
        cmac_ip_range:
          description: "This contains the list of Customer MAC/IP Ranges to be configured\
            \ per Broadcast Domain. \n\nAdvertises following route - \nType 2 - MAC/IP\
            \ Advertisement Route."
          type: array
          items:
            $ref: '#/components/schemas/Bgp.CMacIpRange'
          x-field-uid: 1
        ethernet_tag_id:
          x-field-uid: 2
          description: |-
            The Ethernet Tag ID of the Broadcast Domain.
          type: integer
          format: uint32
          default: 0
        vlan_aware_service:
          x-field-uid: 3
          description: |-
            VLAN-Aware service to be enabled or disabled.
          type: boolean
          default: false
    Bgp.CMacIpRange:
      description: "Configuration for MAC/IP Ranges per Broadcast Domain. \n\nAdvertises\
        \ following route -\n\nType 2 - MAC/IP Advertisement Route."
      type: object
      properties:
        mac_addresses:
          description: "Host MAC address range per Broadcast Domain. "
          $ref: '#/components/schemas/MACRouteAddress'
          x-field-uid: 1
        l2vni:
          description: |-
            Layer 2 Virtual Network Identifier (L2VNI) to be advertised with MAC/IP Advertisement Route (Type 2)
          type: integer
          format: uint32
          maximum: 16777215
          default: 0
          x-field-uid: 2
        ipv4_addresses:
          description: "Host IPv4 address range per Broadcast Domain.         "
          $ref: '#/components/schemas/V4RouteAddress'
          x-field-uid: 3
        ipv6_addresses:
          description: "Host IPv6 address range per Broadcast Domain.            \
            \     "
          $ref: '#/components/schemas/V6RouteAddress'
          x-field-uid: 4
        l3vni:
          description: |-
            Layer 3 Virtual Network Identifier (L3VNI) to be advertised with MAC/IP Advertisement Route (Type 2).
          type: integer
          format: uint32
          maximum: 16777215
          default: 0
          x-field-uid: 5
        include_default_gateway:
          description: |-
            Include default Gateway Extended Community in MAC/IP Advertisement Route (Type 2).
          type: boolean
          default: false
          x-field-uid: 6
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
          x-field-uid: 7
        communities:
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
          x-field-uid: 8
        ext_communities:
          description: |-
            Optional Extended Community settings. The Extended Communities Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes are utilized to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an 8-Bytes value. It is divided into two main parts. The first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes carry a unique set of data in a format defined by the type and sub-type field. Extended communities provide a larger  range for grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet, the valid sub types are route target and origin. The valid value for  administrator_as_2octet and administrator_as_4octet type is either two byte AS followed by four byte local administrator id or four byte AS followed by two  byte local administrator id.  When type is administrator_ipv4_address the valid sub types are route target and origin. The valid value for  administrator_ipv4_address is a four byte IPv4 address followed by a two byte local administrator id.  When type is opaque, valid sub types are color and encapsulation. When sub type is color, first two bytes of the value field contain flags and last four bytes  contains the value of the color. When sub type is encapsulation the first four bytes of value field are reserved and last two bytes carries the tunnel type from  IANA's "ETHER TYPES" registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth the valid sub type is extended_bandwidth. The first two bytes of the value field contains the AS number and the last four bytes contains the bandwidth in IEEE floating point format.  When type is evpn the valid subtype is mac_address. In the value field the low-order bit of the first byte(Flags) is defined as the "Sticky/static" flag and may be set to 1, indicating the MAC address is static and cannot move. The second byte is reserved and the  last four bytes contain the sequence number which is used to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates  occur for the same MAC address.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
          x-field-uid: 9
        as_path:
          description: |-
            Optional AS PATH settings.
          $ref: '#/components/schemas/Bgp.AsPath'
          x-field-uid: 10
        name:
          x-field-uid: 11
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
      required:
      - name
    Bgp.RouteDistinguisher:
      description: |-
        BGP Route Distinguisher.
      type: object
      properties:
        rd_type:
          description: "Route Distinguisher Type field of 2 Byte.\n - as_2octet: Two-Octet\
            \ AS Specific Extended Community (RFC 4360).\n - ipv4_address: IPv4 Address\
            \ Specific Extended Community (RFC 4360).\n - as_4octet:  4-Octet AS Specific\
            \ Extended Community (RFC 5668). "
          type: string
          default: as_2octet
          x-field-uid: 1
          x-enum:
            as_2octet:
              x-field-uid: 1
            ipv4_address:
              x-field-uid: 2
            as_4octet:
              x-field-uid: 3
          enum:
          - as_2octet
          - ipv4_address
          - as_4octet
        auto_config_rd_ip_addr:
          description: |-
            Allow to automatically configure RD IP address  from local ip.
          type: boolean
          default: false
          x-field-uid: 2
        rd_value:
          description: |-
            Colon separated Extended Community value of 6 Bytes - "AS number: Value".  Example - for the as_2octet or as_4octet "60005:100",  for ipv4_address "1.1.1.1:100"
          type: string
          x-field-uid: 3
    Bgp.RouteTarget:
      description: |-
        BGP Route Target.
      type: object
      properties:
        rt_type:
          description: "Extended Community Type field of 2 Byte.\n - as_2octet: Two-Octet\
            \ AS Specific Extended Community (RFC 4360).\n - ipv4_address: IPv4 Address\
            \ Specific Extended Community (RFC 4360).\n - as_4octet:  4-Octet AS Specific\
            \ Extended Community (RFC 5668). "
          type: string
          x-field-uid: 1
          x-enum:
            as_2octet:
              x-field-uid: 1
            ipv4_address:
              x-field-uid: 2
            as_4octet:
              x-field-uid: 3
          enum:
          - as_2octet
          - ipv4_address
          - as_4octet
        rt_value:
          description: |-
            Colon separated Extended Community value of 6 Bytes - AS number: Assigned Number.   Example - for the as_2octet or as_4octet "60005:100",  for ipv4_address "1.1.1.1:100"
          type: string
          x-field-uid: 2
    Bgp.Advanced:
      description: |-
        Configuration for BGP advanced settings.
      type: object
      properties:
        hold_time_interval:
          description: |-
            Number of seconds the sender proposes for the value of the Hold Timer.
          type: integer
          format: uint32
          default: 90
          x-field-uid: 1
        keep_alive_interval:
          description: |-
            Number of seconds between transmissions of Keepalive messages by this peer.
          type: integer
          format: uint32
          default: 30
          x-field-uid: 2
        update_interval:
          description: |-
            The time interval at which Update messages are sent to the DUT, expressed as the number of milliseconds between Update messages. The update interval 0 implies to send all the updates as fast as possible.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 3
        time_to_live:
          description: |-
            The limited number of iterations that a unit of data can experience before the data is discarded. This is placed in the TTL field in the IP header of the  transmitted packets.
          type: integer
          format: uint32
          default: 64
          maximum: 255
          x-field-uid: 4
        md5_key:
          description: |-
            The value to be used as a secret MD5 key for authentication. If not configured, MD5 authentication will not be enabled.
          type: string
          x-field-uid: 5
    Bgp.Capability:
      description: |-
        Configuration for BGP capability settings.
      type: object
      properties:
        ipv4_unicast:
          description: |-
            Support for the IPv4 Unicast address family.
          type: boolean
          default: true
          x-field-uid: 1
        ipv4_multicast:
          description: "Support for the IPv4 Multicast address family. "
          type: boolean
          default: false
          x-field-uid: 2
        ipv6_unicast:
          description: |-
            Support for the IPv4 Unicast address family.
          type: boolean
          default: true
          x-field-uid: 3
        ipv6_multicast:
          description: |-
            Support for the IPv6 Multicast address family.
          type: boolean
          default: false
          x-field-uid: 4
        vpls:
          description: "Support for VPLS as below. \nRFC4761 - Virtual Private LAN\
            \ Service (VPLS) using BGP for Auto-Discovery\nand Signaling. \nRFC6624\
            \ - Layer 2 Virtual Private Networks using BGP for Auto-Discovery \nand\
            \ Signaling."
          type: boolean
          default: false
          x-field-uid: 5
        route_refresh:
          description: |-
            Support for the route refresh capabilities. Route Refresh allows the dynamic exchange of route refresh requests  and routing information between BGP peers and the subsequent re-advertisement  of the outbound or inbound routing table.
          type: boolean
          default: true
          x-field-uid: 6
        route_constraint:
          description: |-
            Supports for the route constraint capabilities. Route Constraint allows the advertisement of Route Target Membership  information. The BGP peers exchange Route Target Reachability Information,  which is used to build a route distribution graph.  This limits the propagation of VPN Network Layer Reachability Information (NLRI) between different autonomous systems  or distinct clusters of the same autonomous system. This is supported for Layer 3 Virtual Private Network scenario.
          type: boolean
          default: false
          x-field-uid: 7
        link_state_non_vpn:
          description: |-
            Support for BGP Link State for ISIS and OSPF.
          type: boolean
          default: false
          x-field-uid: 8
        link_state_vpn:
          description: |-
            Capability advertisement of BGP Link State for VPNs.
          type: boolean
          default: false
          x-field-uid: 9
        evpn:
          description: |-
            Support for the EVPN address family.
          type: boolean
          default: false
          x-field-uid: 10
        extended_next_hop_encoding:
          description: |-
            Support for extended Next Hop Encoding for Nexthop field in  IPv4 routes advertisement.  This allows IPv4 routes being advertised by IPv6 peers to  include an IPv6 Nexthop.
          type: boolean
          default: false
          x-field-uid: 11
        ipv4_multicast_vpn:
          description: |-
            Support for the IPv4 Multicast VPN address family.
          type: boolean
          default: false
          x-field-uid: 12
        ipv4_mpls_vpn:
          description: |-
            Support for the IPv4 MPLS L3VPN address family.
          type: boolean
          default: false
          x-field-uid: 13
        ipv4_mdt:
          description: |-
            Supports for IPv4 MDT address family messages.
          type: boolean
          default: false
          x-field-uid: 14
        ipv4_multicast_mpls_vpn:
          description: |-
            Support for the IPv4 Multicast VPN address family.
          type: boolean
          default: false
          x-field-uid: 15
        ipv4_unicast_flow_spec:
          description: |-
            Support for propagation of IPv4 unicast flow specification rules.
          type: boolean
          default: false
          x-field-uid: 16
        ipv4_sr_te_policy:
          description: |-
            Support for IPv4 SRTE policy.
          type: boolean
          default: false
          x-field-uid: 17
        ipv4_unicast_add_path:
          description: |-
            Support for IPv4 Unicast Add Path Capability.
          type: boolean
          default: false
          x-field-uid: 18
        ipv6_multicast_vpn:
          description: |-
            Support for the IPv6 Multicast VPN address family.
          type: boolean
          default: false
          x-field-uid: 19
        ipv6_mpls_vpn:
          description: |-
            Support for the IPv6 MPLS L3VPN address family.
          type: boolean
          default: false
          x-field-uid: 20
        ipv6_mdt:
          description: |-
            Support for IPv6 MDT address family messages.
          type: boolean
          default: false
          x-field-uid: 21
        ipv6_multicast_mpls_vpn:
          description: |-
            Support for the IPv6 Multicast VPN address family.
          type: boolean
          default: false
          x-field-uid: 22
        ipv6_unicast_flow_spec:
          description: |-
            Support for propagation of IPv6 unicast flow specification rules.
          type: boolean
          default: false
          x-field-uid: 23
        ipv6_sr_te_policy:
          description: |-
            Support for IPv6 SRTE policy.
          type: boolean
          default: false
          x-field-uid: 24
        ipv6_unicast_add_path:
          description: |-
            Support for IPv6 Unicast Add Path Capability.
          type: boolean
          default: false
          x-field-uid: 25
    Bgp.LearnedInformationFilter:
      description: |-
        Configuration for controlling storage of BGP learned information recieved from the peer.
      type: object
      properties:
        unicast_ipv4_prefix:
          description: |-
            If enabled, will store the information related to Unicast IPv4 Prefixes recieved from the peer.
          type: boolean
          default: false
          x-field-uid: 1
        unicast_ipv6_prefix:
          description: |-
            If enabled, will store the information related to Unicast IPv6 Prefixes recieved from the peer.
          type: boolean
          default: false
          x-field-uid: 2
    Bgp.V4RouteRange:
      description: |-
        Emulated BGPv4 route range.
      type: object
      properties:
        addresses:
          description: |-
            A list of group of IPv4 route addresses.
          type: array
          items:
            $ref: '#/components/schemas/V4RouteAddress'
          x-field-uid: 1
        next_hop_mode:
          description: "Specify the NextHop in MP REACH NLRI. The mode for setting\
            \ the IP address  of the NextHop in the MP REACH NLRI can be one of the\
            \ following:\n  Local IP: Automatically fills the Nexthop with the Local\
            \ IP of the BGP\npeer.\n  If BGP peer is of type IPv6, Nexthop Encoding\
            \ capability should be enabled.\n  Manual: Override the Nexthop with any\
            \ arbitrary IPv4/IPv6 address.   "
          type: string
          default: local_ip
          x-field-uid: 2
          x-enum:
            local_ip:
              x-field-uid: 1
            manual:
              x-field-uid: 2
          enum:
          - local_ip
          - manual
        next_hop_address_type:
          description: |-
            If the Nexthop Mode is Manual, it sets the type of the NextHop IP address.
          type: string
          default: ipv4
          x-field-uid: 3
          x-enum:
            ipv4:
              x-field-uid: 1
            ipv6:
              x-field-uid: 2
          enum:
          - ipv4
          - ipv6
        next_hop_ipv4_address:
          description: |-
            The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
          type: string
          format: ipv4
          default: 0.0.0.0
          x-field-uid: 4
        next_hop_ipv6_address:
          description: "The IPv6 address of the next hop if the Nexthop Mode is manual\
            \ and the Nexthop type is IPv6. "
          type: string
          format: ipv6
          default: ::0
          x-field-uid: 5
        advanced:
          x-field-uid: 6
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          x-field-uid: 7
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        as_path:
          x-field-uid: 8
          $ref: '#/components/schemas/Bgp.AsPath'
        add_path:
          x-field-uid: 9
          $ref: '#/components/schemas/Bgp.AddPath'
        name:
          x-field-uid: 10
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        ext_communities:
          x-field-uid: 11
          description: |-
            Optional Extended Community settings. The Extended Communities Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes are utilized to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an 8-Bytes value. It is divided into two main parts. The first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes carry a unique set of data in a format defined by the type and sub-type field. Extended communities provide a larger  range for grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet, the valid sub types are route target and origin. The valid value for  administrator_as_2octet and administrator_as_4octet type is either two byte AS followed by four byte local administrator id or four byte AS followed by two  byte local administrator id.  When type is administrator_ipv4_address the valid sub types are route target and origin. The valid value for  administrator_ipv4_address is a four byte IPv4 address followed by a two byte local administrator id.  When type is opaque, valid sub types are color and encapsulation. When sub type is color, first two bytes of the value field contain flags and last four bytes  contains the value of the color. When sub type is encapsulation the first four bytes of value field are reserved and last two bytes carries the tunnel type from  IANA's "ETHER TYPES" registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth the valid sub type is extended_bandwidth. The first two bytes of the value field contains the AS number and the last four bytes contains the bandwidth in IEEE floating point format.  When type is evpn the valid subtype is mac_address. In the value field the low-order bit of the first byte(Flags) is defined as the "Sticky/static" flag and may be set to 1, indicating the MAC address is static and cannot move. The second byte is reserved and the  last four bytes contain the sequence number which is used to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates  occur for the same MAC address.  Note evpn type is defined mainly for use with evpn route updates and not for IPv4 and IPv6 route updates.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
      required:
      - name
    Bgp.AddPath:
      description: |-
        The BGP Additional Paths feature is a BGP extension that allows the  advertisement of multiple paths for the same prefix without the new  paths implicitly replacing any previous paths.
      type: object
      properties:
        path_id:
          description: |-
            The id of the additional path.
          type: integer
          format: uint32
          default: 1
          x-field-uid: 1
    Bgp.V6RouteRange:
      description: |-
        Emulated BGPv6 route range.
      type: object
      properties:
        addresses:
          description: |-
            A list of group of IPv6 route addresses.
          type: array
          items:
            $ref: '#/components/schemas/V6RouteAddress'
          x-field-uid: 1
        next_hop_mode:
          description: "Specify the NextHop in MP REACH NLRI. The mode for setting\
            \ the IP address  of the NextHop in the MP REACH NLRI can be one of the\
            \ following:\n  Local IP: Automatically fills the Nexthop with the Local\
            \ IP of the BGP\npeer.\n  If BGP peer is of type IPv6, Nexthop Encoding\
            \ capability should be enabled.\n  Manual: Override the Nexthop with any\
            \ arbitrary IPv4/IPv6 address.   "
          type: string
          default: local_ip
          x-field-uid: 2
          x-enum:
            local_ip:
              x-field-uid: 1
            manual:
              x-field-uid: 2
          enum:
          - local_ip
          - manual
        next_hop_address_type:
          description: |-
            If the Nexthop Mode is Manual, it sets the type of the NextHop IP address.
          type: string
          default: ipv6
          x-field-uid: 3
          x-enum:
            ipv4:
              x-field-uid: 1
            ipv6:
              x-field-uid: 2
          enum:
          - ipv4
          - ipv6
        next_hop_ipv4_address:
          description: |-
            The IPv4 address of the next hop if the Nexthop Mode is manual and the Nexthop type is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability should be enabled.
          type: string
          format: ipv4
          default: 0.0.0.0
          x-field-uid: 4
        next_hop_ipv6_address:
          description: "The IPv6 address of the next hop if the Nexthop Mode is manual\
            \ and the Nexthop type is IPv6. "
          type: string
          format: ipv6
          default: ::0
          x-field-uid: 5
        advanced:
          x-field-uid: 6
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          x-field-uid: 7
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        as_path:
          x-field-uid: 8
          $ref: '#/components/schemas/Bgp.AsPath'
        add_path:
          x-field-uid: 9
          $ref: '#/components/schemas/Bgp.AddPath'
        name:
          x-field-uid: 10
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        ext_communities:
          x-field-uid: 11
          description: |-
            Optional Extended Community settings. The Extended Communities Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes are utilized to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an 8-Bytes value. It is divided into two main parts. The first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes carry a unique set of data in a format defined by the type and sub-type field. Extended communities provide a larger  range for grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet, the valid sub types are route target and origin. The valid value for  administrator_as_2octet and administrator_as_4octet type is either two byte AS followed by four byte local administrator id or four byte AS followed by two  byte local administrator id.  When type is administrator_ipv4_address the valid sub types are route target and origin. The valid value for  administrator_ipv4_address is a four byte IPv4 address followed by a two byte local administrator id.  When type is opaque, valid sub types are color and encapsulation. When sub type is color, first two bytes of the value field contain flags and last four bytes  contains the value of the color. When sub type is encapsulation the first four bytes of value field are reserved and last two bytes carries the tunnel type from  IANA's "ETHER TYPES" registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth the valid sub type is extended_bandwidth. The first two bytes of the value field contains the AS number and the last four bytes contains the bandwidth in IEEE floating point format.  When type is evpn the valid subtype is mac_address. In the value field the low-order bit of the first byte(Flags) is defined as the "Sticky/static" flag and may be set to 1, indicating the MAC address is static and cannot move. The second byte is reserved and the  last four bytes contain the sequence number which is used to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates  occur for the same MAC address.  Note evpn type is defined mainly for use with evpn route updates and not for IPv4 and IPv6 route updates.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
      required:
      - name
    BgpSrte.V4Policy:
      description: "Configuration for BGP Segment Routing Traffic Engineering(SRTE)\
        \ \npolicy.\n"
      type: object
      required:
      - ipv4_endpoint
      - name
      properties:
        distinguisher:
          description: |-
            4-octet value uniquely identifying the policy in the context of (color, endpoint) tuple. It is used by the SR Policy originator to make unique (from an NLRI perspective)  both for multiple candidate  paths of the same SR Policy as well as candidate paths  of different SR Policies (i.e. with different segment list) with the same Color  and Endpoint but meant for different head-ends.
          type: integer
          format: uint32
          default: 1
          x-field-uid: 1
        color:
          description: |-
            Policy color is used to match the color of the destination prefixes to steer traffic into the SR Policy.
          type: integer
          format: uint32
          default: 100
          x-field-uid: 2
        ipv4_endpoint:
          description: |-
            Specifies a single node or a set of nodes (e.g. an anycast address). It is selected on the basis of the SR Policy type (AFI).
          type: string
          format: ipv4
          x-field-uid: 3
        next_hop_mode:
          description: |-
            Mode for choosing the NextHop in MP REACH NLRI. Available modes are : Local IP: Automatically fills the Nexthop with the Local IP of the BGP peer. For IPv6 BGP peer the Nexthop Encoding capability should be enabled. Manual: Override the Nexthop with any arbitrary IPv4/IPv6 address.
          type: string
          default: local_ip
          x-field-uid: 4
          x-enum:
            local_ip:
              x-field-uid: 1
            manual:
              x-field-uid: 2
          enum:
          - local_ip
          - manual
        next_hop_address_type:
          description: "Type of next hop IP address to be used when 'next_hop_mode'\
            \ is set to 'manual'. "
          type: string
          default: ipv4
          x-field-uid: 5
          x-enum:
            ipv4:
              x-field-uid: 1
            ipv6:
              x-field-uid: 2
          enum:
          - ipv4
          - ipv6
        next_hop_ipv4_address:
          description: |-
            The IPv4 address of the next hop if the Nexthop type 'next_hop_mode' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability extended_next_hop_encoding should be enabled.
          type: string
          format: ipv4
          x-field-uid: 6
        next_hop_ipv6_address:
          description: "The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type'\
            \ is 'manual' and the Nexthop type 'next_hop_address_type' is IPv6. "
          type: string
          format: ipv6
          x-field-uid: 7
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
          x-field-uid: 8
        add_path:
          $ref: '#/components/schemas/Bgp.AddPath'
          x-field-uid: 9
        as_path:
          $ref: '#/components/schemas/Bgp.AsPath'
          x-field-uid: 10
        communities:
          description: |-
            Optional Community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
          x-field-uid: 11
        ext_communities:
          description: |-
            Optional Extended Community settings. The Extended Communities Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes are utilized to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an 8-Bytes value. It is divided into two main parts. The first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes carry a unique set of data in a format defined by the type and sub-type field. Extended communities provide a larger  range for grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet, the valid sub types are route target and origin. The valid value for  administrator_as_2octet and administrator_as_4octet type is either two byte AS followed by four byte local administrator id or four byte AS followed by two  byte local administrator id.  When type is administrator_ipv4_address the valid sub types are route target and origin. The valid value for  administrator_ipv4_address is a four byte IPv4 address followed by a two byte local administrator id.  When type is opaque, valid sub types are color and encapsulation. When sub type is color, first two bytes of the value field contain flags and last four bytes  contains the value of the color. When sub type is encapsulation the first four bytes of value field are reserved and last two bytes carries the tunnel type from  IANA's "ETHER TYPES" registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth the valid sub type is extended_bandwidth. The first two bytes of the value field contains the AS number and the last four bytes contains the bandwidth in IEEE floating point format.  When type is evpn the valid subtype is mac_address. In the value field the low-order bit of the first byte(Flags) is defined as the "Sticky/static" flag and may be set to 1, indicating the MAC address is static and cannot move. The second byte is reserved and the  last four bytes contain the sequence number which is used to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates  occur for the same MAC address.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
          x-field-uid: 12
        tunnel_tlvs:
          description: |-
            List Tunnel Encapsulation Attributes.
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V4TunnelTlv'
          x-field-uid: 13
        name:
          x-field-uid: 14
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        active:
          x-field-uid: 15
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
    BgpSrte.V4TunnelTlv:
      description: |-
        Configuration for BGP SRTE Tunnel TLV.
      type: object
      properties:
        remote_endpoint_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.RemoteEndpointSubTlv'
          x-field-uid: 1
        color_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.ColorSubTlv'
          x-field-uid: 2
        binding_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.BindingSubTlv'
          x-field-uid: 3
        preference_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PreferenceSubTlv'
          x-field-uid: 4
        policy_priority_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PolicyPrioritySubTlv'
          x-field-uid: 5
        policy_name_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PolicyNameSubTlv'
          x-field-uid: 6
        explicit_null_label_policy_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.ExplicitNullLabelPolicySubTlv'
          x-field-uid: 7
        segment_lists:
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.SegmentList'
          x-field-uid: 8
        name:
          x-field-uid: 9
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        active:
          x-field-uid: 10
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
      required:
      - name
    BgpSrte.RemoteEndpointSubTlv:
      description: |-
        Configuration for the BGP remote endpoint sub TLV.
      type: object
      properties:
        as_number:
          description: |-
            Autonomous system (AS) number
          type: integer
          format: uint32
          default: 0
          x-field-uid: 1
        address_family:
          description: |-
            Determines the address type
          type: string
          default: ipv4
          x-field-uid: 2
          x-enum:
            ipv4:
              x-field-uid: 1
            ipv6:
              x-field-uid: 2
          enum:
          - ipv4
          - ipv6
        ipv4_address:
          description: |-
            The IPv4 address of the Remote Endpoint.
          type: string
          format: ipv4
          default: 0.0.0.0
          x-field-uid: 3
        ipv6_address:
          description: |-
            The IPv6 address of the Remote Endpoint.
          type: string
          format: ipv6
          default: ::0
          x-field-uid: 4
    BgpSrte.ColorSubTlv:
      description: "Configuration for the Policy Color attribute sub-TLV. The Color\
        \ sub-TLV MAY be used as a way to \"color\" the corresponding Tunnel TLV.\
        \ The Value field of the sub-TLV is eight octets long and consists of a Color\
        \ Extended Community. First two octets of its Value field are 0x030b as type\
        \ and subtype of extended  community. Remaining six octets are are exposed\
        \ to configure. "
      type: object
      properties:
        color:
          description: |-
            Six octet values. Example: 000000000064 for color value 100.
          type: string
          format: hex
          x-field-uid: 1
    BgpSrte.BindingSubTlv:
      description: |-
        Configuration for the binding SID sub-TLV.  This is used to signal the binding SID related information  of the SR Policy candidate path.
      type: object
      properties:
        binding_sid_type:
          description: |-
            Type of the binding SID.  Supported types are "No Binding SID" or "Four Octets Sid" or "IPv6 SID".
          type: string
          default: no_binding
          x-field-uid: 1
          x-enum:
            no_binding:
              x-field-uid: 1
            four_octet_sid:
              x-field-uid: 2
            ipv6_sid:
              x-field-uid: 3
          enum:
          - no_binding
          - four_octet_sid
          - ipv6_sid
        four_octet_sid:
          description: "Binding SID is encoded in 4 octets. "
          type: integer
          format: uint32
          x-field-uid: 2
        ipv6_sid:
          description: |-
            IPv6 SID value.
          type: string
          format: ipv6
          x-field-uid: 3
        s_flag:
          description: |-
            S-Flag encodes the "Specified-BSID-only" behavior.
          type: boolean
          default: false
          x-field-uid: 4
        i_flag:
          description: |-
            I-Flag encodes the "Drop Upon Invalid" behavior.
          type: boolean
          default: false
          x-field-uid: 5
    BgpSrte.PreferenceSubTlv:
      description: |-
        Configuration for BGP preference sub TLV of the SR Policy candidate path.
      type: object
      properties:
        preference:
          description: |-
            The preference value of the SR Policy candidate path.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 1
    BgpSrte.PolicyPrioritySubTlv:
      description: |-
        Configuration for the Policy Priority sub-TLV. The Policy Priority to indicate the order in which the SR policies  are re-computed upon topological change.
      type: object
      properties:
        policy_priority:
          description: |-
            One-octet Priority value.
          type: integer
          format: uint32
          maximum: 255
          x-field-uid: 1
    BgpSrte.PolicyNameSubTlv:
      description: |-
        Configuration for the Policy Name sub-TLV. The Policy Name sub-TLV is used to attach a symbolic name to the SR Policy candidate path.
      type: object
      properties:
        policy_name:
          description: |-
            Symbolic name for the policy that should be a string of printable ASCII characters, without a NULL terminator.
          type: string
          minLength: 1
          maxLength: 32
          x-field-uid: 1
    BgpSrte.ExplicitNullLabelPolicySubTlv:
      description: |-
        Configuration for BGP explicit null label policy sub TLV settings.
      type: object
      properties:
        explicit_null_label_policy:
          description: "The value of the explicit null label policy "
          type: string
          default: do_not_push_enlp
          x-field-uid: 1
          x-enum:
            reserved_enlp:
              x-field-uid: 1
            push_ipv4_enlp:
              x-field-uid: 2
            push_ipv6_enlp:
              x-field-uid: 3
            push_ipv4_ipv6_enlp:
              x-field-uid: 4
            do_not_push_enlp:
              x-field-uid: 5
          enum:
          - reserved_enlp
          - push_ipv4_enlp
          - push_ipv6_enlp
          - push_ipv4_ipv6_enlp
          - do_not_push_enlp
    BgpSrte.SegmentList:
      description: |-
        Optional configuration for BGP SR TE Policy segment list. The Segment List sub-TLV encodes a single explicit path towards the Endpoint.
      type: object
      properties:
        weight:
          description: |-
            The Weight associated with a given path and the sub-TLV is optional.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 1
        segments:
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.Segment'
          x-field-uid: 2
        name:
          x-field-uid: 3
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        active:
          x-field-uid: 4
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
      required:
      - name
    BgpSrte.Segment:
      description: |-
        A Segment sub-TLV describes a single segment in a segment list  i.e., a single element of the explicit path. The Segment sub-TLVs are optional.
      type: object
      required:
      - segment_type
      - name
      properties:
        segment_type:
          description: |-
            Specify one of the segment type.
            https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13
            Type  A: SID only, in the form of MPLS Label.
            Type  B: SID only, in the form of IPv6 Address.
            Type  C: IPv4 Node Address with optional SID.
            Type  D: IPv6 Node Address with optional SID for SR MPLS.
            Type  E: IPv4 Address and index with optional SID.
            Type  F: IPv4 Local and Remote addresses with optional SID.
            Type  G: IPv6 Address and index for local and remote pair with optional
                  SID for SR MPLS.
            Type  H: IPv6 Local and Remote addresses with optional SID for SR MPLS.
            Type  I: IPv6 Node Address with optional SID for SRv6.
            Type  J: IPv6 Address and index for local and remote pair with optional
                  SID for SRv6.
            Type  K: IPv6 Local and Remote addresses for SRv6.
          type: string
          x-field-uid: 1
          x-enum:
            type_a:
              x-field-uid: 1
            type_b:
              x-field-uid: 2
            type_c:
              x-field-uid: 3
            type_d:
              x-field-uid: 4
            type_e:
              x-field-uid: 5
            type_f:
              x-field-uid: 6
            type_g:
              x-field-uid: 7
            type_h:
              x-field-uid: 8
            type_i:
              x-field-uid: 9
            type_j:
              x-field-uid: 10
            type_k:
              x-field-uid: 11
          enum:
          - type_a
          - type_b
          - type_c
          - type_d
          - type_e
          - type_f
          - type_g
          - type_h
          - type_i
          - type_j
          - type_k
        type_a:
          $ref: '#/components/schemas/BgpSrte.SegmentATypeSubTlv'
          x-field-uid: 2
        type_b:
          $ref: '#/components/schemas/BgpSrte.SegmentBTypeSubTlv'
          x-field-uid: 3
        type_c:
          $ref: '#/components/schemas/BgpSrte.SegmentCTypeSubTlv'
          x-field-uid: 4
        type_d:
          $ref: '#/components/schemas/BgpSrte.SegmentDTypeSubTlv'
          x-field-uid: 5
        type_e:
          $ref: '#/components/schemas/BgpSrte.SegmentETypeSubTlv'
          x-field-uid: 6
        type_f:
          $ref: '#/components/schemas/BgpSrte.SegmentFTypeSubTlv'
          x-field-uid: 7
        type_g:
          $ref: '#/components/schemas/BgpSrte.SegmentGTypeSubTlv'
          x-field-uid: 8
        type_h:
          $ref: '#/components/schemas/BgpSrte.SegmentHTypeSubTlv'
          x-field-uid: 9
        type_i:
          $ref: '#/components/schemas/BgpSrte.SegmentITypeSubTlv'
          x-field-uid: 10
        type_j:
          $ref: '#/components/schemas/BgpSrte.SegmentJTypeSubTlv'
          x-field-uid: 11
        type_k:
          $ref: '#/components/schemas/BgpSrte.SegmentKTypeSubTlv'
          x-field-uid: 12
        name:
          x-field-uid: 13
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        active:
          x-field-uid: 14
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
    BgpSrte.SrMplsSid:
      description: |-
        Configuration for SR-MPLS with Label, TC, Bottom-of-Stack and TTL.
      type: object
      properties:
        label:
          description: |-
            Label value in [0, 2^20 -1].
          type: integer
          format: uint32
          maximum: 1048575
          x-field-uid: 1
        tc:
          description: |-
            Traffic class in bits.
          type: integer
          format: uint32
          maximum: 7
          x-field-uid: 2
        s_bit:
          description: |-
            Bottom-of-Stack bit.
          type: boolean
          x-field-uid: 3
        ttl:
          description: "Time To Live. "
          type: integer
          format: uint32
          maximum: 225
          x-field-uid: 4
    BgpSrte.SRv6SIDEndpointBehaviorAndStructure:
      description: |-
        Configuration for SRv6 Endpoint Behavior and SID Structure.  Its optional. Summation of lengths for Locator Block, Locator Node,  Function, and Argument MUST be less than or equal to 128.
      type: object
      properties:
        lb_length:
          description: |-
            SRv6 SID Locator Block length in bits.
          type: integer
          format: uint32
          maximum: 128
          default: 0
          x-field-uid: 1
        ln_length:
          description: |-
            SRv6 SID Locator Node length in bits.
          type: integer
          format: uint32
          maximum: 128
          default: 0
          x-field-uid: 2
        func_length:
          description: |-
            SRv6 SID Function length in bits.
          type: integer
          format: uint32
          maximum: 128
          default: 0
          x-field-uid: 3
        arg_length:
          description: |-
            SRv6 SID Arguments length in bits.
          type: integer
          format: uint32
          maximum: 128
          default: 0
          x-field-uid: 4
    BgpSrte.SegmentATypeSubTlv:
      description: |-
        Type  A: SID only, in the form of MPLS Label.
      type: object
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
          x-field-uid: 1
        label:
          x-field-uid: 2
          description: |-
            Label value in [0, 2^20 -1].
          type: integer
          format: uint32
          maximum: 1048575
        tc:
          x-field-uid: 3
          description: |-
            Traffic class in bits.
          type: integer
          format: uint32
          maximum: 7
        s_bit:
          x-field-uid: 4
          description: |-
            Bottom-of-Stack bit.
          type: boolean
        ttl:
          x-field-uid: 5
          description: "Time To Live. "
          type: integer
          format: uint32
          maximum: 225
    BgpSrte.SegmentBTypeSubTlv:
      description: |-
        Type  B: SID only, in the form of IPv6 address.
      type: object
      required:
      - srv6_sid
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
          x-field-uid: 1
        srv6_sid:
          description: |-
            SRv6 SID.
          type: string
          format: ipv6
          x-field-uid: 2
        srv6_sid_endpoint_behavior:
          description: |-
            Optional SRv6 Endpoint Behavior and SID Structure.
          $ref: '#/components/schemas/BgpSrte.SRv6SIDEndpointBehaviorAndStructure'
          x-field-uid: 3
    BgpSrte.SegmentCTypeSubTlv:
      description: |-
        Type C: IPv4 Node Address with optional SID.
      type: object
      required:
      - ipv4_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
          x-field-uid: 1
        sr_algorithm:
          description: |-
            SR Algorithm identifier when A-Flag in on.
          type: integer
          format: uint32
          maximum: 255
          default: 0
          x-field-uid: 2
        ipv4_node_address:
          description: |-
            IPv4 address representing a node.
          type: string
          format: ipv4
          x-field-uid: 3
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
          x-field-uid: 4
    BgpSrte.SegmentDTypeSubTlv:
      description: |-
        Type D: IPv6 Node Address with optional SID for SR MPLS.
      type: object
      required:
      - ipv6_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
          x-field-uid: 1
        sr_algorithm:
          description: |-
            specifying SR Algorithm when when A-Flag as defined in above flags.
          type: integer
          format: uint32
          maximum: 255
          default: 0
          x-field-uid: 2
        ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
          x-field-uid: 3
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
          x-field-uid: 4
    BgpSrte.SegmentETypeSubTlv:
      description: |-
        Type E: IPv4 Address and Local Interface ID with optional SID
      type: object
      required:
      - ipv4_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
          x-field-uid: 1
        local_interface_id:
          description: |-
            Local Interface ID: The Interface Index as defined in [RFC8664].
          type: integer
          format: uint32
          default: 0
          x-field-uid: 2
        ipv4_node_address:
          description: |-
            IPv4 address representing a node.
          type: string
          format: ipv4
          x-field-uid: 3
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
          x-field-uid: 4
    BgpSrte.SegmentFTypeSubTlv:
      description: |-
        Type F: IPv4 Local and Remote addresses with optional SID.
      type: object
      required:
      - local_ipv4_address
      - remote_ipv4_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
          x-field-uid: 1
        local_ipv4_address:
          description: |-
            Local IPv4 Address.
          type: string
          format: ipv4
          x-field-uid: 2
        remote_ipv4_address:
          description: |-
            Remote IPv4 Address.
          type: string
          format: ipv4
          x-field-uid: 3
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
          x-field-uid: 4
    BgpSrte.SegmentGTypeSubTlv:
      description: |-
        Type G: IPv6 Address, Interface ID for local and remote pair with optional SID for SR MPLS.
      type: object
      required:
      - local_ipv6_node_address
      - remote_ipv6_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
          x-field-uid: 1
        local_interface_id:
          description: |-
            Local Interface ID: The Interface Index as defined in [RFC8664].
          type: integer
          format: uint32
          default: 0
          x-field-uid: 2
        local_ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
          x-field-uid: 3
        remote_interface_id:
          description: |-
            Local Interface ID: The Interface Index as defined in [RFC8664].
          type: integer
          format: uint32
          default: 0
          x-field-uid: 4
        remote_ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
          x-field-uid: 5
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
          x-field-uid: 6
    BgpSrte.SegmentHTypeSubTlv:
      description: |-
        Type H: IPv6 Local and Remote addresses with optional SID for SR MPLS.
      type: object
      required:
      - local_ipv6_address
      - remote_ipv6_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
          x-field-uid: 1
        local_ipv6_address:
          description: |-
            Local IPv6 Address.
          type: string
          format: ipv6
          x-field-uid: 2
        remote_ipv6_address:
          description: |-
            Remote IPv6 Address.
          type: string
          format: ipv6
          x-field-uid: 3
        sr_mpls_sid:
          description: |-
            Optional SR-MPLS SID.
          $ref: '#/components/schemas/BgpSrte.SrMplsSid'
          x-field-uid: 4
    BgpSrte.SegmentITypeSubTlv:
      description: |-
        Type I: IPv6 Node Address with optional SRv6 SID.
      type: object
      required:
      - ipv6_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
          x-field-uid: 1
        ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
          x-field-uid: 2
        srv6_sid:
          description: |-
            Optional SRv6 SID.
          type: string
          format: ipv6
          x-field-uid: 3
        srv6_sid_endpoint_behavior:
          description: |-
            Optional SRv6 Endpoint Behavior and SID Structure.
          $ref: '#/components/schemas/BgpSrte.SRv6SIDEndpointBehaviorAndStructure'
          x-field-uid: 4
    BgpSrte.SegmentJTypeSubTlv:
      description: |-
        Type J: IPv6 Address, Interface ID for local and remote pair for SRv6 with optional SID.
      type: object
      required:
      - local_ipv6_node_address
      - remote_ipv6_node_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
          x-field-uid: 1
        sr_algorithm:
          description: |-
            SR Algorithm identifier when A-Flag in on.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 2
        local_interface_id:
          description: |-
            Local Interface ID: The Interface Index as defined in [RFC8664].
          type: integer
          format: uint32
          default: 0
          x-field-uid: 3
        local_ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
          x-field-uid: 4
        remote_interface_id:
          description: |-
            Local Interface ID: The Interface Index as defined in [RFC8664].
          type: integer
          format: uint32
          default: 0
          x-field-uid: 5
        remote_ipv6_node_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
          x-field-uid: 6
        srv6_sid:
          description: |-
            Optional SRv6 SID.
          type: string
          format: ipv6
          x-field-uid: 7
        srv6_sid_endpoint_behavior:
          description: |-
            Optional SRv6 Endpoint Behavior and SID Structure.
          $ref: '#/components/schemas/BgpSrte.SRv6SIDEndpointBehaviorAndStructure'
          x-field-uid: 8
    BgpSrte.SegmentKTypeSubTlv:
      description: |-
        Type K: IPv6 Local and Remote addresses for SRv6 with optional SID.
      type: object
      required:
      - local_ipv6_address
      - remote_ipv6_address
      properties:
        flags:
          description: |-
            One octet bitmap for flags including V-Flag, A-Flag, S-Flag, B-Flag etc. as defined in https://datatracker.ietf.org/doc/html/draft-ietf-idr-segment-routing-te-policy-13#section-2.4.4.2.12
          type: string
          format: hex
          x-field-uid: 1
        sr_algorithm:
          description: |-
            SR Algorithm identifier when A-Flag in on.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 2
        local_ipv6_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
          x-field-uid: 3
        remote_ipv6_address:
          description: |-
            IPv6 address representing a node.
          type: string
          format: ipv6
          x-field-uid: 4
        srv6_sid:
          description: |-
            Optional SRv6 SID.
          type: string
          format: ipv6
          x-field-uid: 5
        srv6_sid_endpoint_behavior:
          description: |-
            Optional SRv6 Endpoint Behavior and SID Structure.
          $ref: '#/components/schemas/BgpSrte.SRv6SIDEndpointBehaviorAndStructure'
          x-field-uid: 6
    BgpSrte.V6Policy:
      description: |
        Configuration for BGP Segment Routing Traffic Engineering policy.
      type: object
      required:
      - ipv6_endpoint
      - name
      properties:
        distinguisher:
          description: |-
            Identifies the policy in the context of (color and endpoint) tuple.  It is used by the SR Policy originator to make unique multiple  occurrences of the same SR Policy.
          type: integer
          format: uint32
          default: 1
          x-field-uid: 1
        color:
          description: "Identifies the policy. It is used to match the color of the\
            \  destination prefixes to steer traffic into the SR Policy. "
          type: integer
          format: uint32
          default: 100
          x-field-uid: 2
        ipv6_endpoint:
          description: |-
            Specifies a single node or a set of nodes (e.g., an anycast address). It is selected on the basis of the SR Policy type (AFI).
          type: string
          format: ipv6
          x-field-uid: 3
        next_hop_mode:
          description: |-
            Mode for choosing the NextHop in MP REACH NLRI. Available modes are : Local IP: Automatically fills the Nexthop with the Local IP of the BGP peer. For IPv6 BGP peer the Nexthop Encoding capability should be enabled. Manual: Override the Nexthop with any arbitrary IPv4/IPv6 address.
          type: string
          default: local_ip
          x-field-uid: 4
          x-enum:
            local_ip:
              x-field-uid: 1
            manual:
              x-field-uid: 2
          enum:
          - local_ip
          - manual
        next_hop_address_type:
          description: "Type of next hop IP address to be used when 'next_hop_mode'\
            \ is set to 'manual'. "
          type: string
          default: ipv6
          x-field-uid: 5
          x-enum:
            ipv4:
              x-field-uid: 1
            ipv6:
              x-field-uid: 2
          enum:
          - ipv4
          - ipv6
        next_hop_ipv4_address:
          description: |-
            The IPv4 address of the Nexthop if the 'next_hop_mode' is 'manual' and the Nexthop type 'next_hop_address_type' is IPv4. If BGP peer is of type IPv6, Nexthop Encoding capability extended_next_hop_encoding should be enabled.
          type: string
          format: ipv4
          default: 0.0.0.0
          x-field-uid: 6
        next_hop_ipv6_address:
          description: "The IPv6 address of the next hop if the Nexthop Mode 'next_hop_address_type'\
            \ is 'manual' and the Nexthop type 'next_hop_address_type' is IPv6. "
          type: string
          format: ipv6
          default: ::0
          x-field-uid: 7
        advanced:
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
          x-field-uid: 8
        add_path:
          $ref: '#/components/schemas/Bgp.AddPath'
          x-field-uid: 9
        as_path:
          $ref: '#/components/schemas/Bgp.AsPath'
          x-field-uid: 10
        communities:
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
          x-field-uid: 11
        extcommunities:
          description: |-
            Optional Extended Community settings. The Extended Communities Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes are utilized to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an 8-Bytes value. It is divided into two main parts. The first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes carry a unique set of data in a format defined by the type and sub-type field. Extended communities provide a larger  range for grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet, the valid sub types are route target and origin. The valid value for  administrator_as_2octet and administrator_as_4octet type is either two byte AS followed by four byte local administrator id or four byte AS followed by two  byte local administrator id.  When type is administrator_ipv4_address the valid sub types are route target and origin. The valid value for  administrator_ipv4_address is a four byte IPv4 address followed by a two byte local administrator id.  When type is opaque, valid sub types are color and encapsulation. When sub type is color, first two bytes of the value field contain flags and last four bytes  contains the value of the color. When sub type is encapsulation the first four bytes of value field are reserved and last two bytes carries the tunnel type from  IANA's "ETHER TYPES" registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth the valid sub type is extended_bandwidth. The first two bytes of the value field contains the AS number and the last four bytes contains the bandwidth in IEEE floating point format.  When type is evpn the valid subtype is mac_address. In the value field the low-order bit of the first byte(Flags) is defined as the "Sticky/static" flag and may be set to 1, indicating the MAC address is static and cannot move. The second byte is reserved and the  last four bytes contain the sequence number which is used to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates  occur for the same MAC address.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
          x-field-uid: 12
        tunnel_tlvs:
          description: |-
            List of optional tunnel TLV settings.
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V6TunnelTlv'
          x-field-uid: 13
        name:
          x-field-uid: 14
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        active:
          x-field-uid: 15
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
    BgpSrte.V6TunnelTlv:
      description: |-
        Configuration for BGP SRTE Tunnel TLV.
      type: object
      properties:
        remote_endpoint_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.RemoteEndpointSubTlv'
          x-field-uid: 1
        color_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.ColorSubTlv'
          x-field-uid: 2
        binding_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.BindingSubTlv'
          x-field-uid: 3
        preference_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PreferenceSubTlv'
          x-field-uid: 4
        policy_priority_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PolicyPrioritySubTlv'
          x-field-uid: 5
        policy_name_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.PolicyNameSubTlv'
          x-field-uid: 6
        explicit_null_label_policy_sub_tlv:
          $ref: '#/components/schemas/BgpSrte.ExplicitNullLabelPolicySubTlv'
          x-field-uid: 7
        segment_lists:
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.SegmentList'
          x-field-uid: 8
        name:
          x-field-uid: 9
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        active:
          x-field-uid: 10
          description: |-
            If enabled means that this part of the configuration including any active 'children' nodes will be advertised to peer.  If disabled, this means that though config is present, it is not taking any part of the test but can be activated at run-time to advertise just this part of the configuration to the peer.
          type: boolean
          default: true
      required:
      - name
    Bgp.GracefulRestart:
      description: |-
        The Graceful Restart Capability (RFC 4724) is a BGP capability that can be used by a BGP speaker to indicate its ability to preserve its forwarding state during BGP restart. The Graceful Restart (GR) capability is advertised in OPEN messages sent between BGP peers. After a BGP session has been established, and the initial routing update has been completed,  an End-of-RIB (Routing Information Base) marker is sent in an UPDATE message to convey information  about routing convergence.
      type: object
      properties:
        enable_gr:
          description: |-
            If enabled, Graceful Restart capability is advertised in BGP OPEN messages.
          type: boolean
          default: false
          x-field-uid: 1
        restart_time:
          description: |-
            This is the estimated duration (in seconds) it will take for the BGP session to be re-established after a restart.  This can be used to speed up routing convergence by its peer in case the BGP speaker does not come back after a restart.
          type: integer
          format: uint32
          maximum: 4096
          default: 45
          x-field-uid: 2
        enable_llgr:
          description: "If enabled, the \"Long-lived Graceful Restart Capability\"\
            , or \"LLGR Capability\"\nwill be advertised.\nThis capability MUST be\
            \ advertised in conjunction with the Graceful Restart \ncapability."
          type: boolean
          default: false
          x-field-uid: 3
        stale_time:
          description: "Duration (in seconds) specifying how long stale information\
            \ (for the AFI/SAFI) \nmay be retained. This is a three byte field and\
            \ is applicable \nonly if 'enable_llgr' is set to 'true'."
          type: integer
          format: uint32
          maximum: 16777215
          default: 10
          x-field-uid: 4
    Bgp.V6Peer:
      description: |-
        Configuration for BGPv6 peer settings and routes.
      type: object
      required:
      - peer_address
      - as_type
      - as_number
      - name
      properties:
        peer_address:
          description: |-
            IPv6 address of the BGP peer for the session
          type: string
          format: ipv6
          x-field-uid: 1
        segment_routing:
          $ref: '#/components/schemas/Bgp.V6SegmentRouting'
          x-field-uid: 2
        evpn_ethernet_segments:
          description: "This contains the list of Ethernet Virtual Private Network\
            \ (EVPN) Ethernet Segments (ES) Per BGP Peer for IPv6 Address Family Identifier\
            \ (AFI).\n\nEach Ethernet Segment contains a list of EVPN Instances (EVIs)\
            \ . \nEach EVI contains a list of Broadcast Domains. \nEach Broadcast\
            \ Domain contains a list of MAC/IP Ranges. \n\n<Ethernet Segment, EVI,\
            \ Broadcast Domain> is responsible for advertising Ethernet Auto-discovery\
            \ Route Per EVI (Type 1).\n\n<Ethernet Segment, EVI> is responsible for\
            \ advertising Ethernet Auto-discovery Route Per Ethernet Segment (Type\
            \ 1).\n\n<Ethernet Segment, EVI, Broadcast Domain, MAC/IP> is responsible\
            \ for advertising MAC/IP Advertisement Route (Type 2).\n\n<Ethernet Segment,\
            \ EVI, Broadcast Domain> is responsible for advertising Inclusive Multicast\
            \ Ethernet Tag Route (Type 3).\n\nEthernet Segment is responsible for\
            \ advertising Ethernet Segment Route (Type 4)."
          type: array
          items:
            $ref: '#/components/schemas/BgpV6.EthernetSegment'
          x-field-uid: 3
        as_type:
          x-field-uid: 4
          description: |-
            The type of BGP autonomous system. External BGP is used for BGP links between two or more autonomous systems (ebgp). Internal BGP is used within a single autonomous system (ibgp). BGP property defaults are aligned with this object defined as an internal BGP peer. If the as_type is specified as 'ebgp' then other properties will need to be specified as per an external BGP peer. Specifically, for 'ebgp',  'as_set_mode' attribute in 'as_path' field  in any Route Range should be changed from default value 'do_not_include_local_as' to any other value.
          type: string
          x-enum:
            ibgp:
              x-field-uid: 1
            ebgp:
              x-field-uid: 2
          enum:
          - ibgp
          - ebgp
        as_number:
          x-field-uid: 5
          description: |-
            Autonomous System Number (AS number or ASN)
          type: integer
          format: uint32
        as_number_width:
          x-field-uid: 6
          description: |-
            The width in bytes of the as_number values. Any as_number values that exceeds the width MUST result in an error.
          type: string
          default: four
          x-enum:
            two:
              x-field-uid: 1
            four:
              x-field-uid: 2
          enum:
          - two
          - four
        advanced:
          x-field-uid: 7
          $ref: '#/components/schemas/Bgp.Advanced'
        capability:
          x-field-uid: 8
          $ref: '#/components/schemas/Bgp.Capability'
        learned_information_filter:
          x-field-uid: 9
          $ref: '#/components/schemas/Bgp.LearnedInformationFilter'
        v4_routes:
          x-field-uid: 10
          description: |-
            Emulated BGPv4 route ranges.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V4RouteRange'
        v6_routes:
          x-field-uid: 11
          description: |-
            Emulated BGPv6 route ranges.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V6RouteRange'
        v4_srte_policies:
          x-field-uid: 12
          description: |-
            Segment Routing Traffic Engineering (SR TE) Policies for IPv4 Address Family Identifier (AFI).
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V4Policy'
        v6_srte_policies:
          x-field-uid: 13
          description: |-
            Segment Routing Traffic Engineering (SR TE) Policies for IPv6 Address Family Identifier (AFI).
          type: array
          items:
            $ref: '#/components/schemas/BgpSrte.V6Policy'
        name:
          x-field-uid: 14
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        graceful_restart:
          x-field-uid: 15
          $ref: '#/components/schemas/Bgp.GracefulRestart'
    Bgp.V6Interface:
      description: |-
        Configuration for emulated BGPv6 peers and routes on a single IPv6 interface.
      type: object
      required:
      - ipv6_name
      properties:
        ipv6_name:
          description: |
            The unique name of IPv6 or Loopback IPv6 interface used as the source IP for this list of BGP peers.

            x-constraint:
            - /components/schemas/Device.Ipv6/properties/name
            - /components/schemas/Device.Ipv6Loopback/properties/name


            x-constraint:
            - /components/schemas/Device.Ipv6/properties/name
            - /components/schemas/Device.Ipv6Loopback/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv6/properties/name
          - /components/schemas/Device.Ipv6Loopback/properties/name
          x-field-uid: 1
        peers:
          description: |-
            This contains the list of BGPv6 peers configured on this interface.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.V6Peer'
          x-field-uid: 2
    Bgp.V6SegmentRouting:
      description: |-
        Configuration for BGPv6 segment routing settings.
      type: object
      properties:
        ingress_supports_vpn:
          description: |-
            TBD
          type: boolean
          default: false
          x-field-uid: 1
        reduced_encapsulation:
          description: |-
            TBD
          type: boolean
          default: false
          x-field-uid: 2
        copy_time_to_live:
          description: |-
            TBD
          type: boolean
          default: false
          x-field-uid: 3
        time_to_live:
          description: |-
            TBD
          type: integer
          format: uint32
          default: 0
          x-field-uid: 4
        max_sids_per_srh:
          description: |-
            TBD
          type: integer
          format: uint32
          default: 0
          maximum: 255
          x-field-uid: 5
        auto_generate_segment_left_value:
          description: |-
            TBD
          type: boolean
          default: false
          x-field-uid: 6
        segment_left_value:
          description: |-
            TBD
          type: integer
          format: uint32
          default: 0
          x-field-uid: 7
        advertise_sr_te_policy:
          description: |-
            TBD
          type: boolean
          default: false
          x-field-uid: 8
    BgpV6.EthernetSegment:
      description: |-
        Configuration for BGP Ethernet Segment ranges. Advertises following routes -

        Type 4 - Ethernet Segment Route
      type: object
      properties:
        df_election:
          description: |-
            Designated Forwarder (DF) election configuration.
          $ref: '#/components/schemas/Bgp.EthernetSegment.DfElection'
          x-field-uid: 1
        evis:
          description: |-
            This contains the list of EVIs.
          type: array
          items:
            $ref: '#/components/schemas/BgpV6.EvpnEvis'
          x-field-uid: 2
        esi:
          x-field-uid: 3
          description: |-
            10-octet Ethernet Segment Identifier (ESI) Example - For multi-home scenario nonZero ESI is '10000000000000000000' .
          type: string
          format: hex
          default: '00000000000000000000'
        active_mode:
          x-field-uid: 4
          description: |-
            Single Active or All Active mode Redundancy mode selection for Multi-home.
          type: string
          default: all_active
          x-enum:
            single_active:
              x-field-uid: 1
            all_active:
              x-field-uid: 2
          enum:
          - single_active
          - all_active
        esi_label:
          x-field-uid: 5
          description: "The label value to be advertised as ESI Label in ESI Label\
            \ Extended Community. This is included in Ethernet Auto-discovery per\
            \ ES Routes advertised by a router. "
          type: integer
          format: uint32
          maximum: 16777215
          default: 0
        advanced:
          x-field-uid: 6
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          x-field-uid: 7
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        ext_communities:
          x-field-uid: 8
          description: |-
            Optional Extended Community settings. The Extended Communities Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes are utilized to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an 8-Bytes value. It is divided into two main parts. The first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes carry a unique set of data in a format defined by the type and sub-type field. Extended communities provide a larger  range for grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet, the valid sub types are route target and origin. The valid value for  administrator_as_2octet and administrator_as_4octet type is either two byte AS followed by four byte local administrator id or four byte AS followed by two  byte local administrator id.  When type is administrator_ipv4_address the valid sub types are route target and origin. The valid value for  administrator_ipv4_address is a four byte IPv4 address followed by a two byte local administrator id.  When type is opaque, valid sub types are color and encapsulation. When sub type is color, first two bytes of the value field contain flags and last four bytes  contains the value of the color. When sub type is encapsulation the first four bytes of value field are reserved and last two bytes carries the tunnel type from  IANA's "ETHER TYPES" registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth the valid sub type is extended_bandwidth. The first two bytes of the value field contains the AS number and the last four bytes contains the bandwidth in IEEE floating point format.  When type is evpn the valid subtype is mac_address. In the value field the low-order bit of the first byte(Flags) is defined as the "Sticky/static" flag and may be set to 1, indicating the MAC address is static and cannot move. The second byte is reserved and the  last four bytes contain the sequence number which is used to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates  occur for the same MAC address.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
        as_path:
          x-field-uid: 9
          description: |-
            Optional AS PATH settings.
          $ref: '#/components/schemas/Bgp.AsPath'
    BgpV6.EvpnEvis:
      description: "This contains a list of different flavors of EVPN. \nFor example\
        \ EVPN over VXLAN or EVPN over MPLS etc to be configured per Ethernet segment.\
        \ \nNeed to instantiate correct type of EVPN instance as per requirement."
      type: object
      properties:
        choice:
          type: string
          default: evi_vxlan
          x-field-uid: 1
          x-enum:
            evi_vxlan:
              x-field-uid: 1
          enum:
          - evi_vxlan
        evi_vxlan:
          description: "EVPN VXLAN instance to be configured per Ethernet Segment.\
            \                    "
          $ref: '#/components/schemas/BgpV6.EviVxlan'
          x-field-uid: 2
    BgpV6.EviVxlan:
      description: |-
        Configuration for BGP EVPN EVI. Advertises following routes -

        Type 3 - Inclusive Multicast Ethernet Tag Route

        Type 1 -  Ethernet Auto-discovery Route (Per EVI)

        Type 1 -  Ethernet Auto-discovery Route (Per ES)
      type: object
      properties:
        broadcast_domains:
          description: |-
            This contains the list of Broadcast Domains to be configured per EVI.
          type: array
          items:
            $ref: '#/components/schemas/BgpV6.EviVxlan.BroadcastDomain'
          x-field-uid: 1
        replication_type:
          x-field-uid: 2
          description: |-
            This model only supports Ingress Replication
          type: string
          default: ingress_replication
          x-enum:
            ingress_replication:
              x-field-uid: 1
          enum:
          - ingress_replication
        pmsi_label:
          x-field-uid: 3
          description: |-
            Downstream assigned VNI to be carried as Part of P-Multicast Service Interface Tunnel attribute (PMSI Tunnel Attribute) in Type 3 Inclusive Multicast Ethernet Tag Route.
          type: integer
          format: uint32
          maximum: 16777215
          default: 16
        ad_label:
          x-field-uid: 4
          description: |-
            The Auto-discovery Route label (AD label) value, which gets advertised in the Ethernet Auto-discovery Route per <EVI, ESI>
          type: integer
          format: uint32
          maximum: 16777215
          default: 0
        route_distinguisher:
          x-field-uid: 5
          description: |-
            Colon separated Extended Community value of 6 Bytes - "AS number: Value" identifying an EVI.            Example - for the as_2octet "60005:100".
          $ref: '#/components/schemas/Bgp.RouteDistinguisher'
        route_target_export:
          x-field-uid: 6
          description: "List of Layer 2 Virtual Network Identifier (L2VNI) export\
            \ targets associated with this EVI. "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        route_target_import:
          x-field-uid: 7
          description: "List of L2VNI import targets associated with this EVI. "
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        l3_route_target_export:
          x-field-uid: 8
          description: |-
            List of Layer 3 Virtual Network Identifier (L3VNI) Export Route Targets.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        l3_route_target_import:
          x-field-uid: 9
          description: |-
            List of L3VNI Import Route Targets.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.RouteTarget'
        advanced:
          x-field-uid: 10
          $ref: '#/components/schemas/Bgp.RouteAdvanced'
        communities:
          x-field-uid: 11
          description: |-
            Optional community settings.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.Community'
        ext_communities:
          x-field-uid: 12
          description: |-
            Optional Extended Community settings. The Extended Communities Attribute is a transitive optional BGP attribute, with the Type Code 16. Community and Extended Communities  attributes are utilized to trigger routing decisions, such as acceptance, rejection,  preference, or redistribution. An extended community is an 8-Bytes value. It is divided into two main parts. The first 2 Bytes of the community encode a type and sub-type fields and the last 6 Bytes carry a unique set of data in a format defined by the type and sub-type field. Extended communities provide a larger  range for grouping or categorizing communities. When type is administrator_as_2octet or administrator_as_4octet, the valid sub types are route target and origin. The valid value for  administrator_as_2octet and administrator_as_4octet type is either two byte AS followed by four byte local administrator id or four byte AS followed by two  byte local administrator id.  When type is administrator_ipv4_address the valid sub types are route target and origin. The valid value for  administrator_ipv4_address is a four byte IPv4 address followed by a two byte local administrator id.  When type is opaque, valid sub types are color and encapsulation. When sub type is color, first two bytes of the value field contain flags and last four bytes  contains the value of the color. When sub type is encapsulation the first four bytes of value field are reserved and last two bytes carries the tunnel type from  IANA's "ETHER TYPES" registry e.g IPv4 (protocol type = 0x0800), IPv6 (protocol type = 0x86dd), and MPLS (protocol type = 0x8847). When type is administrator_as_2octet_link_bandwidth the valid sub type is extended_bandwidth. The first two bytes of the value field contains the AS number and the last four bytes contains the bandwidth in IEEE floating point format.  When type is evpn the valid subtype is mac_address. In the value field the low-order bit of the first byte(Flags) is defined as the "Sticky/static" flag and may be set to 1, indicating the MAC address is static and cannot move. The second byte is reserved and the  last four bytes contain the sequence number which is used to ensure that PEs retain the correct MAC/IP Advertisement route when multiple updates  occur for the same MAC address.
          type: array
          items:
            $ref: '#/components/schemas/Bgp.ExtCommunity'
        as_path:
          x-field-uid: 13
          description: |-
            Optional AS PATH settings.
          $ref: '#/components/schemas/Bgp.AsPath'
    BgpV6.EviVxlan.BroadcastDomain:
      description: |-
        Configuration for Broadcast Domains per EVI.
      type: object
      properties:
        cmac_ip_range:
          description: "This contains the list of Customer MAC/IP Ranges to be configured\
            \ per Broadcast Domain. \n\nAdvertises following route - \nType 2 - MAC/IP\
            \ Advertisement Route."
          type: array
          items:
            $ref: '#/components/schemas/Bgp.CMacIpRange'
          x-field-uid: 1
        ethernet_tag_id:
          x-field-uid: 2
          description: |-
            The Ethernet Tag ID of the Broadcast Domain.
          type: integer
          format: uint32
          default: 0
        vlan_aware_service:
          x-field-uid: 3
          description: |-
            VLAN-Aware service to be enabled or disabled.
          type: boolean
          default: false
    Device.Vxlan:
      properties:
        v4_tunnels:
          description: |-
            IPv4 VXLAN Tunnels
          type: array
          items:
            $ref: '#/components/schemas/Vxlan.V4Tunnel'
          x-field-uid: 1
        v6_tunnels:
          description: |-
            IPv6 VXLAN Tunnels
          type: array
          items:
            $ref: '#/components/schemas/Vxlan.V6Tunnel'
          x-field-uid: 2
    Vxlan.V4Tunnel:
      description: |-
        Configuration and operational state parameters relating to IPv4 VXLAN tunnel end-point interface.
      type: object
      required:
      - source_interface
      - vni
      - name
      properties:
        source_interface:
          description: |
            Determines the source interface.

            x-constraint:
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv4Loopback/properties/name


            x-constraint:
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv4Loopback/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv4/properties/name
          - /components/schemas/Device.Ipv4Loopback/properties/name
          x-field-uid: 1
        destination_ip_mode:
          $ref: '#/components/schemas/Vxlan.V4Tunnel.DestinationIPMode'
          x-field-uid: 2
        vni:
          x-field-uid: 3
          description: |-
            VXLAN Network Identifier (VNI) to distinguish network instances on the wire
          type: integer
          format: uint32
          minimum: 1
          maximum: 16777215
        name:
          x-field-uid: 4
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Vxlan.V6Tunnel:
      description: |-
        Configuration and operational state parameters relating to IPv6 VXLAN tunnel end-point interface.
      type: object
      required:
      - source_interface
      - vni
      - name
      properties:
        source_interface:
          description: |
            Determines the source interface.

            x-constraint:
            - /components/schemas/Device.Ipv6/properties/name
            - /components/schemas/Device.Ipv6Loopback/properties/name


            x-constraint:
            - /components/schemas/Device.Ipv6/properties/name
            - /components/schemas/Device.Ipv6Loopback/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv6/properties/name
          - /components/schemas/Device.Ipv6Loopback/properties/name
          x-field-uid: 1
        destination_ip_mode:
          $ref: '#/components/schemas/Vxlan.V6Tunnel.DestinationIPMode'
          x-field-uid: 2
        vni:
          x-field-uid: 3
          description: |-
            VXLAN Network Identifier (VNI) to distinguish network instances on the wire
          type: integer
          format: uint32
          minimum: 1
          maximum: 16777215
        name:
          x-field-uid: 4
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Vxlan.V4Tunnel.DestinationIPMode:
      description: |-
        Communication mode between the VTEPs, either unicast or multicast.
      type: object
      properties:
        choice:
          description: |-
            unicast or multicast
          type: string
          default: multicast
          x-field-uid: 1
          x-enum:
            unicast:
              x-field-uid: 1
            multicast:
              x-field-uid: 2
          enum:
          - unicast
          - multicast
        unicast:
          $ref: '#/components/schemas/Vxlan.V4Tunnel.DestinationIPMode.Unicast'
          x-field-uid: 2
        multicast:
          $ref: '#/components/schemas/Vxlan.V4Tunnel.DestinationIPMode.Multicast'
          x-field-uid: 3
    Vxlan.V6Tunnel.DestinationIPMode:
      description: |-
        Communication mode between the VTEPs, either unicast or multicast.
      type: object
      properties:
        choice:
          description: |-
            unicast or multicast
          type: string
          default: multicast
          x-field-uid: 1
          x-enum:
            unicast:
              x-field-uid: 1
            multicast:
              x-field-uid: 2
          enum:
          - unicast
          - multicast
        unicast:
          $ref: '#/components/schemas/Vxlan.V6Tunnel.DestinationIPMode.Unicast'
          x-field-uid: 2
        multicast:
          $ref: '#/components/schemas/Vxlan.V6Tunnel.DestinationIPMode.Multicast'
          x-field-uid: 3
    Vxlan.V4Tunnel.DestinationIPMode.Unicast:
      properties:
        vteps:
          description: |-
            List of VTEPs for member VNI(VXLAN Network Identifier)
          type: array
          items:
            $ref: '#/components/schemas/Vxlan.V4Tunnel.DestinationIPMode.Unicast.Vtep'
          x-field-uid: 1
    Vxlan.V6Tunnel.DestinationIPMode.Unicast:
      properties:
        vteps:
          description: |-
            List of VTEPs for member VNI(VXLAN Network Identifier)
          type: array
          items:
            $ref: '#/components/schemas/Vxlan.V6Tunnel.DestinationIPMode.Unicast.Vtep'
          x-field-uid: 1
    Vxlan.Tunnel.DestinationIPMode.Unicast.ArpSuppressionCache:
      description: |-
        Each VTEP maintains an ARP suppression cache table for known IP hosts and their associated MAC addresses in the VNI segment.  When an end host in the VNI sends an ARP request for another end-host IP address,  its local VTEP intercepts the ARP request and checks for the ARP-resolved IP address in its ARP suppression cache table.  If it finds a match, the local VTEP sends an ARP response on behalf of the remote end host.
      type: object
      properties:
        remote_vm_mac:
          description: |-
            Remote VM MAC address bound to Remote VM IPv4 address
          type: string
          format: mac
          x-field-uid: 1
        remote_vm_ipv4:
          description: |-
            Remote VM IPv4 address
          type: string
          format: ipv4
          x-field-uid: 2
    Vxlan.V4Tunnel.DestinationIPMode.Unicast.Vtep:
      description: |-
        VTEP (VXLAN Tunnel End Point (VTEP)) parameters
      type: object
      properties:
        remote_vtep_address:
          description: |-
            Remote VXLAN Tunnel End Point address
          type: string
          format: ipv4
          x-field-uid: 1
        arp_suppression_cache:
          x-field-uid: 2
          description: |-
            Each VTEP maintains an ARP suppression cache table for known IP hosts and their associated MAC addresses in the VNI segment.  When an end host in the VNI sends an ARP request for another end-host IP address,  its local VTEP intercepts the ARP request and checks for the ARP-resolved IP address in its ARP suppression cache table.  If it finds a match, the local VTEP sends an ARP response on behalf of the remote end host.
          type: array
          items:
            $ref: '#/components/schemas/Vxlan.Tunnel.DestinationIPMode.Unicast.ArpSuppressionCache'
    Vxlan.V6Tunnel.DestinationIPMode.Unicast.Vtep:
      description: |-
        VTEP (VXLAN Tunnel End Point (VTEP)) parameters
      type: object
      properties:
        remote_vtep_address:
          description: |-
            Remote VXLAN Tunnel End Point address
          type: string
          format: ipv6
          x-field-uid: 1
        arp_suppression_cache:
          x-field-uid: 2
          description: |-
            Each VTEP maintains an ARP suppression cache table for known IP hosts and their associated MAC addresses in the VNI segment.  When an end host in the VNI sends an ARP request for another end-host IP address,  its local VTEP intercepts the ARP request and checks for the ARP-resolved IP address in its ARP suppression cache table.  If it finds a match, the local VTEP sends an ARP response on behalf of the remote end host.
          type: array
          items:
            $ref: '#/components/schemas/Vxlan.Tunnel.DestinationIPMode.Unicast.ArpSuppressionCache'
    Vxlan.V4Tunnel.DestinationIPMode.Multicast:
      description: |-
        Multicast Group address for member VNI(VXLAN Network Identifier)
      type: object
      properties:
        address:
          description: |-
            IPv4 Multicast address
          type: string
          format: ipv4
          x-field-uid: 1
    Vxlan.V6Tunnel.DestinationIPMode.Multicast:
      description: |-
        Multicast Group address for member VNI(VXLAN Network Identifier)
      type: object
      properties:
        address:
          description: |-
            IPv6 Multicast address
          type: string
          format: ipv6
          x-field-uid: 1
    Device.Rsvp:
      description: |-
        Configuration for one or more RSVP interfaces, ingress and egress LSPs. In this model, currently IPv4 RSVP and point-to-point LSPs are supported as per RFC3209 and related specifications.
      type: object
      properties:
        ipv4_interfaces:
          description: |-
            List of IPv4 RSVP connected interfaces. At least one interface should be present for device connected to the DUT. For unconnected devices, this array must be empty.
          type: array
          items:
            $ref: '#/components/schemas/Rsvp.Ipv4Interface'
          x-field-uid: 1
        lsp_ipv4_interfaces:
          description: |-
            List of IPv4 Loopback or IPv4 connected interfaces acting as RSVP ingress and egress endpoints.
          type: array
          items:
            $ref: '#/components/schemas/Rsvp.LspIpv4Interface'
          x-field-uid: 2
        name:
          x-field-uid: 3
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Rsvp.Ipv4Interface:
      description: |-
        Configuration for RSVP Interface.
      type: object
      required:
      - ipv4_name
      - neighbor_ip
      properties:
        ipv4_name:
          description: "The globally unique name of the IPv4 interface connected to\
            \ the DUT. This name must match the \"name\" field of the \"ipv4_addresses\"\
            \ on top which this RSVP interface is configured.          \n\nx-constraint:\n\
            - /components/schemas/Device.Ipv4/properties/name\n\n\nx-constraint:\n\
            - /components/schemas/Device.Ipv4/properties/name\n"
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv4/properties/name
          x-field-uid: 1
        neighbor_ip:
          description: |-
            IPv4 address of the RSVP neighbor on this interface.
          type: string
          format: ipv4
          x-field-uid: 2
        label_space_start:
          description: "The user-defined label space start value. The LSPs for which\
            \ this router acts as a egress are assigned labels from this label pool.The\"\
            label_space_start\" and \"label_space_end\" together defines this label-pool. "
          type: integer
          format: uint32
          default: 1000
          maximum: 1048575
          x-field-uid: 3
        label_space_end:
          description: |-
            The user-defined label space end value.The last label value that can be assigned to the LSPs for which this router acts as egress.
          type: integer
          format: uint32
          default: 100000
          maximum: 1048575
          x-field-uid: 4
        enable_refresh_reduction:
          description: |-
            Enables sending of Refresh Reduction as described in RFC2961.
          type: boolean
          default: false
          x-field-uid: 5
        summary_refresh_interval:
          description: |-
            The number of seconds between transmissions of successive Summary Refreshes. There is no specification specified maximum value. For clarity, setting the maximum to 1 hour.
          type: integer
          format: uint32
          default: 30
          maximum: 3600
          x-field-uid: 6
        send_bundle:
          description: |-
            Enables aggregration of different RSVP messages within a single PDU.
          type: boolean
          default: false
          x-field-uid: 7
        bundle_threshold:
          description: |-
            The number of milliseconds to wait after which RSVP will bundle different RSVP messages and transmit Bundle messages.
          type: integer
          format: uint32
          default: 50
          maximum: 1000
          x-field-uid: 8
        enable_hello:
          description: "Enables sending of Hello Messages as per RFC3209.        \
            \    "
          type: boolean
          default: false
          x-field-uid: 9
        hello_interval:
          description: |-
            If enable_hello is set to 'true', this specifies the minimum hello interval in seconds at which successive Hello Messages  are sent as per RFC3209. There is no specification specified maximum value. For clarity, setting the maximum to 1 hour.
          type: integer
          format: uint32
          default: 9
          maximum: 3600
          x-field-uid: 10
        timeout_multiplier:
          description: |-
            The number of missed hellos after which the node should consider RSVP Neighbor to have timed out. There is no specification specified maximum value. Setting the maximum allowed value to 10.
          type: integer
          format: uint32
          default: 3
          maximum: 10
          x-field-uid: 11
    Rsvp.LspIpv4Interface:
      description: |-
        Configuration for RSVP LSP IPv4 Interface.
      type: object
      required:
      - ipv4_name
      properties:
        ipv4_name:
          description: |
            The globally unique name of the IPv4 or Loopback IPv4 interface acting as the RSVP ingress and egress endpoint for  the LSPs configured on this interface. This must match the "name" field of either "ipv4_addresses" or "ipv4_loopbacks"  on which this LSP interface is configured.

            x-constraint:
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv4Loopback/properties/name


            x-constraint:
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv4Loopback/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv4/properties/name
          - /components/schemas/Device.Ipv4Loopback/properties/name
          x-field-uid: 1
        p2p_egress_ipv4_lsps:
          description: "Contains properties of Tail(Egress) LSPs. "
          $ref: '#/components/schemas/Rsvp.LspIpv4Interface.P2PEgressIpv4Lsp'
          x-field-uid: 2
        p2p_ingress_ipv4_lsps:
          description: |-
            Array of point-to-point RSVP-TE P2P LSPs originating from this interface.
          type: array
          items:
            $ref: '#/components/schemas/Rsvp.LspIpv4Interface.P2PIngressIpv4Lsp'
          x-field-uid: 3
    Rsvp.LspIpv4Interface.P2PEgressIpv4Lsp:
      description: |-
        Configuration for RSVP Egress Point-to-Point(P2P) IPv4 LSPs.
      type: object
      required:
      - name
      properties:
        name:
          x-field-uid: 1
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        refresh_interval:
          description: "The time in seconds between successive transmissions of RESV\
            \ Refreshes. The actual refresh interval is jittered by upto 50%. There\
            \ is no specification specified maximum value. For clarity, setting the\
            \ maximum to 1 hour. "
          type: integer
          format: uint32
          default: 30
          maximum: 3600
          x-field-uid: 2
        timeout_multiplier:
          description: |-
            The number of missed PATH refreshes after which a recieving node should consider the LSP state to have timed out. There is no specification specified maximum value. Setting the maximum allowed value to 10.
          type: integer
          format: uint32
          default: 3
          maximum: 10
          x-field-uid: 3
        reservation_style:
          description: |-
            It determines how RSVP-TE enabled network devices set up reservations along the path between an end-to-end  QOS-enabled connection. If 'auto' is enabled, the style is chosen based on whether the incoming Path has 'SE Desired' flag set. Otherwise, the style is chosen based on the value selected for this attribute.
          type: string
          x-enum:
            shared_explicit:
              x-field-uid: 1
            fixed_filter:
              x-field-uid: 2
            auto:
              x-field-uid: 3
          default: shared_explicit
          x-field-uid: 4
          enum:
          - shared_explicit
          - fixed_filter
          - auto
        enable_fixed_label:
          description: "If enabled, a specific fixed label will be advertised by the\
            \ egress or tail end for all Path messages received by this egress.  This\
            \ can be leveraged to advertise Explicit or Implicit null labels.    \
            \        "
          type: boolean
          default: false
          x-field-uid: 5
        fixed_label_value:
          description: |-
            The fixed label value as advertised by egress in RESV message. Applicable only if 'fixed_label' is set to 'true'. Special values are '0 - IPv4 Explicit NULL', '2 - IPv6 Explicit NULL' and '3 - Implicit NULL'.   Outside of this, labels are expected to have a minimum value of 16.
          type: integer
          format: uint32
          default: 0
          maximum: 1048575
          x-field-uid: 6
    Rsvp.LspIpv4Interface.P2PIngressIpv4Lsp:
      description: |-
        Configuration for an RSVP Ingress point-to-point LSP.
      type: object
      required:
      - remote_address
      - name
      properties:
        name:
          x-field-uid: 1
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
        remote_address:
          description: |-
            IPv4 address of the remote endpoint of the LSP.
          type: string
          format: ipv4
          x-field-uid: 2
        tunnel_id:
          description: |-
            The Tunnel ID of the RSVP LSP. Carried in the SESSION object in Path Messages.
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 65535
          x-field-uid: 3
        lsp_id:
          description: |-
            The LSP ID of the RSVP LSP. Carried in the SENDER_TEMPLATE object in Path Messages.
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 65535
          x-field-uid: 4
        refresh_interval:
          description: "The time in seconds between successive transmissions of PATH\
            \ Refreshes.  The actual refresh interval is jittered by upto 50%. There\
            \ is no specification specified maximum value. For clarity, setting the\
            \ maximum to 1 hour. "
          type: integer
          format: uint32
          default: 30
          minimum: 1
          maximum: 3600
          x-field-uid: 5
        timeout_multiplier:
          description: |-
            The number of missed RESV refreshes after which a recieving node should consider the LSP state to have timed out. There is no specification specified maximum value. Setting the maximum allowed value to 10.
          type: integer
          format: uint32
          default: 3
          minimum: 1
          maximum: 10
          x-field-uid: 6
        backup_lsp_id:
          description: |-
            The LSP id that will be used when creating a Make-Before-Break LSP when the active LSP is using lsp_id. If the active LSP on which Make-Before-Break is being done is using the backup_lsp_id, the new LSP created will toggle to  use the lsp_id instead.
          type: integer
          format: uint32
          default: 2
          minimum: 1
          maximum: 65535
          x-field-uid: 7
        lsp_switchover_delay:
          description: |-
            The amount of delay in milliseconds that an implementation should wait for before switching traffic to the new LSP created after  a Make-Before-Break is done on an LSP. The default value is 0 which means to switch immediately. An implementation should support a minimum delay value of at least 50ms . There is no specification specified maximum value. Setting maximum allowed value to 1 minute.  If a delay value is supplied which is lesser than the minimum delay value supported, a warning should be provided indicating that the minimum value of LSP switchover delay is automatically increased to the supported minimum value. This warning should be included in the list of warnings in the 'Response.Warning' attribute sent in the SetConfig 'Success' Response.
          type: integer
          format: uint32
          default: 0
          minimum: 0
          maximum: 60000
          x-field-uid: 8
        session_attribute:
          description: "This contains the values of the fields to be included in the\
            \ SESSION_ATTRIBUTE object in the Path Message sent for the LSP.     \
            \       "
          $ref: '#/components/schemas/Rsvp.SessionAttribute'
          x-field-uid: 9
        tspec:
          description: "This contains the values of the fields to be included in the\
            \ TSPEC object in the Path Message sent for the LSP.            "
          $ref: '#/components/schemas/Rsvp.Tspec'
          x-field-uid: 10
        fast_reroute:
          description: "This contains the values of the fields to be included in the\
            \ FAST_REROUTE object in the Path Message sent for the LSP. \nThis is\
            \ an optional object . If this attribute is not included , the FAST_REROUTE\
            \ object will not be included.           "
          $ref: '#/components/schemas/Rsvp.FastReroute'
          x-field-uid: 11
        ero:
          description: "This contains the values of the fields to be included in the\
            \ ERO object in the Path Message sent for the LSP. \nThis is an optional\
            \ object . If this attribute is not included , the ERO object will not\
            \ be included.           "
          $ref: '#/components/schemas/Rsvp.Ero'
          x-field-uid: 12
    Rsvp.SessionAttribute:
      description: |-
        Configuration for RSVP-TE SESSION_ATTRIBUTE object included in Path Messages as defined in RFC3209. The bandwidth_protection_desired and node_protection_desired flags are defined in RFC4090 (Fast Reroute).
      type: object
      properties:
        auto_generate_session_name:
          description: |-
            If this is enabled, an auto-generated Session Name is included in the SESSION_ATTRIBUTE object in the Path Message for this LSP.
          type: boolean
          default: true
          x-field-uid: 1
        session_name:
          description: "If auto_generate_session_name is set to 'false', then the\
            \ value of this field is used to fill the Session Name field of the SESSION_ATTRIBUTE\
            \ object in the Path Message for this LSP. It is suggested to include\
            \ the Local IP, Remote IP, Tunnel ID and LSP ID in the auto-generated\
            \ Session Name to ensure uniqueness of the name in the test. The maximum\
            \ length of session name is 254 bytes.           "
          type: string
          minLength: 0
          maxLength: 254
          x-field-uid: 2
        setup_priority:
          description: |-
            Specifies the value of the Setup Priority field. This controls whether the LSP should pre-empt existing  LSP setup with certain Holding Priority if resource limitation is encountered when setting up the LSP. (e.g. bandwidth availability). The value 0 is the highest priority while 7 is the lowest.
          type: integer
          format: uint32
          default: 7
          maximum: 7
          x-field-uid: 3
        holding_priority:
          description: |-
            Specifies the value of the Holding Priority field. This controls whether a new LSP being created with certain Setup Priority should pre-empt this LSP if resource limitation is encountered when setting up the LSP. (e.g. bandwidth availability). The value 0 is the highest priority while 7 is the lowest.
          type: integer
          format: uint32
          default: 7
          maximum: 7
          x-field-uid: 4
        local_protection_desired:
          description: |-
            This flag permits transit routers to use a local repair mechanism which may result in violation of the explicit route object.  When a fault is detected on an adjacent downstream link or node, a transit router can reroute traffic for fast service restoration.
          type: boolean
          default: false
          x-field-uid: 5
        label_recording_desired:
          description: |-
            This flag indicates that label information should be included when doing a route record.
          type: boolean
          default: false
          x-field-uid: 6
        se_style_desired:
          description: |-
            This flag indicates that the tunnel ingress node may choose to reroute this tunnel without tearing it down. A tunnel egress node SHOULD use the Shared Explicit(SE) Style when responding with a Resv message.
          type: boolean
          default: false
          x-field-uid: 7
        bandwidth_protection_desired:
          description: |-
            This flag in the SESSION_ATTRIBUTE object in the Path Message indicates to the PLRs along the protected LSP path that a  backup path with a bandwidth guarantee is desired.   This bandwidth has to be guaranteed for the protected LSP, if no FAST_REROUTE object is included in the PATH message. If a FAST_REROUTE object is present in the Path message, then the bandwidth specified therein is to be guaranteed.
          type: boolean
          default: false
          x-field-uid: 8
        node_protection_desired:
          description: |-
            This flag in the SESSION_ATTRIBUTE object in the Path Message indicates to the PLRs along a protected LSP path that it is desired to have a backup path that bypasses at least the next node of the protected LSP.
          type: boolean
          default: false
          x-field-uid: 9
        resource_affinities:
          description: "This is an optional object. If included the extended SESSION_ATTRIBUTE\
            \ object is sent in the Path message containing \nthe additional fields\
            \ included in this object. This contains a set of three bitmaps using\
            \ which further constraints can be\nset on the path calculated for the\
            \ LSP based on the Admin Group settings in the IGP (e.g ISIS or OSPF interface).\
            \        "
          $ref: '#/components/schemas/Rsvp.ResourceAffinities'
          x-field-uid: 10
    Rsvp.ResourceAffinities:
      description: "This is an optional object. If included, the extended SESSION_ATTRIBUTE\
        \ object is sent in the Path message containing \nthe additional fields included\
        \ in this object. This contains a set of three bitmaps using which further\
        \ constraints can be\nset on the path calculated for the LSP based on the\
        \ Admin Group settings in the IGP (e.g ISIS or OSPF interface)."
      type: object
      properties:
        exclude_any:
          description: "A 32-bit vector representing a set of attribute filters associated\
            \ with a tunnel any of which renders a link unacceptable.  A null set\
            \ (all bits set to zero) doesn't render the link unacceptable.  The most\
            \ significant byte in the hex-string is the farthest  to the left in the\
            \ byte sequence.  Leading zero bytes in the configured value may be omitted\
            \ for brevity.          "
          type: string
          format: hex
          default: '0'
          minLength: 0
          maxLength: 8
          x-field-uid: 1
        include_any:
          description: "A 32-bit vector representing a set of attribute filters associated\
            \ with a tunnel any of which renders a link acceptable. A null set (all\
            \ bits set to zero) automatically passes. The most significant byte in\
            \ the hex-string is the farthest  to the left in the byte sequence.  Leading\
            \ zero bytes in the configured value may be omitted for brevity.     \
            \    "
          type: string
          format: hex
          default: '0'
          minLength: 0
          maxLength: 8
          x-field-uid: 2
        include_all:
          description: "A 32-bit vector representing a set of attribute filters associated\
            \ with a tunnel all of which must be present for a link to be acceptable.\
            \ A null set (all bits set to zero) automatically passes. The most significant\
            \ byte in the hex-string is the farthest  to the left in the byte sequence.\
            \  Leading zero bytes in the configured value may be omitted for brevity.\
            \         "
          type: string
          format: hex
          default: '0'
          minLength: 0
          maxLength: 8
          x-field-uid: 3
    Rsvp.Tspec:
      description: |-
        Configuration for RSVP-TE TSPEC object included in Path Messages. The usage of these parameters is defined in RFC2215.
      type: object
      properties:
        token_bucket_rate:
          description: |-
            The rate of the traffic to be carried in this LSP in bytes per second. This is part of the Token Bucket specification defined for a traffic flow defined in RFC2215.
          type: number
          format: float
          default: 0
          x-field-uid: 1
        token_bucket_size:
          description: |-
            The depth of the token bucket in bytes used to specify the Token Bucket characteristics of the traffic to be carried in the LSP. This is part of the Token Bucket specification defined for a traffic flow defined in RFC2215.
          type: number
          format: float
          default: 0
          x-field-uid: 2
        peak_data_rate:
          description: |-
            The peak data rate of the traffic in bytes per second used to specify the Token Bucket characteristics of the traffic  to be carried in the LSP. This is part of the Token Bucket specification defined for a traffic flow defined in RFC2215.
          type: number
          format: float
          default: 0
          x-field-uid: 3
        minimum_policed_unit:
          description: "Specifies the minium length of packet frames that will be\
            \ policed. "
          type: integer
          format: uint32
          default: 0
          maximum: 65535
          x-field-uid: 4
        maximum_policed_unit:
          description: "Specifies the maximum length of packet frames that will be\
            \ policed. "
          type: integer
          format: uint32
          default: 0
          maximum: 65535
          x-field-uid: 5
    Rsvp.FastReroute:
      description: "Configuration for the optional RSVP-TE FAST_REROUTE object included\
        \ in Path Messages as defined in RFC4090. "
      type: object
      properties:
        setup_priority:
          description: |-
            Specifies the value of the Setup Priority field. This controls whether the backup LSP should pre-empt existing LSP that is setup with certain Holding Priority. While setting up a backup LSP, preemption of existing LSP can happen  if resource limitation is encountered (e.g bandwidth availability).
          type: integer
          format: uint32
          default: 7
          maximum: 7
          x-field-uid: 1
        holding_priority:
          description: "Specifies the value of the Holding Priority field. This controls\
            \ whether a new LSP being created with certain Setup Priority should pre-empt\
            \ this LSP set up with this Holding Priority. While setting up a new LSP,\
            \ preemption of existing LSP can happen  if resource limitation is encountered\
            \ (e.g bandwidth availability).            "
          type: integer
          format: uint32
          default: 7
          maximum: 7
          x-field-uid: 2
        hop_limit:
          description: |-
            Specifies the value of the Hop Limit field. This controls the maximum number of hops the LSP should traverse to reach the  LSP end-point.
          type: integer
          format: uint32
          default: 3
          maximum: 255
          x-field-uid: 3
        bandwidth:
          description: "Specifies the value of the Bandwidth field as a 32-bit IEEE\
            \ floating point integer, in bytes per second, as desired for the LSP. "
          type: number
          format: float
          default: 0
          x-field-uid: 4
        exclude_any:
          description: "A 32-bit vector representing a set of attribute filters associated\
            \ with a tunnel any of which renders a link unacceptable. A null set (all\
            \ bits set to zero) doesn't render the link unacceptable. The most significant\
            \ byte in the hex-string is the farthest  to the left in the byte sequence.\
            \  Leading zero bytes in the configured value may be omitted for brevity.\
            \           "
          type: string
          format: hex
          default: '0'
          minLength: 0
          maxLength: 8
          x-field-uid: 5
        include_any:
          description: "A 32-bit vector representing a set of attribute filters associated\
            \ with a tunnel any of which renders a link acceptable. A null set (all\
            \ bits set to zero) automatically passes. The most significant byte in\
            \ the hex-string is the farthest  to the left in the byte sequence.  Leading\
            \ zero bytes in the configured value may be omitted for brevity.     "
          type: string
          format: hex
          default: '0'
          minLength: 0
          maxLength: 8
          x-field-uid: 6
        include_all:
          description: "A 32-bit vector representing a set of attribute filters associated\
            \ with a tunnel all of which must be present for a link to be acceptable.\
            \ A null set (all bits set to zero) automatically passes. The most significant\
            \ byte in the hex-string is the farthest  to the left in the byte sequence.\
            \  Leading zero bytes in the configured value may be omitted for brevity.\
            \          "
          type: string
          format: hex
          default: '0'
          minLength: 0
          maxLength: 8
          x-field-uid: 7
        one_to_one_backup_desired:
          description: "Requests protection via the one-to-one backup method.    \
            \       "
          type: boolean
          default: false
          x-field-uid: 8
        facility_backup_desired:
          description: "Requests protection via the facility backup method.      \
            \     "
          type: boolean
          default: false
          x-field-uid: 9
    Rsvp.Ero:
      description: "Configuration for the optional RSVP-TE explicit route object(ERO)\
        \ object included in Path Messages. "
      type: object
      properties:
        prepend_neighbor_ip:
          description: |-
            Determines whether the IP address of the RSVP neighbor should be added as an ERO sub-object. If it is to be included, it can be included as a Loose hop or as a Strict hop.
          type: string
          x-enum:
            dont_prepend:
              x-field-uid: 1
            prepend_loose:
              x-field-uid: 2
            prepend_strict:
              x-field-uid: 3
          default: prepend_loose
          x-field-uid: 1
          enum:
          - dont_prepend
          - prepend_loose
          - prepend_strict
        prefix_length:
          description: "If prepend_egress_ip is set to one of 'prepend_loose' or 'prepend_strict',\
            \ then set this value as the prefix length of the ERO sub-object containing\
            \ egress IP address.                        "
          type: integer
          format: uint32
          default: 32
          maximum: 32
          x-field-uid: 2
        subobjects:
          description: |-
            Array of sub-objects to be included in the ERO. These sub-objects contain the intermediate hops to be traversed by the LSP while being forwarded towards the egress endpoint. These sub-objects are included after the optional sub-object containing IP address of egress endpoint of the LSP (when present).
          type: array
          items:
            $ref: '#/components/schemas/Rsvp.Ero.Subobject'
          x-field-uid: 3
    Rsvp.Ero.Subobject:
      description: |-
        Configuration for the ERO sub-object.
      type: object
      properties:
        type:
          description: |-
            The type of the ERO sub-object, one of IPv4 Address or AS Number.
          type: string
          x-enum:
            ipv4:
              x-field-uid: 1
            as_number:
              x-field-uid: 2
          default: ipv4
          x-field-uid: 1
          enum:
          - ipv4
          - as_number
        ipv4_address:
          description: |-
            IPv4 address that this LSP should traverse through. This field is applicable only if the value of 'type' is set to 'ipv4'.
          type: string
          format: ipv4
          default: 0.0.0.0
          x-field-uid: 2
        prefix_length:
          description: |-
            Prefix length for the IPv4 address in the ERO sub-object. This field is applicable only if the value of 'type' is set to 'ipv4'.
          type: integer
          format: uint32
          default: 32
          maximum: 32
          x-field-uid: 3
        as_number:
          description: |-
            Autonomous System number to be set in the ERO sub-object that this LSP should traverse through. This field is applicable only if the value of 'type' is set to 'as_number'. Note that as per RFC3209, 4-byte AS encoding is not supported.
          type: integer
          format: uint32
          default: 0
          maximum: 65535
          x-field-uid: 4
        hop_type:
          description: |-
            The hop type of the ERO sub-object, one of Strict or Loose.
          type: string
          x-enum:
            strict:
              x-field-uid: 1
            loose:
              x-field-uid: 2
          default: loose
          x-field-uid: 5
          enum:
          - strict
          - loose
    Flow:
      description: |-
        A high level data plane traffic flow.
      type: object
      required:
      - tx_rx
      - name
      properties:
        tx_rx:
          description: |-
            The transmit and receive endpoints.
          $ref: '#/components/schemas/Flow.TxRx'
          x-field-uid: 1
        packet:
          description: "The list of protocol headers defining the shape of all \n\
            intended packets in corresponding flow as it is transmitted\nby traffic-generator\
            \ port.\n\nThe order of protocol headers assigned to the list is the\n\
            order they will appear on the wire.\n\nIn the case of an empty list the\
            \ keyword/value of minItems: 1 \nindicates that an implementation MUST\
            \ provide at least one \nFlow.Header object.\n\nThe default value for\
            \ the Flow.Header choice property is ethernet \nwhich will result in an\
            \ implementation by default providing at least \none ethernet packet header."
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Flow.Header'
          x-field-uid: 2
        egress_packet:
          description: "Under Review: The packet header schema for egress tracking\
            \ currently exposes unwanted fields. The query structure for tagged metrics\
            \ inside flows metrics requires documenting expected response format.\n\
            \nUnder Review: The packet header schema for egress tracking currently\
            \ exposes unwanted fields. The query structure for tagged metrics inside\
            \ flows metrics requires documenting expected response format.\n\nThe\
            \ list of protocol headers defining the shape of all \nintended packets\
            \ in corresponding flow as it is received\nby traffic-generator port.\n\
            \nFor all protocol headers, only the `metric_tags` property is configurable."
          type: array
          items:
            $ref: '#/components/schemas/Flow.Header'
          x-status:
            status: under-review
            information: The packet header schema for egress tracking currently exposes
              unwanted fields. The query structure for tagged metrics inside flows
              metrics requires documenting expected response format.
          x-field-uid: 9
        size:
          description: |-
            The size of the packets.
          $ref: '#/components/schemas/Flow.Size'
          x-field-uid: 3
        rate:
          description: |-
            The transmit rate of the packets.
          $ref: '#/components/schemas/Flow.Rate'
          x-field-uid: 4
        duration:
          description: |-
            The transmit duration of the packets.
          $ref: '#/components/schemas/Flow.Duration'
          x-field-uid: 5
        metrics:
          description: "Flow metrics. "
          $ref: '#/components/schemas/Flow.Metrics'
          x-field-uid: 6
        name:
          x-field-uid: 7
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Flow.TxRx:
      description: "A container for different types of transmit and receive \nendpoint\
        \ containers."
      type: object
      properties:
        choice:
          description: |-
            The type of transmit and receive container used by the flow.
          type: string
          default: port
          x-field-uid: 1
          x-enum:
            port:
              x-field-uid: 1
            device:
              x-field-uid: 2
          enum:
          - port
          - device
        port:
          $ref: '#/components/schemas/Flow.Port'
          x-field-uid: 2
        device:
          $ref: '#/components/schemas/Flow.Router'
          x-field-uid: 3
    Flow.Port:
      description: "A container for a transmit port and 0..n intended receive ports.\n\
        When assigning this container to a flow the flows's \npacket headers will\
        \ not be populated with any address resolution \ninformation such as source\
        \ and/or destination addresses. \nFor example Flow.Ethernet dst mac address\
        \ values will be defaulted to 0. \nFor full control over the Flow.properties.packet\
        \ header contents use this \ncontainer. "
      type: object
      required:
      - tx_name
      properties:
        tx_name:
          description: |
            The unique name of a port that is the transmit port.

            x-constraint:
            - /components/schemas/Port/properties/name
            - /components/schemas/Lag/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
            - /components/schemas/Lag/properties/name
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          - /components/schemas/Lag/properties/name
          x-field-uid: 1
        rx_name:
          description: |
            Deprecated: This property is deprecated in favor of property rx_names

            Deprecated: This property is deprecated in favor of property rx_names

            The unique name of a port that is the intended receive port.

            x-constraint:
            - /components/schemas/Port/properties/name
            - /components/schemas/Lag/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
            - /components/schemas/Lag/properties/name
          x-status:
            status: deprecated
            information: This property is deprecated in favor of property rx_names
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          - /components/schemas/Lag/properties/name
          x-field-uid: 2
        rx_names:
          description: |
            Unique name of ports or lags that are intended receive endpoints.

            x-constraint:
            - /components/schemas/Port/properties/name
            - /components/schemas/Lag/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
            - /components/schemas/Lag/properties/name
          type: array
          items:
            description: |-
              The unique name of a port or lag that is the intended receive port.
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          - /components/schemas/Lag/properties/name
          x-field-uid: 3
    Flow.Router:
      description: |-
        A container for declaring a map of 1..n transmit devices to 1..n receive devices. This allows for a single flow to have  different tx to rx device flows such as a single one to one map or a  many to many map.
      type: object
      required:
      - tx_names
      - rx_names
      properties:
        mode:
          description: "Determines the intent of creating traffic sub-flow(s) between\
            \ the device \nendpoints, from the entities of <b>tx_names</b> to the\
            \ entities of <b>rx_names</b> \nto derive how <b>auto</b> packet fields\
            \ can be populated with \nthe actual value(s) by the implementation.\n\
            \nThe <b>one_to_one</b> mode creates traffic sub-flow(s) between each\
            \ device endpoint pair in \ntx_names to rx_names by index.\nThe length\
            \ of tx_names and rx_names MUST be the same.\nThe same device name can\
            \ be repeated multiple times in tx_names or rx_names, in any order to\
            \ create desired meshing between device(s).\nFor 2 values in tx_names\
            \ and 2 values in rx_names, 2 device endpoint pairs would be generated\
            \ (each pair representing a traffic sub-flow).\n\nThe <b>mesh</b> mode\
            \ creates traffic sub-flow(s) between each value in tx_names to\nevery\
            \ value in rx_names, forming the device endpoint pair(s).\nFor 2 values\
            \ in tx_names and 3 values in rx_names, generated device endpoint pairs\
            \ would be 2x3=6. \n\nA generated device endpoint pair with same device\
            \ endpoint name for both transmit & receive device endpoint MUST raise\
            \ an error.\n\nPacket fields of type <b>auto</b> would be populated with\
            \ one value for each device endpoint pair (representing the traffic sub-flow).\
            \ \nThe value would be determined considering transmit & receive device\
            \ of the sub-flow. And the sequence of the populated value(s) \nwould\
            \ be in the order of generated device endpoint pair(s).\nIf 2 device endpoint\
            \ pairs are generated (based on mode, tx_names and rx_names), say (d1\
            \ to d3) and (d2 to d3), and ethernet.dst is set as <b>auto</b>, then\
            \ \nthe auto field would be <b>replaced</b> by the implementation with\
            \ a sequence of 2 values, [v1,v2] where \nv1 is determined using context\
            \ (d1,d3) and v2 using context (d2,d3).\nThe final outcome is that packets\
            \ generated on the wire will contain the values v1,v2,v1,... for ethernet.dst\
            \ field. Any non-auto packet fields \nshould be configured accordingly.\
            \ For example, non-auto packet field ethernet.src can be configured with\
            \ values [u1, u2], where \nu1 & u2 are source MAC of the connected interface\
            \ of device d1 and d2 respectively. Then packets on the wire will contain\
            \ correct value pairs \n(u1,v1),(u2,v2),(u1,v1),... for (ethernet.src,ethernet.dst)\
            \ fields."
          type: string
          default: mesh
          x-field-uid: 1
          x-enum:
            mesh:
              x-field-uid: 1
            one_to_one:
              x-field-uid: 2
          enum:
          - mesh
          - one_to_one
        tx_names:
          type: array
          items:
            description: |-
              The unique name of an emulated device that will be transmitting.
            type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
          - /components/schemas/Device.Ipv4/properties/name
          - /components/schemas/Device.Ipv6/properties/name
          - /components/schemas/Bgp.V4RouteRange/properties/name
          - /components/schemas/Bgp.V6RouteRange/properties/name
          - /components/schemas/Bgp.CMacIpRange/properties/name
          - /components/schemas/Rsvp.LspIpv4Interface.P2PIngressIpv4Lsp/properties/name
          - /components/schemas/Isis.V4RouteRange/properties/name
          - /components/schemas/Isis.V6RouteRange/properties/name
          example:
          - Eth 1
          - Eth 2
          - Eth 3
          - IPv4 1
          - IPv6 1
          - Bgp V4RouteRange 1
          - Bgp V6RouteRange 1
          x-field-uid: 2
          description: |
            TBD

            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv6/properties/name
            - /components/schemas/Bgp.V4RouteRange/properties/name
            - /components/schemas/Bgp.V6RouteRange/properties/name
            - /components/schemas/Bgp.CMacIpRange/properties/name
            - /components/schemas/Rsvp.LspIpv4Interface.P2PIngressIpv4Lsp/properties/name
            - /components/schemas/Isis.V4RouteRange/properties/name
            - /components/schemas/Isis.V6RouteRange/properties/name


            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv6/properties/name
            - /components/schemas/Bgp.V4RouteRange/properties/name
            - /components/schemas/Bgp.V6RouteRange/properties/name
            - /components/schemas/Bgp.CMacIpRange/properties/name
            - /components/schemas/Rsvp.LspIpv4Interface.P2PIngressIpv4Lsp/properties/name
            - /components/schemas/Isis.V4RouteRange/properties/name
            - /components/schemas/Isis.V6RouteRange/properties/name
        rx_names:
          type: array
          items:
            description: |-
              The unique name of an emulated device that will be receiving.
            type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
          - /components/schemas/Device.Ipv4/properties/name
          - /components/schemas/Device.Ipv6/properties/name
          - /components/schemas/Bgp.V4RouteRange/properties/name
          - /components/schemas/Bgp.V6RouteRange/properties/name
          - /components/schemas/Bgp.CMacIpRange/properties/name
          - /components/schemas/Rsvp.LspIpv4Interface.P2PEgressIpv4Lsp/properties/name
          - /components/schemas/Isis.V4RouteRange/properties/name
          - /components/schemas/Isis.V6RouteRange/properties/name
          example:
          - Eth 1
          - Eth 2
          - Eth 3
          - IPv4 1
          - IPv6 1
          - Bgp V4RouteRange 1
          - Bgp V6RouteRange 1
          x-field-uid: 3
          description: |
            TBD

            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv6/properties/name
            - /components/schemas/Bgp.V4RouteRange/properties/name
            - /components/schemas/Bgp.V6RouteRange/properties/name
            - /components/schemas/Bgp.CMacIpRange/properties/name
            - /components/schemas/Rsvp.LspIpv4Interface.P2PEgressIpv4Lsp/properties/name
            - /components/schemas/Isis.V4RouteRange/properties/name
            - /components/schemas/Isis.V6RouteRange/properties/name


            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
            - /components/schemas/Device.Ipv4/properties/name
            - /components/schemas/Device.Ipv6/properties/name
            - /components/schemas/Bgp.V4RouteRange/properties/name
            - /components/schemas/Bgp.V6RouteRange/properties/name
            - /components/schemas/Bgp.CMacIpRange/properties/name
            - /components/schemas/Rsvp.LspIpv4Interface.P2PEgressIpv4Lsp/properties/name
            - /components/schemas/Isis.V4RouteRange/properties/name
            - /components/schemas/Isis.V6RouteRange/properties/name
    Flow.Header:
      description: |-
        Configuration for all traffic packet headers
      type: object
      properties:
        choice:
          description: "The available types of flow headers. If one is not provided\
            \ the \ndefault ethernet packet header MUST be provided."
          type: string
          default: ethernet
          x-field-uid: 1
          x-enum:
            custom:
              x-field-uid: 1
            ethernet:
              x-field-uid: 2
            vlan:
              x-field-uid: 3
            vxlan:
              x-field-uid: 4
            ipv4:
              x-field-uid: 5
            ipv6:
              x-field-uid: 6
            pfcpause:
              x-field-uid: 7
            ethernetpause:
              x-field-uid: 8
            tcp:
              x-field-uid: 9
            udp:
              x-field-uid: 10
            gre:
              x-field-uid: 11
            gtpv1:
              x-field-uid: 12
            gtpv2:
              x-field-uid: 13
            arp:
              x-field-uid: 14
            icmp:
              x-field-uid: 15
            icmpv6:
              x-field-uid: 16
            ppp:
              x-field-uid: 17
            igmpv1:
              x-field-uid: 18
            mpls:
              x-field-uid: 19
          enum:
          - custom
          - ethernet
          - vlan
          - vxlan
          - ipv4
          - ipv6
          - pfcpause
          - ethernetpause
          - tcp
          - udp
          - gre
          - gtpv1
          - gtpv2
          - arp
          - icmp
          - icmpv6
          - ppp
          - igmpv1
          - mpls
        custom:
          $ref: '#/components/schemas/Flow.Custom'
          x-field-uid: 2
        ethernet:
          $ref: '#/components/schemas/Flow.Ethernet'
          x-field-uid: 3
        vlan:
          $ref: '#/components/schemas/Flow.Vlan'
          x-field-uid: 4
        vxlan:
          $ref: '#/components/schemas/Flow.Vxlan'
          x-field-uid: 5
        ipv4:
          $ref: '#/components/schemas/Flow.Ipv4'
          x-field-uid: 6
        ipv6:
          $ref: '#/components/schemas/Flow.Ipv6'
          x-field-uid: 7
        pfcpause:
          $ref: '#/components/schemas/Flow.PfcPause'
          x-field-uid: 8
        ethernetpause:
          $ref: '#/components/schemas/Flow.EthernetPause'
          x-field-uid: 9
        tcp:
          $ref: '#/components/schemas/Flow.Tcp'
          x-field-uid: 10
        udp:
          $ref: '#/components/schemas/Flow.Udp'
          x-field-uid: 11
        gre:
          $ref: '#/components/schemas/Flow.Gre'
          x-field-uid: 12
        gtpv1:
          $ref: '#/components/schemas/Flow.Gtpv1'
          x-field-uid: 13
        gtpv2:
          $ref: '#/components/schemas/Flow.Gtpv2'
          x-field-uid: 14
        arp:
          $ref: '#/components/schemas/Flow.Arp'
          x-field-uid: 15
        icmp:
          $ref: '#/components/schemas/Flow.Icmp'
          x-field-uid: 16
        icmpv6:
          $ref: '#/components/schemas/Flow.Icmpv6'
          x-field-uid: 17
        ppp:
          $ref: '#/components/schemas/Flow.Ppp'
          x-field-uid: 18
        igmpv1:
          $ref: '#/components/schemas/Flow.Igmpv1'
          x-field-uid: 19
        mpls:
          $ref: '#/components/schemas/Flow.Mpls'
          x-field-uid: 20
    Flow.Custom:
      type: object
      description: |-
        Custom packet header
      required:
      - bytes
      properties:
        bytes:
          description: |-
            A custom packet header defined as a string of hex bytes. The string MUST contain sequence of valid hex bytes. Spaces or colons can be part of the bytes but will be discarded. This packet header can be used in multiple places in the packet.
          type: string
          pattern: '^[A-Fa-f0-9: ]+$'
          x-field-uid: 1
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits
            in a corresponding header field for metrics per each applicable value.
            These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Flow.Custom.MetricTag'
          x-field-uid: 2
    Flow.Custom.MetricTag:
      description: |-
        Metric Tag can be used to enable tracking portion of or all bits
        in a corresponding header field for metrics per each applicable value.
        These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable
            for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset
            of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          x-field-uid: 3
    Flow.Ethernet:
      description: |-
        Ethernet packet header
      type: object
      properties:
        dst:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Dst'
        src:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Src'
        ether_type:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.EtherType'
        pfc_queue:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.PfcQueue'
    Flow.Vlan:
      description: |-
        VLAN packet header
      type: object
      properties:
        priority:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Priority'
        cfi:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Cfi'
        id:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Id'
        tpid:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Tpid'
    Flow.Vxlan:
      description: |-
        VXLAN packet header
      type: object
      properties:
        flags:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Flags'
        reserved0:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved0'
        vni:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Vni'
        reserved1:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved1'
    Flow.Ipv4:
      description: |-
        IPv4 packet header
      type: object
      properties:
        version:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Version'
        header_length:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.HeaderLength'
        priority:
          $ref: '#/components/schemas/Flow.Ipv4.Priority'
          x-field-uid: 3
        total_length:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TotalLength'
        identification:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Identification'
        reserved:
          x-field-uid: 6
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Reserved'
        dont_fragment:
          x-field-uid: 7
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.DontFragment'
        more_fragments:
          x-field-uid: 8
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.MoreFragments'
        fragment_offset:
          x-field-uid: 9
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.FragmentOffset'
        time_to_live:
          x-field-uid: 10
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TimeToLive'
        protocol:
          x-field-uid: 11
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Protocol'
        header_checksum:
          x-field-uid: 12
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.HeaderChecksum'
        src:
          x-field-uid: 13
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Src'
        dst:
          x-field-uid: 14
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dst'
    Flow.Ipv4.Priority:
      description: |-
        A container for ipv4 raw, tos, dscp ip priorities.
      type: object
      properties:
        choice:
          type: string
          default: dscp
          x-field-uid: 1
          x-enum:
            raw:
              x-field-uid: 1
            tos:
              x-field-uid: 2
            dscp:
              x-field-uid: 3
          enum:
          - raw
          - tos
          - dscp
        raw:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Priority.Raw'
        tos:
          $ref: '#/components/schemas/Flow.Ipv4.Tos'
          x-field-uid: 3
        dscp:
          $ref: '#/components/schemas/Flow.Ipv4.Dscp'
          x-field-uid: 4
    Flow.Ipv4.Dscp:
      description: |-
        Differentiated services code point (DSCP) packet field.
      type: object
      properties:
        phb:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Phb'
        ecn:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Ecn'
    Flow.Ipv4.Tos:
      description: |-
        Type of service (TOS) packet field.
      type: object
      properties:
        precedence:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Precedence'
        delay:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Delay'
        throughput:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Throughput'
        reliability:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Reliability'
        monetary:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Monetary'
        unused:
          x-field-uid: 6
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Unused'
    Flow.Ipv6:
      description: |-
        IPv6 packet header
      type: object
      properties:
        version:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Version'
        traffic_class:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.TrafficClass'
        flow_label:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.FlowLabel'
        payload_length:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.PayloadLength'
        next_header:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.NextHeader'
        hop_limit:
          x-field-uid: 6
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.HopLimit'
        src:
          x-field-uid: 7
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Src'
        dst:
          x-field-uid: 8
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Dst'
    Flow.PfcPause:
      description: |-
        IEEE 802.1Qbb PFC Pause packet header.
      type: object
      properties:
        dst:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Dst'
        src:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Src'
        ether_type:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.EtherType'
        control_op_code:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ControlOpCode'
        class_enable_vector:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ClassEnableVector'
        pause_class_0:
          x-field-uid: 6
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass0'
        pause_class_1:
          x-field-uid: 7
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass1'
        pause_class_2:
          x-field-uid: 8
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass2'
        pause_class_3:
          x-field-uid: 9
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass3'
        pause_class_4:
          x-field-uid: 10
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass4'
        pause_class_5:
          x-field-uid: 11
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass5'
        pause_class_6:
          x-field-uid: 12
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass6'
        pause_class_7:
          x-field-uid: 13
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass7'
    Flow.EthernetPause:
      description: |-
        IEEE 802.3x global ethernet pause packet header
      type: object
      properties:
        dst:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Dst'
        src:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Src'
        ether_type:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.EtherType'
        control_op_code:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.ControlOpCode'
        time:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Time'
    Flow.Tcp:
      description: |-
        TCP packet header
      type: object
      properties:
        src_port:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SrcPort'
        dst_port:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DstPort'
        seq_num:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SeqNum'
        ack_num:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Tcp.AckNum'
        data_offset:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DataOffset'
        ecn_ns:
          x-field-uid: 6
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnNs'
        ecn_cwr:
          x-field-uid: 7
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnCwr'
        ecn_echo:
          x-field-uid: 8
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnEcho'
        ctl_urg:
          x-field-uid: 9
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlUrg'
        ctl_ack:
          x-field-uid: 10
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlAck'
        ctl_psh:
          x-field-uid: 11
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlPsh'
        ctl_rst:
          x-field-uid: 12
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlRst'
        ctl_syn:
          x-field-uid: 13
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlSyn'
        ctl_fin:
          x-field-uid: 14
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlFin'
        window:
          x-field-uid: 15
          $ref: '#/components/schemas/Pattern.Flow.Tcp.Window'
    Flow.Udp:
      description: |-
        UDP packet header
      type: object
      properties:
        src_port:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Udp.SrcPort'
        dst_port:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Udp.DstPort'
        length:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Udp.Length'
        checksum:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Udp.Checksum'
    Flow.Gre:
      description: |-
        Standard GRE packet header (RFC2784)
      type: object
      properties:
        checksum_present:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Gre.ChecksumPresent'
        reserved0:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved0'
        version:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Gre.Version'
        protocol:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Gre.Protocol'
        checksum:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.Gre.Checksum'
        reserved1:
          x-field-uid: 6
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved1'
    Flow.Gtpv1:
      description: |-
        GTPv1 packet header
      type: object
      properties:
        version:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Version'
        protocol_type:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.ProtocolType'
        reserved:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Reserved'
        e_flag:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.EFlag'
        s_flag:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SFlag'
        pn_flag:
          x-field-uid: 6
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.PnFlag'
        message_type:
          x-field-uid: 7
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageType'
        message_length:
          x-field-uid: 8
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageLength'
        teid:
          x-field-uid: 9
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Teid'
        squence_number:
          x-field-uid: 10
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SquenceNumber'
        n_pdu_number:
          x-field-uid: 11
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NPduNumber'
        next_extension_header_type:
          x-field-uid: 12
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NextExtensionHeaderType'
        extension_headers:
          description: |-
            A list of optional extension headers.
          type: array
          items:
            $ref: '#/components/schemas/Flow.GtpExtension'
          x-field-uid: 13
    Flow.GtpExtension:
      type: object
      properties:
        extension_length:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.ExtensionLength'
        contents:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.Contents'
        next_extension_header:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.NextExtensionHeader'
    Flow.Gtpv2:
      description: |-
        GTPv2 packet header
      type: object
      properties:
        version:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Version'
        piggybacking_flag:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.PiggybackingFlag'
        teid_flag:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.TeidFlag'
        spare1:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare1'
        message_type:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageType'
        message_length:
          x-field-uid: 6
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageLength'
        teid:
          x-field-uid: 7
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Teid'
        sequence_number:
          x-field-uid: 8
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.SequenceNumber'
        spare2:
          x-field-uid: 9
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare2'
    Flow.Arp:
      description: |-
        ARP packet header
      type: object
      properties:
        hardware_type:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareType'
        protocol_type:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolType'
        hardware_length:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareLength'
        protocol_length:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolLength'
        operation:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.Arp.Operation'
        sender_hardware_addr:
          x-field-uid: 6
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderHardwareAddr'
        sender_protocol_addr:
          x-field-uid: 7
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderProtocolAddr'
        target_hardware_addr:
          x-field-uid: 8
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetHardwareAddr'
        target_protocol_addr:
          x-field-uid: 9
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetProtocolAddr'
    Flow.Icmp:
      description: |-
        ICMP packet header
      type: object
      properties:
        choice:
          type: string
          default: echo
          x-field-uid: 1
          x-enum:
            echo:
              x-field-uid: 1
          enum:
          - echo
        echo:
          $ref: '#/components/schemas/Flow.Icmp.Echo'
          x-field-uid: 2
    Flow.Icmp.Echo:
      description: |-
        Packet Header for ICMP echo request
      type: object
      properties:
        type:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Type'
        code:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Code'
        checksum:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Checksum'
        identifier:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Identifier'
        sequence_number:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.SequenceNumber'
    Flow.Icmpv6:
      description: |-
        ICMPv6 packet header
      type: object
      properties:
        choice:
          type: string
          default: echo
          x-field-uid: 1
          x-enum:
            echo:
              x-field-uid: 1
          enum:
          - echo
        echo:
          $ref: '#/components/schemas/Flow.Icmpv6.Echo'
          x-field-uid: 2
    Flow.Icmpv6.Echo:
      description: |-
        Packet Header for ICMPv6 Echo
      type: object
      properties:
        type:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Type'
        code:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Code'
        identifier:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Identifier'
        sequence_number:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.SequenceNumber'
        checksum:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Checksum'
    Flow.Ppp:
      description: |-
        PPP packet header
      type: object
      properties:
        address:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Address'
        control:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Control'
        protocol_type:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Ppp.ProtocolType'
    Flow.Igmpv1:
      description: |-
        IGMPv1 packet header
      type: object
      properties:
        version:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Version'
        type:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Type'
        unused:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Unused'
        checksum:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Checksum'
        group_address:
          x-field-uid: 5
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.GroupAddress'
    Flow.Mpls:
      description: |-
        MPLS packet header; When configuring multiple such headers, the count shall not exceed 20.
      type: object
      properties:
        label:
          x-field-uid: 1
          $ref: '#/components/schemas/Pattern.Flow.Mpls.Label'
        traffic_class:
          x-field-uid: 2
          $ref: '#/components/schemas/Pattern.Flow.Mpls.TrafficClass'
        bottom_of_stack:
          x-field-uid: 3
          $ref: '#/components/schemas/Pattern.Flow.Mpls.BottomOfStack'
        time_to_live:
          x-field-uid: 4
          $ref: '#/components/schemas/Pattern.Flow.Mpls.TimeToLive'
    Flow.Size:
      description: |-
        The frame size which overrides the total length of the packet
      type: object
      properties:
        choice:
          type: string
          default: fixed
          x-field-uid: 1
          x-enum:
            fixed:
              x-field-uid: 1
            increment:
              x-field-uid: 2
            random:
              x-field-uid: 3
            weight_pairs:
              x-field-uid: 4
          enum:
          - fixed
          - increment
          - random
          - weight_pairs
        fixed:
          type: integer
          format: uint32
          default: 64
          x-field-uid: 2
        increment:
          $ref: '#/components/schemas/Flow.SizeIncrement'
          x-field-uid: 3
        random:
          $ref: '#/components/schemas/Flow.SizeRandom'
          x-field-uid: 4
        weight_pairs:
          $ref: '#/components/schemas/Flow.SizeWeightPairs'
          x-field-uid: 5
    Flow.SizeIncrement:
      type: object
      description: "Frame size that increments from a starting size to \nan ending\
        \ size incrementing by a step size."
      properties:
        start:
          description: |-
            Starting frame size in bytes
          type: integer
          format: uint32
          minimum: 1
          default: 64
          x-field-uid: 1
        end:
          description: |-
            Ending frame size in bytes
          type: integer
          format: uint32
          minimum: 64
          default: 1518
          x-field-uid: 2
        step:
          description: |-
            Step frame size in bytes
          type: integer
          format: uint32
          default: 1
          x-field-uid: 3
    Flow.SizeRandom:
      type: object
      description: |-
        Random frame size from a min value to a max value.
      properties:
        min:
          type: integer
          format: uint32
          default: 64
          x-field-uid: 1
        max:
          type: integer
          format: uint32
          default: 1518
          x-field-uid: 2
    Flow.SizeWeightPairs:
      type: object
      description: "Frame size distribution, defined as <size, weight> pairs (including\
        \ IMIX distribution).\nFrames are randomly generated such that the proportion\
        \ of each frame size out of the total number of frames \nare matching with\
        \ the weight value of the <size, weight> pair. However, as with any other\
        \ probability \ndistribution, the sample distribution is close to theoretical\
        \ value only if the size of the sample is reasonably large. \nWhen the number\
        \ of frames is very low the transmitted frames may not come close to the ratio\
        \ described in the weight."
      properties:
        choice:
          type: string
          default: predefined
          x-field-uid: 1
          x-enum:
            predefined:
              x-field-uid: 1
            custom:
              x-field-uid: 2
          enum:
          - predefined
          - custom
        predefined:
          type: string
          default: imix
          description: "Specify predefined frame size distribution <size, weight>\
            \ pairs (including IMIX distribution).  \nThe available predefined distribution\
            \ pairs are:\n- IMIX (64:7, 570:4, and 1518:1)  \n- IPSec IMIX (90:58.67,\
            \ 92:2, 594:23.66 and 1418:15.67)  \n- IPv6 IMIX (60:58.67, 496:2, 594:23.66\
            \ and 1518:15.67)  \n- Standard IMIX (58:58.67, 62:2, 594:23.66 and 1518:15.67)\
            \  \n- TCP IMIX (90:58.67, 92:2, 594:23.66 and 1518:15.67)  "
          x-field-uid: 2
          x-enum:
            imix:
              x-field-uid: 1
            ipsec_imix:
              x-field-uid: 2
            ipv6_imix:
              x-field-uid: 3
            standard_imix:
              x-field-uid: 4
            tcp_imix:
              x-field-uid: 5
          enum:
          - imix
          - ipsec_imix
          - ipv6_imix
          - standard_imix
          - tcp_imix
        custom:
          type: array
          items:
            $ref: '#/components/schemas/Flow.SizeWeightPairs.Custom'
          x-field-uid: 3
    Flow.SizeWeightPairs.Custom:
      type: object
      description: |-
        Custom frame size distribution <size, weight> pair.
      properties:
        size:
          description: |-
            The size of the frame (in bytes) for this weight pair.
          type: integer
          format: uint32
          minimum: 12
          maximum: 65535
          default: 64
          x-field-uid: 1
        weight:
          description: "Weight assigned to the corresponding frame size in this weight\
            \ pair. \nHigher weight means more packets."
          type: number
          format: float
          default: 1
          x-field-uid: 2
    Flow.Rate:
      type: object
      description: |-
        The rate of packet transmission
      properties:
        choice:
          description: |-
            The available types of flow rate.
          type: string
          default: pps
          x-field-uid: 1
          x-enum:
            pps:
              x-field-uid: 1
            bps:
              x-field-uid: 2
            kbps:
              x-field-uid: 3
            mbps:
              x-field-uid: 4
            gbps:
              x-field-uid: 5
            percentage:
              x-field-uid: 6
          enum:
          - pps
          - bps
          - kbps
          - mbps
          - gbps
          - percentage
        pps:
          description: |-
            Packets per second.
          type: integer
          format: uint64
          minimum: 1
          default: 1000
          x-field-uid: 2
        bps:
          description: |-
            Bits per second.
          type: integer
          format: uint64
          minimum: 672
          default: 1000000000
          x-field-uid: 3
        kbps:
          description: |-
            Kilobits per second.
          type: integer
          format: uint64
          minimum: 1
          default: 1000000
          x-field-uid: 4
        mbps:
          description: "Megabits per second. "
          type: integer
          format: uint64
          minimum: 1
          default: 1000
          x-field-uid: 5
        gbps:
          description: |-
            Gigabits per second.
          type: integer
          format: uint32
          minimum: 1
          default: 1
          x-field-uid: 6
        percentage:
          description: |-
            The percentage of a port location's available bandwidth.
          type: number
          format: float
          minimum: 0
          maximum: 100
          default: 100
          x-field-uid: 7
    Flow.Duration:
      description: "A container for different transmit durations. "
      type: object
      properties:
        choice:
          description: |-
            A choice used to determine the type of duration.
          type: string
          default: continuous
          x-field-uid: 1
          x-enum:
            fixed_packets:
              x-field-uid: 1
            fixed_seconds:
              x-field-uid: 2
            burst:
              x-field-uid: 3
            continuous:
              x-field-uid: 4
          enum:
          - fixed_packets
          - fixed_seconds
          - burst
          - continuous
        fixed_packets:
          $ref: '#/components/schemas/Flow.FixedPackets'
          x-field-uid: 2
        fixed_seconds:
          $ref: '#/components/schemas/Flow.FixedSeconds'
          x-field-uid: 3
        burst:
          $ref: '#/components/schemas/Flow.Burst'
          x-field-uid: 4
        continuous:
          $ref: '#/components/schemas/Flow.Continuous'
          x-field-uid: 5
    Flow.Continuous:
      description: "Transmit will be continuous and will not stop automatically. "
      type: object
      properties:
        gap:
          description: |-
            The minimum gap between packets expressed as bytes.
          type: integer
          format: uint32
          default: 12
          x-field-uid: 1
        delay:
          $ref: '#/components/schemas/Flow.Delay'
          x-field-uid: 2
    Flow.Delay:
      description: "The optional container to specify the delay before starting \n\
        transmission of packets."
      type: object
      properties:
        choice:
          type: string
          default: bytes
          x-field-uid: 1
          x-enum:
            bytes:
              x-field-uid: 1
            nanoseconds:
              x-field-uid: 2
            microseconds:
              x-field-uid: 3
          enum:
          - bytes
          - nanoseconds
          - microseconds
        bytes:
          description: |-
            The delay before starting transmission of packets.
            A value of 0 indicates no delay.
          type: number
          format: float
          minimum: 0
          default: 0
          x-field-uid: 2
        nanoseconds:
          description: |-
            The delay before starting transmission of packets.
            A value of 0 indicates no delay.
          type: number
          format: float
          minimum: 0
          default: 0
          x-field-uid: 3
        microseconds:
          description: |-
            The delay before starting transmission of packets.
            A value of 0 indicates no delay.
          type: number
          format: float
          minimum: 0
          default: 0
          x-field-uid: 4
    Flow.FixedPackets:
      description: |-
        Transmit a fixed number of packets after which the flow will stop.
      type: object
      properties:
        packets:
          description: |-
            Stop transmit of the flow after this number of packets.
          type: integer
          format: uint32
          minimum: 1
          default: 1
          x-field-uid: 1
        gap:
          description: |-
            The minimum gap between packets expressed as bytes.
          type: integer
          format: uint32
          default: 12
          x-field-uid: 2
        delay:
          $ref: '#/components/schemas/Flow.Delay'
          x-field-uid: 3
    Flow.FixedSeconds:
      description: |-
        Transmit for a fixed number of seconds after which the flow will stop.
      type: object
      properties:
        seconds:
          description: |-
            Stop transmit of the flow after this number of seconds.
          type: number
          minimum: 0
          default: 1
          x-field-uid: 1
        gap:
          description: |-
            The minimum gap between packets expressed as bytes.
          type: integer
          format: uint32
          default: 12
          x-field-uid: 2
        delay:
          $ref: '#/components/schemas/Flow.Delay'
          x-field-uid: 3
    Flow.Burst:
      description: "Transmits continuous or fixed burst of packets. \nFor continuous\
        \ burst of packets, it will not automatically stop.\nFor fixed burst of packets,\
        \ it will stop after transmitting fixed number of bursts.      "
      type: object
      properties:
        bursts:
          description: |-
            The number of packet bursts transmitted per flow.
            A value of 0 implies continuous burst of packets.
          type: integer
          format: uint32
          default: 0
          x-field-uid: 1
        packets:
          description: |-
            The number of packets transmitted per burst.
          type: integer
          format: uint32
          minimum: 1
          default: 1
          x-field-uid: 2
        gap:
          description: |-
            The minimum gap between packets expressed as bytes.
          type: integer
          format: uint32
          default: 12
          x-field-uid: 3
        inter_burst_gap:
          $ref: '#/components/schemas/Flow.Duration.InterBurstGap'
          x-field-uid: 4
    Flow.Duration.InterBurstGap:
      type: object
      description: |-
        The optional container for specifying a gap between bursts.
      properties:
        choice:
          description: |-
            The type of inter burst gap units.
          type: string
          default: bytes
          x-field-uid: 1
          x-enum:
            bytes:
              x-field-uid: 1
            nanoseconds:
              x-field-uid: 2
            microseconds:
              x-field-uid: 3
          enum:
          - bytes
          - nanoseconds
          - microseconds
        bytes:
          description: |-
            The amount of time between bursts expressed in bytes.
            A value of 0 indicates no gap between bursts.
          type: number
          format: double
          minimum: 0
          default: 12
          x-field-uid: 2
        nanoseconds:
          description: |-
            The amount of time between bursts expressed in nanoseconds.
            A value of 0 indicates no gap between bursts.
          type: number
          format: double
          minimum: 0
          default: 96
          x-field-uid: 3
        microseconds:
          description: |-
            The amount of time between bursts expressed in microseconds.
            A value of 0 indicates no gap between bursts.
          type: number
          format: double
          minimum: 0
          default: 0.096
          x-field-uid: 4
    Flow.Metrics:
      description: |-
        The optional container for configuring flow metrics.
      type: object
      properties:
        enable:
          description: "Enables flow metrics.\nEnabling this option may affect the\
            \ resultant packet payload due to \nadditional instrumentation data."
          type: boolean
          default: false
          x-field-uid: 1
        loss:
          description: |-
            Enables additional flow metric loss calculation.
          type: boolean
          default: false
          x-field-uid: 2
        rx_tx_ratio:
          description: |-
            Rx Tx ratio.
          $ref: '#/components/schemas/Flow.RxTxRatio'
          x-field-uid: 6
        timestamps:
          description: |-
            Enables additional flow metric first and last timestamps.
          type: boolean
          default: false
          x-field-uid: 3
        latency:
          description: |-
            Latency metrics.
          $ref: '#/components/schemas/Flow.Latency.Metrics'
          x-field-uid: 4
        predefined_metric_tags:
          description: |-
            Predefined metric tags
          $ref: '#/components/schemas/Flow.Predefined.Tags'
          x-field-uid: 5
    Flow.Latency.Metrics:
      description: |-
        The optional container for per flow latency metric configuration.
      type: object
      properties:
        enable:
          description: "True to enable latency metrics using timestamps.\n\nEnabling\
            \ this option may affect the resultant packet payload due to \nadditional\
            \ instrumentation data."
          type: boolean
          default: false
          x-field-uid: 1
        mode:
          description: "Select the type of latency measurement. The different types\
            \ of \nlatency measurements are:\n\n\nstore_forward:\nThe time interval\
            \ starting when the last bit of the frame leaves the\nsending port and\
            \ ending when the first bit of the frame is seen on\nthe receiving port\
            \ (LIFO).  This is based on the RFC 1242 standard.\n\n\ncut_through:\n\
            The time interval starting when the first bit of the frame leaves\nthe\
            \ sending port and ending when the first bit of the frame is seen\non\
            \ the receiving port (FIFO).  This is based on the RFC 1242 \nstandard."
          type: string
          default: store_forward
          x-field-uid: 2
          x-enum:
            store_forward:
              x-field-uid: 1
            cut_through:
              x-field-uid: 2
          enum:
          - store_forward
          - cut_through
    Flow.Predefined.Tags:
      description: |-
        List of predefined flow tracking options, outside packet fields, that can be enabled.
      type: object
      properties:
        rx_name:
          description: |-
            Enables Rx port or lag level disaggregation with predefined metrics tag name set as "rx_name".
            The Rx port / lag names can be found under tagged_metrics tag names in flow metrics response.
          type: boolean
          default: false
          x-field-uid: 1
    Flow.RxTxRatio:
      description: |-
        Rx Tx ratio is the ratio of expected number of Rx packets across all Rx ports to the Tx packets
        for the configured flow. It is a factor by which the Tx packet count is multiplied to calculate
        the sum of expected Rx packet count, across all Rx ports. This will be used to calculate loss
        percentage of flow at aggregate level.
      type: object
      properties:
        choice:
          type: string
          default: value
          x-field-uid: 1
          x-enum:
            rx_count:
              x-field-uid: 1
            value:
              x-field-uid: 2
          enum:
          - rx_count
          - value
        rx_count:
          $ref: '#/components/schemas/Flow.RxTxRatio.RxCount'
          x-field-uid: 2
        value:
          description: |-
            Should be a positive, non-zero value. The default value of 1, is when the Rx packet count across
            all ports is expected to match the Tx packet count. A custom integer value (>1) can be specified for
            loss calculation for cases when there are multiple destination addresses configured within one flow,
            but DUT is configured to replicate only to a subset of Rx ports. For cases when Tx side generates two
            packets from each source in 1:1 protection mode but only one of the two packets are received by the
            Rx port, we may need to specify a fractional value instead.
          type: number
          format: float
          default: 1.0
          x-field-uid: 3
    Flow.RxTxRatio.RxCount:
      description: |-
        This is for cases where one copy of Tx packet is received on all Rx ports and so the sum total of Rx packets
        received across all Rx ports is a multiple of Rx port count and Tx packets.
    Event:
      description: |-
        The optional container for event configuration.
      type: object
      properties:
        enable:
          description: "True to enable all events. \nEnabling this option may affect\
            \ the resultant packet payload due to \nadditional instrumentation data."
          type: boolean
          default: false
          x-field-uid: 1
        link:
          $ref: '#/components/schemas/Event.Link'
          x-field-uid: 2
        rx_rate_threshold:
          $ref: '#/components/schemas/Event.RxRateThreshold'
          x-field-uid: 3
        route_advertise_withdraw:
          $ref: '#/components/schemas/Event.RouteAdvertiseWithdraw'
          x-field-uid: 4
    Event.RxRateThreshold:
      description: |-
        The optional container for rx rate threshold event configuration.
      type: object
      properties:
        enable:
          description: "True to enable the rx_rate_threshold event. \nEnabling this\
            \ option may affect the resultant packet payload due to \nadditional instrumentation\
            \ data."
          type: boolean
          default: false
          x-field-uid: 1
        threshold:
          description: "True to enable notifications when the rx rate of a flow passes\
            \ above \nor below the threshold value. "
          type: number
          format: float
          maximum: 100
          minimum: 0
          default: 95
          x-field-uid: 2
    Event.Link:
      description: |-
        The optional container for link up/down event configuration.
      type: object
      properties:
        enable:
          description: "True to enable notifications when a link up/down event occurs. "
          type: boolean
          default: false
          x-field-uid: 1
    Event.RouteAdvertiseWithdraw:
      description: |-
        The optional container for route advertise/withdraw event configuration.
      type: object
      properties:
        enable:
          description: "True to enable notifications when a route advertise/withdraw\
            \ \nevent occurs. "
          type: boolean
          default: false
          x-field-uid: 1
    Event.Request:
      type: object
      properties:
        type:
          description: "Constrain the events being returned by specifying event types.\n\
            If the list is empty then all event types will be returned. "
          type: array
          items:
            type: string
            example: route_withdraw
            x-enum:
              link_down:
                x-field-uid: 1
              link_up:
                x-field-uid: 2
              route_withdraw:
                x-field-uid: 3
              route_advertise:
                x-field-uid: 4
              flow_rx_rate_above_threshold:
                x-field-uid: 5
              flow_rx_rate_below_threshold:
                x-field-uid: 6
            enum:
            - link_down
            - link_up
            - route_withdraw
            - route_advertise
            - flow_rx_rate_above_threshold
            - flow_rx_rate_below_threshold
          x-field-uid: 1
        source:
          description: "Constrain the events being returned by specifying event sources.\
            \ \nIf the list is empty then all event sources will be returned. \n\n\
            x-constraint:\n- /components/schemas/Port/properties/name\n- /components/schemas/Bgp.V4RouteRange/name\n\
            - /components/schemas/Bgp.V6RouteRange/name\n\n\nx-constraint:\n- /components/schemas/Port/properties/name\n\
            - /components/schemas/Bgp.V4RouteRange/name\n- /components/schemas/Bgp.V6RouteRange/name\n"
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          - /components/schemas/Bgp.V4RouteRange/name
          - /components/schemas/Bgp.V6RouteRange/name
          x-field-uid: 2
    Event.Subscription:
      description: "A container that describes what events a system should provide\
        \ and \noptionally where to publish them.  "
      type: object
      properties:
        events:
          $ref: '#/components/schemas/Event.Request'
          x-field-uid: 1
        callback_url:
          description: |-
            Indicates where a client wants to be notified of the events set in
            the events property.
            If this property is empty or null then no event notifications will
            be forwarded.
          type: string
          format: uri
          example: https://127.0.0.1/event/notification
          x-field-uid: 2
    Lldp:
      description: |-
        Configuration of LLDP protocol IEEE Ref: https://www.ieee802.org/1/files/public/docs2002/lldp-protocol-00.pdf
      type: object
      required:
      - connection
      - name
      properties:
        connection:
          description: "The unique name of the object on which LLDP is running. "
          $ref: '#/components/schemas/Lldp.Connection'
          x-field-uid: 1
        chassis_id:
          description: |-
            The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated  with the transmitting LLDP agent. If mac address is specified it should be in colon seperated mac address format.
          $ref: '#/components/schemas/Lldp.ChassisId'
          x-field-uid: 2
        port_id:
          description: |-
            The Port ID is a mandatory TLV which identifies the port component of the endpoint identifier associated with  the transmitting LLDP agent. If the specified port is an IEEE 802.3 Repeater port, then this TLV is optional.
          $ref: '#/components/schemas/Lldp.PortId'
          x-field-uid: 3
        system_name:
          description: |-
            The system name field shall contain an alpha-numeric string that indicates the system's administratively assigned  name. The system name should be the system's fully qualified domain name. If implementations support IETF RFC  3418, the sysName object should be used for this field.
          $ref: '#/components/schemas/Lldp.SystemName'
          x-field-uid: 4
        hold_time:
          description: |-
            Specifies the amount of time in seconds a receiving device should maintain LLDP information sent  by the device before discarding it.
          type: integer
          format: uint32
          minimum: 10
          maximum: 65535
          default: 120
          x-field-uid: 5
        advertisement_interval:
          description: |-
            Set the transmission frequency of LLDP updates in seconds.
          type: integer
          format: uint32
          minimum: 5
          maximum: 65534
          default: 30
          x-field-uid: 6
        name:
          x-field-uid: 7
          description: |-
            Globally unique name of an object. It also serves as the primary key for arrays of objects.
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-unique: global
    Lldp.Connection:
      description: "LLDP connection to a test port. In future if more connection options\
        \ arise  LLDP connection object will be enhanced. "
      type: object
      properties:
        choice:
          description: |-
            The name of the test port or other connection objects on which LLDP is configured.
          type: string
          x-field-uid: 1
          x-enum:
            port_name:
              x-field-uid: 1
          enum:
          - port_name
        port_name:
          description: |
            Name of the test port on which LLDP is configured on.

            x-constraint:
            - /components/schemas/Port/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 2
    Lldp.ChassisId:
      description: |-
        The Chassis ID is a mandatory TLV which identifies the chassis component of the endpoint identifier associated  with the transmitting LLDP agent. This field identifies the format and source of the chassis identifier string.  It is based on the enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB MIB.
      type: object
      properties:
        choice:
          description: |-
            Chassis ID subtype to be used in Chassis ID TLV.
          type: string
          default: mac_address_subtype
          x-field-uid: 1
          x-enum:
            mac_address_subtype:
              x-field-uid: 1
            interface_name_subtype:
              x-field-uid: 2
            local_subtype:
              x-field-uid: 3
          enum:
          - mac_address_subtype
          - interface_name_subtype
          - local_subtype
        mac_address_subtype:
          $ref: '#/components/schemas/Lldp.ChassisMacSubType'
          x-field-uid: 2
        interface_name_subtype:
          description: |-
            Name of an interface of the chassis that uniquely identifies the chassis.
          type: string
          x-field-uid: 3
        local_subtype:
          description: |-
            Locally assigned name of the chassis.
          type: string
          x-field-uid: 4
    Lldp.PortId:
      description: |-
        The Port ID is a mandatory TLV which identifies the port component of the endpoint identifier associated with  the transmitting LLDP agent.This field identifies the format and source of the port identifier string. It is  based on the enumerator defined by the PtopoPortIdType object from RFC2922.
      type: object
      properties:
        choice:
          description: |-
            Port ID subtype to be used in Port ID TLV.
          type: string
          default: interface_name_subtype
          x-field-uid: 1
          x-enum:
            mac_address_subtype:
              x-field-uid: 1
            interface_name_subtype:
              x-field-uid: 2
            local_subtype:
              x-field-uid: 3
          enum:
          - mac_address_subtype
          - interface_name_subtype
          - local_subtype
        mac_address_subtype:
          description: |-
            The MAC Address configured in the Port ID TLV.
          type: string
          x-field-uid: 2
        interface_name_subtype:
          $ref: '#/components/schemas/Lldp.PortInterfaceNameSubType'
          x-field-uid: 3
        local_subtype:
          description: |-
            The Locally assigned name configured in the Port ID TLV.
          type: string
          x-field-uid: 4
    Lldp.ChassisMacSubType:
      description: "The MAC address configured in the Chassis ID TLV. "
      type: object
      properties:
        choice:
          description: |-
            In auto mode the system generated value is set for this property, while if the choice is selected as value,  a user configured value will be used for this property.
          type: string
          default: auto
          x-field-uid: 1
          x-enum:
            auto:
              x-field-uid: 1
            value:
              x-field-uid: 2
          enum:
          - auto
          - value
        auto:
          description: |-
            The OTG implementation must provide a system generated value for this property.
          type: string
          format: mac
          x-field-uid: 2
        value:
          description: |-
            User must specify a value if mode is not auto.
          type: string
          format: mac
          x-field-uid: 3
    Lldp.PortInterfaceNameSubType:
      description: "The interface name configured in the Port ID TLV. "
      type: object
      properties:
        choice:
          description: |-
            In auto mode the system generated value is set for this property, while if the choice is selected as value,  a user configured value will be used for this property.
          type: string
          default: auto
          x-field-uid: 1
          x-enum:
            auto:
              x-field-uid: 1
            value:
              x-field-uid: 2
          enum:
          - auto
          - value
        auto:
          description: |-
            The OTG implementation must provide a system generated value for this property.
          type: string
          x-field-uid: 2
        value:
          description: |-
            User must specify a value if mode is not auto.
          type: string
          x-field-uid: 3
    Lldp.SystemName:
      description: "The system Name configured in the System Name TLV. "
      type: object
      properties:
        choice:
          description: |-
            In auto mode the system generated value is set for this property, while if the choice is selected as value,  a user configured value will be used for this property.
          type: string
          default: auto
          x-field-uid: 1
          x-enum:
            auto:
              x-field-uid: 1
            value:
              x-field-uid: 2
          enum:
          - auto
          - value
        auto:
          description: |-
            The OTG implementation must provide a system generated value for this property.
          type: string
          x-field-uid: 2
        value:
          description: |-
            User must specify a value if mode is not auto.
          type: string
          x-field-uid: 3
    Error:
      description: |-
        Error response generated while serving API request.
      type: object
      required:
      - code
      - errors
      properties:
        code:
          description: |-
            Numeric status code based on the underlying transport being used.
            The API server MUST set this code explicitly based on following references:
              - HTTP 4xx errors: https://datatracker.ietf.org/doc/html/rfc9110#section-15.5
              - HTTP 5xx errors: https://datatracker.ietf.org/doc/html/rfc9110#section-15.6
              - gRPC errors: https://grpc.github.io/grpc/core/md_doc_statuscodes.html
          type: integer
          format: int32
          x-field-uid: 1
        kind:
          description: |-
            Classification of error originating from within API server that may not be mapped to the value in `code`.
            Absence of this field may indicate that the error did not originate from within API server.
          type: string
          x-enum:
            validation:
              x-field-uid: 1
            internal:
              x-field-uid: 2
          x-field-uid: 2
          enum:
          - validation
          - internal
        errors:
          description: |-
            List of error messages generated while executing the request.
          type: array
          items:
            type: string
          x-field-uid: 3
    Warning:
      description: |-
        A list of warnings that have occurred while executing the request.
      type: object
      properties:
        warnings:
          description: "A list of any system specific warnings that have occurred\
            \ while \nexecuting the request."
          type: array
          items:
            type: string
          x-field-uid: 1
    Config.Update:
      description: |-
        Request for updating specific attributes of resources in traffic generator
      type: object
      properties:
        choice:
          type: string
          x-enum:
            flows:
              x-field-uid: 1
          x-field-uid: 1
          enum:
          - flows
        flows:
          $ref: '#/components/schemas/Flows.Update'
          x-field-uid: 2
    Flows.Update:
      description: |-
        A container of flows with associated properties to be updated without affecting the flows current transmit state.
      type: object
      required:
      - property_names
      - flows
      properties:
        property_names:
          description: |-
            Flow properties to be updated without affecting the transmit state.
          type: array
          items:
            type: string
            x-enum:
              rate:
                x-field-uid: 1
              size:
                x-field-uid: 2
            enum:
            - rate
            - size
          x-field-uid: 1
        flows:
          description: |-
            The list of configured flows for which given property will be updated.
          type: array
          items:
            $ref: '#/components/schemas/Flow'
          x-field-uid: 2
    Control.State:
      description: |-
        Request for setting operational state of configured resources.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            port:
              x-field-uid: 1
            protocol:
              x-field-uid: 2
            traffic:
              x-field-uid: 3
          x-field-uid: 1
          enum:
          - port
          - protocol
          - traffic
        port:
          $ref: '#/components/schemas/State.Port'
          x-field-uid: 2
        protocol:
          $ref: '#/components/schemas/State.Protocol'
          x-field-uid: 3
        traffic:
          $ref: '#/components/schemas/State.Traffic'
          x-field-uid: 4
    State.Port:
      description: |-
        States associated with configured ports.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            link:
              x-field-uid: 1
            capture:
              x-field-uid: 2
          x-field-uid: 1
          enum:
          - link
          - capture
        link:
          $ref: '#/components/schemas/State.Port.Link'
          x-field-uid: 2
        capture:
          $ref: '#/components/schemas/State.Port.Capture'
          x-field-uid: 3
    State.Traffic:
      description: |-
        States associated with configured flows
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            flow_transmit:
              x-field-uid: 1
          x-field-uid: 1
          enum:
          - flow_transmit
        flow_transmit:
          $ref: '#/components/schemas/State.Traffic.FlowTransmit'
          x-field-uid: 2
    State.Protocol:
      description: |-
        States associated with protocols on configured resources.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            all:
              x-field-uid: 1
            route:
              x-field-uid: 2
            lacp:
              x-field-uid: 3
          x-field-uid: 1
          enum:
          - all
          - route
          - lacp
        all:
          $ref: '#/components/schemas/State.Protocol.All'
          x-field-uid: 2
        route:
          $ref: '#/components/schemas/State.Protocol.Route'
          x-field-uid: 3
        lacp:
          $ref: '#/components/schemas/State.Protocol.Lacp'
          x-field-uid: 4
    State.Port.Link:
      description: |-
        Sets the link of configured ports.
      type: object
      required:
      - state
      properties:
        port_names:
          description: |
            The names of target ports. An empty or null list will target all ports.

            x-constraint:
            - /components/schemas/Port/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 1
        state:
          description: |-
            The link state.
          type: string
          x-field-uid: 2
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
    State.Port.Capture:
      description: |-
        Sets the capture state of configured ports
      type: object
      required:
      - state
      properties:
        port_names:
          description: |
            The names of ports to which the capture state will be applied to. If the list of port_names is empty or null the state will be applied to all configured ports.
            If the list is not empty any port that is not included in the list of port_names MUST be ignored and not included in the state change.

            x-constraint:
            - /components/schemas/Port/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 1
        state:
          description: |-
            The capture state.
          type: string
          x-field-uid: 2
          x-enum:
            start:
              x-field-uid: 1
            stop:
              x-field-uid: 2
          enum:
          - start
          - stop
    State.Traffic.FlowTransmit:
      description: |-
        Provides state control of flow transmission.
      type: object
      required:
      - state
      properties:
        flow_names:
          description: |
            The names of flows to which the transmit state will be applied to. If the list of flow_names is empty or null the state will be applied to all configured flows.
            If the list is not empty any flow that is not included in the list of flow_names MUST be ignored and not included in the state change.

            x-constraint:
            - /components/schemas/Flow/properties/name


            x-constraint:
            - /components/schemas/Flow/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Flow/properties/name
          x-field-uid: 1
        state:
          description: |-
            The transmit state.
            If the value of the state property is 'start' then all flows defined by the 'flow_names' property will be started and the metric counters MUST be cleared prior to starting the flow(s).
            If the value of the state property is 'stop' then all flows defined by the 'flow_names' property will be stopped and the metric counters MUST NOT be cleared.
            If the value of the state property is 'pause' then all flows defined by the 'flow_names' property will be paused and the metric counters MUST NOT be cleared.
            If the value of the state property is 'resume' then any paused flows defined by the 'flow_names' property will start transmit at the point at which they were paused. Any flow that is stopped will start transmit at the beginning of the flow. The flow(s) MUST NOT have their metric counters cleared.
          type: string
          x-field-uid: 2
          x-enum:
            start:
              x-field-uid: 1
            stop:
              x-field-uid: 2
            pause:
              x-field-uid: 3
            resume:
              x-field-uid: 4
          enum:
          - start
          - stop
          - pause
          - resume
    State.Protocol.All:
      description: |-
        Sets all configured protocols to `start` or `stop` state.
        Setting protocol state to `start` shall be a no-op if preceding `set_config` API call was made with `config.options.protocol_options.auto_start_all` set to `true` or if all the configured protocols are already started.
      type: object
      required:
      - state
      properties:
        state:
          description: |-
            Protocol states
          type: string
          x-field-uid: 1
          x-enum:
            start:
              x-field-uid: 1
            stop:
              x-field-uid: 2
          enum:
          - start
          - stop
    State.Protocol.Route:
      description: |-
        Sets the state of configured routes
      type: object
      required:
      - state
      properties:
        names:
          description: |
            The names of device route objects to control. If no names are specified then all route objects that match the x-constraint will be affected.

            x-constraint:
            - /components/schemas/Bgp.V4RouteRange/properties/name
            - /components/schemas/Bgp.V6RouteRange/properties/name
            - /components/schemas/Isis.V4RouteRange/properties/name
            - /components/schemas/Isis.V6RouteRange/properties/name


            x-constraint:
            - /components/schemas/Bgp.V4RouteRange/properties/name
            - /components/schemas/Bgp.V6RouteRange/properties/name
            - /components/schemas/Isis.V4RouteRange/properties/name
            - /components/schemas/Isis.V6RouteRange/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Bgp.V4RouteRange/properties/name
          - /components/schemas/Bgp.V6RouteRange/properties/name
          - /components/schemas/Isis.V4RouteRange/properties/name
          - /components/schemas/Isis.V6RouteRange/properties/name
          x-field-uid: 1
        state:
          description: |-
            Route states
          type: string
          x-field-uid: 2
          x-enum:
            withdraw:
              x-field-uid: 1
            advertise:
              x-field-uid: 2
          enum:
          - withdraw
          - advertise
    State.Protocol.Lacp:
      description: |-
        Sets state of configured LACP
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            admin:
              x-field-uid: 1
          x-field-uid: 1
          enum:
          - admin
        admin:
          $ref: '#/components/schemas/State.Protocol.Lacp.Admin'
          x-field-uid: 2
    State.Protocol.Lacp.Admin:
      description: |-
        Sets admin state of LACP configured on LAG members
      required:
      - state
      properties:
        lag_member_names:
          description: |
            The names of LAG members (ports) for which the state has to be applied. An empty or null list will control all LAG members.

            x-constraint:
            - /components/schemas/Port/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 1
        state:
          description: |-
            The LACP Member admin state. 'up' will send LACPDUs with 'sync' flag set on selected member ports. 'down' will send LACPDUs with 'sync' flag unset on selected member ports.
          type: string
          x-field-uid: 2
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
    Control.Action:
      description: |-
        Request for triggering action against configured resources.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            protocol:
              x-field-uid: 1
          x-field-uid: 1
          enum:
          - protocol
        protocol:
          $ref: '#/components/schemas/Action.Protocol'
          x-field-uid: 2
    Control.Action.Response:
      description: |-
        Response for action triggered against configured resources along with warnings.
      type: object
      properties:
        warnings:
          description: |-
            List of warnings generated while triggering specified action
          type: array
          items:
            type: string
          x-field-uid: 1
        response:
          $ref: '#/components/schemas/Action.Response'
          x-field-uid: 2
    Action.Response:
      description: |-
        Response for action triggered against configured resources.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            protocol:
              x-field-uid: 1
          x-field-uid: 1
          enum:
          - protocol
        protocol:
          $ref: '#/components/schemas/Action.Response.Protocol'
          x-field-uid: 2
    Action.Protocol:
      description: |-
        Actions associated with protocols on configured resources.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            ipv4:
              x-field-uid: 1
            ipv6:
              x-field-uid: 2
            bgp:
              x-field-uid: 3
          x-field-uid: 1
          enum:
          - ipv4
          - ipv6
          - bgp
        ipv4:
          $ref: '#/components/schemas/Action.Protocol.Ipv4'
          x-field-uid: 2
        ipv6:
          $ref: '#/components/schemas/Action.Protocol.Ipv6'
          x-field-uid: 3
        bgp:
          $ref: '#/components/schemas/Action.Protocol.Bgp'
          x-field-uid: 4
    Action.Response.Protocol:
      description: |-
        Response for actions associated with protocols on configured resources.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            ipv4:
              x-field-uid: 1
            ipv6:
              x-field-uid: 2
          x-field-uid: 1
          enum:
          - ipv4
          - ipv6
        ipv4:
          $ref: '#/components/schemas/Action.Response.Protocol.Ipv4'
          x-field-uid: 2
        ipv6:
          $ref: '#/components/schemas/Action.Response.Protocol.Ipv6'
          x-field-uid: 3
    Action.Protocol.Ipv4:
      description: |-
        Actions associated with IPv4 on configured resources.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            ping:
              x-field-uid: 1
          x-field-uid: 1
          enum:
          - ping
        ping:
          $ref: '#/components/schemas/Action.Protocol.Ipv4.Ping'
          x-field-uid: 2
    Action.Response.Protocol.Ipv4:
      description: |-
        Response for actions associated with IPv4 on configured resources.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            ping:
              x-field-uid: 1
          x-field-uid: 1
          enum:
          - ping
        ping:
          $ref: '#/components/schemas/Action.Response.Protocol.Ipv4.Ping'
          x-field-uid: 2
    Action.Protocol.Ipv4.Ping:
      description: |-
        Request for initiating ping between multiple source and destination pairs.
      type: object
      properties:
        requests:
          description: |-
            List of IPv4 ping requests.
          type: array
          items:
            $ref: '#/components/schemas/Action.Protocol.Ipv4.PingRequest'
          x-field-uid: 1
    Action.Protocol.Ipv4.PingRequest:
      description: |-
        Under Review: Most ping request parameters are still TBD.

        Under Review: Most ping request parameters are still TBD.

        Request for initiating ping between a single source and destination pair.
        For ping request, 1 IPv4 ICMP Echo Request shall be sent and wait for ping response to either succeed or time out. The API wait timeout for each request shall be 300ms.
      type: object
      x-status:
        status: under_review
        information: Most ping request parameters are still TBD.
      properties:
        src_name:
          description: |
            Name of source IPv4 interface to be used.

            x-constraint:
            - /components/schemas/Device.Ipv4/properties/name


            x-constraint:
            - /components/schemas/Device.Ipv4/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv4/properties/name
          x-field-uid: 1
        dst_ip:
          description: |-
            Destination IPv4 address to ping.
          type: string
          format: ipv4
          x-field-uid: 2
    Action.Response.Protocol.Ipv4.Ping:
      description: |-
        Response for ping initiated between multiple source and destination pairs.
      type: object
      properties:
        responses:
          description: |-
            List of responses for IPv4 ping responses.
          type: array
          items:
            $ref: '#/components/schemas/Action.Response.Protocol.Ipv4.PingResponse'
          x-field-uid: 1
    Action.Response.Protocol.Ipv4.PingResponse:
      description: |-
        Response for ping initiated between a single source and destination pair.
      type: object
      required:
      - src_name
      - dst_ip
      - result
      properties:
        src_name:
          description: |
            Name of source IPv4 interface used for ping.

            x-constraint:
            - /components/schemas/Device.Ipv4/properties/name


            x-constraint:
            - /components/schemas/Device.Ipv4/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv4/properties/name
          x-field-uid: 1
        dst_ip:
          description: |-
            Destination IPv4 address used for ping.
          type: string
          format: ipv4
          x-field-uid: 2
        result:
          description: |-
            Result of the ping request.
          type: string
          x-field-uid: 3
          x-enum:
            succeeded:
              x-field-uid: 1
            failed:
              x-field-uid: 2
          enum:
          - succeeded
          - failed
    Action.Protocol.Ipv6:
      description: |-
        Actions associated with IPv6 on configured resources.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            ping:
              x-field-uid: 1
          x-field-uid: 1
          enum:
          - ping
        ping:
          $ref: '#/components/schemas/Action.Protocol.Ipv6.Ping'
          x-field-uid: 2
    Action.Response.Protocol.Ipv6:
      description: |-
        Response for actions associated with IPv6 on configured resources.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            ping:
              x-field-uid: 1
          x-field-uid: 1
          enum:
          - ping
        ping:
          $ref: '#/components/schemas/Action.Response.Protocol.Ipv6.Ping'
          x-field-uid: 2
    Action.Protocol.Ipv6.Ping:
      description: |-
        Request for initiating ping between multiple source and destination pairs.
      type: object
      properties:
        requests:
          description: |-
            List of IPv6 ping requests.
          type: array
          items:
            $ref: '#/components/schemas/Action.Protocol.Ipv6.PingRequest'
          x-field-uid: 1
    Action.Protocol.Ipv6.PingRequest:
      description: |-
        Under Review: Most ping request parameters are still TBD.

        Under Review: Most ping request parameters are still TBD.

        Request for initiating ping between a single source and destination pair.
        For ping request, 1 IPv6 ICMP Echo Request shall be sent and wait for ping response to either succeed or time out. The API wait timeout for each request shall be 300ms.
      type: object
      x-status:
        status: under_review
        information: Most ping request parameters are still TBD.
      properties:
        src_name:
          description: |
            Name of source IPv6 interface to be used.

            x-constraint:
            - /components/schemas/Device.Ipv6/properties/name


            x-constraint:
            - /components/schemas/Device.Ipv6/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv6/properties/name
          x-field-uid: 1
        dst_ip:
          description: |-
            Destination IPv6 address to ping.
          type: string
          format: ipv6
          x-field-uid: 2
    Action.Response.Protocol.Ipv6.Ping:
      description: |-
        Response for ping initiated between multiple source and destination pairs.
      type: object
      properties:
        responses:
          description: |-
            List of responses for IPv6 ping responses.
          type: array
          items:
            $ref: '#/components/schemas/Action.Response.Protocol.Ipv6.PingResponse'
          x-field-uid: 1
    Action.Response.Protocol.Ipv6.PingResponse:
      description: |-
        Response for ping initiated between a single source and destination pair.
      type: object
      required:
      - src_name
      - dst_ip
      - result
      properties:
        src_name:
          description: |
            Name of source IPv6 interface used for ping.

            x-constraint:
            - /components/schemas/Device.Ipv6/properties/name


            x-constraint:
            - /components/schemas/Device.Ipv6/properties/name
          type: string
          x-constraint:
          - /components/schemas/Device.Ipv6/properties/name
          x-field-uid: 1
        dst_ip:
          description: |-
            Destination IPv6 address used for ping.
          type: string
          format: ipv6
          x-field-uid: 2
        result:
          description: |-
            Result of the ping request.
          type: string
          x-field-uid: 3
          x-enum:
            succeeded:
              x-field-uid: 1
            failed:
              x-field-uid: 2
          enum:
          - succeeded
          - failed
    Action.Protocol.Bgp:
      description: |-
        Actions associated with BGP on configured resources.
      type: object
      required:
      - choice
      properties:
        choice:
          type: string
          x-enum:
            notification:
              x-field-uid: 1
            initiate_graceful_restart:
              x-field-uid: 2
          x-field-uid: 1
          enum:
          - notification
          - initiate_graceful_restart
        notification:
          $ref: '#/components/schemas/Action.Protocol.Bgp.Notification'
          x-field-uid: 2
        initiate_graceful_restart:
          $ref: '#/components/schemas/Action.Protocol.Bgp.InitiateGracefulRestart'
          x-field-uid: 3
    Action.Protocol.Bgp.Notification:
      description: "A NOTIFICATION message is sent when an error is detected with\
        \ the BGP session, such as hold timer expiring, misconfigured AS number  or\
        \ a BGP session reset is requested. This causes the BGP connection to close.\
        \ Send explicit NOTIFICATIONs for list of specified  BGP peers. If a user\
        \ wants to send custom Error Code and Error Subcode the custom object should\
        \ be configured. A user can send IANA defined BGP NOTIFICATIONs according\
        \ to https://www.iana.org/assignments/bgp-parameters/bgp-parameters.xhtml. "
      type: object
      properties:
        names:
          description: |
            The names of BGP Peers to send NOTIFICATION to. If no name is specified then NOTIFICATION will be sent to all configured BGP peers.

            x-constraint:
            - /components/schemas/Device.Bgp/properties/name


            x-constraint:
            - /components/schemas/Device.Bgp/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Device.Bgp/properties/name
          x-field-uid: 1
        choice:
          description: |-
            Each BGP NOTIFICATION message includes an Error Code field indicating what type of problem occurred. For certain Error Codes, an Error  Subcode field provides additional details about the specific nature of the problem.  The choice value will provide the Error Code used in NOTIFICATION message.  The Subcode can be set for each of the corresponding errors except for Hold Timer Expired error and BGP Finite State Machine error.  In both of these cases Subcode 0 will be sent. If a user wants to use non zero Sub Code then custom choice can be used.
          type: string
          x-field-uid: 2
          default: cease
          x-enum:
            cease:
              x-field-uid: 1
            message_header_error:
              x-field-uid: 2
            open_message_error:
              x-field-uid: 3
            update_message_error:
              x-field-uid: 4
            hold_timer_expired:
              x-field-uid: 5
            finite_state_machine_error:
              x-field-uid: 6
            custom:
              x-field-uid: 7
          enum:
          - cease
          - message_header_error
          - open_message_error
          - update_message_error
          - hold_timer_expired
          - finite_state_machine_error
          - custom
        cease:
          $ref: '#/components/schemas/Device.Bgp.CeaseError'
          x-field-uid: 3
        message_header_error:
          $ref: '#/components/schemas/Device.Bgp.MessageHeaderError'
          x-field-uid: 4
        open_message_error:
          $ref: '#/components/schemas/Device.Bgp.OpenMessageError'
          x-field-uid: 5
        update_message_error:
          $ref: '#/components/schemas/Device.Bgp.UpdateMessageError'
          x-field-uid: 6
        hold_timer_expired:
          $ref: '#/components/schemas/Device.Bgp.HoldTimerExpired'
          x-field-uid: 7
        finite_state_machine_error:
          $ref: '#/components/schemas/Device.Bgp.FiniteStateMachineError'
          x-field-uid: 8
        custom:
          $ref: '#/components/schemas/Device.Bgp.CustomError'
          x-field-uid: 9
    Action.Protocol.Bgp.InitiateGracefulRestart:
      description: |-
        Initiates BGP Graceful Restart process for the selected BGP peers. If no name is specified then Graceful Restart will be sent to all configured BGP peers.
      type: object
      properties:
        peer_names:
          description: |
            The names of device BGP peers objects to control.

            x-constraint:
            - /components/schemas/Device.Bgp/properties/name


            x-constraint:
            - /components/schemas/Device.Bgp/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Device.Bgp/properties/name
          x-field-uid: 1
        restart_delay:
          description: "Duration (in seconds) after which selected BGP peers will\
            \ initiate \nGraceful restart by sending the Open Message with Restart\
            \ State bit set in the Graceful Restart capability."
          type: integer
          format: uint32
          maximum: 3600
          default: 30
          x-field-uid: 2
    Metrics.Request:
      description: |-
        Request to traffic generator for metrics of choice.
      type: object
      properties:
        choice:
          type: string
          default: port
          x-field-uid: 1
          x-enum:
            port:
              x-field-uid: 1
            flow:
              x-field-uid: 2
            bgpv4:
              x-field-uid: 3
            bgpv6:
              x-field-uid: 4
            isis:
              x-field-uid: 5
            lag:
              x-field-uid: 6
            lacp:
              x-field-uid: 7
            lldp:
              x-field-uid: 8
            rsvp:
              x-field-uid: 9
          enum:
          - port
          - flow
          - bgpv4
          - bgpv6
          - isis
          - lag
          - lacp
          - lldp
          - rsvp
        port:
          $ref: '#/components/schemas/Port.Metrics.Request'
          x-field-uid: 2
        flow:
          $ref: '#/components/schemas/Flow.Metrics.Request'
          x-field-uid: 3
        bgpv4:
          $ref: '#/components/schemas/Bgpv4.Metrics.Request'
          x-field-uid: 4
        bgpv6:
          $ref: '#/components/schemas/Bgpv6.Metrics.Request'
          x-field-uid: 5
        isis:
          $ref: '#/components/schemas/Isis.Metrics.Request'
          x-field-uid: 6
        lag:
          $ref: '#/components/schemas/Lag.Metrics.Request'
          x-field-uid: 7
        lacp:
          $ref: '#/components/schemas/Lacp.Metrics.Request'
          x-field-uid: 8
        lldp:
          $ref: '#/components/schemas/Lldp.Metrics.Request'
          x-field-uid: 9
        rsvp:
          $ref: '#/components/schemas/Rsvp.Metrics.Request'
          x-field-uid: 10
    Metrics.Response:
      description: |-
        Response containing chosen traffic generator metrics.
      type: object
      properties:
        choice:
          type: string
          default: port_metrics
          x-field-uid: 1
          x-enum:
            flow_metrics:
              x-field-uid: 1
            port_metrics:
              x-field-uid: 2
            bgpv4_metrics:
              x-field-uid: 3
            bgpv6_metrics:
              x-field-uid: 4
            isis_metrics:
              x-field-uid: 5
            lag_metrics:
              x-field-uid: 6
            lacp_metrics:
              x-field-uid: 7
            lldp_metrics:
              x-field-uid: 8
            rsvp_metrics:
              x-field-uid: 9
          enum:
          - flow_metrics
          - port_metrics
          - bgpv4_metrics
          - bgpv6_metrics
          - isis_metrics
          - lag_metrics
          - lacp_metrics
          - lldp_metrics
          - rsvp_metrics
        port_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Port.Metric'
          x-field-uid: 2
        flow_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Flow.Metric'
          x-field-uid: 3
        bgpv4_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Bgpv4.Metric'
          x-field-uid: 4
        bgpv6_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Bgpv6.Metric'
          x-field-uid: 5
        isis_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Isis.Metric'
          x-field-uid: 6
        lag_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Lag.Metric'
          x-field-uid: 7
        lacp_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Lacp.Metric'
          x-field-uid: 8
        lldp_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Lldp.Metric'
          x-field-uid: 9
        rsvp_metrics:
          type: array
          items:
            $ref: '#/components/schemas/Rsvp.Metric'
          x-field-uid: 10
    Port.Metrics.Request:
      description: |-
        The port result request to the traffic generator
      type: object
      properties:
        port_names:
          description: |
            The names of objects to return results for. An empty list will return all port row results.

            x-constraint:
            - /components/schemas/Port/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 1
        column_names:
          description: |-
            The list of column names that the returned result set will contain. If the list is empty then all columns will be returned. The name of the port cannot be excluded.
          type: array
          items:
            type: string
            x-enum:
              transmit:
                x-field-uid: 1
              location:
                x-field-uid: 2
              link:
                x-field-uid: 3
              capture:
                x-field-uid: 4
              frames_tx:
                x-field-uid: 5
              frames_rx:
                x-field-uid: 6
              bytes_tx:
                x-field-uid: 7
              bytes_rx:
                x-field-uid: 8
              frames_tx_rate:
                x-field-uid: 9
              frames_rx_rate:
                x-field-uid: 10
              bytes_tx_rate:
                x-field-uid: 11
              bytes_rx_rate:
                x-field-uid: 12
            enum:
            - transmit
            - location
            - link
            - capture
            - frames_tx
            - frames_rx
            - bytes_tx
            - bytes_rx
            - frames_tx_rate
            - frames_rx_rate
            - bytes_tx_rate
            - bytes_rx_rate
          x-field-uid: 2
    Port.Metric:
      type: object
      properties:
        name:
          description: |
            The name of a configured port

            x-constraint:
            - /components/schemas/Port/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 1
        location:
          description: |-
            The state of the connection to the test port location. The format should be the configured port location along with  any custom connection state message.
          type: string
          x-field-uid: 2
        link:
          description: |-
            The state of the test port link The string can be up, down or a custom error message.
          type: string
          x-field-uid: 3
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
        capture:
          description: |-
            The state of the test port capture infrastructure. The string can be started, stopped or a custom error message.
          type: string
          x-field-uid: 4
          x-enum:
            started:
              x-field-uid: 1
            stopped:
              x-field-uid: 2
          enum:
          - started
          - stopped
        frames_tx:
          description: |-
            The current total number of frames transmitted
          type: integer
          format: uint64
          x-field-uid: 5
        frames_rx:
          description: |-
            The current total number of valid frames received
          type: integer
          format: uint64
          x-field-uid: 6
        bytes_tx:
          description: |-
            The current total number of bytes transmitted
          type: integer
          format: uint64
          x-field-uid: 7
        bytes_rx:
          description: |-
            The current total number of valid bytes received
          type: integer
          format: uint64
          x-field-uid: 8
        frames_tx_rate:
          description: |-
            The current rate of frames transmitted
          type: number
          x-field-uid: 9
        frames_rx_rate:
          description: |-
            The current rate of valid frames received
          type: number
          x-field-uid: 10
        bytes_tx_rate:
          description: |-
            The current rate of bytes transmitted
          type: number
          x-field-uid: 11
        bytes_rx_rate:
          description: |-
            The current rate of bytes received
          type: number
          x-field-uid: 12
        transmit:
          description: |-
            The transmit state of the flow.
          type: string
          x-field-uid: 13
          x-enum:
            started:
              x-field-uid: 1
            stopped:
              x-field-uid: 2
          enum:
          - started
          - stopped
    Flow.Metrics.Request:
      description: |-
        The container for a flow metric request.
      type: object
      properties:
        flow_names:
          description: |
            Flow metrics will be retrieved for these flow names.
            If no flow names are specified then all flows will be returned.

            x-constraint:
            - /components/schemas/Flow/properties/name


            x-constraint:
            - /components/schemas/Flow/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Flow/properties/name
          x-field-uid: 1
        metric_names:
          description: |-
            The list of metric names that the returned result set will contain. If the list is empty then all metrics will be returned.
          type: array
          items:
            type: string
            x-enum:
              transmit:
                x-field-uid: 1
              frames_tx:
                x-field-uid: 2
              frames_rx:
                x-field-uid: 3
              bytes_tx:
                x-field-uid: 4
              bytes_rx:
                x-field-uid: 5
              frames_tx_rate:
                x-field-uid: 6
              frames_rx_rate:
                x-field-uid: 7
            enum:
            - transmit
            - frames_tx
            - frames_rx
            - bytes_tx
            - bytes_rx
            - frames_tx_rate
            - frames_rx_rate
          x-field-uid: 3
        tagged_metrics:
          $ref: '#/components/schemas/Flow.TaggedMetrics.Filter'
          x-field-uid: 4
    Flow.TaggedMetrics.Filter:
      description: |-
        Filter for tagged metrics
      type: object
      properties:
        include:
          description: |-
            Controls inclusion/exclusion of tagged metrics when fetching flow metrics.
          type: boolean
          default: true
          x-field-uid: 1
        include_empty_metrics:
          description: |-
            Controls inclusion/exclusion of tagged metrics where each underlying attributes has zero value or absent value.
          type: boolean
          default: false
          x-field-uid: 2
        metric_names:
          description: |-
            The list of metric names that the returned result set will contain. If the list is empty then all metrics will be returned.
          type: array
          items:
            type: string
            x-enum:
              frames_tx:
                x-field-uid: 1
              frames_rx:
                x-field-uid: 2
              bytes_tx:
                x-field-uid: 3
              bytes_rx:
                x-field-uid: 4
              frames_tx_rate:
                x-field-uid: 5
              frames_rx_rate:
                x-field-uid: 6
            enum:
            - frames_tx
            - frames_rx
            - bytes_tx
            - bytes_rx
            - frames_tx_rate
            - frames_rx_rate
          x-field-uid: 3
        filters:
          description: |-
            List of filters to selectively fetch tagged metrics with certain tag and corresponding value.
          type: array
          items:
            $ref: '#/components/schemas/Flow.MetricTag.Filter'
          x-field-uid: 4
    Flow.MetricTag.Filter:
      description: |-
        A container for filtering ingress and/or egress metric tags.
        The Tx stats may not be applicable in both the request and response filter.
      type: object
      properties:
        name:
          description: |-
            A metric tag name that MUST exist in a flow packet or
            flow egress_packet configuration
          type: string
          x-field-uid: 1
        values:
          description: |-
            A list of filters that can be applied to the metric tag name.
            By default all values will be included in the flow metric results.
          type: array
          items:
            type: string
          x-field-uid: 2
    Flow.Metric:
      description: |-
        A container for flow metrics.
        The container is keyed by the name, port_tx and port_rx.
      type: object
      properties:
        name:
          description: |-
            The name of the flow
          type: string
          example: Tx -> Rx
          x-field-uid: 1
        port_tx:
          description: |-
            The name of the transmit port
          type: string
          x-field-uid: 2
        port_rx:
          description: |-
            The name of the receive port
          type: string
          x-field-uid: 3
        transmit:
          description: |-
            The transmit state of the flow.
          type: string
          x-field-uid: 5
          x-enum:
            started:
              x-field-uid: 1
            stopped:
              x-field-uid: 2
            paused:
              x-field-uid: 3
          enum:
          - started
          - stopped
          - paused
        frames_tx:
          description: |-
            The current total number of frames transmitted
          type: integer
          format: uint64
          x-field-uid: 6
        frames_rx:
          description: |-
            The current total number of valid frames received
          type: integer
          format: uint64
          x-field-uid: 7
        bytes_tx:
          description: |-
            The current total number of bytes transmitted
          type: integer
          format: uint64
          x-field-uid: 8
        bytes_rx:
          description: |-
            The current total number of bytes received
          type: integer
          format: uint64
          x-field-uid: 9
        frames_tx_rate:
          description: |-
            The current rate of frames transmitted
          type: number
          x-field-uid: 10
        frames_rx_rate:
          description: |-
            The current rate of valid frames received
          type: number
          x-field-uid: 11
        loss:
          description: |-
            The percentage of lost frames
          type: number
          x-field-uid: 12
        timestamps:
          $ref: '#/components/schemas/Metric.Timestamp'
          x-field-uid: 13
        latency:
          $ref: '#/components/schemas/Metric.Latency'
          x-field-uid: 14
        tagged_metrics:
          description: |-
            List of metrics corresponding to a set of values applicable
            for configured metric tags in ingress or egress packet header fields of corresponding flow.
            The container is keyed by list of tag-value pairs.
          type: array
          items:
            $ref: '#/components/schemas/Flow.TaggedMetric'
          x-field-uid: 15
    Flow.TaggedMetric:
      description: |-
        Metrics for each set of values applicable for configured
        metric tags in ingress or egress packet header fields of corresponding flow.
        The container is keyed by list of tag-value pairs.
      type: object
      properties:
        tags:
          description: |-
            List of tag and value pairs
          type: array
          items:
            $ref: '#/components/schemas/Flow.MetricTag'
          x-field-uid: 1
        frames_tx:
          description: |-
            The current total number of frames transmitted
          type: integer
          format: uint64
          x-field-uid: 2
        frames_rx:
          description: |-
            The current total number of valid frames received
          type: integer
          format: uint64
          x-field-uid: 3
        bytes_tx:
          description: |-
            The current total number of bytes transmitted
          type: integer
          format: uint64
          x-field-uid: 4
        bytes_rx:
          description: |-
            The current total number of bytes received
          type: integer
          format: uint64
          x-field-uid: 5
        frames_tx_rate:
          description: |-
            The current rate of frames transmitted
          type: number
          x-field-uid: 6
        frames_rx_rate:
          description: |-
            The current rate of valid frames received
          type: number
          x-field-uid: 7
        loss:
          description: |-
            The percentage of lost frames
          type: number
          x-field-uid: 8
        timestamps:
          $ref: '#/components/schemas/Metric.Timestamp'
          x-field-uid: 9
        latency:
          $ref: '#/components/schemas/Metric.Latency'
          x-field-uid: 10
    Flow.MetricTag:
      type: object
      properties:
        name:
          description: |-
            Name of packet field metric tag
          type: string
          x-field-uid: 1
        value:
          $ref: '#/components/schemas/Flow.MetricTag.Value'
          x-field-uid: 2
    Flow.MetricTag.Value:
      description: |-
        A container for metric tag value
      type: object
      properties:
        choice:
          description: |-
            Available formats for metric tag value
          type: string
          default: hex
          x-enum:
            hex:
              x-field-uid: 1
            str:
              x-field-uid: 2
          x-field-uid: 1
          enum:
          - hex
          - str
        hex:
          description: |-
            Value represented in hexadecimal format
          type: string
          format: hex
          x-field-uid: 2
        str:
          description: |-
            Value represented in string format
          type: string
          x-field-uid: 3
    Metric.Timestamp:
      description: |-
        The container for timestamp metrics.
        The container will be empty if the timestamp has not been configured for
        the flow.
      type: object
      properties:
        first_timestamp_ns:
          description: |-
            First timestamp in nanoseconds
          type: number
          format: double
          x-field-uid: 1
        last_timestamp_ns:
          description: |-
            Last timestamp in nanoseconds
          type: number
          format: double
          x-field-uid: 2
    Metric.Latency:
      description: "The container for latency metrics. \nThe min/max/avg values are\
        \ dependent on the type of latency measurement \nmode that is configured.\n\
        The container will be empty if the latency has not been configured for\nthe\
        \ flow."
      type: object
      properties:
        minimum_ns:
          description: |-
            Minimum latency in nanoseconds
          type: number
          format: double
          x-field-uid: 1
        maximum_ns:
          description: |-
            Maximum latency in nanoseconds
          type: number
          format: double
          x-field-uid: 2
        average_ns:
          description: |-
            Average latency in nanoseconds
          type: number
          format: double
          x-field-uid: 3
    Bgpv4.Metrics.Request:
      description: |-
        The request to retrieve BGPv4 per peer metrics/statistics.
      type: object
      properties:
        peer_names:
          description: |
            The names of BGPv4 peers to return results for. An empty list will return results for all BGPv4 peers.

            x-constraint:
            - /components/schemas/Bgp.V4peer/properties/name


            x-constraint:
            - /components/schemas/Bgp.V4peer/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Bgp.V4peer/properties/name
          x-field-uid: 1
        column_names:
          description: |-
            The list of column names that the returned result set will contain. If the list is empty then all columns will be returned except for any result_groups. The name of the BGPv4 peer cannot be excluded.
          type: array
          items:
            type: string
            x-enum:
              session_state:
                x-field-uid: 1
              session_flap_count:
                x-field-uid: 2
              routes_advertised:
                x-field-uid: 3
              routes_received:
                x-field-uid: 4
              route_withdraws_sent:
                x-field-uid: 5
              route_withdraws_received:
                x-field-uid: 6
              updates_sent:
                x-field-uid: 7
              updates_received:
                x-field-uid: 8
              opens_sent:
                x-field-uid: 9
              opens_received:
                x-field-uid: 10
              keepalives_sent:
                x-field-uid: 11
              keepalives_received:
                x-field-uid: 12
              notifications_sent:
                x-field-uid: 13
              notifications_received:
                x-field-uid: 14
              fsm_state:
                x-field-uid: 15
              end_of_rib_received:
                x-field-uid: 16
            enum:
            - session_state
            - session_flap_count
            - routes_advertised
            - routes_received
            - route_withdraws_sent
            - route_withdraws_received
            - updates_sent
            - updates_received
            - opens_sent
            - opens_received
            - keepalives_sent
            - keepalives_received
            - notifications_sent
            - notifications_received
            - fsm_state
            - end_of_rib_received
          x-field-uid: 2
    Bgpv4.Metric:
      description: |-
        BGPv4 per peer statistics information.
      type: object
      properties:
        name:
          description: |-
            The name of a configured BGPv4 peer.
          type: string
          x-field-uid: 1
        session_state:
          description: |-
            Session state as up or down. Up refers to an Established state and Down refers to any other state.
          type: string
          x-field-uid: 2
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
        session_flap_count:
          description: |-
            Number of times the session went from Up to Down state.
          type: integer
          format: uint64
          x-field-uid: 3
        routes_advertised:
          description: |-
            Number of routes advertised.
          type: integer
          format: uint64
          x-field-uid: 4
        routes_received:
          description: |-
            Number of routes received.
          type: integer
          format: uint64
          x-field-uid: 5
        route_withdraws_sent:
          description: |-
            Number of route withdraws sent.
          type: integer
          format: uint64
          x-field-uid: 6
        route_withdraws_received:
          description: |-
            Number of route withdraws received.
          type: integer
          format: uint64
          x-field-uid: 7
        updates_sent:
          description: |-
            Number of Update messages sent.
          type: integer
          format: uint64
          x-field-uid: 8
        updates_received:
          description: |-
            Number of Update messages received.
          type: integer
          format: uint64
          x-field-uid: 9
        opens_sent:
          description: |-
            Number of Open messages sent.
          type: integer
          format: uint64
          x-field-uid: 10
        opens_received:
          description: |-
            Number of Open messages received.
          type: integer
          format: uint64
          x-field-uid: 11
        keepalives_sent:
          description: |-
            Number of Keepalive messages sent.
          type: integer
          format: uint64
          x-field-uid: 12
        keepalives_received:
          description: |-
            Number of Keepalive messages received.
          type: integer
          format: uint64
          x-field-uid: 13
        notifications_sent:
          description: |-
            Number of Notification messages sent.
          type: integer
          format: uint64
          x-field-uid: 14
        notifications_received:
          description: |-
            Number of Notification messages received.
          type: integer
          format: uint64
          x-field-uid: 15
        fsm_state:
          description: |-
            BGP peer FSM (Finite State Machine) state as Idle, Connect, Active, OpenSent, OpenConfirm and Established. In all the states except Established the BGP session is down. Idle refers to the Idle state of the FSM. Connect refers to the state where the session is waiting for the underlying transport session to be established. Active refers to the state where the session is awaiting for a connection from the remote peer. OpenSent refers to the state where the session is in the process of being established. The local system has sent an OPEN message. OpenConfirm refers to the state where the session is in the process of being established. The local system has sent and received an OPEN message and is awaiting a NOTIFICATION or KEEPALIVE message from remote peer. Established refers to the state where the BGP session with the peer is established.
          type: string
          x-field-uid: 16
          x-enum:
            idle:
              x-field-uid: 1
            connect:
              x-field-uid: 2
            active:
              x-field-uid: 3
            opensent:
              x-field-uid: 4
            openconfirm:
              x-field-uid: 5
            established:
              x-field-uid: 6
          enum:
          - idle
          - connect
          - active
          - opensent
          - openconfirm
          - established
        end_of_rib_received:
          description: |-
            Number of End-of-RIB markers received indicating the completion of the initial routing update for a  particular <AFI, SAFI> address family after the session is established. For the IPv4 unicast address family, the End-of-RIB marker is an UPDATE message with the minimum length. For any other address family, it is an UPDATE message that contains only the MP_UNREACH_NLRI attribute with  no withdrawn routes for that <AFI, SAFI>.
          type: integer
          format: uint64
          x-field-uid: 17
    Bgpv6.Metrics.Request:
      description: |-
        The request to retrieve BGPv6 per peer metrics/statistics.
      type: object
      properties:
        peer_names:
          description: |
            The names of BGPv6 peers to return results for. An empty list will return results for all BGPv6 peers.

            x-constraint:
            - /components/schemas/Bgp.V6peer/properties/name


            x-constraint:
            - /components/schemas/Bgp.V6peer/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Bgp.V6peer/properties/name
          x-field-uid: 1
        column_names:
          description: |-
            The list of column names that the returned result set will contain. If the list is empty then all columns will be returned except for any result_groups. The name of the BGPv6 peer cannot be excluded.
          type: array
          items:
            type: string
            x-enum:
              session_state:
                x-field-uid: 1
              session_flap_count:
                x-field-uid: 2
              routes_advertised:
                x-field-uid: 3
              routes_received:
                x-field-uid: 4
              route_withdraws_sent:
                x-field-uid: 5
              route_withdraws_received:
                x-field-uid: 6
              updates_sent:
                x-field-uid: 7
              updates_received:
                x-field-uid: 8
              opens_sent:
                x-field-uid: 9
              opens_received:
                x-field-uid: 10
              keepalives_sent:
                x-field-uid: 11
              keepalives_received:
                x-field-uid: 12
              notifications_sent:
                x-field-uid: 13
              notifications_received:
                x-field-uid: 14
              fsm_state:
                x-field-uid: 15
              end_of_rib_received:
                x-field-uid: 16
            enum:
            - session_state
            - session_flap_count
            - routes_advertised
            - routes_received
            - route_withdraws_sent
            - route_withdraws_received
            - updates_sent
            - updates_received
            - opens_sent
            - opens_received
            - keepalives_sent
            - keepalives_received
            - notifications_sent
            - notifications_received
            - fsm_state
            - end_of_rib_received
          x-field-uid: 2
    Bgpv6.Metric:
      description: |-
        BGPv6 per peer statistics information.
      type: object
      properties:
        name:
          description: |-
            The name of a configured BGPv6 peer.
          type: string
          x-field-uid: 1
        session_state:
          description: |-
            Session state as up or down. Up refers to an Established state and Down refers to any other state.
          type: string
          x-field-uid: 2
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
        session_flap_count:
          description: |-
            Number of times the session went from Up to Down state.
          type: integer
          format: uint64
          x-field-uid: 3
        routes_advertised:
          description: |-
            Number of routes advertised.
          type: integer
          format: uint64
          x-field-uid: 4
        routes_received:
          description: |-
            Number of routes received.
          type: integer
          format: uint64
          x-field-uid: 5
        route_withdraws_sent:
          description: |-
            Number of route withdraws sent.
          type: integer
          format: uint64
          x-field-uid: 6
        route_withdraws_received:
          description: |-
            Number of route withdraws received.
          type: integer
          format: uint64
          x-field-uid: 7
        updates_sent:
          description: |-
            Number of Update messages sent.
          type: integer
          format: uint64
          x-field-uid: 8
        updates_received:
          description: |-
            Number of Update messages received.
          type: integer
          format: uint64
          x-field-uid: 9
        opens_sent:
          description: |-
            Number of Open messages sent.
          type: integer
          format: uint64
          x-field-uid: 10
        opens_received:
          description: |-
            Number of Open messages received.
          type: integer
          format: uint64
          x-field-uid: 11
        keepalives_sent:
          description: |-
            Number of Keepalive messages sent.
          type: integer
          format: uint64
          x-field-uid: 12
        keepalives_received:
          description: |-
            Number of Keepalive messages received.
          type: integer
          format: uint64
          x-field-uid: 13
        notifications_sent:
          description: |-
            Number of Notification messages sent.
          type: integer
          format: uint64
          x-field-uid: 14
        notifications_received:
          description: |-
            Number of Notification messages received.
          type: integer
          format: uint64
          x-field-uid: 15
        fsm_state:
          description: |-
            BGP peer FSM (Finite State Machine) state as Idle, Connect, Active, OpenSent, OpenConfirm and Established. In all the states except Established the BGP session is down. Idle refers to the Idle state of the FSM. Connect refers to the state where the session is waiting for the underlying transport session to be established. Active refers to the state where the session is awaiting for a connection from the remote peer. OpenSent refers to the state where the session is in the process of being established. The local system has sent an OPEN message. OpenConfirm refers to the state where the session is in the process of being established. The local system has sent and received an OPEN message and is awaiting a NOTIFICATION or KEEPALIVE message from remote peer. Established refers to the state where the BGP session with the peer is established.
          type: string
          x-field-uid: 16
          x-enum:
            idle:
              x-field-uid: 1
            connect:
              x-field-uid: 2
            active:
              x-field-uid: 3
            opensent:
              x-field-uid: 4
            openconfirm:
              x-field-uid: 5
            established:
              x-field-uid: 6
          enum:
          - idle
          - connect
          - active
          - opensent
          - openconfirm
          - established
        end_of_rib_received:
          description: |-
            Number of End-of-RIB markers received indicating the completion of the initial routing update for a  particular <AFI, SAFI> address family after the session is established. For the IPv4 unicast address family, the End-of-RIB marker is an UPDATE message with the minimum length. For any other address family, it is an UPDATE message that contains only the MP_UNREACH_NLRI attribute with  no withdrawn routes for that <AFI, SAFI>.
          type: integer
          format: uint64
          x-field-uid: 17
    Isis.Metrics.Request:
      description: |-
        The request to retrieve ISIS per Router metrics/statistics.
      type: object
      properties:
        router_names:
          description: |
            The names of ISIS Routers to return results for. An empty list will return results for all ISIS router.

            x-constraint:
            - /components/schemas/Device.IsisRouter/properties/name


            x-constraint:
            - /components/schemas/Device.IsisRouter/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Device.IsisRouter/properties/name
          x-field-uid: 1
        column_names:
          description: |-
            The list of column names that the returned result set will contain. If the list is empty then all columns will be returned except for any result_groups. The name of the ISIS Router cannot be excluded.
          type: array
          items:
            type: string
            x-enum:
              l1_sessions_up:
                x-field-uid: 1
              l1_session_flap:
                x-field-uid: 2
              l1_database_size:
                x-field-uid: 3
              l1_broadcast_hellos_sent:
                x-field-uid: 4
              l1_broadcast_hellos_received:
                x-field-uid: 5
              l1_point_to_point_hellos_sent:
                x-field-uid: 6
              l1_point_to_point_hellos_received:
                x-field-uid: 7
              l1_psnp_sent:
                x-field-uid: 8
              l1_psnp_received:
                x-field-uid: 9
              l1_csnp_sent:
                x-field-uid: 10
              l1_csnp_received:
                x-field-uid: 11
              l1_lsp_sent:
                x-field-uid: 12
              l1_lsp_received:
                x-field-uid: 13
              l2_sessions_up:
                x-field-uid: 14
              l2_session_flap:
                x-field-uid: 15
              l2_database_size:
                x-field-uid: 16
              l2_broadcast_hellos_sent:
                x-field-uid: 17
              l2_broadcast_hellos_received:
                x-field-uid: 18
              l2_point_to_point_hellos_sent:
                x-field-uid: 19
              l2_point_to_point_hellos_received:
                x-field-uid: 20
              l2_psnp_sent:
                x-field-uid: 21
              l2_psnp_received:
                x-field-uid: 22
              l2_csnp_sent:
                x-field-uid: 23
              l2_csnp_received:
                x-field-uid: 24
              l2_lsp_sent:
                x-field-uid: 25
              l2_lsp_received:
                x-field-uid: 26
            enum:
            - l1_sessions_up
            - l1_session_flap
            - l1_database_size
            - l1_broadcast_hellos_sent
            - l1_broadcast_hellos_received
            - l1_point_to_point_hellos_sent
            - l1_point_to_point_hellos_received
            - l1_psnp_sent
            - l1_psnp_received
            - l1_csnp_sent
            - l1_csnp_received
            - l1_lsp_sent
            - l1_lsp_received
            - l2_sessions_up
            - l2_session_flap
            - l2_database_size
            - l2_broadcast_hellos_sent
            - l2_broadcast_hellos_received
            - l2_point_to_point_hellos_sent
            - l2_point_to_point_hellos_received
            - l2_psnp_sent
            - l2_psnp_received
            - l2_csnp_sent
            - l2_csnp_received
            - l2_lsp_sent
            - l2_lsp_received
          x-field-uid: 2
    Isis.Metric:
      description: |-
        ISIS per router statistics information.
      type: object
      properties:
        name:
          description: |-
            The name of a configured ISIS router.
          type: string
          x-field-uid: 1
        l1_sessions_up:
          description: |-
            The number of Level 1 (L1) sessions that are fully up.
          type: integer
          format: uint32
          x-field-uid: 2
        l1_session_flap:
          description: |-
            The number of Level 1 Sessions Flap.
          type: integer
          format: uint64
          x-field-uid: 3
        l1_broadcast_hellos_sent:
          description: |-
            Number of Level 1 Hello messages sent.
          type: integer
          format: uint64
          x-field-uid: 4
        l1_broadcast_hellos_received:
          description: |-
            Number of Level 1 Hello messages received.
          type: integer
          format: uint64
          x-field-uid: 5
        l1_point_to_point_hellos_sent:
          description: |-
            Number of Level 1 Point-to-Point(P2P) Hello messages sent.
          type: integer
          format: uint64
          x-field-uid: 6
        l1_point_to_point_hellos_received:
          description: |-
            Number of Level 1 Point-to-Point(P2P) Hello messages received.
          type: integer
          format: uint64
          x-field-uid: 7
        l1_database_size:
          description: |-
            Number of Link State Updates (LSPs) in the Level 1 LSP Databases.
          type: integer
          format: uint64
          x-field-uid: 8
        l1_psnp_sent:
          description: |-
            Number of Level 1 (L1) Partial Sequence Number Packet (PSNPs) sent.
          type: integer
          format: uint64
          x-field-uid: 9
        l1_psnp_received:
          description: |-
            Number of Level 1 (L1) Complete Sequence Number Packet (PSNPs) received.
          type: integer
          format: uint64
          x-field-uid: 10
        l1_csnp_sent:
          description: |-
            Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) sent.
          type: integer
          format: uint64
          x-field-uid: 11
        l1_csnp_received:
          description: |-
            Number of Level 1 (L1) Complete Sequence Number Packet (CSNPs) received.
          type: integer
          format: uint64
          x-field-uid: 12
        l1_lsp_sent:
          description: |-
            Number of Level 1 (L1) Link State Protocol Data Units (LSPs) sent.
          type: integer
          format: uint64
          x-field-uid: 13
        l1_lsp_received:
          description: |-
            Number of Level 1 (L1) Link State Protocol Data Units (LSPs) received.
          type: integer
          format: uint64
          x-field-uid: 14
        l2_sessions_up:
          description: |-
            The number of Level 2 (L2) sessions that are fully up.
          type: integer
          format: uint32
          x-field-uid: 15
        l2_session_flap:
          description: |-
            The number of Level 2 Sessions Flap.
          type: integer
          format: uint64
          x-field-uid: 16
        l2_broadcast_hellos_sent:
          description: |-
            Number of Level 2 Hello messages sent.
          type: integer
          format: uint64
          x-field-uid: 17
        l2_broadcast_hellos_received:
          description: |-
            Number of Level 2 Hello messages received.
          type: integer
          format: uint64
          x-field-uid: 18
        l2_point_to_point_hellos_sent:
          description: |-
            Number of Level 2 Point-to-Point(P2P) Hello messages sent.
          type: integer
          format: uint64
          x-field-uid: 19
        l2_point_to_point_hellos_received:
          description: |-
            Number of Level 2 Point-to-Point(P2P) Hello messages received.
          type: integer
          format: uint64
          x-field-uid: 20
        l2_database_size:
          description: |-
            Number of Link State Updates (LSPs) in the Level 2 LSP Databases.
          type: integer
          format: uint64
          x-field-uid: 21
        l2_psnp_sent:
          description: |-
            Number of Level 2 (L2) Partial Sequence Number Packet (PSNPs) sent.
          type: integer
          format: uint64
          x-field-uid: 22
        l2_psnp_received:
          description: |-
            Number of Level 2 (L2) Complete Sequence Number Packet (PSNPs) received.
          type: integer
          format: uint64
          x-field-uid: 23
        l2_csnp_sent:
          description: |-
            Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) sent.
          type: integer
          format: uint64
          x-field-uid: 24
        l2_csnp_received:
          description: |-
            Number of Level 2 (L2) Complete Sequence Number Packet (CSNPs) received.
          type: integer
          format: uint64
          x-field-uid: 25
        l2_lsp_sent:
          description: |-
            Number of Level 2 (L2) Link State Protocol Data Units (LSPs) sent.
          type: integer
          format: uint64
          x-field-uid: 26
        l2_lsp_received:
          description: |-
            Number of Level 2 (L2) Link State Protocol Data Units (LSPs) received.
          type: integer
          format: uint64
          x-field-uid: 27
    Lag.Metrics.Request:
      description: |-
        The request to retrieve per LAG metrics/statistics.
      type: object
      properties:
        lag_names:
          description: |
            The names of LAGs to return results for. An empty list will return results for all LAGs.

            x-constraint:
            - /components/schemas/Lag/properties/name


            x-constraint:
            - /components/schemas/Lag/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Lag/properties/name
          x-field-uid: 1
        column_names:
          description: |-
            The list of column names that the returned result set will contain. If the list is empty then all columns will be returned. The name of the LAG cannot be excluded.
          type: array
          items:
            type: string
            x-enum:
              oper_status:
                x-field-uid: 1
              member_ports_up:
                x-field-uid: 2
              frames_tx:
                x-field-uid: 3
              frames_rx:
                x-field-uid: 4
              bytes_tx:
                x-field-uid: 5
              bytes_rx:
                x-field-uid: 6
              frames_tx_rate:
                x-field-uid: 7
              frames_rx_rate:
                x-field-uid: 8
              bytes_tx_rate:
                x-field-uid: 9
              bytes_rx_rate:
                x-field-uid: 10
            enum:
            - oper_status
            - member_ports_up
            - frames_tx
            - frames_rx
            - bytes_tx
            - bytes_rx
            - frames_tx_rate
            - frames_rx_rate
            - bytes_tx_rate
            - bytes_rx_rate
          x-field-uid: 2
    Lag.Metric:
      type: object
      properties:
        name:
          description: |
            The name of a configured LAG

            x-constraint:
            - /components/schemas/Lag/properties/name


            x-constraint:
            - /components/schemas/Lag/properties/name
          type: string
          x-constraint:
          - /components/schemas/Lag/properties/name
          x-field-uid: 1
        oper_status:
          description: |-
            The current operational state of the LAG. The state can be up or down. State 'up' indicates member_ports_up >= min_links.
          type: string
          x-field-uid: 2
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
        member_ports_up:
          description: |-
            The number of LAG member ports up.
          type: integer
          format: uint32
          x-field-uid: 3
        frames_tx:
          description: |-
            The current total number of frames transmitted.
          type: integer
          format: uint64
          x-field-uid: 4
        frames_rx:
          description: |-
            The current total number of valid frames received.
          type: integer
          format: uint64
          x-field-uid: 5
        bytes_tx:
          description: |-
            The current total number of bytes transmitted.
          type: integer
          format: uint64
          x-field-uid: 6
        bytes_rx:
          description: |-
            The current total number of valid bytes received.
          type: integer
          format: uint64
          minimum: 0
          x-field-uid: 7
        frames_tx_rate:
          description: |-
            The current rate of frames transmitted.
          type: number
          x-field-uid: 8
        frames_rx_rate:
          description: |-
            The current rate of valid frames received.
          type: number
          x-field-uid: 9
        bytes_tx_rate:
          description: |-
            The current rate of bytes transmitted.
          type: number
          x-field-uid: 10
        bytes_rx_rate:
          description: |-
            The current rate of bytes received.
          type: number
          x-field-uid: 11
    Lacp.Metrics.Request:
      description: |-
        The request to retrieve LACP per LAG member metrics/statistics.
      type: object
      properties:
        lag_names:
          description: |
            The names of LAG (ports group) for which LACP metrics to be returned. An empty list will return metrics for all LAGs.

            x-constraint:
            - /components/schemas/Lag/properties/name


            x-constraint:
            - /components/schemas/Lag/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Lag/properties/name
          x-field-uid: 1
        lag_member_port_names:
          description: |
            The names of LAG members (ports) for which LACP metrics to be returned. An empty list will return metrics for all LAG members.

            x-constraint:
            - /components/schemas/Port/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 2
        column_names:
          description: |-
            The list of column names that the returned result set will contain. If the list is empty then all columns will be returned. The name of LAG and LAG member can not be excluded.
          type: array
          items:
            type: string
            x-enum:
              lacp_packets_rx:
                x-field-uid: 1
              lacp_packets_tx:
                x-field-uid: 2
              lacp_rx_errors:
                x-field-uid: 3
              activity:
                x-field-uid: 4
              timeout:
                x-field-uid: 5
              synchronization:
                x-field-uid: 6
              aggregatable:
                x-field-uid: 7
              collecting:
                x-field-uid: 8
              distributing:
                x-field-uid: 9
              system_id:
                x-field-uid: 10
              oper_key:
                x-field-uid: 11
              partner_id:
                x-field-uid: 12
              partner_key:
                x-field-uid: 13
              port_num:
                x-field-uid: 14
              partner_port_num:
                x-field-uid: 15
            enum:
            - lacp_packets_rx
            - lacp_packets_tx
            - lacp_rx_errors
            - activity
            - timeout
            - synchronization
            - aggregatable
            - collecting
            - distributing
            - system_id
            - oper_key
            - partner_id
            - partner_key
            - port_num
            - partner_port_num
          x-field-uid: 3
    Lacp.Metric:
      description: |-
        LACP metrics (statistics) per LAG member.
      type: object
      properties:
        lag_name:
          description: |-
            The name of a LAG (ports group) configured with LACP.
          type: string
          x-field-uid: 1
        lag_member_port_name:
          description: |-
            The name of a LAG member (port) configured with LACP.
          type: string
          x-field-uid: 2
        lacp_packets_rx:
          description: |-
            Number of LACPDUs received.
          type: integer
          format: uint64
          x-field-uid: 3
        lacp_packets_tx:
          description: |-
            Number of LACPDUs transmitted.
          type: integer
          format: uint64
          x-field-uid: 4
        lacp_rx_errors:
          description: |-
            Number of LACPDUs receive packet errors.
          type: integer
          format: uint64
          x-field-uid: 5
        activity:
          description: |-
            Indicates participant is active or passive.
          type: string
          x-field-uid: 6
          x-enum:
            active:
              x-field-uid: 1
            passive:
              x-field-uid: 2
          enum:
          - active
          - passive
        timeout:
          description: |-
            The timeout type (short or long) used by the participant.
          type: string
          x-field-uid: 7
          x-enum:
            short:
              x-field-uid: 1
            long:
              x-field-uid: 2
          enum:
          - short
          - long
        synchronization:
          description: |-
            Indicates whether the participant is in-sync or out-of-sync.
          type: string
          x-field-uid: 8
          x-enum:
            in_sync:
              x-field-uid: 1
            out_sync:
              x-field-uid: 2
          enum:
          - in_sync
          - out_sync
        aggregatable:
          description: |-
            A true value indicates that the participant will allow the link to be used as part of the aggregate. A false value indicates the link should be used as an  individual link.
          type: boolean
          x-field-uid: 9
        collecting:
          description: |-
            If true, the participant is collecting incoming frames on the link, otherwise false.
          type: boolean
          x-field-uid: 10
        distributing:
          description: |-
            When true, the participant is distributing outgoing frames; when false, distribution is disabled.
          type: boolean
          x-field-uid: 11
        system_id:
          description: |-
            MAC address that defines the local system ID for the aggregate interface.
          type: string
          format: mac
          x-field-uid: 12
        oper_key:
          description: |-
            Current operational value of the key for the aggregate interface.
          type: integer
          format: uint32
          x-field-uid: 13
        partner_id:
          description: |-
            MAC address representing the protocol partner's interface system ID.
          type: string
          format: mac
          x-field-uid: 14
        partner_key:
          description: |-
            Operational value of the protocol partner's key.
          type: integer
          format: uint32
          x-field-uid: 15
        port_num:
          description: |-
            Port number of the local (actor) aggregation member.
          type: integer
          format: uint32
          x-field-uid: 16
        partner_port_num:
          description: |-
            Port number of the partner (remote) port for this member port.
          type: integer
          format: uint32
          x-field-uid: 17
    Lldp.Metrics.Request:
      description: |-
        The request to retrieve LLDP per instance metrics/statistics.
      type: object
      properties:
        lldp_names:
          description: |
            The names of LLDP instances to return results for. An empty list will return results for all LLDP instances.

            x-constraint:
            - /components/schemas/Lldp/properties/name


            x-constraint:
            - /components/schemas/Lldp/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Lldp/properties/name
          x-field-uid: 1
        column_names:
          description: |-
            The requested list of column names for the result set. If the list is empty then metrics for all columns will be returned. The name of LLDP instance can not be excluded.
          type: array
          items:
            type: string
            x-enum:
              frames_rx:
                x-field-uid: 1
              frames_tx:
                x-field-uid: 2
              frames_error_rx:
                x-field-uid: 3
              frames_discard:
                x-field-uid: 4
              tlvs_discard:
                x-field-uid: 5
              tlvs_unknown:
                x-field-uid: 6
            enum:
            - frames_rx
            - frames_tx
            - frames_error_rx
            - frames_discard
            - tlvs_discard
            - tlvs_unknown
          x-field-uid: 2
    Lldp.Metric:
      description: |-
        LLDP per instance statistics information.
      type: object
      properties:
        name:
          description: |-
            The name of the configured LLDP instance.
          type: string
          x-field-uid: 1
        frames_rx:
          description: |-
            Number of LLDP frames received.
          type: integer
          format: uint64
          x-field-uid: 2
        frames_tx:
          description: |-
            Number of LLDP frames transmitted.
          type: integer
          format: uint64
          x-field-uid: 3
        frames_error_rx:
          description: |-
            Number of LLDP frames received with packet errors. This stat should be incremented based on statsFramesInErrorsTotal increment rule in section 10.3.2 of IEEE Std 802.1 AB-2005.
          type: integer
          format: uint64
          x-field-uid: 4
        frames_discard:
          description: |-
            Number of LLDP frames received that are discarded. This stat should be incremented when one or more of the three mandatory  TLVs at the beginning of the LLDPDU is missing, out of order or  contains an out of range information string length. This stat should follow the validation rules in section 10.3.2 of IEEE  Std 802.1 AB-2005.
          type: integer
          format: uint64
          x-field-uid: 5
        tlvs_discard:
          description: |-
            Number of LLDP tlvs received that are discarded. If any TLV contains  an error condition specific for that particular TLV or if any TLV  extends past the physical end of the frame then these TLVs will be discarded.
          type: integer
          format: uint64
          x-field-uid: 6
        tlvs_unknown:
          description: |-
            Number of LLDP unknown tlvs received. If the OUI of the organizationlly specific TLV and/or organizationally defined subtype are not recognized,or if TLV type  value is in the range of reserved TLV types then these TLVs will be considered as  unknown TLVs.
          type: integer
          format: uint64
          x-field-uid: 7
    Rsvp.Metrics.Request:
      description: |-
        The request to retrieve RSVP-TE per Router metrics/statistics.
      type: object
      properties:
        router_names:
          description: |
            The names of RSVP-TE Routers to return results for. An empty list as input will return results for all RSVP-TE routers.

            x-constraint:
            - /components/schemas/Device.Rsvp/properties/name


            x-constraint:
            - /components/schemas/Device.Rsvp/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Device.Rsvp/properties/name
          x-field-uid: 1
        column_names:
          description: "The list of column names that the returned result set will\
            \ contain. If the input list is empty then all columns will be returned\
            \ except for any result_groups.            "
          type: array
          items:
            type: string
            x-enum:
              ingress_p2p_lsps_configured:
                x-field-uid: 1
              ingress_p2p_lsps_up:
                x-field-uid: 2
              egress_p2p_lsps_up:
                x-field-uid: 3
              lsp_flap_count:
                x-field-uid: 4
              paths_tx:
                x-field-uid: 5
              paths_rx:
                x-field-uid: 6
              resvs_tx:
                x-field-uid: 7
              resvs_rx:
                x-field-uid: 8
              path_tears_tx:
                x-field-uid: 9
              path_tears_rx:
                x-field-uid: 10
              resv_tears_tx:
                x-field-uid: 11
              resv_tears_rx:
                x-field-uid: 12
              path_errors_tx:
                x-field-uid: 13
              path_errors_rx:
                x-field-uid: 14
              resv_errors_tx:
                x-field-uid: 15
              resv_errors_rx:
                x-field-uid: 16
              resv_conf_tx:
                x-field-uid: 17
              resv_conf_rx:
                x-field-uid: 18
              hellos_tx:
                x-field-uid: 19
              hellos_rx:
                x-field-uid: 20
              acks_tx:
                x-field-uid: 21
              acks_rx:
                x-field-uid: 22
              nacks_tx:
                x-field-uid: 23
              nacks_rx:
                x-field-uid: 24
              srefresh_tx:
                x-field-uid: 25
              srefresh_rx:
                x-field-uid: 26
              bundle_tx:
                x-field-uid: 27
              bundle_rx:
                x-field-uid: 28
              path_reevaluation_request_tx:
                x-field-uid: 29
              path_reoptimizations:
                x-field-uid: 30
            enum:
            - ingress_p2p_lsps_configured
            - ingress_p2p_lsps_up
            - egress_p2p_lsps_up
            - lsp_flap_count
            - paths_tx
            - paths_rx
            - resvs_tx
            - resvs_rx
            - path_tears_tx
            - path_tears_rx
            - resv_tears_tx
            - resv_tears_rx
            - path_errors_tx
            - path_errors_rx
            - resv_errors_tx
            - resv_errors_rx
            - resv_conf_tx
            - resv_conf_rx
            - hellos_tx
            - hellos_rx
            - acks_tx
            - acks_rx
            - nacks_tx
            - nacks_rx
            - srefresh_tx
            - srefresh_rx
            - bundle_tx
            - bundle_rx
            - path_reevaluation_request_tx
            - path_reoptimizations
          x-field-uid: 2
    Rsvp.Metric:
      description: |-
        RSVP-TE per router statistics information.
      type: object
      properties:
        name:
          description: |-
            The name of a configured RSVP router.
          type: string
          x-field-uid: 1
        ingress_p2p_lsps_configured:
          description: |-
            The number of ingress point-to-point LSPs configured or transiting through the RSVP router which have been initated from the test port.
          type: integer
          format: uint32
          x-field-uid: 2
        ingress_p2p_lsps_up:
          description: "The number of ingress point-to-point LSPs for which Resv has\
            \ been received and is currently up. "
          type: integer
          format: uint32
          x-field-uid: 3
        egress_p2p_lsps_up:
          description: |-
            The number of egress point-to-point LSPs for which Path requests were successfully processed and is currently up.
          type: integer
          format: uint32
          x-field-uid: 4
        lsp_flap_count:
          description: |-
            The number of times an LSP went from up to down state either because it timed out while waiting for Refreshes or  a PathTear or ResvTear message was received which caused the LSP to flap.
          type: integer
          format: uint64
          x-field-uid: 5
        paths_tx:
          description: |-
            The number of Path messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 6
        paths_rx:
          description: |-
            The number of Path messages received by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 7
        resvs_tx:
          description: |-
            The number of Resv messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 8
        resvs_rx:
          description: |-
            The number of Resv messages received by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 9
        path_tears_tx:
          description: |-
            The number of  Path Tear messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 10
        path_tears_rx:
          description: "The number of Path Tear messages received by this RSVP router. "
          type: integer
          format: uint64
          x-field-uid: 11
        resv_tears_tx:
          description: |-
            The number of  Resv Tear messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 12
        resv_tears_rx:
          description: "The number of Resv Tear messages received by this RSVP router. "
          type: integer
          format: uint64
          x-field-uid: 13
        path_errors_tx:
          description: |-
            The number of Path Error messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 14
        path_errors_rx:
          description: "The number of Path Error messages received by this RSVP router. "
          type: integer
          format: uint64
          x-field-uid: 15
        resv_errors_tx:
          description: |-
            The number of Resv Error messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 16
        resv_errors_rx:
          description: "The number of Resv Error messages received by this RSVP router. "
          type: integer
          format: uint64
          x-field-uid: 17
        resv_conf_tx:
          description: |-
            The number of ResvConf messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 18
        resv_conf_rx:
          description: "The number of ResvConf messages received by this RSVP router. "
          type: integer
          format: uint64
          x-field-uid: 19
        hellos_tx:
          description: |-
            The number of Hello messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 20
        hellos_rx:
          description: "The number of Hello messages received by this RSVP router. "
          type: integer
          format: uint64
          x-field-uid: 21
        acks_tx:
          description: |-
            The number of Ack messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 22
        acks_rx:
          description: "The number of Ack messages received by this RSVP router. "
          type: integer
          format: uint64
          x-field-uid: 23
        nacks_tx:
          description: |-
            The number of Nack messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 24
        nacks_rx:
          description: "The number of Nack messages received by this RSVP router. "
          type: integer
          format: uint64
          x-field-uid: 25
        srefresh_tx:
          description: |-
            The number of SRefresh messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 26
        srefresh_rx:
          description: "The number of SRefresh messages received by this RSVP router. "
          type: integer
          format: uint64
          x-field-uid: 27
        bundle_tx:
          description: |-
            The number of Bundle messages sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 28
        bundle_rx:
          description: "The number of Bundle messages received by this RSVP router. "
          type: integer
          format: uint64
          x-field-uid: 29
        path_reevaluation_request_tx:
          description: |-
            The number of Path messages with Path Re-evaluation Request enabled sent by this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 30
        path_reoptimizations:
          description: |-
            The number of successfully completed Make-Before-Break operations on LSPs on this RSVP router.
          type: integer
          format: uint64
          x-field-uid: 31
    States.Request:
      description: |-
        Request to traffic generator for states of choice
      type: object
      properties:
        choice:
          type: string
          default: ipv4_neighbors
          x-field-uid: 1
          x-enum:
            ipv4_neighbors:
              x-field-uid: 1
            ipv6_neighbors:
              x-field-uid: 2
            bgp_prefixes:
              x-field-uid: 3
            isis_lsps:
              x-field-uid: 4
            lldp_neighbors:
              x-field-uid: 5
            rsvp_lsps:
              x-field-uid: 6
          enum:
          - ipv4_neighbors
          - ipv6_neighbors
          - bgp_prefixes
          - isis_lsps
          - lldp_neighbors
          - rsvp_lsps
        ipv4_neighbors:
          $ref: '#/components/schemas/Neighborsv4.States.Request'
          x-field-uid: 2
        ipv6_neighbors:
          $ref: '#/components/schemas/Neighborsv6.States.Request'
          x-field-uid: 3
        bgp_prefixes:
          $ref: '#/components/schemas/BgpPrefix.State.Request'
          x-field-uid: 4
        isis_lsps:
          $ref: '#/components/schemas/IsisLsps.State.Request'
          x-field-uid: 5
        lldp_neighbors:
          $ref: '#/components/schemas/LldpNeighbors.State.Request'
          x-field-uid: 6
        rsvp_lsps:
          $ref: '#/components/schemas/RsvpLsps.State.Request'
          x-field-uid: 7
    States.Response:
      description: |-
        Response containing chosen traffic generator states
      type: object
      properties:
        choice:
          type: string
          default: ipv4_neighbors
          x-field-uid: 1
          x-enum:
            ipv4_neighbors:
              x-field-uid: 1
            ipv6_neighbors:
              x-field-uid: 2
            bgp_prefixes:
              x-field-uid: 3
            isis_lsps:
              x-field-uid: 4
            lldp_neighbors:
              x-field-uid: 5
            rsvp_lsps:
              x-field-uid: 6
          enum:
          - ipv4_neighbors
          - ipv6_neighbors
          - bgp_prefixes
          - isis_lsps
          - lldp_neighbors
          - rsvp_lsps
        ipv4_neighbors:
          type: array
          items:
            $ref: '#/components/schemas/Neighborsv4.State'
          x-field-uid: 2
        ipv6_neighbors:
          type: array
          items:
            $ref: '#/components/schemas/Neighborsv6.State'
          x-field-uid: 3
        bgp_prefixes:
          type: array
          items:
            $ref: '#/components/schemas/BgpPrefixes.State'
          x-field-uid: 4
        isis_lsps:
          type: array
          items:
            $ref: '#/components/schemas/IsisLsps.State'
          x-field-uid: 5
        lldp_neighbors:
          type: array
          items:
            $ref: '#/components/schemas/LldpNeighbors.State'
          x-field-uid: 6
        rsvp_lsps:
          type: array
          items:
            $ref: '#/components/schemas/RsvpLsps.State'
          x-field-uid: 7
    Neighborsv4.States.Request:
      description: |-
        The request to retrieve IPv4 Neighbor state (ARP cache entries) of a network interface(s).
      type: object
      properties:
        ethernet_names:
          description: |
            The names of Ethernet interfaces for which Neighbor state (ARP cache entries) will be retrieved. If no names are specified then the results will contain Neighbor state (ARP cache entries) for all available Ethernet interfaces.

            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name


            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
          x-field-uid: 1
    Neighborsv4.State:
      description: |-
        IPv4 Neighbor state (ARP cache entry).
      type: object
      required:
      - ethernet_name
      - ipv4_address
      properties:
        ethernet_name:
          description: |-
            The name of the Ethernet interface associated with the Neighbor state (ARP cache entry).
          type: string
          x-field-uid: 1
        ipv4_address:
          description: |-
            The IPv4 address of the neighbor.
          type: string
          format: ipv4
          x-field-uid: 2
        link_layer_address:
          description: |-
            The link-layer address (MAC) of the neighbor.
          type: string
          format: mac
          x-field-uid: 3
    Neighborsv6.States.Request:
      description: |-
        The request to retrieve IPv6 Neighbor state (NDISC cache entries) of a network interface(s).
      type: object
      properties:
        ethernet_names:
          description: |
            The names of Ethernet interfaces for which Neighbor state (NDISC cache entries) will be retrieved. If no names are specified then the results will contain Neighbor state (NDISC cache entries) for all available Ethernet interfaces.

            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name


            x-constraint:
            - /components/schemas/Device.Ethernet/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Device.Ethernet/properties/name
          x-field-uid: 1
    Neighborsv6.State:
      description: |-
        IPv6 Neighbor state (NDISC cache entry).
      type: object
      required:
      - ethernet_name
      - ipv6_address
      properties:
        ethernet_name:
          description: |-
            The name of the Ethernet interface associated with the Neighbor state (NDISC cache entry).
          type: string
          x-field-uid: 1
        ipv6_address:
          description: |-
            The IPv6 address of the neighbor.
          type: string
          format: ipv6
          x-field-uid: 2
        link_layer_address:
          description: |-
            The link-layer address (MAC) of the neighbor.
          type: string
          format: mac
          x-field-uid: 3
    BgpPrefix.State.Request:
      description: |-
        The request to retrieve BGP peer prefix information.
      type: object
      properties:
        bgp_peer_names:
          description: |
            The names of BGP peers for which prefix information will be retrieved. If no names are specified then the results will contain prefix information for all configured BGP peers.

            x-constraint:
            - /components/schemas/Bgp.V4Peer/properties/name
            - /components/schemas/Bgp.V6Peer/properties/name


            x-constraint:
            - /components/schemas/Bgp.V4Peer/properties/name
            - /components/schemas/Bgp.V6Peer/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Bgp.V4Peer/properties/name
          - /components/schemas/Bgp.V6Peer/properties/name
          x-field-uid: 1
        prefix_filters:
          description: |-
            Specify which prefixes to return. If the list is empty or missing then all prefixes will be returned.
          type: array
          items:
            type: string
            x-enum:
              ipv4_unicast:
                x-field-uid: 1
              ipv6_unicast:
                x-field-uid: 2
            enum:
            - ipv4_unicast
            - ipv6_unicast
          x-field-uid: 2
        ipv4_unicast_filters:
          description: |-
            The IPv4 unicast results can be filtered by specifying additional prefix search criteria. If the ipv4_unicast_filters property is missing or empty then all IPv4 prefixes will be returned.
          type: array
          items:
            $ref: '#/components/schemas/BgpPrefix.Ipv4Unicast.Filter'
          x-field-uid: 3
        ipv6_unicast_filters:
          description: |-
            The IPv6 unicast results can be filtered by specifying additional prefix search criteria. If the ipv6_unicast_filters property is missing or empty then all IPv6 prefixes will be returned.
          type: array
          items:
            $ref: '#/components/schemas/BgpPrefix.Ipv6Unicast.Filter'
          x-field-uid: 4
    BgpPrefix.Ipv4Unicast.Filter:
      type: object
      properties:
        addresses:
          description: |-
            The addresses to match. If the addresses property is missing or empty then all addresses will match.
          type: array
          items:
            type: string
            format: ipv4
          x-field-uid: 1
        prefix_length:
          x-field-uid: 2
          description: |-
            The prefix length to match. If the prefix length is missing then all prefix lengths will match.
          type: integer
          format: uint32
          maximum: 128
        origin:
          x-field-uid: 3
          description: |-
            The origin to match. If the origin is missing then all origins will match.
          type: string
          x-enum:
            igp:
              x-field-uid: 1
            egp:
              x-field-uid: 2
            incomplete:
              x-field-uid: 3
          enum:
          - igp
          - egp
          - incomplete
        path_id:
          x-field-uid: 4
          description: |-
            The path id to match. If the path id is missing then all path ids will match.
          type: integer
          format: uint32
    BgpPrefix.Ipv6Unicast.Filter:
      type: object
      properties:
        addresses:
          description: |-
            The addresses to match. If the addresses property is missing or empty then all addresses will match.
          type: array
          items:
            type: string
            format: ipv6
          x-field-uid: 1
        prefix_length:
          x-field-uid: 2
          description: |-
            The prefix length to match. If the prefix length is missing then all prefix lengths will match.
          type: integer
          format: uint32
          maximum: 128
        origin:
          x-field-uid: 3
          description: |-
            The origin to match. If the origin is missing then all origins will match.
          type: string
          x-enum:
            igp:
              x-field-uid: 1
            egp:
              x-field-uid: 2
            incomplete:
              x-field-uid: 3
          enum:
          - igp
          - egp
          - incomplete
        path_id:
          x-field-uid: 4
          description: |-
            The path id to match. If the path id is missing then all path ids will match.
          type: integer
          format: uint32
    BgpPrefixes.State:
      description: |-
        BGP peer prefixes.
      type: object
      properties:
        bgp_peer_name:
          description: |-
            The name of a BGP peer.
          type: string
          x-field-uid: 1
        ipv4_unicast_prefixes:
          type: array
          items:
            $ref: '#/components/schemas/BgpPrefixIpv4Unicast.State'
          x-field-uid: 2
        ipv6_unicast_prefixes:
          type: array
          items:
            $ref: '#/components/schemas/BgpPrefixIpv6Unicast.State'
          x-field-uid: 3
    BgpPrefixIpv4Unicast.State:
      description: |-
        IPv4 unicast prefix.
      type: object
      properties:
        ipv4_address:
          description: |-
            An IPv4 unicast address
          type: string
          x-field-uid: 1
        prefix_length:
          x-field-uid: 2
          description: |-
            The length of the prefix.
          type: integer
          format: uint32
          maximum: 128
        origin:
          x-field-uid: 3
          description: |-
            The origin of the prefix.
          type: string
          x-enum:
            igp:
              x-field-uid: 1
            egp:
              x-field-uid: 2
            incomplete:
              x-field-uid: 3
          enum:
          - igp
          - egp
          - incomplete
        path_id:
          x-field-uid: 4
          description: |-
            The path id.
          type: integer
          format: uint32
        ipv4_next_hop:
          x-field-uid: 5
          description: |-
            The IPv4 address of the egress interface.
          type: string
          format: ipv4
        ipv6_next_hop:
          x-field-uid: 6
          description: |-
            The IPv6 address of the egress interface.
          type: string
          format: ipv6
        communities:
          x-field-uid: 7
          description: |-
            Optional community attributes.
          type: array
          items:
            $ref: '#/components/schemas/Result.BgpCommunity'
        as_path:
          x-field-uid: 8
          $ref: '#/components/schemas/Result.BgpAsPath'
        local_preference:
          x-field-uid: 9
          description: |-
            The local preference is a well-known attribute and the value is used for route selection. The route with the highest local preference value is preferred.
          type: integer
          format: uint32
        multi_exit_discriminator:
          x-field-uid: 10
          description: |-
            The multi exit discriminator (MED) is an optional non-transitive attribute and the value is used for route selection. The route with the lowest MED value is preferred.
          type: integer
          format: uint32
    BgpPrefixIpv6Unicast.State:
      description: |-
        IPv6 unicast prefix.
      type: object
      properties:
        ipv6_address:
          description: |-
            An IPv6 unicast address
          type: string
          x-field-uid: 1
        prefix_length:
          x-field-uid: 2
          description: |-
            The length of the prefix.
          type: integer
          format: uint32
          maximum: 128
        origin:
          x-field-uid: 3
          description: |-
            The origin of the prefix.
          type: string
          x-enum:
            igp:
              x-field-uid: 1
            egp:
              x-field-uid: 2
            incomplete:
              x-field-uid: 3
          enum:
          - igp
          - egp
          - incomplete
        path_id:
          x-field-uid: 4
          description: |-
            The path id.
          type: integer
          format: uint32
        ipv4_next_hop:
          x-field-uid: 5
          description: |-
            The IPv4 address of the egress interface.
          type: string
          format: ipv4
        ipv6_next_hop:
          x-field-uid: 6
          description: |-
            The IPv6 address of the egress interface.
          type: string
          format: ipv6
        communities:
          x-field-uid: 7
          description: |-
            Optional community attributes.
          type: array
          items:
            $ref: '#/components/schemas/Result.BgpCommunity'
        as_path:
          x-field-uid: 8
          $ref: '#/components/schemas/Result.BgpAsPath'
        local_preference:
          x-field-uid: 9
          description: |-
            The local preference is a well-known attribute and the value is used for route selection. The route with the highest local preference value is preferred.
          type: integer
          format: uint32
        multi_exit_discriminator:
          x-field-uid: 10
          description: |-
            The multi exit discriminator (MED) is an optional non-transitive attribute and the value is used for route selection. The route with the lowest MED value is preferred.
          type: integer
          format: uint32
    Result.BgpCommunity:
      description: |-
        BGP communities provide additional capability for tagging routes and  for modifying BGP routing policy on upstream and downstream routers. BGP community is a 32-bit number which is broken into 16-bit AS number and  a 16-bit custom value.
      type: object
      properties:
        type:
          description: |-
            The type of community AS number. If community type is manual_as_number then as_number and as_custom will be available.
          type: string
          x-field-uid: 1
          x-enum:
            manual_as_number:
              x-field-uid: 1
            no_export:
              x-field-uid: 2
            no_advertised:
              x-field-uid: 3
            no_export_subconfed:
              x-field-uid: 4
            llgr_stale:
              x-field-uid: 5
            no_llgr:
              x-field-uid: 6
          enum:
          - manual_as_number
          - no_export
          - no_advertised
          - no_export_subconfed
          - llgr_stale
          - no_llgr
        as_number:
          description: |-
            First two octets of 32 bit community AS number.
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 2
        as_custom:
          description: "Last two octets of the community value. "
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 3
    Result.BgpAsPath:
      description: |-
        This attribute identifies the autonomous systems through  which routing information carried in this UPDATE message has passed.
      type: object
      properties:
        segments:
          description: "AS Path segments present in the received AS Path attribute. "
          type: array
          items:
            $ref: '#/components/schemas/Result.BgpAsPathSegment'
          x-field-uid: 1
    Result.BgpAsPathSegment:
      description: |-
        Configuration for a single BGP AS path segment
      type: object
      properties:
        type:
          description: |-
            AS sequence is the most common type of AS_PATH, it contains the  list of ASNs starting with the most recent ASN being added read  from left to right.
            The other three AS_PATH types are used for Confederations - AS_SET is the type of AS_PATH attribute that summarizes routes using using the aggregate-address command, allowing AS_PATHs to be  summarized in the update as well. - AS_CONFED_SEQ gives the list of ASNs in the path starting with the  most recent ASN to be added reading left to right - AS_CONFED_SET will allow summarization of multiple AS PATHs to be  sent in BGP Updates.
          type: string
          x-field-uid: 1
          x-enum:
            as_seq:
              x-field-uid: 1
            as_set:
              x-field-uid: 2
            as_confed_seq:
              x-field-uid: 3
            as_confed_set:
              x-field-uid: 4
          enum:
          - as_seq
          - as_set
          - as_confed_seq
          - as_confed_set
        as_numbers:
          description: |-
            The AS numbers in this AS path segment.
          type: array
          items:
            type: integer
            format: uint32
          x-field-uid: 2
    IsisLsps.State.Request:
      description: |-
        The request to retrieve ISIS Link State PDU (LSP) information learned by the router.
      type: object
      properties:
        isis_router_names:
          description: |
            The names of ISIS routers for which learned information is requested. An empty list will return results for all ISIS routers.

            x-constraint:
            - /components/schemas/Device.IsisRouter/properties/name


            x-constraint:
            - /components/schemas/Device.IsisRouter/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Device.IsisRouter/properties/name
          x-field-uid: 1
    IsisLsps.State:
      description: |-
        The result of ISIS LSP information that are retrieved.
      type: object
      properties:
        isis_router_name:
          description: |-
            The name of the ISIS Router.
          type: string
          x-field-uid: 1
        lsps:
          description: |-
            One or more LSPs that are learned by this ISIS router.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.State'
          x-field-uid: 2
    IsisLsp.State:
      description: |-
        ISIS LSP.
      type: object
      required:
      - lsp_id
      properties:
        lsp_id:
          description: |-
            LSP ID in the format, e.g. '640000000001-00-00'. LSP ID consists of the System ID of a neighbor, the Pseudonode ID, and the LSP number. The last two bytes represent Pseudonode ID and LSP number respectively. A pseudonode is a logical representation of the LAN which is generated by a Designated Intermediate System (DIS) on a LAN segment. If one LSP exceeds the maximum LSP size then it is sent in another LSP with the LSP number incremented by one. A router's learned LSP gets refreshed by 'remaining_lifetime'. Then the sequence number is incremented by 1.
          type: string
          x-field-uid: 1
        pdu_type:
          description: |-
            Link State PDU type.
          type: string
          x-field-uid: 2
          x-enum:
            level_1:
              x-field-uid: 1
            level_2:
              x-field-uid: 2
          enum:
          - level_1
          - level_2
        remaining_lifetime:
          description: |-
            Remaining lifetime in seconds before LSP expires.
          type: integer
          format: uint32
          x-field-uid: 3
        sequence_number:
          description: |-
            Sequence number of the LSP.
          type: integer
          format: uint64
          x-field-uid: 4
        pdu_length:
          description: |-
            Total length of the LSP.
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 5
        flags:
          description: |-
            LSP Type-Block flags.
          $ref: '#/components/schemas/IsisLsp.Flags'
          x-field-uid: 6
        is_type:
          description: "IS Type - bits 1 and 2 indicate the type of Intermediate System.\n\
            1 - ( i.e. bit 1 set) Level 1 Intermediate system.\n2 - Unused value.\n\
            3 - (i.e. bits 1 and 2 set) Level 2 Intermediate system. "
          type: integer
          format: uint32
          maximum: 3
          x-field-uid: 7
        tlvs:
          description: |-
            It refers to Link State PDU State TLVs container.
          $ref: '#/components/schemas/IsisLsp.Tlvs'
          x-field-uid: 8
    IsisLsp.Tlvs:
      description: |-
        This contains the list of TLVs present in one LSP.
      type: object
      properties:
        hostname_tlvs:
          description: |-
            Array of Hostname TLVs ( type 137) present in this LSP.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.Hostname'
          x-field-uid: 1
        is_reachability_tlvs:
          description: |-
            Array of IS-Reachability TLVs (type 2) present in this LSP.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.IsReachabilityTlv'
          x-field-uid: 2
        extended_is_reachability_tlvs:
          description: |-
            Array of Extended IS-Reachability TLVs (type 22) present in this LSP.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.ExtendedIsReachabilityTlv'
          x-field-uid: 3
        ipv4_internal_reachability_tlvs:
          description: |-
            Array of IPv4 Internal Reachability TLVs (type 128) present in this LSP.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.Ipv4InternalReachabilityTlv'
          x-field-uid: 4
        ipv4_external_reachability_tlvs:
          description: |-
            Array of IPv4 External Reachability TLVs (type 130) present in this LSP.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.Ipv4ExternalReachabilityTlv'
          x-field-uid: 5
        extended_ipv4_reachability_tlvs:
          description: |-
            Array of IPv4 Extended Reachability TLVs (type 135) present in this LSP.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.ExtendedIpv4ReachabilityTlv'
          x-field-uid: 6
        ipv6_reachability_tlvs:
          description: |-
            Array of IPv6 Reachability TLVs (type 236) present in this LSP.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.Ipv6ReachabilityTlv'
          x-field-uid: 7
    IsisLsp.Hostname:
      description: |-
        It contains Hostname for the TLV 137.
      type: object
      properties:
        hostname:
          description: |-
            Hostname for an ISIS router.
          type: string
          x-field-uid: 1
    IsisLsp.Flags:
      description: |-
        LSP Type flags.
      type: object
      properties:
        partition_repair:
          description: |-
            When set, the originator supports partition repair.
          type: boolean
          x-field-uid: 1
        attached_error:
          description: |-
            When set, the originator is attached to another area using the referred metric.
          type: boolean
          x-field-uid: 2
        attached_expense:
          description: |-
            When set, the originator is attached to another
            area using the referred metric.
          type: boolean
          x-field-uid: 3
        attached_delay:
          description: |-
            Delay Metric - when set, the originator is attached to another
            area using the referred metric.
          type: boolean
          x-field-uid: 4
        attached_default:
          description: |-
            Default Metric - when set, the originator is attached to another
            area using the referred metric.
          type: boolean
          x-field-uid: 5
        overload:
          description: |-
            Overload bit - when set, the originator is overloaded, and must
            be avoided in path calculation.
          type: boolean
          x-field-uid: 6
    IsisLsp.IsReachabilityTlv:
      description: |-
        This container describes list of ISIS neighbors and attributes in IS-Reachability TLV (type 2).
      type: object
      properties:
        neighbors:
          description: |-
            This container describes Intermediate System (IS) neighbors.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.neighbor'
          x-field-uid: 1
    IsisLsp.ExtendedIsReachabilityTlv:
      description: |-
        This is list of ISIS neighbors and attributes in Extended-IS-Reachability TLV (type 22).
      type: object
      properties:
        neighbors:
          description: |-
            This container describes IS neighbors.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.neighbor'
          x-field-uid: 1
    IsisLsp.neighbor:
      description: |-
        This contains IS neighbors.
      type: object
      properties:
        system_id:
          description: |-
            The System ID for this emulated ISIS router, e.g. "640100010000".
          type: string
          format: hex
          x-field-uid: 1
    IsisLsp.Ipv4InternalReachabilityTlv:
      description: |-
        This container defines list of IPv4 internal reachability information in one IPv4 internal reachability TLV.
        This is advertised when the origin-type is set 'internal' in route range configurations.
      type: object
      properties:
        prefixes:
          description: |-
            Describes list of IPv4 prefixes in this TLV.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.V4Prefix'
          x-field-uid: 1
    IsisLsp.Ipv4ExternalReachabilityTlv:
      description: |-
        This container defines list of IPv4 external reachability information in one IPv4 external reachability TLV.
        This is advertised when the origin-type is set 'external' in route range configurations.
      type: object
      properties:
        prefixes:
          description: |-
            Describes list of IPv4 prefixes in this TLV..
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.V4Prefix'
          x-field-uid: 1
    IsisLsp.V4Prefix:
      description: |-
        This group defines attributes of an IPv4 standard prefix.
      type: object
      properties:
        ipv4_address:
          description: |-
            An IPv4 unicast prefix reachable via the originator of this LSP.
          type: string
          x-field-uid: 1
        prefix_length:
          description: |-
            The length of the IPv4 prefix.
          type: integer
          format: uint32
          maximum: 32
          x-field-uid: 2
        redistribution_type:
          description: "Up (0)-used when a prefix is initially advertised within the\
            \ ISIS L3 hierarchy, \n  and for all other prefixes in L1 and L2 LSPs.\
            \ (default) \nDown (1)-used when an L1/L2 router advertises L2 prefixes\
            \ in L1 LSPs. \nThe prefixes are being advertised from a higher level\
            \ (L2) down to a lower level (L1). "
          type: string
          x-field-uid: 3
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
        default_metric:
          description: |-
            ISIS default metric value.
          type: integer
          format: uint32
          x-field-uid: 4
        origin_type:
          description: "The origin of the advertised route-internal or external to\
            \ the ISIS area. Options include the following: \n  Internal-for intra-area\
            \ routes, through Level 1 LSPs. \n  External-for inter-area routes redistributed\
            \ within L1, through Level\n1 LSPs."
          type: string
          x-field-uid: 5
          x-enum:
            internal:
              x-field-uid: 1
            external:
              x-field-uid: 2
          enum:
          - internal
          - external
    IsisLsp.ExtendedIpv4ReachabilityTlv:
      description: |-
        This container defines list of IPv4 extended reachability information in one Extended IPv4 External Reachability TLV.
        It is advertised when the 'wide metric' is enabled.
      type: object
      properties:
        prefixes:
          description: |-
            IPv4 prefix contained within extended reachability TLVs.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.ExtendedV4Prefix'
          x-field-uid: 1
    IsisLsp.ExtendedV4Prefix:
      description: |-
        This group defines attributes of an IPv4 standard prefix.
      type: object
      properties:
        ipv4_address:
          description: |-
            An IPv4 unicast prefix reachable via the originator of this LSP.
          type: string
          format: ipv4
          x-field-uid: 1
        prefix_length:
          description: |-
            The length of the IPv4 prefix.
          type: integer
          format: uint32
          maximum: 32
          x-field-uid: 2
        metric:
          description: |-
            ISIS wide metric.
          type: integer
          format: uint32
          x-field-uid: 3
        redistribution_type:
          description: "Up (0)-used when a prefix is initially advertised within the\
            \ ISIS L3 hierarchy, \n  and for all other prefixes in L1 and L2 LSPs.\
            \ (default) \nDown (1)-used when an L1/L2 router advertises L2 prefixes\
            \ in L1 LSPs. \nThe prefixes are being advertised from a higher level\
            \ (L2) down to a lower level (L1). "
          type: string
          x-field-uid: 4
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
        prefix_attributes:
          $ref: '#/components/schemas/IsisLsp.PrefixAttributes'
          x-field-uid: 5
    IsisLsp.Ipv6ReachabilityTlv:
      description: |-
        It defines list of IPv6 extended reachability information in one IPv6 Reachability TLV.
      type: object
      properties:
        prefixes:
          description: |-
            IPv6 prefix contained within reachability TLVs.
          type: array
          items:
            $ref: '#/components/schemas/IsisLsp.V6Prefix'
          x-field-uid: 1
    IsisLsp.V6Prefix:
      description: |-
        It defines attributes of an IPv6 standard prefix.
      type: object
      properties:
        ipv6_address:
          description: |-
            An IPv6 unicast prefix reachable via the originator of this LSP.
          type: string
          format: ipv6
          x-field-uid: 1
        prefix_length:
          description: |-
            The length of the IPv6 prefix.
          type: integer
          format: uint32
          maximum: 128
          x-field-uid: 2
        metric:
          description: |-
            ISIS wide metric.
          type: integer
          format: uint32
          x-field-uid: 3
        redistribution_type:
          description: "Up (0)-used when a prefix is initially advertised within the\
            \ ISIS L3 hierarchy, \n  and for all other prefixes in L1 and L2 LSPs.\
            \ (default) \nDown (1)-used when an L1/L2 router advertises L2 prefixes\
            \ in L1 LSPs. \nThe prefixes are being advertised from a higher level\
            \ (L2) down to a lower level (L1). "
          type: string
          x-field-uid: 4
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
        origin_type:
          description: "The origin of the advertised route-internal or external to\
            \ the ISIS area. Options include the following: \n  Internal-for intra-area\
            \ routes, through Level 1 LSPs. \n  External-for inter-area routes redistributed\
            \ within L1, through Level\n1 LSPs."
          type: string
          x-field-uid: 5
          x-enum:
            internal:
              x-field-uid: 1
            external:
              x-field-uid: 2
          enum:
          - internal
          - external
        prefix_attributes:
          $ref: '#/components/schemas/IsisLsp.PrefixAttributes'
          x-field-uid: 6
    IsisLsp.PrefixAttributes:
      description: |-
        This contains the properties of ISIS Prefix attributes for  the extended IPv4 and IPv6 reachability. https://www.rfc-editor.org/rfc/rfc7794.html
      type: object
      properties:
        x_flag:
          description: |-
            External Prefix Flag (Bit 0)
          type: boolean
          x-field-uid: 1
        r_flag:
          description: |-
            Re-advertisement Flag (Bit 1)
          type: boolean
          x-field-uid: 2
        n_flag:
          description: |-
            Node Flag (Bit 2)
          type: boolean
          x-field-uid: 3
    LldpNeighbors.State.Request:
      description: |-
        The request to retrieve LLDP neighbor information for a given instance.
      type: object
      properties:
        lldp_names:
          description: |
            The names of LLDP instances for which neighbor information will be retrieved. If no names are specified then the results will contain neighbor information for all configured LLDP instances.

            x-constraint:
            - /components/schemas/Lldp/properties/name


            x-constraint:
            - /components/schemas/Lldp/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Lldp/properties/name
          x-field-uid: 1
        neighbor_id_filters:
          description: |-
            Specify the neighbors for which information will be returned. If empty  or missing then information for all neighbors will be returned.
          type: array
          items:
            type: string
          x-field-uid: 2
    LldpNeighbors.State:
      description: |-
        LLDP neighbor information.
      type: object
      properties:
        lldp_name:
          description: |-
            The name of the LLDP instance.
          type: string
          x-field-uid: 1
        system_name:
          description: |-
            The system name field shall contain an alpha-numeric string that  indicates the system's administratively assigned name. The system name  should be the system's fully qualified domain name. If implementations  support IETF RFC 3418, the sysName object should be used for this field.
          type: string
          x-field-uid: 2
        system_description:
          description: |-
            The system description field shall contain an alpha-numeric string that  is the textual description of the network entity. The system description  should include the full name and version identification of the system's  hardware type, software operating system, and networking software. If  implementations support IETF RFC 3418, the sysDescr object should be used  for this field.
          type: string
          x-field-uid: 3
        chassis_id:
          description: |-
            The Chassis ID is a mandatory TLV which identifies the chassis component of  the endpoint identifier associated with the transmitting LLDP agent.
          type: string
          x-field-uid: 4
        chassis_id_type:
          description: |-
            This field identifies the format and source of the chassis identifier string.  It is an enumerator defined by the LldpChassisIdSubtype object from IEEE 802.1AB  MIB.
          type: string
          x-enum:
            port_component:
              x-field-uid: 1
            network_address:
              x-field-uid: 2
            chassis_component:
              x-field-uid: 3
            mac_address:
              x-field-uid: 4
            interface_name:
              x-field-uid: 5
            local:
              x-field-uid: 6
            interface_alias:
              x-field-uid: 7
          x-field-uid: 5
          enum:
          - port_component
          - network_address
          - chassis_component
          - mac_address
          - interface_name
          - local
          - interface_alias
        neighbor_id:
          description: |-
            System generated identifier for the neighbor on the LLDP instance.
          type: string
          x-field-uid: 6
        age:
          description: |-
            Age since discovery in seconds.
          type: integer
          format: uint32
          x-field-uid: 7
        last_update:
          description: |-
            Seconds since last update received.
          type: integer
          format: uint32
          x-field-uid: 8
        ttl:
          description: |-
            The time-to-live (TTL) in seconds is a mandatory TLV which indicates how long information from the neighbor  should be considered valid.
          type: integer
          format: uint32
          x-field-uid: 9
        port_id:
          description: |-
            The Port ID is a mandatory TLV which identifies the port component of the endpoint identifier associated with  the transmitting LLDP agent. If the specified port is an IEEE 802.3 Repeater port, then this TLV is optional.
          type: string
          x-field-uid: 10
        port_id_type:
          description: |-
            This field identifies the format and source of the port identifier string. It is an enumerator defined by the PtopoPortIdType object from RFC2922.
          type: string
          x-enum:
            port_component:
              x-field-uid: 1
            network_address:
              x-field-uid: 2
            agent_circuit_id:
              x-field-uid: 3
            mac_address:
              x-field-uid: 4
            interface_name:
              x-field-uid: 5
            local:
              x-field-uid: 6
            interface_alias:
              x-field-uid: 7
          x-field-uid: 11
          enum:
          - port_component
          - network_address
          - agent_circuit_id
          - mac_address
          - interface_name
          - local
          - interface_alias
        port_description:
          description: |-
            The binary string containing the actual port identifier for the port which this LLDP PDU was transmitted. The source  and format of this field is defined by PtopoPortId from RFC2922.
          type: string
          x-field-uid: 12
        management_address:
          description: |-
            The Management Address is a mandatory TLV which identifies a network address associated with the local LLDP agent, which  can be used to reach the agent on the port identified in the Port ID TLV.
          type: string
          x-field-uid: 13
        management_address_type:
          description: |-
            The enumerated value for the network address type identified in this TLV. This enumeration is defined in the 'Assigned Numbers'  RFC [RFC3232] and the ianaAddressFamilyNumbers object.
          type: string
          x-field-uid: 14
        custom_tlvs:
          type: array
          items:
            $ref: '#/components/schemas/LldpCustomTLV.State'
          x-field-uid: 15
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/LldpCapability.State'
          x-field-uid: 16
    LldpCustomTLV.State:
      description: |-
        Custom TLV received from a neighbor.Custom TLVs are organization specific TLVs advertised with TLV type 127.
      type: object
      properties:
        custom_type:
          description: |-
            The integer value identifying the type of information contained in the value field.
          type: integer
          format: uint32
          x-field-uid: 1
        oui:
          description: |-
            The organizationally unique identifier field shall contain the organization's OUI as defined in Clause 9 of IEEE Std 802. The high-order octet is 0 and the low-order 3 octets are the SMI Network Management Private Enterprise Code of the Vendor in network byte order,  as defined in the 'Assigned Numbers' RFC [RFC3232].
          type: string
          x-field-uid: 2
        oui_subtype:
          description: |-
            The organizationally defined subtype field shall contain a unique subtype value assigned by the defining organization.
          type: string
          x-field-uid: 3
    LldpCapability.State:
      description: |-
        LLDP system capability advertised by the neighbor
      type: object
      properties:
        capability_name:
          description: |-
            Name of the system capability advertised by the neighbor. Capabilities are represented in a bitmap that defines the primary functions of the system.  The capabilities are defined in IEEE 802.1AB.
          type: string
          x-enum:
            mac_bridge:
              x-field-uid: 1
            two_port_mac_relay:
              x-field-uid: 2
            repeater:
              x-field-uid: 3
            docsis_cable_device:
              x-field-uid: 4
            s_vlan:
              x-field-uid: 5
            telephone:
              x-field-uid: 6
            other:
              x-field-uid: 7
            router:
              x-field-uid: 8
            c_vlan:
              x-field-uid: 9
            station_only:
              x-field-uid: 10
            wlan_access_point:
              x-field-uid: 11
          x-field-uid: 1
          enum:
          - mac_bridge
          - two_port_mac_relay
          - repeater
          - docsis_cable_device
          - s_vlan
          - telephone
          - other
          - router
          - c_vlan
          - station_only
          - wlan_access_point
        capability_enabled:
          description: |-
            Indicates whether the corresponding system capability is enabled on the neighbor.
          type: boolean
          x-field-uid: 2
    RsvpLsps.State.Request:
      description: |-
        The request to retrieve RSVP Label Switched Path (LSP) information learned by the router.
      type: object
      properties:
        rsvp_router_names:
          description: |
            The names of RSVP-TE routers for which learned information is requested. An empty list will return results for all RSVP=TE routers.

            x-constraint:
            - /components/schemas/Device.Rsvp/properties/name


            x-constraint:
            - /components/schemas/Device.Rsvp/properties/name
          type: array
          items:
            type: string
          x-constraint:
          - /components/schemas/Device.Rsvp/properties/name
          x-field-uid: 1
    RsvpLsps.State:
      description: |-
        Discovered IPv4 Point-to-Point LSPs of a RSVP-TE router.
      type: object
      properties:
        rsvp_router_name:
          description: |-
            The name of the RSVP-TE Router.
          type: string
          x-field-uid: 1
        ipv4_lsps:
          description: |-
            IPv4 Point-to-Point RSVP-TE Discovered LSPs.
          type: array
          items:
            $ref: '#/components/schemas/RsvpIPv4Lsp.State'
          x-field-uid: 2
    RsvpIPv4Lsp.State:
      description: |-
        IPv4 RSVP-TE Discovered LSPs.
      type: object
      properties:
        source_address:
          description: |-
            The origin IPv4 address of RSVP session.
          type: string
          format: ipv4
          x-field-uid: 1
        destination_address:
          description: |-
            The IPv4 destination address of RSVP session.
          type: string
          format: ipv4
          x-field-uid: 2
        lsp:
          description: |-
            It refers to the RSVP LSP properties.
          $ref: '#/components/schemas/RsvpLsp.State'
          x-field-uid: 3
        rros:
          description: |-
            It refers to RSVP RRO objects container.
          items:
            $ref: '#/components/schemas/RsvpLsp.Ipv4Rro'
          type: array
          x-field-uid: 4
        eros:
          description: |-
            It refers to RSVP ERO objects container.
          items:
            $ref: '#/components/schemas/RsvpLsp.Ipv4Ero'
          type: array
          x-field-uid: 5
    RsvpLsp.State:
      description: |-
        IPv4 RSVP-TE Discovered LSPs.
      type: object
      properties:
        tunnel_id:
          description: |-
            The tunnel id of RSVP session which acts as an identifier that remains constant over the life of the tunnel.
          type: integer
          format: uint32
          x-field-uid: 1
        lsp_id:
          description: |-
            The lsp-id of RSVP session which acts as a differentiator for two lsps originating from the same headend, commonly used to distinguish RSVP sessions during make before break operations.
          type: integer
          format: uint32
          x-field-uid: 2
        session_name:
          description: |-
            The value of RSVP-TE Session Name field of the Session Attribute object.
          type: string
          x-field-uid: 3
        label_in:
          description: |-
            The label received by RSVP-TE ingress.
          type: integer
          format: uint32
          x-field-uid: 4
        label_out:
          description: |-
            The label assigned by RSVP-TE egress.
          type: integer
          format: uint32
          x-field-uid: 5
        session_status:
          description: |-
            Operational state of the RSVP LSP.
          type: string
          x-field-uid: 6
          x-enum:
            up:
              x-field-uid: 1
            down:
              x-field-uid: 2
          enum:
          - up
          - down
        last_flap_reason:
          description: |-
            The reason for the last flap of this RSVP session.
          type: string
          x-field-uid: 7
          x-enum:
            resv_tear:
              x-field-uid: 1
            path_tear:
              x-field-uid: 2
            path_timeout:
              x-field-uid: 3
          enum:
          - resv_tear
          - path_tear
          - path_timeout
        up_time:
          description: |-
            The tunnel UP time in milli seconds. If the tunnel is DOWN the UP time will be zero.
          type: integer
          format: uint64
          x-field-uid: 8
    RsvpLsp.Ipv4Rro:
      description: "This contains the list of Record Route Object(RRO) objects associated\
        \ with the traffic engineering tunnel. The  Record Route Object(RRO) is used\
        \ in RSVP-TE to record the route traversed by the LSP. The RRO might be present\
        \ in both   Path message and Resv message, the RRO stores the IP addresses\
        \ of the routers that the traffic engineering tunnel  traversed and also the\
        \ label generated and distributed by the routers. The RROs in the Resv message\
        \ mirrors that of  the Path message, the only difference is that the RRO in\
        \ a Resv message records the path information in the reverse  direction. "
      properties:
        address:
          description: |-
            The IPv4 addresses of the routers that the traffic engineering tunnel traversed.
          type: string
          format: ipv4
          x-field-uid: 1
        reported_label:
          description: "Label reported for RRO hop. When the Label_Recording flag\
            \ is set in the Session Attribute object, nodes doing route recording\
            \ should include the Label Record subobject containing the reported label. "
          type: integer
          format: uint32
          x-field-uid: 2
    RsvpLsp.Ipv4Ero:
      description: |-
        This contains the list of sub-objects included in the Explicit Route Object(ERO) object send in the PATH message from the ingress. These sub-objects contain the intermediate hops to be traversed by the LSP while being forwarded  towards the egress endpoint.
      type: object
      properties:
        prefix:
          description: |-
            The IPv4 prefix indicated by the ERO. Specified only when the ERO hop is an IPv4 prefix.
          type: string
          format: ipv4
          x-field-uid: 1
        asn:
          description: |-
            The autonomous system number indicated by the ERO. Specified only when the ERO hop is an  2 or 4-byte AS number.
          type: integer
          format: uint32
          x-field-uid: 2
        type:
          description: |-
            The type indicated by the ERO.
          type: string
          x-field-uid: 3
          x-enum:
            ipv4:
              x-field-uid: 1
            ipv6:
              x-field-uid: 2
            asn:
              x-field-uid: 3
            asn4:
              x-field-uid: 4
            label:
              x-field-uid: 5
            unnumbered_interface:
              x-field-uid: 6
          enum:
          - ipv4
          - ipv6
          - asn
          - asn4
          - label
          - unnumbered_interface
    Capture.Request:
      description: |-
        The capture result request to the traffic generator. Stops the port capture on the port_name and returns the capture.
      type: object
      required:
      - port_name
      properties:
        port_name:
          description: |
            The name of a port a capture is started on.

            x-constraint:
            - /components/schemas/Port/properties/name


            x-constraint:
            - /components/schemas/Port/properties/name
          type: string
          x-constraint:
          - /components/schemas/Port/properties/name
          x-field-uid: 1
    Pattern.Flow.Ethernet.Dst.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Ethernet.Dst.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 47
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 48
          minimum: 1
          maximum: 48
          x-field-uid: 3
    Pattern.Flow.Ethernet.Dst:
      description: |-
        Destination MAC address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            auto:
              x-field-uid: 1
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: auto
          x-field-uid: 1
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
            format: mac
          x-field-uid: 3
          default:
          - 00:00:00:00:00:00
        auto:
          description: |-
            The OTG implementation can provide a system generated
            value for this property. If the OTG is unable to generate a value
            the default value must be used.
          type: string
          x-field-uid: 4
          default: 00:00:00:00:00:00
          format: mac
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Dst.Counter'
          x-field-uid: 6
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Dst.Counter'
          x-field-uid: 7
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ethernet.Dst.MetricTag'
          x-field-uid: 8
    Pattern.Flow.Ethernet.Src.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Ethernet.Src.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 47
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 48
          minimum: 1
          maximum: 48
          x-field-uid: 3
    Pattern.Flow.Ethernet.Src:
      description: |-
        Source MAC address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
            format: mac
          x-field-uid: 3
          default:
          - 00:00:00:00:00:00
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Src.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.Src.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ethernet.Src.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ethernet.EtherType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 65535
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
      x-constants:
        ipv4: 2048
        ipv6: 34525
        arp: 2054
        vlan_802_1_q: 33024
        reserved: 65535
    Pattern.Flow.Ethernet.EtherType.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Ethernet.EtherType:
      description: |-
        Ethernet type
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            auto:
              x-field-uid: 1
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: auto
          x-field-uid: 1
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 65535
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 65535
        auto:
          description: |-
            The OTG implementation can provide a system generated
            value for this property. If the OTG is unable to generate a value
            the default value must be used.
          type: integer
          x-field-uid: 4
          default: 65535
          format: uint32
          maximum: 65535
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.EtherType.Counter'
          x-field-uid: 6
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.EtherType.Counter'
          x-field-uid: 7
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ethernet.EtherType.MetricTag'
          x-field-uid: 8
      x-constants:
        ipv4: 2048
        ipv6: 34525
        arp: 2054
        vlan_802_1_q: 33024
        reserved: 65535
    Pattern.Flow.Ethernet.PfcQueue.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 7
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 7
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 7
    Pattern.Flow.Ethernet.PfcQueue.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 2
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 3
          minimum: 1
          maximum: 3
          x-field-uid: 3
    Pattern.Flow.Ethernet.PfcQueue:
      description: |-
        Priority flow control queue
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 7
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 7
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.PfcQueue.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ethernet.PfcQueue.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ethernet.PfcQueue.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Vlan.Priority.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 7
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 7
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 7
    Pattern.Flow.Vlan.Priority.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 2
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 3
          minimum: 1
          maximum: 3
          x-field-uid: 3
    Pattern.Flow.Vlan.Priority:
      description: |-
        Priority code point
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 7
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 7
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Priority.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Priority.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Vlan.Priority.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Vlan.Cfi.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Vlan.Cfi.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Vlan.Cfi:
      description: |-
        Canonical format indicator or drop elegible indicator
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Cfi.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Cfi.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Vlan.Cfi.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Vlan.Id.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 4095
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 4095
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 4095
    Pattern.Flow.Vlan.Id.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 11
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 12
          minimum: 1
          maximum: 12
          x-field-uid: 3
    Pattern.Flow.Vlan.Id:
      description: |-
        Vlan identifier
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 4095
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 4095
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Id.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Id.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Vlan.Id.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Vlan.Tpid.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 33024
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
      x-constants:
        x8100: 33024
        x88A8: 34984
        x9100: 37120
        x9200: 37376
        x9300: 37632
    Pattern.Flow.Vlan.Tpid.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Vlan.Tpid:
      description: |-
        Protocol identifier
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 33024
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 33024
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Tpid.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vlan.Tpid.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Vlan.Tpid.MetricTag'
          x-field-uid: 7
      x-constants:
        x8100: 33024
        x88A8: 34984
        x9100: 37120
        x9200: 37376
        x9300: 37632
    Pattern.Flow.Vxlan.Flags.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 8
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Vxlan.Flags.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Vxlan.Flags:
      description: |-
        Flags field with a bit format of RRRRIRRR. The I flag MUST be set to 1 for a valid vxlan network id (VNI).   The other 7 bits (designated "R") are reserved fields and MUST be  set to zero on transmission and ignored on receipt.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 8
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 8
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Flags.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Flags.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Vxlan.Flags.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Vxlan.Reserved0.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 16777215
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 16777215
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 16777215
    Pattern.Flow.Vxlan.Reserved0.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 23
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 24
          minimum: 1
          maximum: 24
          x-field-uid: 3
    Pattern.Flow.Vxlan.Reserved0:
      description: |-
        Reserved field
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 16777215
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 16777215
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved0.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved0.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved0.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Vxlan.Vni.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 16777215
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 16777215
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 16777215
    Pattern.Flow.Vxlan.Vni.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 23
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 24
          minimum: 1
          maximum: 24
          x-field-uid: 3
    Pattern.Flow.Vxlan.Vni:
      description: |-
        VXLAN network id
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            auto:
              x-field-uid: 1
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: auto
          x-field-uid: 1
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 16777215
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 16777215
          x-field-uid: 3
          default:
          - 0
        auto:
          description: |-
            The OTG implementation can provide a system generated
            value for this property. If the OTG is unable to generate a value
            the default value must be used.
          type: integer
          x-field-uid: 4
          default: 0
          format: uint32
          maximum: 16777215
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Vni.Counter'
          x-field-uid: 6
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Vni.Counter'
          x-field-uid: 7
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Vxlan.Vni.MetricTag'
          x-field-uid: 8
    Pattern.Flow.Vxlan.Reserved1.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Vxlan.Reserved1.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Vxlan.Reserved1:
      description: |-
        Reserved field
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved1.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved1.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Vxlan.Reserved1.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv4.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 4
          format: uint32
          maximum: 15
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 15
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 15
    Pattern.Flow.Ipv4.Version.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 3
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 4
          minimum: 1
          maximum: 4
          x-field-uid: 3
    Pattern.Flow.Ipv4.Version:
      description: |-
        Version
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 4
          format: uint32
          maximum: 15
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 15
          x-field-uid: 3
          default:
          - 4
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Version.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Version.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Version.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv4.HeaderLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 5
          format: uint32
          maximum: 15
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 15
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 15
    Pattern.Flow.Ipv4.HeaderLength.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 3
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 4
          minimum: 1
          maximum: 4
          x-field-uid: 3
    Pattern.Flow.Ipv4.HeaderLength:
      description: |-
        Header length
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            auto:
              x-field-uid: 1
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: auto
          x-field-uid: 1
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 5
          format: uint32
          maximum: 15
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 15
          x-field-uid: 3
          default:
          - 5
        auto:
          description: |-
            The OTG implementation can provide a system generated
            value for this property. If the OTG is unable to generate a value
            the default value must be used.
          type: integer
          x-field-uid: 4
          default: 5
          format: uint32
          maximum: 15
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.HeaderLength.Counter'
          x-field-uid: 6
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.HeaderLength.Counter'
          x-field-uid: 7
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.HeaderLength.MetricTag'
          x-field-uid: 8
    Pattern.Flow.Ipv4.TotalLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 46
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Ipv4.TotalLength.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Ipv4.TotalLength:
      description: |-
        Total length
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            auto:
              x-field-uid: 1
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: auto
          x-field-uid: 1
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 46
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 46
        auto:
          description: |-
            The OTG implementation can provide a system generated
            value for this property. If the OTG is unable to generate a value
            the default value must be used.
          type: integer
          x-field-uid: 4
          default: 46
          format: uint32
          maximum: 65535
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TotalLength.Counter'
          x-field-uid: 6
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TotalLength.Counter'
          x-field-uid: 7
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.TotalLength.MetricTag'
          x-field-uid: 8
    Pattern.Flow.Ipv4.Identification.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Ipv4.Identification.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Ipv4.Identification:
      description: |-
        Identification
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Identification.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Identification.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Identification.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv4.Reserved.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Ipv4.Reserved.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Ipv4.Reserved:
      description: |-
        Reserved flag.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Reserved.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Reserved.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Reserved.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv4.DontFragment.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Ipv4.DontFragment.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Ipv4.DontFragment:
      description: |-
        Dont fragment flag If the dont_fragment flag is set and fragmentation is required to route the packet then the packet is dropped.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.DontFragment.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.DontFragment.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.DontFragment.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv4.MoreFragments.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Ipv4.MoreFragments.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Ipv4.MoreFragments:
      description: |-
        More fragments flag
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.MoreFragments.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.MoreFragments.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.MoreFragments.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv4.FragmentOffset.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 31
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 31
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 31
    Pattern.Flow.Ipv4.FragmentOffset.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 4
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 5
          minimum: 1
          maximum: 5
          x-field-uid: 3
    Pattern.Flow.Ipv4.FragmentOffset:
      description: |-
        Fragment offset
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 31
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 31
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.FragmentOffset.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.FragmentOffset.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.FragmentOffset.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv4.TimeToLive.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 64
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Ipv4.TimeToLive.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Ipv4.TimeToLive:
      description: |-
        Time to live
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 64
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 64
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TimeToLive.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.TimeToLive.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.TimeToLive.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv4.Protocol.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 61
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Ipv4.Protocol.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Ipv4.Protocol:
      description: |-
        Protocol, default is 61 any host internal protocol
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            auto:
              x-field-uid: 1
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: auto
          x-field-uid: 1
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 61
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 61
        auto:
          description: |-
            The OTG implementation can provide a system generated
            value for this property. If the OTG is unable to generate a value
            the default value must be used.
          type: integer
          x-field-uid: 4
          default: 61
          format: uint32
          maximum: 255
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Protocol.Counter'
          x-field-uid: 6
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Protocol.Counter'
          x-field-uid: 7
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Protocol.MetricTag'
          x-field-uid: 8
    Pattern.Flow.Ipv4.HeaderChecksum:
      description: |-
        Header checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          x-enum:
            generated:
              x-field-uid: 1
            custom:
              x-field-uid: 2
          default: generated
          x-field-uid: 1
          enum:
          - generated
          - custom
        generated:
          description: |-
            A system generated checksum value
          type: string
          x-enum:
            good:
              x-field-uid: 1
            bad:
              x-field-uid: 2
          default: good
          x-field-uid: 2
          enum:
          - good
          - bad
        custom:
          description: |-
            A custom checksum value
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 3
    Pattern.Flow.Ipv4.Src.Counter:
      description: |-
        ipv4 counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 0.0.0.0
          format: ipv4
        step:
          type: string
          x-field-uid: 2
          default: 0.0.0.1
          format: ipv4
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Ipv4.Src.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 31
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 32
          minimum: 1
          maximum: 32
          x-field-uid: 3
    Pattern.Flow.Ipv4.Src:
      description: |-
        Source address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 0.0.0.0
          format: ipv4
        values:
          type: array
          items:
            type: string
            format: ipv4
          x-field-uid: 3
          default:
          - 0.0.0.0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Src.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Src.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Src.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv4.Dst.Counter:
      description: |-
        ipv4 counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 0.0.0.0
          format: ipv4
        step:
          type: string
          x-field-uid: 2
          default: 0.0.0.1
          format: ipv4
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Ipv4.Dst.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 31
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 32
          minimum: 1
          maximum: 32
          x-field-uid: 3
    Pattern.Flow.Ipv4.Dst:
      description: |-
        Destination address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 0.0.0.0
          format: ipv4
        values:
          type: array
          items:
            type: string
            format: ipv4
          x-field-uid: 3
          default:
          - 0.0.0.0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dst.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dst.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dst.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv4.Priority.Raw.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Ipv4.Priority.Raw.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Ipv4.Priority.Raw:
      description: |-
        Raw priority
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Priority.Raw.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Priority.Raw.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Priority.Raw.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv4.Dscp.Phb.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 63
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 63
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 63
      x-constants:
        default: 0
        cs1: 8
        cs2: 16
        cs3: 24
        cs4: 32
        cs5: 40
        cs6: 48
        cs7: 56
        af11: 10
        af12: 12
        af13: 14
        af21: 18
        af22: 20
        af23: 22
        af31: 26
        af32: 28
        af33: 30
        af41: 34
        af42: 36
        af43: 38
        ef46: 46
    Pattern.Flow.Ipv4.Dscp.Phb.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 5
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 6
          minimum: 1
          maximum: 6
          x-field-uid: 3
    Pattern.Flow.Ipv4.Dscp.Phb:
      description: |-
        Per hop behavior
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 63
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 63
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Phb.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Phb.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Phb.MetricTag'
          x-field-uid: 7
      x-constants:
        default: 0
        cs1: 8
        cs2: 16
        cs3: 24
        cs4: 32
        cs5: 40
        cs6: 48
        cs7: 56
        af11: 10
        af12: 12
        af13: 14
        af21: 18
        af22: 20
        af23: 22
        af31: 26
        af32: 28
        af33: 30
        af41: 34
        af42: 36
        af43: 38
        ef46: 46
    Pattern.Flow.Ipv4.Dscp.Ecn.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 3
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 3
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 3
      x-constants:
        non_capable: 0
        capable_transport_0: 1
        capable_transport_1: 2
        congestion_encountered: 3
    Pattern.Flow.Ipv4.Dscp.Ecn.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 1
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 2
          minimum: 1
          maximum: 2
          x-field-uid: 3
    Pattern.Flow.Ipv4.Dscp.Ecn:
      description: |-
        Explicit congestion notification
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 3
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 3
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Ecn.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Ecn.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Dscp.Ecn.MetricTag'
          x-field-uid: 7
      x-constants:
        non_capable: 0
        capable_transport_0: 1
        capable_transport_1: 2
        congestion_encountered: 3
    Pattern.Flow.Ipv4.Tos.Precedence.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 7
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 7
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 7
      x-constants:
        routine: 0
        priority: 1
        immediate: 2
        flash: 3
        flash_override: 4
        critic_ecp: 5
        internetwork_control: 6
        network_control: 7
    Pattern.Flow.Ipv4.Tos.Precedence.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 2
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 3
          minimum: 1
          maximum: 3
          x-field-uid: 3
    Pattern.Flow.Ipv4.Tos.Precedence:
      description: |-
        Precedence
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 7
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 7
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Precedence.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Precedence.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Precedence.MetricTag'
          x-field-uid: 7
      x-constants:
        routine: 0
        priority: 1
        immediate: 2
        flash: 3
        flash_override: 4
        critic_ecp: 5
        internetwork_control: 6
        network_control: 7
    Pattern.Flow.Ipv4.Tos.Delay.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Delay.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Ipv4.Tos.Delay:
      description: |-
        Delay
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Delay.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Delay.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Delay.MetricTag'
          x-field-uid: 7
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Throughput.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Throughput.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Ipv4.Tos.Throughput:
      description: |-
        Throughput
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Throughput.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Throughput.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Throughput.MetricTag'
          x-field-uid: 7
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Reliability.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Reliability.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Ipv4.Tos.Reliability:
      description: |-
        Reliability
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Reliability.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Reliability.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Reliability.MetricTag'
          x-field-uid: 7
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Monetary.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Monetary.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Ipv4.Tos.Monetary:
      description: |-
        Monetary
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Monetary.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Monetary.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Monetary.MetricTag'
          x-field-uid: 7
      x-constants:
        normal: 0
        low: 1
    Pattern.Flow.Ipv4.Tos.Unused.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Ipv4.Tos.Unused.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Ipv4.Tos.Unused:
      description: |-
        Unused
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Unused.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Unused.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv4.Tos.Unused.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv6.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 6
          format: uint32
          maximum: 15
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 15
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 15
    Pattern.Flow.Ipv6.Version.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 3
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 4
          minimum: 1
          maximum: 4
          x-field-uid: 3
    Pattern.Flow.Ipv6.Version:
      description: |-
        Version number
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 6
          format: uint32
          maximum: 15
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 15
          x-field-uid: 3
          default:
          - 6
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Version.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Version.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv6.Version.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv6.TrafficClass.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Ipv6.TrafficClass.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Ipv6.TrafficClass:
      description: |-
        Traffic class
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.TrafficClass.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.TrafficClass.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv6.TrafficClass.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv6.FlowLabel.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1048575
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1048575
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1048575
    Pattern.Flow.Ipv6.FlowLabel.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 19
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 20
          minimum: 1
          maximum: 20
          x-field-uid: 3
    Pattern.Flow.Ipv6.FlowLabel:
      description: |-
        Flow label
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1048575
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1048575
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.FlowLabel.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.FlowLabel.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv6.FlowLabel.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv6.PayloadLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Ipv6.PayloadLength.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Ipv6.PayloadLength:
      description: |-
        Payload length
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            auto:
              x-field-uid: 1
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: auto
          x-field-uid: 1
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        auto:
          description: |-
            The OTG implementation can provide a system generated
            value for this property. If the OTG is unable to generate a value
            the default value must be used.
          type: integer
          x-field-uid: 4
          default: 0
          format: uint32
          maximum: 65535
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.PayloadLength.Counter'
          x-field-uid: 6
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.PayloadLength.Counter'
          x-field-uid: 7
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv6.PayloadLength.MetricTag'
          x-field-uid: 8
    Pattern.Flow.Ipv6.NextHeader.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 59
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
      x-constants:
        hopopt: 0
        icmp: 1
        igmp: 2
        ggp: 3
        ip_in_ip: 4
        st: 5
        tcp: 6
        cpt: 7
        egp: 8
        igp: 9
        no_next_header: 59
    Pattern.Flow.Ipv6.NextHeader.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Ipv6.NextHeader:
      description: |-
        Next header
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            auto:
              x-field-uid: 1
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: auto
          x-field-uid: 1
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 59
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 59
        auto:
          description: |-
            The OTG implementation can provide a system generated
            value for this property. If the OTG is unable to generate a value
            the default value must be used.
          type: integer
          x-field-uid: 4
          default: 59
          format: uint32
          maximum: 255
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.NextHeader.Counter'
          x-field-uid: 6
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.NextHeader.Counter'
          x-field-uid: 7
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv6.NextHeader.MetricTag'
          x-field-uid: 8
      x-constants:
        hopopt: 0
        icmp: 1
        igmp: 2
        ggp: 3
        ip_in_ip: 4
        st: 5
        tcp: 6
        cpt: 7
        egp: 8
        igp: 9
        no_next_header: 59
    Pattern.Flow.Ipv6.HopLimit.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 64
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Ipv6.HopLimit.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Ipv6.HopLimit:
      description: |-
        Hop limit
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 64
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 64
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.HopLimit.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.HopLimit.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv6.HopLimit.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv6.Src.Counter:
      description: |-
        ipv6 counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: ::0
          format: ipv6
        step:
          type: string
          x-field-uid: 2
          default: ::1
          format: ipv6
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Ipv6.Src.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 127
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 128
          minimum: 1
          maximum: 128
          x-field-uid: 3
    Pattern.Flow.Ipv6.Src:
      description: |-
        Source address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: ::0
          format: ipv6
        values:
          type: array
          items:
            type: string
            format: ipv6
          x-field-uid: 3
          default:
          - ::0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Src.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Src.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv6.Src.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Ipv6.Dst.Counter:
      description: |-
        ipv6 counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: ::0
          format: ipv6
        step:
          type: string
          x-field-uid: 2
          default: ::1
          format: ipv6
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Ipv6.Dst.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 127
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 128
          minimum: 1
          maximum: 128
          x-field-uid: 3
    Pattern.Flow.Ipv6.Dst:
      description: |-
        Destination address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: ::0
          format: ipv6
        values:
          type: array
          items:
            type: string
            format: ipv6
          x-field-uid: 3
          default:
          - ::0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Dst.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ipv6.Dst.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ipv6.Dst.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.Dst.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 01:80:c2:00:00:01
          format: mac
        step:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.PfcPause.Dst.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 47
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 48
          minimum: 1
          maximum: 48
          x-field-uid: 3
    Pattern.Flow.PfcPause.Dst:
      description: |-
        Destination MAC address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 01:80:c2:00:00:01
          format: mac
        values:
          type: array
          items:
            type: string
            format: mac
          x-field-uid: 3
          default:
          - 01:80:c2:00:00:01
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Dst.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Dst.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.Dst.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.Src.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.PfcPause.Src.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 47
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 48
          minimum: 1
          maximum: 48
          x-field-uid: 3
    Pattern.Flow.PfcPause.Src:
      description: |-
        Source MAC address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
            format: mac
          x-field-uid: 3
          default:
          - 00:00:00:00:00:00
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Src.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.Src.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.Src.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.EtherType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 34824
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
      x-constants:
        x8808: 34824
    Pattern.Flow.PfcPause.EtherType.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.PfcPause.EtherType:
      description: |-
        Ethernet type
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 34824
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 34824
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.EtherType.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.EtherType.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.EtherType.MetricTag'
          x-field-uid: 7
      x-constants:
        x8808: 34824
    Pattern.Flow.PfcPause.ControlOpCode.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 257
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.PfcPause.ControlOpCode.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.PfcPause.ControlOpCode:
      description: |-
        Control operation code
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 257
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 257
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ControlOpCode.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ControlOpCode.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.ControlOpCode.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.ClassEnableVector.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.PfcPause.ClassEnableVector.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.PfcPause.ClassEnableVector:
      description: |-
        Destination
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ClassEnableVector.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.ClassEnableVector.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.ClassEnableVector.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.PauseClass0.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.PfcPause.PauseClass0.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.PfcPause.PauseClass0:
      description: |-
        Pause class 0
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass0.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass0.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass0.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.PauseClass1.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.PfcPause.PauseClass1.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.PfcPause.PauseClass1:
      description: |-
        Pause class 1
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass1.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass1.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass1.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.PauseClass2.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.PfcPause.PauseClass2.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.PfcPause.PauseClass2:
      description: |-
        Pause class 2
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass2.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass2.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass2.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.PauseClass3.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.PfcPause.PauseClass3.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.PfcPause.PauseClass3:
      description: |-
        Pause class 3
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass3.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass3.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass3.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.PauseClass4.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.PfcPause.PauseClass4.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.PfcPause.PauseClass4:
      description: |-
        Pause class 4
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass4.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass4.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass4.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.PauseClass5.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.PfcPause.PauseClass5.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.PfcPause.PauseClass5:
      description: |-
        Pause class 5
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass5.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass5.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass5.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.PauseClass6.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.PfcPause.PauseClass6.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.PfcPause.PauseClass6:
      description: |-
        Pause class 6
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass6.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass6.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass6.MetricTag'
          x-field-uid: 7
    Pattern.Flow.PfcPause.PauseClass7.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.PfcPause.PauseClass7.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.PfcPause.PauseClass7:
      description: |-
        Pause class 7
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass7.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass7.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.PfcPause.PauseClass7.MetricTag'
          x-field-uid: 7
    Pattern.Flow.EthernetPause.Dst.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 01:80:c2:00:00:01
          format: mac
        step:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.EthernetPause.Dst.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 47
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 48
          minimum: 1
          maximum: 48
          x-field-uid: 3
    Pattern.Flow.EthernetPause.Dst:
      description: |-
        Destination MAC address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 01:80:c2:00:00:01
          format: mac
        values:
          type: array
          items:
            type: string
            format: mac
          x-field-uid: 3
          default:
          - 01:80:c2:00:00:01
        increment:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Dst.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Dst.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Dst.MetricTag'
          x-field-uid: 7
    Pattern.Flow.EthernetPause.Src.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.EthernetPause.Src.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 47
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 48
          minimum: 1
          maximum: 48
          x-field-uid: 3
    Pattern.Flow.EthernetPause.Src:
      description: |-
        Source MAC address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
            format: mac
          x-field-uid: 3
          default:
          - 00:00:00:00:00:00
        increment:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Src.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Src.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Src.MetricTag'
          x-field-uid: 7
    Pattern.Flow.EthernetPause.EtherType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 34824
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
      x-constants:
        flow_control: 34824
    Pattern.Flow.EthernetPause.EtherType.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.EthernetPause.EtherType:
      description: |-
        Ethernet type
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 34824
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 34824
        increment:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.EtherType.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.EtherType.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.EthernetPause.EtherType.MetricTag'
          x-field-uid: 7
      x-constants:
        flow_control: 34824
    Pattern.Flow.EthernetPause.ControlOpCode.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 1
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.EthernetPause.ControlOpCode.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.EthernetPause.ControlOpCode:
      description: |-
        Control operation code
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 1
        increment:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.ControlOpCode.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.ControlOpCode.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.EthernetPause.ControlOpCode.MetricTag'
          x-field-uid: 7
    Pattern.Flow.EthernetPause.Time.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.EthernetPause.Time.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.EthernetPause.Time:
      description: |-
        Time
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Time.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Time.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.EthernetPause.Time.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.SrcPort.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Tcp.SrcPort.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Tcp.SrcPort:
      description: |-
        Source port
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SrcPort.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SrcPort.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.SrcPort.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.DstPort.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Tcp.DstPort.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Tcp.DstPort:
      description: |-
        Destination port
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DstPort.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DstPort.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.DstPort.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.SeqNum.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Tcp.SeqNum.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 31
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 32
          minimum: 1
          maximum: 32
          x-field-uid: 3
    Pattern.Flow.Tcp.SeqNum:
      description: |-
        Sequence number
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
        values:
          type: array
          items:
            type: integer
            format: uint32
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SeqNum.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.SeqNum.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.SeqNum.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.AckNum.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Tcp.AckNum.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 31
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 32
          minimum: 1
          maximum: 32
          x-field-uid: 3
    Pattern.Flow.Tcp.AckNum:
      description: |-
        Acknowledgement number
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
        values:
          type: array
          items:
            type: integer
            format: uint32
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.AckNum.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.AckNum.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.AckNum.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.DataOffset.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 15
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 15
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 15
    Pattern.Flow.Tcp.DataOffset.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 3
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 4
          minimum: 1
          maximum: 4
          x-field-uid: 3
    Pattern.Flow.Tcp.DataOffset:
      description: |-
        The number of 32 bit words in the TCP header. This indicates where the data begins.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 15
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 15
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DataOffset.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.DataOffset.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.DataOffset.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.EcnNs.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Tcp.EcnNs.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Tcp.EcnNs:
      description: |-
        Explicit congestion notification, concealment protection.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnNs.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnNs.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnNs.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.EcnCwr.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Tcp.EcnCwr.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Tcp.EcnCwr:
      description: |-
        Explicit congestion notification, congestion window reduced.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnCwr.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnCwr.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnCwr.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.EcnEcho.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Tcp.EcnEcho.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Tcp.EcnEcho:
      description: |-
        Explicit congestion notification, echo. 1 indicates the peer is ecn capable. 0 indicates that a packet with ipv4.ecn = 11 in the ip header was  received during normal transmission.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnEcho.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnEcho.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.EcnEcho.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.CtlUrg.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Tcp.CtlUrg.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Tcp.CtlUrg:
      description: |-
        A value of 1 indicates that the urgent pointer field is significant.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlUrg.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlUrg.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlUrg.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.CtlAck.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Tcp.CtlAck.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Tcp.CtlAck:
      description: |-
        A value of 1 indicates that the ackknowledgment field is significant.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlAck.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlAck.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlAck.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.CtlPsh.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Tcp.CtlPsh.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Tcp.CtlPsh:
      description: "Asks to push the buffered data to the receiving application. "
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlPsh.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlPsh.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlPsh.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.CtlRst.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Tcp.CtlRst.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Tcp.CtlRst:
      description: "Reset the connection. "
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlRst.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlRst.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlRst.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.CtlSyn.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Tcp.CtlSyn.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Tcp.CtlSyn:
      description: "Synchronize sequenece numbers. "
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlSyn.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlSyn.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlSyn.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.CtlFin.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Tcp.CtlFin.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Tcp.CtlFin:
      description: "Last packet from the sender. "
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlFin.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlFin.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.CtlFin.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Tcp.Window.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Tcp.Window.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Tcp.Window:
      description: |-
        Tcp connection window.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.Window.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Tcp.Window.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Tcp.Window.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Udp.SrcPort.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Udp.SrcPort.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Udp.SrcPort:
      description: |-
        Source port
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Udp.SrcPort.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Udp.SrcPort.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Udp.SrcPort.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Udp.DstPort.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Udp.DstPort.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Udp.DstPort:
      description: |-
        Destination port
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Udp.DstPort.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Udp.DstPort.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Udp.DstPort.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Udp.Length.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Udp.Length.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Udp.Length:
      description: |-
        Length
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Udp.Length.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Udp.Length.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Udp.Length.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Udp.Checksum:
      description: |-
        UDP checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          x-enum:
            generated:
              x-field-uid: 1
            custom:
              x-field-uid: 2
          default: generated
          x-field-uid: 1
          enum:
          - generated
          - custom
        generated:
          description: |-
            A system generated checksum value
          type: string
          x-enum:
            good:
              x-field-uid: 1
            bad:
              x-field-uid: 2
          default: good
          x-field-uid: 2
          enum:
          - good
          - bad
        custom:
          description: |-
            A custom checksum value
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 3
    Pattern.Flow.Gre.ChecksumPresent.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Gre.ChecksumPresent.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Gre.ChecksumPresent:
      description: |-
        Checksum present bit
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gre.ChecksumPresent.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gre.ChecksumPresent.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gre.ChecksumPresent.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gre.Reserved0.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 4095
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 4095
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 4095
    Pattern.Flow.Gre.Reserved0.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 11
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 12
          minimum: 1
          maximum: 12
          x-field-uid: 3
    Pattern.Flow.Gre.Reserved0:
      description: |-
        Reserved bits
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 4095
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 4095
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved0.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved0.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved0.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gre.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 7
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 7
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 7
    Pattern.Flow.Gre.Version.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 2
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 3
          minimum: 1
          maximum: 3
          x-field-uid: 3
    Pattern.Flow.Gre.Version:
      description: |-
        GRE version number
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 7
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 7
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Version.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Version.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gre.Version.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gre.Protocol.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 2048
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
      x-constants:
        ipv4: 2048
        ipv6: 34525
    Pattern.Flow.Gre.Protocol.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Gre.Protocol:
      description: |-
        Protocol type of encapsulated payload
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 2048
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 2048
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Protocol.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Protocol.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gre.Protocol.MetricTag'
          x-field-uid: 7
      x-constants:
        ipv4: 2048
        ipv6: 34525
    Pattern.Flow.Gre.Checksum:
      description: |-
        Optional checksum of GRE header and payload. Only present if the checksum_present bit is set.
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          x-enum:
            generated:
              x-field-uid: 1
            custom:
              x-field-uid: 2
          default: generated
          x-field-uid: 1
          enum:
          - generated
          - custom
        generated:
          description: |-
            A system generated checksum value
          type: string
          x-enum:
            good:
              x-field-uid: 1
            bad:
              x-field-uid: 2
          default: good
          x-field-uid: 2
          enum:
          - good
          - bad
        custom:
          description: |-
            A custom checksum value
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 3
    Pattern.Flow.Gre.Reserved1.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Gre.Reserved1.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Gre.Reserved1:
      description: |-
        Optional reserved field. Only present if the checksum_present bit is set.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved1.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved1.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gre.Reserved1.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 1
          format: uint32
          maximum: 7
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 7
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 7
    Pattern.Flow.Gtpv1.Version.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 2
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 3
          minimum: 1
          maximum: 3
          x-field-uid: 3
    Pattern.Flow.Gtpv1.Version:
      description: |-
        GTPv1 version
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 7
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 7
          x-field-uid: 3
          default:
          - 1
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Version.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Version.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Version.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.ProtocolType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 1
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Gtpv1.ProtocolType.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Gtpv1.ProtocolType:
      description: |-
        Protocol type, GTP is 1, GTP' is 0
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 1
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.ProtocolType.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.ProtocolType.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.ProtocolType.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.Reserved.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Gtpv1.Reserved.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Gtpv1.Reserved:
      description: |-
        Reserved field
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Reserved.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Reserved.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Reserved.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.EFlag.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Gtpv1.EFlag.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Gtpv1.EFlag:
      description: |-
        Extension header field present
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.EFlag.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.EFlag.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.EFlag.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.SFlag.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Gtpv1.SFlag.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Gtpv1.SFlag:
      description: |-
        Sequence number field present
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SFlag.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SFlag.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SFlag.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.PnFlag.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Gtpv1.PnFlag.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Gtpv1.PnFlag:
      description: |-
        N-PDU field present
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.PnFlag.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.PnFlag.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.PnFlag.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.MessageType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Gtpv1.MessageType.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Gtpv1.MessageType:
      description: |-
        The type of GTP message Different types of messages are defined in 3GPP TS 29.060 section 7.1
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageType.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageType.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageType.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.MessageLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Gtpv1.MessageLength.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Gtpv1.MessageLength:
      description: |-
        The length of the payload (the bytes following the mandatory 8-byte GTP header) in bytes that includes any optional fields
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageLength.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageLength.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.MessageLength.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.Teid.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Gtpv1.Teid.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 31
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 32
          minimum: 1
          maximum: 32
          x-field-uid: 3
    Pattern.Flow.Gtpv1.Teid:
      description: |-
        Tunnel endpoint identifier (TEID) used to multiplex connections in the same GTP tunnel
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
        values:
          type: array
          items:
            type: integer
            format: uint32
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Teid.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Teid.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.Teid.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.SquenceNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Gtpv1.SquenceNumber.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Gtpv1.SquenceNumber:
      description: |-
        Sequence number. Exists if any of the e_flag, s_flag, or pn_flag bits are on.  Must be interpreted only if the s_flag bit is on.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SquenceNumber.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SquenceNumber.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.SquenceNumber.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.NPduNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Gtpv1.NPduNumber.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Gtpv1.NPduNumber:
      description: |-
        N-PDU number. Exists if any of the e_flag, s_flag, or pn_flag bits are on.  Must be interpreted only if the pn_flag bit is on.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NPduNumber.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NPduNumber.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NPduNumber.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv1.NextExtensionHeaderType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Gtpv1.NextExtensionHeaderType.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Gtpv1.NextExtensionHeaderType:
      description: |-
        Next extension header. Exists if any of the e_flag, s_flag, or pn_flag bits are on.  Must be interpreted only if the e_flag bit is on.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NextExtensionHeaderType.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NextExtensionHeaderType.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv1.NextExtensionHeaderType.MetricTag'
          x-field-uid: 7
    Pattern.Flow.GtpExtension.ExtensionLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.GtpExtension.ExtensionLength.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.GtpExtension.ExtensionLength:
      description: |-
        This field states the length of this extension header,  including the length, the contents, and the next extension header field, in 4-octet units, so the length of the extension must  always be a multiple of 4.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.ExtensionLength.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.ExtensionLength.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.GtpExtension.ExtensionLength.MetricTag'
          x-field-uid: 7
    Pattern.Flow.GtpExtension.Contents.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint64
          maximum: 281474976710655
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint64
          maximum: 281474976710655
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint64
          maximum: 281474976710655
    Pattern.Flow.GtpExtension.Contents.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint64
          default: 0
          maximum: 47
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint64
          default: 48
          minimum: 1
          maximum: 48
          x-field-uid: 3
    Pattern.Flow.GtpExtension.Contents:
      description: |-
        The extension header contents
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint64
          maximum: 281474976710655
        values:
          type: array
          items:
            type: integer
            format: uint64
            maximum: 281474976710655
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.Contents.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.Contents.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.GtpExtension.Contents.MetricTag'
          x-field-uid: 7
    Pattern.Flow.GtpExtension.NextExtensionHeader.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.GtpExtension.NextExtensionHeader.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.GtpExtension.NextExtensionHeader:
      description: |-
        It states the type of the next extension, or 0 if no next  extension exists.  This permits chaining several next extension headers.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.NextExtensionHeader.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.GtpExtension.NextExtensionHeader.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.GtpExtension.NextExtensionHeader.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv2.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 2
          format: uint32
          maximum: 7
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 7
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 7
    Pattern.Flow.Gtpv2.Version.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 2
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 3
          minimum: 1
          maximum: 3
          x-field-uid: 3
    Pattern.Flow.Gtpv2.Version:
      description: |-
        Version number
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 2
          format: uint32
          maximum: 7
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 7
          x-field-uid: 3
          default:
          - 2
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Version.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Version.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Version.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv2.PiggybackingFlag.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Gtpv2.PiggybackingFlag.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Gtpv2.PiggybackingFlag:
      description: |-
        If piggybacking_flag is set to 1 then another GTP-C message with its own header shall be present at the end of the current message
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.PiggybackingFlag.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.PiggybackingFlag.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv2.PiggybackingFlag.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv2.TeidFlag.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Gtpv2.TeidFlag.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Gtpv2.TeidFlag:
      description: |-
        If teid_flag is set to 1 then the TEID field will be present  between the message length and the sequence number. All messages except Echo and Echo reply require TEID to be present
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.TeidFlag.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.TeidFlag.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv2.TeidFlag.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv2.Spare1.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 7
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 7
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 7
    Pattern.Flow.Gtpv2.Spare1.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 2
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 3
          minimum: 1
          maximum: 3
          x-field-uid: 3
    Pattern.Flow.Gtpv2.Spare1:
      description: |-
        A 3-bit reserved field (must be 0).
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 7
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 7
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare1.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare1.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare1.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv2.MessageType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Gtpv2.MessageType.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Gtpv2.MessageType:
      description: |-
        An 8-bit field that indicates the type of GTP message. Different types of messages are defined in 3GPP TS 29.060 section 7.1
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageType.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageType.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageType.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv2.MessageLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Gtpv2.MessageLength.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Gtpv2.MessageLength:
      description: |-
        A 16-bit field that indicates the length of the payload in bytes, excluding the mandatory GTP-c header (first 4 bytes). Includes the TEID and sequence_number if they are present.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageLength.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageLength.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv2.MessageLength.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv2.Teid.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Gtpv2.Teid.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 31
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 32
          minimum: 1
          maximum: 32
          x-field-uid: 3
    Pattern.Flow.Gtpv2.Teid:
      description: |-
        Tunnel endpoint identifier. A 32-bit (4-octet) field used to multiplex different connections in the same GTP tunnel. Is present only if the teid_flag is set.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
        values:
          type: array
          items:
            type: integer
            format: uint32
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Teid.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Teid.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Teid.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv2.SequenceNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 16777215
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 16777215
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 16777215
    Pattern.Flow.Gtpv2.SequenceNumber.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 23
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 24
          minimum: 1
          maximum: 24
          x-field-uid: 3
    Pattern.Flow.Gtpv2.SequenceNumber:
      description: |-
        The sequence number
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 16777215
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 16777215
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.SequenceNumber.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.SequenceNumber.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv2.SequenceNumber.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Gtpv2.Spare2.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Gtpv2.Spare2.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Gtpv2.Spare2:
      description: |-
        Reserved field
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare2.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare2.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Gtpv2.Spare2.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Arp.HardwareType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 1
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
      x-constants:
        ethernet: 1
    Pattern.Flow.Arp.HardwareType.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Arp.HardwareType:
      description: |-
        Network link protocol type
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 1
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareType.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareType.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareType.MetricTag'
          x-field-uid: 7
      x-constants:
        ethernet: 1
    Pattern.Flow.Arp.ProtocolType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 2048
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
      x-constants:
        ipv4: 2048
        ipv6: 34525
    Pattern.Flow.Arp.ProtocolType.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Arp.ProtocolType:
      description: |-
        The internetwork protocol for which the ARP request is intended
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 2048
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 2048
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolType.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolType.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolType.MetricTag'
          x-field-uid: 7
      x-constants:
        ipv4: 2048
        ipv6: 34525
    Pattern.Flow.Arp.HardwareLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 6
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Arp.HardwareLength.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Arp.HardwareLength:
      description: |-
        Length (in octets) of a hardware address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 6
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 6
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareLength.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareLength.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Arp.HardwareLength.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Arp.ProtocolLength.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 4
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Arp.ProtocolLength.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Arp.ProtocolLength:
      description: |-
        Length (in octets) of internetwork addresses
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 4
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 4
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolLength.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolLength.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Arp.ProtocolLength.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Arp.Operation.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 1
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
      x-constants:
        request: 1
        reply: 2
    Pattern.Flow.Arp.Operation.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Arp.Operation:
      description: |-
        The operation that the sender is performing
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 1
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.Operation.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.Operation.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Arp.Operation.MetricTag'
          x-field-uid: 7
      x-constants:
        request: 1
        reply: 2
    Pattern.Flow.Arp.SenderHardwareAddr.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Arp.SenderHardwareAddr.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 47
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 48
          minimum: 1
          maximum: 48
          x-field-uid: 3
    Pattern.Flow.Arp.SenderHardwareAddr:
      description: |-
        Media address of the sender
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
            format: mac
          x-field-uid: 3
          default:
          - 00:00:00:00:00:00
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderHardwareAddr.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderHardwareAddr.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Arp.SenderHardwareAddr.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Arp.SenderProtocolAddr.Counter:
      description: |-
        ipv4 counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 0.0.0.0
          format: ipv4
        step:
          type: string
          x-field-uid: 2
          default: 0.0.0.1
          format: ipv4
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Arp.SenderProtocolAddr.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 31
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 32
          minimum: 1
          maximum: 32
          x-field-uid: 3
    Pattern.Flow.Arp.SenderProtocolAddr:
      description: |-
        Internetwork address of the sender
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 0.0.0.0
          format: ipv4
        values:
          type: array
          items:
            type: string
            format: ipv4
          x-field-uid: 3
          default:
          - 0.0.0.0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderProtocolAddr.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.SenderProtocolAddr.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Arp.SenderProtocolAddr.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Arp.TargetHardwareAddr.Counter:
      description: |-
        mac counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 00:00:00:00:00:00
          format: mac
        step:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:01
          format: mac
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Arp.TargetHardwareAddr.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 47
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 48
          minimum: 1
          maximum: 48
          x-field-uid: 3
    Pattern.Flow.Arp.TargetHardwareAddr:
      description: |-
        Media address of the target
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 00:00:00:00:00:00
          format: mac
        values:
          type: array
          items:
            type: string
            format: mac
          x-field-uid: 3
          default:
          - 00:00:00:00:00:00
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetHardwareAddr.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetHardwareAddr.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Arp.TargetHardwareAddr.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Arp.TargetProtocolAddr.Counter:
      description: |-
        ipv4 counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 0.0.0.0
          format: ipv4
        step:
          type: string
          x-field-uid: 2
          default: 0.0.0.1
          format: ipv4
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Arp.TargetProtocolAddr.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 31
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 32
          minimum: 1
          maximum: 32
          x-field-uid: 3
    Pattern.Flow.Arp.TargetProtocolAddr:
      description: |-
        Internetwork address of the target
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 0.0.0.0
          format: ipv4
        values:
          type: array
          items:
            type: string
            format: ipv4
          x-field-uid: 3
          default:
          - 0.0.0.0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetProtocolAddr.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Arp.TargetProtocolAddr.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Arp.TargetProtocolAddr.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Icmp.Echo.Type.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 8
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
      x-constants:
        reply: 0
        request: 8
    Pattern.Flow.Icmp.Echo.Type.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Icmp.Echo.Type:
      description: |-
        The type of ICMP echo packet
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 8
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 8
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Type.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Type.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Type.MetricTag'
          x-field-uid: 7
      x-constants:
        reply: 0
        request: 8
    Pattern.Flow.Icmp.Echo.Code.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Icmp.Echo.Code.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Icmp.Echo.Code:
      description: |-
        The ICMP subtype.  The default code for ICMP echo request and reply is 0.
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Code.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Code.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Code.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Icmp.Echo.Checksum:
      description: |-
        ICMP checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          x-enum:
            generated:
              x-field-uid: 1
            custom:
              x-field-uid: 2
          default: generated
          x-field-uid: 1
          enum:
          - generated
          - custom
        generated:
          description: |-
            A system generated checksum value
          type: string
          x-enum:
            good:
              x-field-uid: 1
            bad:
              x-field-uid: 2
          default: good
          x-field-uid: 2
          enum:
          - good
          - bad
        custom:
          description: |-
            A custom checksum value
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 3
    Pattern.Flow.Icmp.Echo.Identifier.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Icmp.Echo.Identifier.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Icmp.Echo.Identifier:
      description: |-
        ICMP identifier
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Identifier.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Identifier.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.Identifier.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Icmp.Echo.SequenceNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Icmp.Echo.SequenceNumber.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Icmp.Echo.SequenceNumber:
      description: |-
        ICMP sequence number
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.SequenceNumber.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.SequenceNumber.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Icmp.Echo.SequenceNumber.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Icmp.Common.Checksum:
      description: |-
        ICMP checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          x-enum:
            generated:
              x-field-uid: 1
            custom:
              x-field-uid: 2
          default: generated
          x-field-uid: 1
          enum:
          - generated
          - custom
        generated:
          description: |-
            A system generated checksum value
          type: string
          x-enum:
            good:
              x-field-uid: 1
            bad:
              x-field-uid: 2
          default: good
          x-field-uid: 2
          enum:
          - good
          - bad
        custom:
          description: |-
            A custom checksum value
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 3
    Pattern.Flow.Icmp.NextFields.Identifier.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Icmp.NextFields.Identifier.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Icmp.NextFields.Identifier:
      description: |-
        ICMP identifier
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.NextFields.Identifier.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.NextFields.Identifier.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Icmp.NextFields.Identifier.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Icmp.NextFields.SequenceNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Icmp.NextFields.SequenceNumber.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Icmp.NextFields.SequenceNumber:
      description: |-
        ICMP sequence number
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.NextFields.SequenceNumber.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmp.NextFields.SequenceNumber.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Icmp.NextFields.SequenceNumber.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Icmpv6.Echo.Type.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 128
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
      x-constants:
        request: 128
        reply: 129
    Pattern.Flow.Icmpv6.Echo.Type.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Icmpv6.Echo.Type:
      description: |-
        ICMPv6 echo type
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 128
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 128
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Type.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Type.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Type.MetricTag'
          x-field-uid: 7
      x-constants:
        request: 128
        reply: 129
    Pattern.Flow.Icmpv6.Echo.Code.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Icmpv6.Echo.Code.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Icmpv6.Echo.Code:
      description: |-
        ICMPv6 echo sub type
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Code.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Code.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Code.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Icmpv6.Echo.Identifier.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Icmpv6.Echo.Identifier.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Icmpv6.Echo.Identifier:
      description: |-
        ICMPv6 echo identifier
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Identifier.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Identifier.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.Identifier.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Icmpv6.Echo.SequenceNumber.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Icmpv6.Echo.SequenceNumber.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Icmpv6.Echo.SequenceNumber:
      description: |-
        ICMPv6 echo sequence number
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.SequenceNumber.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.SequenceNumber.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Icmpv6.Echo.SequenceNumber.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Icmpv6.Echo.Checksum:
      description: |-
        ICMPv6 checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          x-enum:
            generated:
              x-field-uid: 1
            custom:
              x-field-uid: 2
          default: generated
          x-field-uid: 1
          enum:
          - generated
          - custom
        generated:
          description: |-
            A system generated checksum value
          type: string
          x-enum:
            good:
              x-field-uid: 1
            bad:
              x-field-uid: 2
          default: good
          x-field-uid: 2
          enum:
          - good
          - bad
        custom:
          description: |-
            A custom checksum value
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 3
    Pattern.Flow.Icmpv6.Common.Checksum:
      description: |-
        ICMPv6 checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          x-enum:
            generated:
              x-field-uid: 1
            custom:
              x-field-uid: 2
          default: generated
          x-field-uid: 1
          enum:
          - generated
          - custom
        generated:
          description: |-
            A system generated checksum value
          type: string
          x-enum:
            good:
              x-field-uid: 1
            bad:
              x-field-uid: 2
          default: good
          x-field-uid: 2
          enum:
          - good
          - bad
        custom:
          description: |-
            A custom checksum value
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 3
    Pattern.Flow.Ppp.Address.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 255
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
      x-constants:
        standard_address: 255
    Pattern.Flow.Ppp.Address.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Ppp.Address:
      description: |-
        PPP address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 255
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 255
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Address.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Address.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ppp.Address.MetricTag'
          x-field-uid: 7
      x-constants:
        standard_address: 255
    Pattern.Flow.Ppp.Control.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 3
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
      x-constants:
        unnumbered_data: 3
    Pattern.Flow.Ppp.Control.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Ppp.Control:
      description: |-
        PPP control
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 3
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 3
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Control.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.Control.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ppp.Control.MetricTag'
          x-field-uid: 7
      x-constants:
        unnumbered_data: 3
    Pattern.Flow.Ppp.ProtocolType.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 33
          format: uint32
          maximum: 65535
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 65535
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 65535
    Pattern.Flow.Ppp.ProtocolType.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 15
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 16
          minimum: 1
          maximum: 16
          x-field-uid: 3
    Pattern.Flow.Ppp.ProtocolType:
      description: |-
        PPP protocol type
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            auto:
              x-field-uid: 1
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: auto
          x-field-uid: 1
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 33
          format: uint32
          maximum: 65535
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 65535
          x-field-uid: 3
          default:
          - 33
        auto:
          description: |-
            The OTG implementation can provide a system generated
            value for this property. If the OTG is unable to generate a value
            the default value must be used.
          type: integer
          x-field-uid: 4
          default: 33
          format: uint32
          maximum: 65535
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.ProtocolType.Counter'
          x-field-uid: 6
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Ppp.ProtocolType.Counter'
          x-field-uid: 7
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Ppp.ProtocolType.MetricTag'
          x-field-uid: 8
    Pattern.Flow.Igmpv1.Version.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 1
          format: uint32
          maximum: 15
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 15
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 15
    Pattern.Flow.Igmpv1.Version.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 3
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 4
          minimum: 1
          maximum: 4
          x-field-uid: 3
    Pattern.Flow.Igmpv1.Version:
      description: |-
        Version number
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 15
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 15
          x-field-uid: 3
          default:
          - 1
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Version.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Version.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Version.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Igmpv1.Type.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 1
          format: uint32
          maximum: 15
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 15
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 15
      x-constants:
        query: 1
        report: 2
    Pattern.Flow.Igmpv1.Type.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 3
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 4
          minimum: 1
          maximum: 4
          x-field-uid: 3
    Pattern.Flow.Igmpv1.Type:
      description: |-
        Type of message
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 15
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 15
          x-field-uid: 3
          default:
          - 1
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Type.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Type.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Type.MetricTag'
          x-field-uid: 7
      x-constants:
        query: 1
        report: 2
    Pattern.Flow.Igmpv1.Unused.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Igmpv1.Unused.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Igmpv1.Unused:
      description: |-
        Unused
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Unused.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Unused.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Igmpv1.Unused.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Igmpv1.Checksum:
      description: |-
        Checksum
      type: object
      properties:
        choice:
          description: |-
            The type of checksum
          type: string
          x-enum:
            generated:
              x-field-uid: 1
            custom:
              x-field-uid: 2
          default: generated
          x-field-uid: 1
          enum:
          - generated
          - custom
        generated:
          description: |-
            A system generated checksum value
          type: string
          x-enum:
            good:
              x-field-uid: 1
            bad:
              x-field-uid: 2
          default: good
          x-field-uid: 2
          enum:
          - good
          - bad
        custom:
          description: |-
            A custom checksum value
          type: integer
          format: uint32
          maximum: 65535
          x-field-uid: 3
    Pattern.Flow.Igmpv1.GroupAddress.Counter:
      description: |-
        ipv4 counter pattern
      type: object
      properties:
        start:
          type: string
          x-field-uid: 1
          default: 0.0.0.0
          format: ipv4
        step:
          type: string
          x-field-uid: 2
          default: 0.0.0.1
          format: ipv4
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
    Pattern.Flow.Igmpv1.GroupAddress.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 31
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 32
          minimum: 1
          maximum: 32
          x-field-uid: 3
    Pattern.Flow.Igmpv1.GroupAddress:
      description: |-
        Group address
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: string
          x-field-uid: 2
          default: 0.0.0.0
          format: ipv4
        values:
          type: array
          items:
            type: string
            format: ipv4
          x-field-uid: 3
          default:
          - 0.0.0.0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.GroupAddress.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Igmpv1.GroupAddress.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Igmpv1.GroupAddress.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Mpls.Label.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 16
          format: uint32
          maximum: 1048575
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1048575
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1048575
    Pattern.Flow.Mpls.Label.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 19
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 20
          minimum: 1
          maximum: 20
          x-field-uid: 3
    Pattern.Flow.Mpls.Label:
      description: |-
        Label of routers
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            auto:
              x-field-uid: 1
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: auto
          x-field-uid: 1
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 16
          format: uint32
          maximum: 1048575
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1048575
          x-field-uid: 3
          default:
          - 16
        auto:
          description: |-
            The OTG implementation can provide a system generated
            value for this property. If the OTG is unable to generate a value
            the default value must be used.
          type: integer
          x-field-uid: 4
          default: 16
          format: uint32
          maximum: 1048575
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Mpls.Label.Counter'
          x-field-uid: 6
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Mpls.Label.Counter'
          x-field-uid: 7
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Mpls.Label.MetricTag'
          x-field-uid: 8
    Pattern.Flow.Mpls.TrafficClass.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 0
          format: uint32
          maximum: 7
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 7
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 7
    Pattern.Flow.Mpls.TrafficClass.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 2
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 3
          minimum: 1
          maximum: 3
          x-field-uid: 3
    Pattern.Flow.Mpls.TrafficClass:
      description: |-
        Traffic class
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 0
          format: uint32
          maximum: 7
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 7
          x-field-uid: 3
          default:
          - 0
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Mpls.TrafficClass.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Mpls.TrafficClass.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Mpls.TrafficClass.MetricTag'
          x-field-uid: 7
    Pattern.Flow.Mpls.BottomOfStack.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 1
          format: uint32
          maximum: 1
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 1
    Pattern.Flow.Mpls.BottomOfStack.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 0
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 1
          minimum: 1
          maximum: 1
          x-field-uid: 3
    Pattern.Flow.Mpls.BottomOfStack:
      description: |-
        Bottom of stack
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            auto:
              x-field-uid: 1
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: auto
          x-field-uid: 1
          enum:
          - value
          - values
          - auto
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 1
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 1
          x-field-uid: 3
          default:
          - 1
        auto:
          description: |-
            The OTG implementation can provide a system generated
            value for this property. If the OTG is unable to generate a value
            the default value must be used.
          type: integer
          x-field-uid: 4
          default: 1
          format: uint32
          maximum: 1
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Mpls.BottomOfStack.Counter'
          x-field-uid: 6
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Mpls.BottomOfStack.Counter'
          x-field-uid: 7
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Mpls.BottomOfStack.MetricTag'
          x-field-uid: 8
    Pattern.Flow.Mpls.TimeToLive.Counter:
      description: |-
        integer counter pattern
      type: object
      properties:
        start:
          type: integer
          x-field-uid: 1
          default: 64
          format: uint32
          maximum: 255
        step:
          type: integer
          x-field-uid: 2
          default: 1
          format: uint32
          maximum: 255
        count:
          type: integer
          x-field-uid: 3
          default: 1
          format: uint32
          maximum: 255
    Pattern.Flow.Mpls.TimeToLive.MetricTag:
      description: |-
        Metric tag can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
      type: object
      required:
      - name
      properties:
        name:
          description: |-
            Name used to identify the metrics associated with the values applicable for configured offset and length inside corresponding header field
          type: string
          pattern: ^[\sa-zA-Z0-9-_()><\[\]]+$
          x-field-uid: 1
        offset:
          description: |-
            Offset in bits relative to start of corresponding header field
          type: integer
          format: uint32
          default: 0
          maximum: 7
          x-field-uid: 2
        length:
          description: |-
            Number of bits to track for metrics starting from configured offset of corresponding header field
          type: integer
          format: uint32
          default: 8
          minimum: 1
          maximum: 8
          x-field-uid: 3
    Pattern.Flow.Mpls.TimeToLive:
      description: |-
        Time to live
      type: object
      properties:
        choice:
          type: string
          x-enum:
            value:
              x-field-uid: 2
            values:
              x-field-uid: 3
            increment:
              x-field-uid: 4
            decrement:
              x-field-uid: 5
          default: value
          x-field-uid: 1
          enum:
          - value
          - values
          - increment
          - decrement
        value:
          type: integer
          x-field-uid: 2
          default: 64
          format: uint32
          maximum: 255
        values:
          type: array
          items:
            type: integer
            format: uint32
            maximum: 255
          x-field-uid: 3
          default:
          - 64
        increment:
          $ref: '#/components/schemas/Pattern.Flow.Mpls.TimeToLive.Counter'
          x-field-uid: 5
        decrement:
          $ref: '#/components/schemas/Pattern.Flow.Mpls.TimeToLive.Counter'
          x-field-uid: 6
        metric_tags:
          description: |-
            One or more metric tags can be used to enable tracking portion of or all bits in a corresponding header field for metrics per each applicable value. These would appear as tagged metrics in corresponding flow metrics.
          type: array
          items:
            $ref: '#/components/schemas/Pattern.Flow.Mpls.TimeToLive.MetricTag'
          x-field-uid: 7
    Version:
      description: |-
        Version details
      type: object
      properties:
        api_spec_version:
          description: |-
            Version of API specification
          type: string
          default: ''
          x-field-uid: 1
        sdk_version:
          description: |-
            Version of SDK generated from API specification
          type: string
          default: ''
          x-field-uid: 2
        app_version:
          description: |-
            Version of application consuming or serving the API
          type: string
          default: ''
          x-field-uid: 3
